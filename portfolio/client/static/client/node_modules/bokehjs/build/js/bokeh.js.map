{"version":3,"sources":["src/js/prelude.js","build/js/tree/base.js","build/js/tree/client.js","build/js/tree/core/bokeh_events.js","build/js/tree/core/build_views.js","build/js/tree/core/dom.js","build/js/tree/core/dom_view.js","build/js/tree/core/enums.js","build/js/tree/core/has_props.js","build/js/tree/core/hittest.js","build/js/tree/core/layout/layout_canvas.js","build/js/tree/core/layout/side_panel.js","build/js/tree/core/layout/solver.js","build/js/tree/core/logging.js","build/js/tree/core/properties.js","build/js/tree/core/property_mixins.js","build/js/tree/core/selection_manager.js","build/js/tree/core/selector.js","build/js/tree/core/settings.js","build/js/tree/core/signaling.js","build/js/tree/core/ui_events.js","build/js/tree/core/util/array.js","build/js/tree/core/util/bbox.js","build/js/tree/core/util/callback.js","build/js/tree/core/util/canvas.js","build/js/tree/core/util/color.js","build/js/tree/core/util/data_structures.js","build/js/tree/core/util/eq.js","build/js/tree/core/util/math.js","build/js/tree/core/util/object.js","build/js/tree/core/util/proj4.js","build/js/tree/core/util/projections.js","build/js/tree/core/util/refs.js","build/js/tree/core/util/selection.js","build/js/tree/core/util/serialization.js","build/js/tree/core/util/spatial.js","build/js/tree/core/util/string.js","build/js/tree/core/util/svg_colors.js","build/js/tree/core/util/templating.js","build/js/tree/core/util/text.js","build/js/tree/core/util/throttle.js","build/js/tree/core/util/types.js","build/js/tree/core/util/wheel.js","build/js/tree/core/util/zoom.js","build/js/tree/core/view.js","build/js/tree/core/visuals.js","build/js/tree/document.js","build/js/tree/embed.js","build/js/tree/main.js","build/js/tree/model.js","build/js/tree/models/annotations/annotation.js","build/js/tree/models/annotations/arrow.js","build/js/tree/models/annotations/arrow_head.js","build/js/tree/models/annotations/band.js","build/js/tree/models/annotations/box_annotation.js","build/js/tree/models/annotations/color_bar.js","build/js/tree/models/annotations/index.js","build/js/tree/models/annotations/label.js","build/js/tree/models/annotations/label_set.js","build/js/tree/models/annotations/legend.js","build/js/tree/models/annotations/legend_item.js","build/js/tree/models/annotations/poly_annotation.js","build/js/tree/models/annotations/span.js","build/js/tree/models/annotations/text_annotation.js","build/js/tree/models/annotations/title.js","build/js/tree/models/annotations/tooltip.js","build/js/tree/models/annotations/whisker.js","build/js/tree/models/axes/axis.js","build/js/tree/models/axes/categorical_axis.js","build/js/tree/models/axes/continuous_axis.js","build/js/tree/models/axes/datetime_axis.js","build/js/tree/models/axes/index.js","build/js/tree/models/axes/linear_axis.js","build/js/tree/models/axes/log_axis.js","build/js/tree/models/callbacks/customjs.js","build/js/tree/models/callbacks/index.js","build/js/tree/models/callbacks/open_url.js","build/js/tree/models/canvas/canvas.js","build/js/tree/models/canvas/cartesian_frame.js","build/js/tree/models/canvas/index.js","build/js/tree/models/formatters/basic_tick_formatter.js","build/js/tree/models/formatters/categorical_tick_formatter.js","build/js/tree/models/formatters/datetime_tick_formatter.js","build/js/tree/models/formatters/func_tick_formatter.js","build/js/tree/models/formatters/index.js","build/js/tree/models/formatters/log_tick_formatter.js","build/js/tree/models/formatters/mercator_tick_formatter.js","build/js/tree/models/formatters/numeral_tick_formatter.js","build/js/tree/models/formatters/printf_tick_formatter.js","build/js/tree/models/formatters/tick_formatter.js","build/js/tree/models/glyphs/annular_wedge.js","build/js/tree/models/glyphs/annulus.js","build/js/tree/models/glyphs/arc.js","build/js/tree/models/glyphs/bezier.js","build/js/tree/models/glyphs/circle.js","build/js/tree/models/glyphs/ellipse.js","build/js/tree/models/glyphs/glyph.js","build/js/tree/models/glyphs/hbar.js","build/js/tree/models/glyphs/image.js","build/js/tree/models/glyphs/image_rgba.js","build/js/tree/models/glyphs/image_url.js","build/js/tree/models/glyphs/index.js","build/js/tree/models/glyphs/line.js","build/js/tree/models/glyphs/multi_line.js","build/js/tree/models/glyphs/oval.js","build/js/tree/models/glyphs/patch.js","build/js/tree/models/glyphs/patches.js","build/js/tree/models/glyphs/quad.js","build/js/tree/models/glyphs/quadratic.js","build/js/tree/models/glyphs/ray.js","build/js/tree/models/glyphs/rect.js","build/js/tree/models/glyphs/segment.js","build/js/tree/models/glyphs/text.js","build/js/tree/models/glyphs/vbar.js","build/js/tree/models/glyphs/wedge.js","build/js/tree/models/glyphs/xy_glyph.js","build/js/tree/models/grids/grid.js","build/js/tree/models/grids/index.js","build/js/tree/models/index.js","build/js/tree/models/layouts/box.js","build/js/tree/models/layouts/column.js","build/js/tree/models/layouts/index.js","build/js/tree/models/layouts/layout_dom.js","build/js/tree/models/layouts/row.js","build/js/tree/models/layouts/spacer.js","build/js/tree/models/layouts/widget_box.js","build/js/tree/models/mappers/categorical_color_mapper.js","build/js/tree/models/mappers/color_mapper.js","build/js/tree/models/mappers/index.js","build/js/tree/models/mappers/linear_color_mapper.js","build/js/tree/models/mappers/log_color_mapper.js","build/js/tree/models/markers/index.js","build/js/tree/models/markers/marker.js","build/js/tree/models/plots/gmap_plot.js","build/js/tree/models/plots/gmap_plot_canvas.js","build/js/tree/models/plots/index.js","build/js/tree/models/plots/plot.js","build/js/tree/models/plots/plot_canvas.js","build/js/tree/models/ranges/data_range.js","build/js/tree/models/ranges/data_range1d.js","build/js/tree/models/ranges/factor_range.js","build/js/tree/models/ranges/index.js","build/js/tree/models/ranges/range.js","build/js/tree/models/ranges/range1d.js","build/js/tree/models/renderers/glyph_renderer.js","build/js/tree/models/renderers/guide_renderer.js","build/js/tree/models/renderers/index.js","build/js/tree/models/renderers/renderer.js","build/js/tree/models/scales/categorical_scale.js","build/js/tree/models/scales/index.js","build/js/tree/models/scales/linear_scale.js","build/js/tree/models/scales/log_scale.js","build/js/tree/models/scales/scale.js","build/js/tree/models/sources/ajax_data_source.js","build/js/tree/models/sources/column_data_source.js","build/js/tree/models/sources/columnar_data_source.js","build/js/tree/models/sources/data_source.js","build/js/tree/models/sources/geojson_data_source.js","build/js/tree/models/sources/index.js","build/js/tree/models/sources/remote_data_source.js","build/js/tree/models/tickers/adaptive_ticker.js","build/js/tree/models/tickers/basic_ticker.js","build/js/tree/models/tickers/categorical_ticker.js","build/js/tree/models/tickers/composite_ticker.js","build/js/tree/models/tickers/continuous_ticker.js","build/js/tree/models/tickers/datetime_ticker.js","build/js/tree/models/tickers/days_ticker.js","build/js/tree/models/tickers/fixed_ticker.js","build/js/tree/models/tickers/index.js","build/js/tree/models/tickers/log_ticker.js","build/js/tree/models/tickers/mercator_ticker.js","build/js/tree/models/tickers/months_ticker.js","build/js/tree/models/tickers/single_interval_ticker.js","build/js/tree/models/tickers/ticker.js","build/js/tree/models/tickers/util.js","build/js/tree/models/tickers/years_ticker.js","build/js/tree/models/tiles/bbox_tile_source.js","build/js/tree/models/tiles/dynamic_image_renderer.js","build/js/tree/models/tiles/image_pool.js","build/js/tree/models/tiles/image_source.js","build/js/tree/models/tiles/index.js","build/js/tree/models/tiles/mercator_tile_source.js","build/js/tree/models/tiles/quadkey_tile_source.js","build/js/tree/models/tiles/tile_renderer.js","build/js/tree/models/tiles/tile_source.js","build/js/tree/models/tiles/tile_utils.js","build/js/tree/models/tiles/tms_tile_source.js","build/js/tree/models/tiles/wmts_tile_source.js","build/js/tree/models/tools/actions/action_tool.js","build/js/tree/models/tools/actions/help_tool.js","build/js/tree/models/tools/actions/redo_tool.js","build/js/tree/models/tools/actions/reset_tool.js","build/js/tree/models/tools/actions/save_tool.js","build/js/tree/models/tools/actions/undo_tool.js","build/js/tree/models/tools/actions/zoom_in_tool.js","build/js/tree/models/tools/actions/zoom_out_tool.js","build/js/tree/models/tools/button_tool.js","build/js/tree/models/tools/gestures/box_select_tool.js","build/js/tree/models/tools/gestures/box_zoom_tool.js","build/js/tree/models/tools/gestures/gesture_tool.js","build/js/tree/models/tools/gestures/lasso_select_tool.js","build/js/tree/models/tools/gestures/pan_tool.js","build/js/tree/models/tools/gestures/poly_select_tool.js","build/js/tree/models/tools/gestures/resize_tool.js","build/js/tree/models/tools/gestures/select_tool.js","build/js/tree/models/tools/gestures/tap_tool.js","build/js/tree/models/tools/gestures/wheel_pan_tool.js","build/js/tree/models/tools/gestures/wheel_zoom_tool.js","build/js/tree/models/tools/index.js","build/js/tree/models/tools/inspectors/crosshair_tool.js","build/js/tree/models/tools/inspectors/hover_tool.js","build/js/tree/models/tools/inspectors/inspect_tool.js","build/js/tree/models/tools/on_off_button.js","build/js/tree/models/tools/tool.js","build/js/tree/models/tools/tool_events.js","build/js/tree/models/tools/tool_proxy.js","build/js/tree/models/tools/toolbar.js","build/js/tree/models/tools/toolbar_base.js","build/js/tree/models/tools/toolbar_box.js","build/js/tree/models/tools/toolbar_template.js","build/js/tree/models/transforms/customjs_transform.js","build/js/tree/models/transforms/index.js","build/js/tree/models/transforms/interpolator.js","build/js/tree/models/transforms/jitter.js","build/js/tree/models/transforms/linear_interpolator.js","build/js/tree/models/transforms/step_interpolator.js","build/js/tree/models/transforms/transform.js","build/js/tree/polyfill.js","build/js/tree/safely.js","build/js/tree/version.js","node_modules/canvas2svg/canvas2svg.js","node_modules/d/auto-bind.js","node_modules/d/index.js","node_modules/es5-ext/array/#/clear.js","node_modules/es5-ext/array/#/e-index-of.js","node_modules/es5-ext/array/from/index.js","node_modules/es5-ext/array/from/is-implemented.js","node_modules/es5-ext/array/from/shim.js","node_modules/es5-ext/function/is-arguments.js","node_modules/es5-ext/function/is-function.js","node_modules/es5-ext/function/noop.js","node_modules/es5-ext/global.js","node_modules/es5-ext/math/sign/index.js","node_modules/es5-ext/math/sign/is-implemented.js","node_modules/es5-ext/math/sign/shim.js","node_modules/es5-ext/number/to-integer.js","node_modules/es5-ext/number/to-pos-integer.js","node_modules/es5-ext/object/_iterate.js","node_modules/es5-ext/object/assign/index.js","node_modules/es5-ext/object/assign/is-implemented.js","node_modules/es5-ext/object/assign/shim.js","node_modules/es5-ext/object/copy.js","node_modules/es5-ext/object/create.js","node_modules/es5-ext/object/for-each.js","node_modules/es5-ext/object/is-callable.js","node_modules/es5-ext/object/is-object.js","node_modules/es5-ext/object/keys/index.js","node_modules/es5-ext/object/keys/is-implemented.js","node_modules/es5-ext/object/keys/shim.js","node_modules/es5-ext/object/map.js","node_modules/es5-ext/object/normalize-options.js","node_modules/es5-ext/object/set-prototype-of/index.js","node_modules/es5-ext/object/set-prototype-of/is-implemented.js","node_modules/es5-ext/object/set-prototype-of/shim.js","node_modules/es5-ext/object/valid-callable.js","node_modules/es5-ext/object/valid-object.js","node_modules/es5-ext/object/valid-value.js","node_modules/es5-ext/string/#/contains/index.js","node_modules/es5-ext/string/#/contains/is-implemented.js","node_modules/es5-ext/string/#/contains/shim.js","node_modules/es5-ext/string/is-string.js","node_modules/es5-ext/string/random-uniq.js","node_modules/es6-iterator/array.js","node_modules/es6-iterator/for-of.js","node_modules/es6-iterator/get.js","node_modules/es6-iterator/index.js","node_modules/es6-iterator/is-iterable.js","node_modules/es6-iterator/string.js","node_modules/es6-iterator/valid-iterable.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/es6-set/implement.js","node_modules/es6-set/is-implemented.js","node_modules/es6-set/is-native-implemented.js","node_modules/es6-set/lib/iterator.js","node_modules/es6-set/polyfill.js","node_modules/es6-symbol/index.js","node_modules/es6-symbol/is-implemented.js","node_modules/es6-symbol/is-symbol.js","node_modules/es6-symbol/polyfill.js","node_modules/es6-symbol/validate-symbol.js","node_modules/es6-weak-map/implement.js","node_modules/es6-weak-map/is-implemented.js","node_modules/es6-weak-map/is-native-implemented.js","node_modules/es6-weak-map/polyfill.js","node_modules/event-emitter/index.js","node_modules/hammerjs/hammer.js","node_modules/kiwi/build/constraint.js","node_modules/kiwi/build/expression.js","node_modules/kiwi/build/index.js","node_modules/kiwi/build/maptype.js","node_modules/kiwi/build/solver.js","node_modules/kiwi/build/strength.js","node_modules/kiwi/build/tsu/algorithm.js","node_modules/kiwi/build/tsu/array_base.js","node_modules/kiwi/build/tsu/associative_array.js","node_modules/kiwi/build/tsu/index.js","node_modules/kiwi/build/tsu/iterator.js","node_modules/kiwi/build/tsu/pair.js","node_modules/kiwi/build/variable.js","node_modules/numbro/numbro.js","node_modules/process/browser.js","node_modules/proj4/lib/Proj.js","node_modules/proj4/lib/adjust_axis.js","node_modules/proj4/lib/common/adjust_lon.js","node_modules/proj4/lib/common/msfnz.js","node_modules/proj4/lib/common/phi2z.js","node_modules/proj4/lib/common/sign.js","node_modules/proj4/lib/common/toPoint.js","node_modules/proj4/lib/common/tsfnz.js","node_modules/proj4/lib/constants/Datum.js","node_modules/proj4/lib/constants/Ellipsoid.js","node_modules/proj4/lib/constants/PrimeMeridian.js","node_modules/proj4/lib/constants/units.js","node_modules/proj4/lib/core.js","node_modules/proj4/lib/datum.js","node_modules/proj4/lib/datumUtils.js","node_modules/proj4/lib/datum_transform.js","node_modules/proj4/lib/defs.js","node_modules/proj4/lib/deriveConstants.js","node_modules/proj4/lib/extend.js","node_modules/proj4/lib/global.js","node_modules/proj4/lib/parseCode.js","node_modules/proj4/lib/projString.js","node_modules/proj4/lib/projections.js","node_modules/proj4/lib/projections/longlat.js","node_modules/proj4/lib/projections/merc.js","node_modules/proj4/lib/transform.js","node_modules/proj4/lib/wkt.js","node_modules/quickselect/index.js","node_modules/rbush/index.js","node_modules/sprintf/lib/sprintf.js","node_modules/timezone/index.js","node_modules/tslib/tslib.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClfzTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzgjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChriBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9fzrljhxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljrtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzznjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnrnxmhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtpKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrlhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpzlrlpOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpzjplpjvlLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnnpplSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdcv+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvtjrvpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrhjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtthKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvlNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChvxjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1PA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdtrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACffA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrv8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnljGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdnrTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClpxLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACftNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljjzfile":"bokeh.js","sourcesContent":["(function outer(modules, cache, entry) {\n    function newRequire(name) {\n        if (!cache[name]) {\n            if (!modules[name]) {\n                var err = new Error('Cannot find module \\'' + name + '\\'');\n                err.code = 'MODULE_NOT_FOUND';\n                throw err;\n            }\n\n            var m = cache[name] = {exports: {}};\n\n            var moduleRequire = function foo(x) {\n                var id = modules[name][1][x];\n                return newRequire(id ? id : x);\n            }\n            moduleRequire.modules = newRequire.modules;\n\n            modules[name][0].call(m.exports, moduleRequire, m, m.exports, outer, modules, cache, entry);\n        }\n\n        return cache[name].exports;\n    }\n\n    newRequire.modules = modules;\n\n    var main = newRequire(entry[0]);\n    main.require = newRequire;\n    return main;\n})\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _all_models, hasProp = {}.hasOwnProperty;\nvar models = require(\"./models/index\");\nvar object_1 = require(\"./core/util/object\");\nexports.overrides = {};\n_all_models = object_1.clone(models);\nexports.Models = function (name) {\n    var model, ref;\n    model = (ref = exports.overrides[name]) != null ? ref : _all_models[name];\n    if (model == null) {\n        throw new Error(\"Model `\" + name + \"' does not exist. This could be due to a widget or a custom model not being registered before first usage.\");\n    }\n    return model;\n};\nexports.Models.register = function (name, model) {\n    return exports.overrides[name] = model;\n};\nexports.Models.unregister = function (name) {\n    return delete exports.overrides[name];\n};\nexports.Models.register_models = function (models, force, errorFn) {\n    var model, name, results;\n    if (force == null) {\n        force = false;\n    }\n    if (errorFn == null) {\n        errorFn = null;\n    }\n    if (models == null) {\n        return;\n    }\n    results = [];\n    for (name in models) {\n        if (!hasProp.call(models, name))\n            continue;\n        model = models[name];\n        if (force || !_all_models.hasOwnProperty(name)) {\n            results.push(_all_models[name] = model);\n        }\n        else {\n            results.push(typeof errorFn === \"function\" ? errorFn(name) : void 0);\n        }\n    }\n    return results;\n};\nexports.Models.registered_names = function () {\n    return Object.keys(_all_models);\n};\nexports.index = {};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ClientConnection, ClientSession, Message, message_handlers;\nvar es6_promise_1 = require(\"es6-promise\");\nvar logging_1 = require(\"./core/logging\");\nvar string_1 = require(\"./core/util/string\");\nvar object_1 = require(\"./core/util/object\");\nvar document_1 = require(\"./document\");\nexports.DEFAULT_SERVER_WEBSOCKET_URL = \"ws://localhost:5006/ws\";\nexports.DEFAULT_SESSION_ID = \"default\";\nMessage = (function () {\n    function Message(header1, metadata1, content1) {\n        this.header = header1;\n        this.metadata = metadata1;\n        this.content = content1;\n        this.buffers = [];\n    }\n    Message.assemble = function (header_json, metadata_json, content_json) {\n        var content, header, metadata;\n        header = JSON.parse(header_json);\n        metadata = JSON.parse(metadata_json);\n        content = JSON.parse(content_json);\n        return new Message(header, metadata, content);\n    };\n    Message.create_header = function (msgtype, options) {\n        var header;\n        header = {\n            'msgid': string_1.uniqueId(),\n            'msgtype': msgtype\n        };\n        return object_1.extend(header, options);\n    };\n    Message.create = function (msgtype, header_options, content) {\n        var header;\n        if (content == null) {\n            content = {};\n        }\n        header = Message.create_header(msgtype, header_options);\n        return new Message(header, {}, content);\n    };\n    Message.prototype.send = function (socket) {\n        var content_json, header_json, metadata_json;\n        header_json = JSON.stringify(this.header);\n        metadata_json = JSON.stringify(this.metadata);\n        content_json = JSON.stringify(this.content);\n        socket.send(header_json);\n        socket.send(metadata_json);\n        return socket.send(content_json);\n    };\n    Message.prototype.complete = function () {\n        if ((this.header != null) && (this.metadata != null) && (this.content != null)) {\n            if ('num_buffers' in this.header) {\n                return this.buffers.length === this.header['num_buffers'];\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            return false;\n        }\n    };\n    Message.prototype.add_buffer = function (buffer) {\n        return this.buffers.push(buffer);\n    };\n    Message.prototype._header_field = function (field) {\n        if (field in this.header) {\n            return this.header[field];\n        }\n        else {\n            return null;\n        }\n    };\n    Message.prototype.msgid = function () {\n        return this._header_field('msgid');\n    };\n    Message.prototype.msgtype = function () {\n        return this._header_field('msgtype');\n    };\n    Message.prototype.sessid = function () {\n        return this._header_field('sessid');\n    };\n    Message.prototype.reqid = function () {\n        return this._header_field('reqid');\n    };\n    Message.prototype.problem = function () {\n        if (!('msgid' in this.header)) {\n            return \"No msgid in header\";\n        }\n        else if (!('msgtype' in this.header)) {\n            return \"No msgtype in header\";\n        }\n        else {\n            return null;\n        }\n    };\n    return Message;\n})();\nmessage_handlers = {\n    'PATCH-DOC': function (connection, message) {\n        return connection._for_session(function (session) {\n            return session._handle_patch(message);\n        });\n    },\n    'OK': function (connection, message) {\n        return logging_1.logger.trace(\"Unhandled OK reply to \" + (message.reqid()));\n    },\n    'ERROR': function (connection, message) {\n        return logging_1.logger.error(\"Unhandled ERROR reply to \" + (message.reqid()) + \": \" + message.content['text']);\n    }\n};\nClientConnection = (function () {\n    ClientConnection._connection_count = 0;\n    function ClientConnection(url1, id, args_string1, _on_have_session_hook, _on_closed_permanently_hook) {\n        this.url = url1;\n        this.id = id;\n        this.args_string = args_string1;\n        this._on_have_session_hook = _on_have_session_hook;\n        this._on_closed_permanently_hook = _on_closed_permanently_hook;\n        this._number = ClientConnection._connection_count;\n        ClientConnection._connection_count = this._number + 1;\n        if (this.url == null) {\n            this.url = exports.DEFAULT_SERVER_WEBSOCKET_URL;\n        }\n        if (this.id == null) {\n            this.id = exports.DEFAULT_SESSION_ID;\n        }\n        logging_1.logger.debug(\"Creating websocket \" + this._number + \" to '\" + this.url + \"' session '\" + this.id + \"'\");\n        this.socket = null;\n        this.closed_permanently = false;\n        this._fragments = [];\n        this._partial = null;\n        this._current_handler = null;\n        this._pending_ack = null;\n        this._pending_replies = {};\n        this.session = null;\n    }\n    ClientConnection.prototype._for_session = function (f) {\n        if (this.session !== null) {\n            return f(this.session);\n        }\n    };\n    ClientConnection.prototype.connect = function () {\n        var error, ref, versioned_url;\n        if (this.closed_permanently) {\n            return es6_promise_1.Promise.reject(new Error(\"Cannot connect() a closed ClientConnection\"));\n        }\n        if (this.socket != null) {\n            return es6_promise_1.Promise.reject(new Error(\"Already connected\"));\n        }\n        this._fragments = [];\n        this._partial = null;\n        this._pending_replies = {};\n        this._current_handler = null;\n        try {\n            versioned_url = this.url + \"?bokeh-protocol-version=1.0&bokeh-session-id=\" + this.id;\n            if (((ref = this.args_string) != null ? ref.length : void 0) > 0) {\n                versioned_url += \"&\" + this.args_string;\n            }\n            if (window.MozWebSocket != null) {\n                this.socket = new MozWebSocket(versioned_url);\n            }\n            else {\n                this.socket = new WebSocket(versioned_url);\n            }\n            return new es6_promise_1.Promise((function (_this) {\n                return function (resolve, reject) {\n                    _this.socket.binaryType = \"arraybuffer\";\n                    _this.socket.onopen = function () {\n                        return _this._on_open(resolve, reject);\n                    };\n                    _this.socket.onmessage = function (event) {\n                        return _this._on_message(event);\n                    };\n                    _this.socket.onclose = function (event) {\n                        return _this._on_close(event);\n                    };\n                    return _this.socket.onerror = function () {\n                        return _this._on_error(reject);\n                    };\n                };\n            })(this));\n        }\n        catch (error1) {\n            error = error1;\n            logging_1.logger.error(\"websocket creation failed to url: \" + this.url);\n            logging_1.logger.error(\" - \" + error);\n            return es6_promise_1.Promise.reject(error);\n        }\n    };\n    ClientConnection.prototype.close = function () {\n        if (!this.closed_permanently) {\n            logging_1.logger.debug(\"Permanently closing websocket connection \" + this._number);\n            this.closed_permanently = true;\n            if (this.socket != null) {\n                this.socket.close(1000, \"close method called on ClientConnection \" + this._number);\n            }\n            this._for_session(function (session) {\n                return session._connection_closed();\n            });\n            if (this._on_closed_permanently_hook != null) {\n                this._on_closed_permanently_hook();\n                return this._on_closed_permanently_hook = null;\n            }\n        }\n    };\n    ClientConnection.prototype._schedule_reconnect = function (milliseconds) {\n        var retry;\n        retry = (function (_this) {\n            return function () {\n                if (true || _this.closed_permanently) {\n                    if (!_this.closed_permanently) {\n                        logging_1.logger.info(\"Websocket connection \" + _this._number + \" disconnected, will not attempt to reconnect\");\n                    }\n                }\n                else {\n                    logging_1.logger.debug(\"Attempting to reconnect websocket \" + _this._number);\n                    return _this.connect();\n                }\n            };\n        })(this);\n        return setTimeout(retry, milliseconds);\n    };\n    ClientConnection.prototype.send = function (message) {\n        if (this.socket === null) {\n            throw new Error(\"not connected so cannot send \" + message);\n        }\n        return message.send(this.socket);\n    };\n    ClientConnection.prototype.send_event = function (event) {\n        var message;\n        message = Message.create('EVENT', {}, JSON.stringify(event));\n        return this.send(message);\n    };\n    ClientConnection.prototype.send_with_reply = function (message) {\n        var promise;\n        promise = new es6_promise_1.Promise((function (_this) {\n            return function (resolve, reject) {\n                _this._pending_replies[message.msgid()] = [resolve, reject];\n                return _this.send(message);\n            };\n        })(this));\n        return promise.then(function (message) {\n            if (message.msgtype() === 'ERROR') {\n                throw new Error(\"Error reply \" + message.content['text']);\n            }\n            else {\n                return message;\n            }\n        }, function (error) {\n            throw error;\n        });\n    };\n    ClientConnection.prototype._pull_doc_json = function () {\n        var message, promise;\n        message = Message.create('PULL-DOC-REQ', {});\n        promise = this.send_with_reply(message);\n        return promise.then(function (reply) {\n            if (!('doc' in reply.content)) {\n                throw new Error(\"No 'doc' field in PULL-DOC-REPLY\");\n            }\n            return reply.content['doc'];\n        }, function (error) {\n            throw error;\n        });\n    };\n    ClientConnection.prototype._repull_session_doc = function () {\n        if (this.session === null) {\n            logging_1.logger.debug(\"Pulling session for first time\");\n        }\n        else {\n            logging_1.logger.debug(\"Repulling session\");\n        }\n        return this._pull_doc_json().then((function (_this) {\n            return function (doc_json) {\n                var document, patch, patch_message;\n                if (_this.session === null) {\n                    if (_this.closed_permanently) {\n                        return logging_1.logger.debug(\"Got new document after connection was already closed\");\n                    }\n                    else {\n                        document = document_1.Document.from_json(doc_json);\n                        patch = document_1.Document._compute_patch_since_json(doc_json, document);\n                        if (patch.events.length > 0) {\n                            logging_1.logger.debug(\"Sending \" + patch.events.length + \" changes from model construction back to server\");\n                            patch_message = Message.create('PATCH-DOC', {}, patch);\n                            _this.send(patch_message);\n                        }\n                        _this.session = new ClientSession(_this, document, _this.id);\n                        logging_1.logger.debug(\"Created a new session from new pulled doc\");\n                        if (_this._on_have_session_hook != null) {\n                            _this._on_have_session_hook(_this.session);\n                            return _this._on_have_session_hook = null;\n                        }\n                    }\n                }\n                else {\n                    _this.session.document.replace_with_json(doc_json);\n                    return logging_1.logger.debug(\"Updated existing session with new pulled doc\");\n                }\n            };\n        })(this), function (error) {\n            throw error;\n        })[\"catch\"](function (error) {\n            if (console.trace != null) {\n                console.trace(error);\n            }\n            return logging_1.logger.error(\"Failed to repull session \" + error);\n        });\n    };\n    ClientConnection.prototype._on_open = function (resolve, reject) {\n        logging_1.logger.info(\"Websocket connection \" + this._number + \" is now open\");\n        this._pending_ack = [resolve, reject];\n        return this._current_handler = (function (_this) {\n            return function (message) {\n                return _this._awaiting_ack_handler(message);\n            };\n        })(this);\n    };\n    ClientConnection.prototype._on_message = function (event) {\n        return this._on_message_unchecked(event);\n    };\n    ClientConnection.prototype._on_message_unchecked = function (event) {\n        var msg, problem;\n        if (this._current_handler == null) {\n            logging_1.logger.error(\"got a message but haven't set _current_handler\");\n        }\n        if (event.data instanceof ArrayBuffer) {\n            if ((this._partial != null) && !this._partial.complete()) {\n                this._partial.add_buffer(event.data);\n            }\n            else {\n                this._close_bad_protocol(\"Got binary from websocket but we were expecting text\");\n            }\n        }\n        else if (this._partial != null) {\n            this._close_bad_protocol(\"Got text from websocket but we were expecting binary\");\n        }\n        else {\n            this._fragments.push(event.data);\n            if (this._fragments.length === 3) {\n                this._partial = Message.assemble(this._fragments[0], this._fragments[1], this._fragments[2]);\n                this._fragments = [];\n                problem = this._partial.problem();\n                if (problem !== null) {\n                    this._close_bad_protocol(problem);\n                }\n            }\n        }\n        if ((this._partial != null) && this._partial.complete()) {\n            msg = this._partial;\n            this._partial = null;\n            return this._current_handler(msg);\n        }\n    };\n    ClientConnection.prototype._on_close = function (event) {\n        var pop_pending, promise_funcs;\n        logging_1.logger.info(\"Lost websocket \" + this._number + \" connection, \" + event.code + \" (\" + event.reason + \")\");\n        this.socket = null;\n        if (this._pending_ack != null) {\n            this._pending_ack[1](new Error(\"Lost websocket connection, \" + event.code + \" (\" + event.reason + \")\"));\n            this._pending_ack = null;\n        }\n        pop_pending = (function (_this) {\n            return function () {\n                var promise_funcs, ref, reqid;\n                ref = _this._pending_replies;\n                for (reqid in ref) {\n                    promise_funcs = ref[reqid];\n                    delete _this._pending_replies[reqid];\n                    return promise_funcs;\n                }\n                return null;\n            };\n        })(this);\n        promise_funcs = pop_pending();\n        while (promise_funcs !== null) {\n            promise_funcs[1](\"Disconnected\");\n            promise_funcs = pop_pending();\n        }\n        if (!this.closed_permanently) {\n            return this._schedule_reconnect(2000);\n        }\n    };\n    ClientConnection.prototype._on_error = function (reject) {\n        logging_1.logger.debug(\"Websocket error on socket  \" + this._number);\n        return reject(new Error(\"Could not open websocket\"));\n    };\n    ClientConnection.prototype._close_bad_protocol = function (detail) {\n        logging_1.logger.error(\"Closing connection: \" + detail);\n        if (this.socket != null) {\n            return this.socket.close(1002, detail);\n        }\n    };\n    ClientConnection.prototype._awaiting_ack_handler = function (message) {\n        if (message.msgtype() === \"ACK\") {\n            this._current_handler = (function (_this) {\n                return function (message) {\n                    return _this._steady_state_handler(message);\n                };\n            })(this);\n            this._repull_session_doc();\n            if (this._pending_ack != null) {\n                this._pending_ack[0](this);\n                return this._pending_ack = null;\n            }\n        }\n        else {\n            return this._close_bad_protocol(\"First message was not an ACK\");\n        }\n    };\n    ClientConnection.prototype._steady_state_handler = function (message) {\n        var promise_funcs;\n        if (message.reqid() in this._pending_replies) {\n            promise_funcs = this._pending_replies[message.reqid()];\n            delete this._pending_replies[message.reqid()];\n            return promise_funcs[0](message);\n        }\n        else if (message.msgtype() in message_handlers) {\n            return message_handlers[message.msgtype()](this, message);\n        }\n        else {\n            return logging_1.logger.debug(\"Doing nothing with message \" + (message.msgtype()));\n        }\n    };\n    return ClientConnection;\n})();\nClientSession = (function () {\n    function ClientSession(_connection, document1, id) {\n        this._connection = _connection;\n        this.document = document1;\n        this.id = id;\n        this.document_listener = (function (_this) {\n            return function (event) {\n                return _this._document_changed(event);\n            };\n        })(this);\n        this.document.on_change(this.document_listener);\n        this.event_manager = this.document.event_manager;\n        this.event_manager.session = this;\n    }\n    ClientSession.prototype.close = function () {\n        return this._connection.close();\n    };\n    ClientSession.prototype.send_event = function (type) {\n        return this._connection.send_event(type);\n    };\n    ClientSession.prototype._connection_closed = function () {\n        return this.document.remove_on_change(this.document_listener);\n    };\n    ClientSession.prototype.request_server_info = function () {\n        var message, promise;\n        message = Message.create('SERVER-INFO-REQ', {});\n        promise = this._connection.send_with_reply(message);\n        return promise.then(function (reply) {\n            return reply.content;\n        });\n    };\n    ClientSession.prototype.force_roundtrip = function () {\n        return this.request_server_info().then(function (ignored) {\n            return void 0;\n        });\n    };\n    ClientSession.prototype._document_changed = function (event) {\n        var patch;\n        if (event.setter_id === this.id) {\n            return;\n        }\n        if (event instanceof document_1.ModelChangedEvent && !(event.attr in event.model.serializable_attributes())) {\n            return;\n        }\n        patch = Message.create('PATCH-DOC', {}, this.document.create_json_patch([event]));\n        return this._connection.send(patch);\n    };\n    ClientSession.prototype._handle_patch = function (message) {\n        return this.document.apply_json_patch(message.content, this.id);\n    };\n    return ClientSession;\n})();\nexports.pull_session = function (url, session_id, args_string) {\n    var connection, promise, rejecter;\n    rejecter = null;\n    connection = null;\n    promise = new es6_promise_1.Promise(function (resolve, reject) {\n        connection = new ClientConnection(url, session_id, args_string, function (session) {\n            var e;\n            try {\n                return resolve(session);\n            }\n            catch (error1) {\n                e = error1;\n                logging_1.logger.error(\"Promise handler threw an error, closing session \" + error);\n                session.close();\n                throw e;\n            }\n        }, function () {\n            return reject(new Error(\"Connection was closed before we successfully pulled a session\"));\n        });\n        return connection.connect().then(function (whatever) { }, function (error) {\n            logging_1.logger.error(\"Failed to connect to Bokeh server \" + error);\n            throw error;\n        });\n    });\n    promise.close = function () {\n        return connection.close();\n    };\n    return promise;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar logging_1 = require(\"./logging\");\nvar object_1 = require(\"./util/object\");\nvar event_classes = {};\nfunction register_event_class(event_name) {\n    return function (event_cls) {\n        event_cls.prototype.event_name = event_name;\n        event_classes[event_name] = event_cls;\n    };\n}\nexports.register_event_class = register_event_class;\nfunction register_with_event(event_cls) {\n    var models = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        models[_i - 1] = arguments[_i];\n    }\n    var applicable_models = event_cls.prototype.applicable_models.concat(models);\n    event_cls.prototype.applicable_models = applicable_models;\n}\nexports.register_with_event = register_with_event;\nvar BokehEvent = (function () {\n    function BokehEvent(options) {\n        if (options === void 0) { options = {}; }\n        this.model_id = null;\n        this._options = options;\n        if (options.model_id) {\n            this.model_id = options.model_id;\n        }\n    }\n    BokehEvent.prototype.set_model_id = function (id) {\n        this._options.model_id = id;\n        this.model_id = id;\n        return this;\n    };\n    BokehEvent.prototype.is_applicable_to = function (obj) {\n        return this.applicable_models.some(function (model) { return obj instanceof model; });\n    };\n    BokehEvent.event_class = function (e) {\n        // Given an event with a type attribute matching the event_name,\n        // return the appropriate BokehEvent class\n        if (e.type) {\n            return event_classes[e.type];\n        }\n        else {\n            logging_1.logger.warn('BokehEvent.event_class required events with a string type attribute');\n        }\n    };\n    BokehEvent.prototype.toJSON = function () {\n        return {\n            event_name: this.event_name,\n            event_values: object_1.clone(this._options),\n        };\n    };\n    BokehEvent.prototype._customize_event = function (_model) {\n        return this;\n    };\n    return BokehEvent;\n}());\nexports.BokehEvent = BokehEvent;\nBokehEvent.prototype.applicable_models = [];\nvar ButtonClick = (function (_super) {\n    tslib_1.__extends(ButtonClick, _super);\n    function ButtonClick() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ButtonClick;\n}(BokehEvent));\nButtonClick = tslib_1.__decorate([\n    register_event_class(\"button_click\")\n], ButtonClick);\nexports.ButtonClick = ButtonClick;\n// A UIEvent is an event originating on a PlotCanvas this includes\n// DOM events such as keystrokes as well as hammer events and LOD events.\nvar UIEvent = (function (_super) {\n    tslib_1.__extends(UIEvent, _super);\n    function UIEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return UIEvent;\n}(BokehEvent));\nexports.UIEvent = UIEvent;\nvar LODStart = (function (_super) {\n    tslib_1.__extends(LODStart, _super);\n    function LODStart() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return LODStart;\n}(UIEvent));\nLODStart = tslib_1.__decorate([\n    register_event_class(\"lodstart\")\n], LODStart);\nexports.LODStart = LODStart;\nvar LODEnd = (function (_super) {\n    tslib_1.__extends(LODEnd, _super);\n    function LODEnd() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return LODEnd;\n}(UIEvent));\nLODEnd = tslib_1.__decorate([\n    register_event_class(\"lodend\")\n], LODEnd);\nexports.LODEnd = LODEnd;\nvar PointEvent = (function (_super) {\n    tslib_1.__extends(PointEvent, _super);\n    function PointEvent(options) {\n        var _this = _super.call(this, options) || this;\n        _this.sx = options.sx;\n        _this.sy = options.sy;\n        _this.x = null;\n        _this.y = null;\n        return _this;\n    }\n    PointEvent.from_event = function (e, model_id) {\n        if (model_id === void 0) { model_id = null; }\n        return new this({ sx: e.bokeh['sx'], sy: e.bokeh['sy'], model_id: model_id });\n    };\n    PointEvent.prototype._customize_event = function (plot) {\n        var xscale = plot.plot_canvas.frame.xscales['default'];\n        var yscale = plot.plot_canvas.frame.yscales['default'];\n        this.x = xscale.invert(plot.plot_canvas.canvas.sx_to_vx(this.sx));\n        this.y = yscale.invert(plot.plot_canvas.canvas.sy_to_vy(this.sy));\n        this._options['x'] = this.x;\n        this._options['y'] = this.y;\n        return this;\n    };\n    return PointEvent;\n}(UIEvent));\nexports.PointEvent = PointEvent;\nvar Pan = (function (_super) {\n    tslib_1.__extends(Pan, _super);\n    function Pan(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.delta_x = options.delta_x;\n        _this.delta_y = options.delta_y;\n        return _this;\n    }\n    Pan.from_event = function (e, model_id) {\n        if (model_id === void 0) { model_id = null; }\n        return new this({\n            sx: e.bokeh['sx'],\n            sy: e.bokeh['sy'],\n            delta_x: e.deltaX,\n            delta_y: e.deltaY,\n            direction: e.direction,\n            model_id: model_id\n        });\n    };\n    return Pan;\n}(PointEvent));\nPan = tslib_1.__decorate([\n    register_event_class(\"pan\")\n], Pan);\nexports.Pan = Pan;\nvar Pinch = (function (_super) {\n    tslib_1.__extends(Pinch, _super);\n    function Pinch(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.scale = options.scale;\n        return _this;\n    }\n    Pinch.from_event = function (e, model_id) {\n        if (model_id === void 0) { model_id = null; }\n        return new this({\n            sx: e.bokeh['sx'],\n            sy: e.bokeh['sy'],\n            scale: e.scale,\n            model_id: model_id,\n        });\n    };\n    return Pinch;\n}(PointEvent));\nPinch = tslib_1.__decorate([\n    register_event_class(\"pinch\")\n], Pinch);\nexports.Pinch = Pinch;\nvar MouseWheel = (function (_super) {\n    tslib_1.__extends(MouseWheel, _super);\n    function MouseWheel(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this.delta = options.delta;\n        return _this;\n    }\n    MouseWheel.from_event = function (e, model_id) {\n        if (model_id === void 0) { model_id = null; }\n        return new this({\n            sx: e.bokeh['sx'],\n            sy: e.bokeh['sy'],\n            delta: e.bokeh['delta'],\n            model_id: model_id,\n        });\n    };\n    return MouseWheel;\n}(PointEvent));\nMouseWheel = tslib_1.__decorate([\n    register_event_class(\"wheel\")\n], MouseWheel);\nexports.MouseWheel = MouseWheel;\nvar MouseMove = (function (_super) {\n    tslib_1.__extends(MouseMove, _super);\n    function MouseMove() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MouseMove;\n}(PointEvent));\nMouseMove = tslib_1.__decorate([\n    register_event_class(\"mousemove\")\n], MouseMove);\nexports.MouseMove = MouseMove;\nvar MouseEnter = (function (_super) {\n    tslib_1.__extends(MouseEnter, _super);\n    function MouseEnter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MouseEnter;\n}(PointEvent));\nMouseEnter = tslib_1.__decorate([\n    register_event_class(\"mouseenter\")\n], MouseEnter);\nexports.MouseEnter = MouseEnter;\nvar MouseLeave = (function (_super) {\n    tslib_1.__extends(MouseLeave, _super);\n    function MouseLeave() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MouseLeave;\n}(PointEvent));\nMouseLeave = tslib_1.__decorate([\n    register_event_class(\"mouseleave\")\n], MouseLeave);\nexports.MouseLeave = MouseLeave;\nvar Tap = (function (_super) {\n    tslib_1.__extends(Tap, _super);\n    function Tap() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Tap;\n}(PointEvent));\nTap = tslib_1.__decorate([\n    register_event_class(\"tap\")\n], Tap);\nexports.Tap = Tap;\nvar DoubleTap = (function (_super) {\n    tslib_1.__extends(DoubleTap, _super);\n    function DoubleTap() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DoubleTap;\n}(PointEvent));\nDoubleTap = tslib_1.__decorate([\n    register_event_class(\"doubletap\")\n], DoubleTap);\nexports.DoubleTap = DoubleTap;\nvar Press = (function (_super) {\n    tslib_1.__extends(Press, _super);\n    function Press() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Press;\n}(PointEvent));\nPress = tslib_1.__decorate([\n    register_event_class(\"press\")\n], Press);\nexports.Press = Press;\nvar PanStart = (function (_super) {\n    tslib_1.__extends(PanStart, _super);\n    function PanStart() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PanStart;\n}(PointEvent));\nPanStart = tslib_1.__decorate([\n    register_event_class(\"panstart\")\n], PanStart);\nexports.PanStart = PanStart;\nvar PanEnd = (function (_super) {\n    tslib_1.__extends(PanEnd, _super);\n    function PanEnd() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PanEnd;\n}(PointEvent));\nPanEnd = tslib_1.__decorate([\n    register_event_class(\"panend\")\n], PanEnd);\nexports.PanEnd = PanEnd;\nvar PinchStart = (function (_super) {\n    tslib_1.__extends(PinchStart, _super);\n    function PinchStart() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PinchStart;\n}(PointEvent));\nPinchStart = tslib_1.__decorate([\n    register_event_class(\"pinchstart\")\n], PinchStart);\nexports.PinchStart = PinchStart;\nvar PinchEnd = (function (_super) {\n    tslib_1.__extends(PinchEnd, _super);\n    function PinchEnd() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return PinchEnd;\n}(PointEvent));\nPinchEnd = tslib_1.__decorate([\n    register_event_class(\"pinchend\")\n], PinchEnd);\nexports.PinchEnd = PinchEnd;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array_1 = require(\"./util/array\");\nvar object_1 = require(\"./util/object\");\nexports.build_views = function (view_storage, view_models, options, view_types) {\n    var created_views, i, j, k, len, len1, model, model_id, new_models, ref, to_remove, view, view_cls, view_options;\n    if (view_types == null) {\n        view_types = [];\n    }\n    to_remove = array_1.difference(Object.keys(view_storage), (function () {\n        var j, len, results;\n        results = [];\n        for (j = 0, len = view_models.length; j < len; j++) {\n            model = view_models[j];\n            results.push(model.id);\n        }\n        return results;\n    })());\n    for (j = 0, len = to_remove.length; j < len; j++) {\n        model_id = to_remove[j];\n        view_storage[model_id].remove();\n        delete view_storage[model_id];\n    }\n    created_views = [];\n    new_models = view_models.filter(function (model) {\n        return view_storage[model.id] == null;\n    });\n    for (i = k = 0, len1 = new_models.length; k < len1; i = ++k) {\n        model = new_models[i];\n        view_cls = (ref = view_types[i]) != null ? ref : model.default_view;\n        view_options = object_1.extend({\n            model: model\n        }, options);\n        view_storage[model.id] = view = new view_cls(view_options);\n        created_views.push(view);\n    }\n    return created_views;\n};\nexports.remove_views = function (view_storage) {\n    var id, j, len, ref, results;\n    ref = object_1.keys(view_storage);\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n        id = ref[j];\n        view_storage[id].remove();\n        results.push(delete view_storage[id]);\n    }\n    return results;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"./util/types\");\nvar _createElement = function (tag) { return function (attrs) {\n    if (attrs === void 0) { attrs = {}; }\n    var children = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        children[_i - 1] = arguments[_i];\n    }\n    var element;\n    if (tag === \"fragment\") {\n        // XXX: this is wrong, but the the common super type of DocumentFragment and HTMLElement is\n        // Node, which doesn't support classList, style, etc. attributes.\n        element = document.createDocumentFragment();\n    }\n    else {\n        element = document.createElement(tag);\n        for (var attr in attrs) {\n            var value = attrs[attr];\n            if (value == null || types_1.isBoolean(value) && !value)\n                continue;\n            if (attr === \"class\" && types_1.isArray(value)) {\n                for (var _a = 0, _b = value; _a < _b.length; _a++) {\n                    var cls = _b[_a];\n                    if (cls != null)\n                        element.classList.add(cls);\n                }\n                continue;\n            }\n            if (attr === \"style\" && types_1.isObject(value)) {\n                for (var prop in value) {\n                    element.style[prop] = value[prop];\n                }\n                continue;\n            }\n            element.setAttribute(attr, value);\n        }\n    }\n    function append(child) {\n        if (child instanceof HTMLElement)\n            element.appendChild(child);\n        else if (types_1.isString(child))\n            element.appendChild(document.createTextNode(child));\n        else if (child != null && child !== false)\n            throw new Error(\"expected an HTMLElement, string, false or null, got \" + JSON.stringify(child));\n    }\n    for (var _c = 0, children_1 = children; _c < children_1.length; _c++) {\n        var child = children_1[_c];\n        if (types_1.isArray(child)) {\n            for (var _d = 0, child_1 = child; _d < child_1.length; _d++) {\n                var _child = child_1[_d];\n                append(_child);\n            }\n        }\n        else\n            append(child);\n    }\n    return element;\n}; };\nfunction createElement(tag, attrs) {\n    var children = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        children[_i - 2] = arguments[_i];\n    }\n    return _createElement(tag).apply(void 0, [attrs].concat(children));\n}\nexports.createElement = createElement;\nexports.div = _createElement(\"div\"), exports.span = _createElement(\"span\"), exports.link = _createElement(\"link\"), exports.style = _createElement(\"style\"), exports.a = _createElement(\"a\"), exports.p = _createElement(\"p\"), exports.pre = _createElement(\"pre\"), exports.button = _createElement(\"button\"), exports.input = _createElement(\"input\"), exports.label = _createElement(\"label\"), exports.canvas = _createElement(\"canvas\"), exports.ul = _createElement(\"ul\"), exports.ol = _createElement(\"ol\"), exports.li = _createElement(\"li\");\nexports.nbsp = document.createTextNode(\"\\u00a0\");\nfunction removeElement(element) {\n    var parent = element.parentNode;\n    if (parent != null) {\n        parent.removeChild(element);\n    }\n}\nexports.removeElement = removeElement;\nfunction replaceWith(element, replacement) {\n    var parent = element.parentNode;\n    if (parent != null) {\n        parent.replaceChild(replacement, element);\n    }\n}\nexports.replaceWith = replaceWith;\nfunction prepend(element) {\n    var nodes = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        nodes[_i - 1] = arguments[_i];\n    }\n    var first = element.firstChild;\n    for (var _a = 0, nodes_1 = nodes; _a < nodes_1.length; _a++) {\n        var node = nodes_1[_a];\n        element.insertBefore(node, first);\n    }\n}\nexports.prepend = prepend;\nfunction empty(element) {\n    var child;\n    while (child = element.firstChild) {\n        element.removeChild(child);\n    }\n}\nexports.empty = empty;\nfunction show(element) {\n    element.style.display = \"\";\n}\nexports.show = show;\nfunction hide(element) {\n    element.style.display = \"none\";\n}\nexports.hide = hide;\nfunction position(element) {\n    return {\n        top: element.offsetTop,\n        left: element.offsetLeft,\n    };\n}\nexports.position = position;\nfunction offset(element) {\n    var rect = element.getBoundingClientRect();\n    return {\n        top: rect.top + window.pageYOffset - document.documentElement.clientTop,\n        left: rect.left + window.pageXOffset - document.documentElement.clientLeft,\n    };\n}\nexports.offset = offset;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar view_1 = require(\"./view\");\nvar DOM = require(\"./dom\");\nexports.DOMView = (function (superClass) {\n    extend(DOMView, superClass);\n    function DOMView() {\n        return DOMView.__super__.constructor.apply(this, arguments);\n    }\n    DOMView.prototype.tagName = 'div';\n    DOMView.prototype.initialize = function (options) {\n        DOMView.__super__.initialize.call(this, options);\n        this._has_finished = false;\n        return this.el = this._createElement();\n    };\n    DOMView.prototype.remove = function () {\n        DOM.removeElement(this.el);\n        return DOMView.__super__.remove.call(this);\n    };\n    DOMView.prototype.layout = function () { };\n    DOMView.prototype.render = function () { };\n    DOMView.prototype.renderTo = function (element, replace) {\n        if (replace == null) {\n            replace = false;\n        }\n        if (!replace) {\n            element.appendChild(this.el);\n        }\n        else {\n            DOM.replaceWith(element, this.el);\n        }\n        return this.layout();\n    };\n    DOMView.prototype.has_finished = function () {\n        return this._has_finished;\n    };\n    DOMView.prototype.notify_finished = function () {\n        return this.root.notify_finished();\n    };\n    DOMView.getters({\n        solver: function () {\n            if (this.is_root) {\n                return this._solver;\n            }\n            else {\n                return this.parent.solver;\n            }\n        },\n        is_idle: function () {\n            return this.has_finished();\n        }\n    });\n    DOMView.prototype._createElement = function () {\n        return DOM.createElement(this.tagName, {\n            id: this.id,\n            \"class\": this.className\n        });\n    };\n    return DOMView;\n})(view_1.View);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AngleUnits = [\"deg\", \"rad\"];\nexports.Dimension = [\"width\", \"height\"];\nexports.Dimensions = [\"width\", \"height\", \"both\"];\nexports.Direction = [\"clock\", \"anticlock\"];\nexports.FontStyle = [\"normal\", \"italic\", \"bold\"];\nexports.LatLon = [\"lat\", \"lon\"];\nexports.LineCap = [\"butt\", \"round\", \"square\"];\nexports.LineJoin = [\"miter\", \"round\", \"bevel\"];\nexports.Location = [\"above\", \"below\", \"left\", \"right\"];\nexports.LegendLocation = [\"top_left\", \"top_center\", \"top_right\", \"center_left\", \"center\", \"center_right\", \"bottom_left\", \"bottom_center\", \"bottom_right\"];\nexports.Orientation = [\"vertical\", \"horizontal\"];\nexports.OutputBackend = [\"canvas\", \"svg\", \"webgl\"];\nexports.RenderLevel = [\"image\", \"underlay\", \"glyph\", \"annotation\", \"overlay\"];\nexports.RenderMode = [\"canvas\", \"css\"];\nexports.Side = [\"left\", \"right\"];\nexports.SpatialUnits = [\"screen\", \"data\"];\nexports.StartEnd = [\"start\", \"end\"];\nexports.TextAlign = [\"left\", \"right\", \"center\"];\nexports.TextBaseline = [\"top\", \"middle\", \"bottom\", \"alphabetic\", \"hanging\", \"ideographic\"];\nexports.DistributionTypes = [\"uniform\", \"normal\"];\nexports.TransformStepModes = [\"after\", \"before\", \"center\"];\nexports.SizingMode = [\"stretch_both\", \"scale_width\", \"scale_height\", \"scale_both\", \"fixed\"];\nexports.PaddingUnits = [\"percent\", \"absolute\"];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, slice = [].slice;\nvar logging_1 = require(\"./logging\");\nvar signaling_1 = require(\"./signaling\");\nvar property_mixins = require(\"./property_mixins\");\nvar refs = require(\"./util/refs\");\nvar p = require(\"./properties\");\nvar string_1 = require(\"./util/string\");\nvar array_1 = require(\"./util/array\");\nvar object_1 = require(\"./util/object\");\nvar types_1 = require(\"./util/types\");\nvar eq_1 = require(\"./util/eq\");\nexports.HasProps = (function () {\n    extend1(HasProps.prototype, signaling_1.Signalable);\n    HasProps.getters = function (specs) {\n        var fn, name, results;\n        results = [];\n        for (name in specs) {\n            fn = specs[name];\n            results.push(Object.defineProperty(this.prototype, name, {\n                get: fn\n            }));\n        }\n        return results;\n    };\n    HasProps.prototype.props = {};\n    HasProps.prototype.mixins = [];\n    HasProps.define = function (object) {\n        var name, prop, results;\n        results = [];\n        for (name in object) {\n            prop = object[name];\n            results.push((function (_this) {\n                return function (name, prop) {\n                    var default_value, internal, props, refined_prop, type;\n                    if (_this.prototype.props[name] != null) {\n                        throw new Error(\"attempted to redefine property '\" + _this.name + \".\" + name + \"'\");\n                    }\n                    if (_this.prototype[name] != null) {\n                        throw new Error(\"attempted to redefine attribute '\" + _this.name + \".\" + name + \"'\");\n                    }\n                    Object.defineProperty(_this.prototype, name, {\n                        get: function () {\n                            var value;\n                            value = this.getv(name);\n                            return value;\n                        },\n                        set: function (value) {\n                            this.setv(name, value);\n                            return this;\n                        }\n                    }, {\n                        configurable: false,\n                        enumerable: true\n                    });\n                    type = prop[0], default_value = prop[1], internal = prop[2];\n                    refined_prop = {\n                        type: type,\n                        default_value: default_value,\n                        internal: internal != null ? internal : false\n                    };\n                    props = object_1.clone(_this.prototype.props);\n                    props[name] = refined_prop;\n                    return _this.prototype.props = props;\n                };\n            })(this)(name, prop));\n        }\n        return results;\n    };\n    HasProps.internal = function (object) {\n        var _object, fn1, name, prop;\n        _object = {};\n        fn1 = (function (_this) {\n            return function (name, prop) {\n                var default_value, type;\n                type = prop[0], default_value = prop[1];\n                return _object[name] = [type, default_value, true];\n            };\n        })(this);\n        for (name in object) {\n            prop = object[name];\n            fn1(name, prop);\n        }\n        return this.define(_object);\n    };\n    HasProps.mixin = function () {\n        var mixins, names;\n        names = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        this.define(property_mixins.create(names));\n        mixins = this.prototype.mixins.concat(names);\n        return this.prototype.mixins = mixins;\n    };\n    HasProps.mixins = function (names) {\n        return this.mixin.apply(this, names);\n    };\n    HasProps.override = function (name_or_object, default_value) {\n        var name, object, results;\n        if (types_1.isString(name_or_object)) {\n            object = {};\n            object[name] = default_value;\n        }\n        else {\n            object = name_or_object;\n        }\n        results = [];\n        for (name in object) {\n            default_value = object[name];\n            results.push((function (_this) {\n                return function (name, default_value) {\n                    var props, value;\n                    value = _this.prototype.props[name];\n                    if (value == null) {\n                        throw new Error(\"attempted to override nonexistent '\" + _this.name + \".\" + name + \"'\");\n                    }\n                    props = object_1.clone(_this.prototype.props);\n                    props[name] = object_1.extend({}, value, {\n                        default_value: default_value\n                    });\n                    return _this.prototype.props = props;\n                };\n            })(this)(name, default_value));\n        }\n        return results;\n    };\n    HasProps.define({\n        id: [p.Any]\n    });\n    HasProps.prototype.toString = function () {\n        return this.type + \"(\" + this.id + \")\";\n    };\n    function HasProps(attributes, options) {\n        var default_value, name, ref, ref1, type;\n        if (attributes == null) {\n            attributes = {};\n        }\n        if (options == null) {\n            options = {};\n        }\n        this.document = null;\n        this.destroyed = new signaling_1.Signal(this, \"destroyed\");\n        this.change = new signaling_1.Signal(this, \"change\");\n        this.propchange = new signaling_1.Signal(this, \"propchange\");\n        this.transformchange = new signaling_1.Signal(this, \"transformchange\");\n        this.attributes = {};\n        this.properties = {};\n        ref = this.props;\n        for (name in ref) {\n            ref1 = ref[name], type = ref1.type, default_value = ref1.default_value;\n            if (type == null) {\n                throw new Error(\"undefined property type for \" + this.type + \".\" + name);\n            }\n            this.properties[name] = new type({\n                obj: this,\n                attr: name,\n                default_value: default_value\n            });\n        }\n        this._set_after_defaults = {};\n        if (attributes.id == null) {\n            this.setv(\"id\", string_1.uniqueId(), {\n                silent: true\n            });\n        }\n        this.setv(attributes, object_1.extend({\n            silent: true\n        }, options));\n        if (!options.defer_initialization) {\n            this.finalize(attributes, options);\n        }\n    }\n    HasProps.prototype.finalize = function (attributes, options) {\n        var name, prop, ref;\n        ref = this.properties;\n        for (name in ref) {\n            prop = ref[name];\n            prop.update();\n            if (prop.spec.transform) {\n                this.connect(prop.spec.transform.change, function () {\n                    return this.transformchange.emit();\n                });\n            }\n        }\n        this.initialize(attributes, options);\n        return this.connect_signals();\n    };\n    HasProps.prototype.initialize = function (attributes, options) { };\n    HasProps.prototype.connect_signals = function () { };\n    HasProps.prototype.disconnect_signals = function () {\n        return signaling_1.Signal.disconnectReceiver(this);\n    };\n    HasProps.prototype.destroy = function () {\n        this.disconnect_signals();\n        return this.destroyed.emit();\n    };\n    HasProps.prototype.clone = function () {\n        return new this.constructor(this.attributes);\n    };\n    HasProps.prototype._setv = function (attrs, options) {\n        var attr, changes, changing, current, i, j, ref, silent, val;\n        silent = options.silent;\n        changes = [];\n        changing = this._changing;\n        this._changing = true;\n        current = this.attributes;\n        for (attr in attrs) {\n            val = attrs[attr];\n            val = attrs[attr];\n            if (!eq_1.isEqual(current[attr], val)) {\n                changes.push(attr);\n            }\n            current[attr] = val;\n        }\n        if (!silent) {\n            if (changes.length) {\n                this._pending = true;\n            }\n            for (i = j = 0, ref = changes.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                this.properties[changes[i]].change.emit(current[changes[i]]);\n            }\n        }\n        if (changing) {\n            return this;\n        }\n        if (!silent && !options.no_change) {\n            while (this._pending) {\n                this._pending = false;\n                this.change.emit();\n            }\n        }\n        this._pending = false;\n        this._changing = false;\n        return this;\n    };\n    HasProps.prototype.setv = function (key, value, options) {\n        var attrs, old, prop_name, results, val;\n        if (types_1.isObject(key) || key === null) {\n            attrs = key;\n            options = value;\n        }\n        else {\n            attrs = {};\n            attrs[key] = value;\n        }\n        if (options == null) {\n            options = {};\n        }\n        for (key in attrs) {\n            if (!hasProp.call(attrs, key))\n                continue;\n            val = attrs[key];\n            prop_name = key;\n            if (this.props[prop_name] == null) {\n                throw new Error(\"property \" + this.type + \".\" + prop_name + \" wasn't declared\");\n            }\n            if (!((options != null) && options.defaults)) {\n                this._set_after_defaults[key] = true;\n            }\n        }\n        if (!object_1.isEmpty(attrs)) {\n            old = {};\n            for (key in attrs) {\n                value = attrs[key];\n                old[key] = this.getv(key);\n            }\n            this._setv(attrs, options);\n            if ((options != null ? options.silent : void 0) == null) {\n                results = [];\n                for (key in attrs) {\n                    value = attrs[key];\n                    results.push(this._tell_document_about_change(key, old[key], this.getv(key), options));\n                }\n                return results;\n            }\n        }\n    };\n    HasProps.prototype.set = function (key, value, options) {\n        logging_1.logger.warn(\"HasProps.set('prop_name', value) is deprecated, use HasProps.prop_name = value instead\");\n        return this.setv(key, value, options);\n    };\n    HasProps.prototype.get = function (prop_name) {\n        logging_1.logger.warn(\"HasProps.get('prop_name') is deprecated, use HasProps.prop_name instead\");\n        return this.getv(prop_name);\n    };\n    HasProps.prototype.getv = function (prop_name) {\n        if (this.props[prop_name] == null) {\n            throw new Error(\"property \" + this.type + \".\" + prop_name + \" wasn't declared\");\n        }\n        else {\n            return this.attributes[prop_name];\n        }\n    };\n    HasProps.prototype.ref = function () {\n        return refs.create_ref(this);\n    };\n    HasProps.prototype.set_subtype = function (subtype) {\n        return this._subtype = subtype;\n    };\n    HasProps.prototype.attribute_is_serializable = function (attr) {\n        var prop;\n        prop = this.props[attr];\n        if (prop == null) {\n            throw new Error(this.type + \".attribute_is_serializable('\" + attr + \"'): \" + attr + \" wasn't declared\");\n        }\n        else {\n            return !prop.internal;\n        }\n    };\n    HasProps.prototype.serializable_attributes = function () {\n        var attrs, name, ref, value;\n        attrs = {};\n        ref = this.attributes;\n        for (name in ref) {\n            value = ref[name];\n            if (this.attribute_is_serializable(name)) {\n                attrs[name] = value;\n            }\n        }\n        return attrs;\n    };\n    HasProps._value_to_json = function (key, value, optional_parent_object) {\n        var i, j, len, ref_array, ref_obj, subkey, v;\n        if (value instanceof HasProps) {\n            return value.ref();\n        }\n        else if (types_1.isArray(value)) {\n            ref_array = [];\n            for (i = j = 0, len = value.length; j < len; i = ++j) {\n                v = value[i];\n                ref_array.push(HasProps._value_to_json(i, v, value));\n            }\n            return ref_array;\n        }\n        else if (types_1.isObject(value)) {\n            ref_obj = {};\n            for (subkey in value) {\n                if (!hasProp.call(value, subkey))\n                    continue;\n                ref_obj[subkey] = HasProps._value_to_json(subkey, value[subkey], value);\n            }\n            return ref_obj;\n        }\n        else {\n            return value;\n        }\n    };\n    HasProps.prototype.attributes_as_json = function (include_defaults, value_to_json) {\n        var attrs, key, ref, value;\n        if (include_defaults == null) {\n            include_defaults = true;\n        }\n        if (value_to_json == null) {\n            value_to_json = HasProps._value_to_json;\n        }\n        attrs = {};\n        ref = this.serializable_attributes();\n        for (key in ref) {\n            if (!hasProp.call(ref, key))\n                continue;\n            value = ref[key];\n            if (include_defaults) {\n                attrs[key] = value;\n            }\n            else if (key in this._set_after_defaults) {\n                attrs[key] = value;\n            }\n        }\n        return value_to_json(\"attributes\", attrs, this);\n    };\n    HasProps._json_record_references = function (doc, v, result, recurse) {\n        var elem, j, k, len, model, results, results1;\n        if (v == null) {\n        }\n        else if (refs.is_ref(v)) {\n            if (!(v.id in result)) {\n                model = doc.get_model_by_id(v.id);\n                return HasProps._value_record_references(model, result, recurse);\n            }\n        }\n        else if (types_1.isArray(v)) {\n            results = [];\n            for (j = 0, len = v.length; j < len; j++) {\n                elem = v[j];\n                results.push(HasProps._json_record_references(doc, elem, result, recurse));\n            }\n            return results;\n        }\n        else if (types_1.isObject(v)) {\n            results1 = [];\n            for (k in v) {\n                if (!hasProp.call(v, k))\n                    continue;\n                elem = v[k];\n                results1.push(HasProps._json_record_references(doc, elem, result, recurse));\n            }\n            return results1;\n        }\n    };\n    HasProps._value_record_references = function (v, result, recurse) {\n        var elem, immediate, j, k, l, len, len1, obj, results, results1, results2;\n        if (v == null) {\n        }\n        else if (v instanceof HasProps) {\n            if (!(v.id in result)) {\n                result[v.id] = v;\n                if (recurse) {\n                    immediate = v._immediate_references();\n                    results = [];\n                    for (j = 0, len = immediate.length; j < len; j++) {\n                        obj = immediate[j];\n                        results.push(HasProps._value_record_references(obj, result, true));\n                    }\n                    return results;\n                }\n            }\n        }\n        else if (v.buffer instanceof ArrayBuffer) {\n        }\n        else if (types_1.isArray(v)) {\n            results1 = [];\n            for (l = 0, len1 = v.length; l < len1; l++) {\n                elem = v[l];\n                results1.push(HasProps._value_record_references(elem, result, recurse));\n            }\n            return results1;\n        }\n        else if (types_1.isObject(v)) {\n            results2 = [];\n            for (k in v) {\n                if (!hasProp.call(v, k))\n                    continue;\n                elem = v[k];\n                results2.push(HasProps._value_record_references(elem, result, recurse));\n            }\n            return results2;\n        }\n    };\n    HasProps.prototype._immediate_references = function () {\n        var attrs, key, result, value;\n        result = {};\n        attrs = this.serializable_attributes();\n        for (key in attrs) {\n            value = attrs[key];\n            HasProps._value_record_references(value, result, false);\n        }\n        return object_1.values(result);\n    };\n    HasProps.prototype.references = function () {\n        var references;\n        references = {};\n        HasProps._value_record_references(this, references, true);\n        return object_1.values(references);\n    };\n    HasProps.prototype.attach_document = function (doc) {\n        if (this.document !== null && this.document !== doc) {\n            throw new Error(\"models must be owned by only a single document\");\n        }\n        this.document = doc;\n        if (this._doc_attached != null) {\n            return this._doc_attached();\n        }\n    };\n    HasProps.prototype.detach_document = function () {\n        return this.document = null;\n    };\n    HasProps.prototype._tell_document_about_change = function (attr, old, new_, options) {\n        var need_invalidate, new_id, new_ref, new_refs, old_id, old_ref, old_refs;\n        if (!this.attribute_is_serializable(attr)) {\n            return;\n        }\n        if (this.document !== null) {\n            new_refs = {};\n            HasProps._value_record_references(new_, new_refs, false);\n            old_refs = {};\n            HasProps._value_record_references(old, old_refs, false);\n            need_invalidate = false;\n            for (new_id in new_refs) {\n                new_ref = new_refs[new_id];\n                if (!(new_id in old_refs)) {\n                    need_invalidate = true;\n                    break;\n                }\n            }\n            if (!need_invalidate) {\n                for (old_id in old_refs) {\n                    old_ref = old_refs[old_id];\n                    if (!(old_id in new_refs)) {\n                        need_invalidate = true;\n                        break;\n                    }\n                }\n            }\n            if (need_invalidate) {\n                this.document._invalidate_all_models();\n            }\n            return this.document._notify_change(this, attr, old, new_, options);\n        }\n    };\n    HasProps.prototype.materialize_dataspecs = function (source) {\n        var data, name, prop, ref;\n        data = {};\n        ref = this.properties;\n        for (name in ref) {\n            prop = ref[name];\n            if (!prop.dataspec) {\n                continue;\n            }\n            if ((prop.optional || false) && prop.spec.value === null && (!(name in this._set_after_defaults))) {\n                continue;\n            }\n            data[\"_\" + name] = prop.array(source);\n            if ((prop.spec.field != null) && prop.spec.field in source._shapes) {\n                data[\"_\" + name + \"_shape\"] = source._shapes[prop.spec.field];\n            }\n            if (prop instanceof p.Distance) {\n                data[\"max_\" + name] = array_1.max(data[\"_\" + name]);\n            }\n        }\n        return data;\n    };\n    return HasProps;\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar dist_to_segment_squared, nullreturner, sqr;\nvar array_1 = require(\"./util/array\");\nvar object_1 = require(\"./util/object\");\nexports.point_in_poly = function (x, y, px, py) {\n    var i, inside, j, ref, x1, x2, y1, y2;\n    inside = false;\n    x1 = px[px.length - 1];\n    y1 = py[py.length - 1];\n    for (i = j = 0, ref = px.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        x2 = px[i];\n        y2 = py[i];\n        if ((y1 < y) !== (y2 < y)) {\n            if (x1 + (y - y1) / (y2 - y1) * (x2 - x1) < x) {\n                inside = !inside;\n            }\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    return inside;\n};\nnullreturner = function () {\n    return null;\n};\nexports.HitTestResult = (function () {\n    function HitTestResult() {\n        this['0d'] = {\n            glyph: null,\n            get_view: nullreturner,\n            indices: []\n        };\n        this['1d'] = {\n            indices: []\n        };\n        this['2d'] = {\n            indices: {}\n        };\n    }\n    Object.defineProperty(HitTestResult.prototype, '_0d', {\n        get: function () {\n            return this['0d'];\n        }\n    });\n    Object.defineProperty(HitTestResult.prototype, '_1d', {\n        get: function () {\n            return this['1d'];\n        }\n    });\n    Object.defineProperty(HitTestResult.prototype, '_2d', {\n        get: function () {\n            return this['2d'];\n        }\n    });\n    HitTestResult.prototype.is_empty = function () {\n        return this._0d.indices.length === 0 && this._1d.indices.length === 0;\n    };\n    HitTestResult.prototype.update_through_union = function (other) {\n        this['0d'].indices = array_1.union(other['0d'].indices, this['0d'].indices);\n        this['0d'].glyph = other['0d'].glyph || this['0d'].glyph;\n        this['1d'].indices = array_1.union(other['1d'].indices, this['1d'].indices);\n        return this['2d'].indices = object_1.merge(other['2d'].indices, this['2d'].indices);\n    };\n    return HitTestResult;\n})();\nexports.create_hit_test_result = function () {\n    return new exports.HitTestResult();\n};\nexports.create_1d_hit_test_result = function (hits) {\n    var _dist, i, result;\n    result = new exports.HitTestResult();\n    result['1d'].indices = (function () {\n        var j, len, ref, ref1, results;\n        ref = array_1.sortBy(hits, function (arg) {\n            var _i, dist;\n            _i = arg[0], dist = arg[1];\n            return dist;\n        });\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n            ref1 = ref[j], i = ref1[0], _dist = ref1[1];\n            results.push(i);\n        }\n        return results;\n    })();\n    return result;\n};\nexports.validate_bbox_coords = function (arg, arg1) {\n    var ref, ref1, x0, x1, y0, y1;\n    x0 = arg[0], x1 = arg[1];\n    y0 = arg1[0], y1 = arg1[1];\n    if (x0 > x1) {\n        ref = [x1, x0], x0 = ref[0], x1 = ref[1];\n    }\n    if (y0 > y1) {\n        ref1 = [y1, y0], y0 = ref1[0], y1 = ref1[1];\n    }\n    return {\n        minX: x0,\n        minY: y0,\n        maxX: x1,\n        maxY: y1\n    };\n};\nsqr = function (x) {\n    return x * x;\n};\nexports.dist_2_pts = function (vx, vy, wx, wy) {\n    return sqr(vx - wx) + sqr(vy - wy);\n};\ndist_to_segment_squared = function (p, v, w) {\n    var l2, t;\n    l2 = exports.dist_2_pts(v.x, v.y, w.x, w.y);\n    if (l2 === 0) {\n        return exports.dist_2_pts(p.x, p.y, v.x, v.y);\n    }\n    t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;\n    if (t < 0) {\n        return exports.dist_2_pts(p.x, p.y, v.x, v.y);\n    }\n    if (t > 1) {\n        return exports.dist_2_pts(p.x, p.y, w.x, w.y);\n    }\n    return exports.dist_2_pts(p.x, p.y, v.x + t * (w.x - v.x), v.y + t * (w.y - v.y));\n};\nexports.dist_to_segment = function (p, v, w) {\n    return Math.sqrt(dist_to_segment_squared(p, v, w));\n};\nexports.check_2_segments_intersect = function (l0_x0, l0_y0, l0_x1, l0_y1, l1_x0, l1_y0, l1_x1, l1_y1) {\n    /* Check if 2 segments (l0 and l1) intersect. Returns a structure with\n      the following attributes:\n        * hit (boolean): whether the 2 segments intersect\n        * x (float): x coordinate of the intersection point\n        * y (float): y coordinate of the intersection point\n     */\n    var a, b, den, num1, num2, x, y;\n    den = ((l1_y1 - l1_y0) * (l0_x1 - l0_x0)) - ((l1_x1 - l1_x0) * (l0_y1 - l0_y0));\n    if (den === 0) {\n        return {\n            hit: false,\n            x: null,\n            y: null\n        };\n    }\n    else {\n        a = l0_y0 - l1_y0;\n        b = l0_x0 - l1_x0;\n        num1 = ((l1_x1 - l1_x0) * a) - ((l1_y1 - l1_y0) * b);\n        num2 = ((l0_x1 - l0_x0) * a) - ((l0_y1 - l0_y0) * b);\n        a = num1 / den;\n        b = num2 / den;\n        x = l0_x0 + (a * (l0_x1 - l0_x0));\n        y = l0_y0 + (a * (l0_y1 - l0_y0));\n        return {\n            hit: (a > 0 && a < 1) && (b > 0 && b < 1),\n            x: x,\n            y: y\n        };\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar solver_1 = require(\"./solver\");\nvar model_1 = require(\"../../model\");\nexports.LayoutCanvas = (function (superClass) {\n    extend(LayoutCanvas, superClass);\n    function LayoutCanvas() {\n        return LayoutCanvas.__super__.constructor.apply(this, arguments);\n    }\n    LayoutCanvas.prototype.type = 'LayoutCanvas';\n    LayoutCanvas.prototype.initialize = function (attrs, options) {\n        LayoutCanvas.__super__.initialize.call(this, attrs, options);\n        this._top = new solver_1.Variable(\"top \" + this.id);\n        this._left = new solver_1.Variable(\"left \" + this.id);\n        this._width = new solver_1.Variable(\"width \" + this.id);\n        this._height = new solver_1.Variable(\"height \" + this.id);\n        this._right = new solver_1.Variable(\"right \" + this.id);\n        return this._bottom = new solver_1.Variable(\"bottom \" + this.id);\n    };\n    LayoutCanvas.prototype.get_edit_variables = function () {\n        var editables;\n        editables = [];\n        editables.push({\n            edit_variable: this._top,\n            strength: solver_1.Strength.strong\n        });\n        editables.push({\n            edit_variable: this._left,\n            strength: solver_1.Strength.strong\n        });\n        editables.push({\n            edit_variable: this._width,\n            strength: solver_1.Strength.strong\n        });\n        editables.push({\n            edit_variable: this._height,\n            strength: solver_1.Strength.strong\n        });\n        return editables;\n    };\n    LayoutCanvas.prototype.get_constraints = function () {\n        return [];\n    };\n    LayoutCanvas.getters({\n        layout_bbox: function () {\n            return {\n                top: this._top.value,\n                left: this._left.value,\n                width: this._width.value,\n                height: this._height.value,\n                right: this._right.value,\n                bottom: this._bottom.value\n            };\n        }\n    });\n    LayoutCanvas.prototype.dump_layout = function () {\n        return console.log(this.toString(), this.layout_bbox);\n    };\n    return LayoutCanvas;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ALPHABETIC, BOTTOM, CENTER, HANGING, LEFT, MIDDLE, RIGHT, TOP, _align_lookup, _align_lookup_negative, _align_lookup_positive, _angle_lookup, _baseline_lookup, pi2, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar solver_1 = require(\"./solver\");\nvar layout_canvas_1 = require(\"./layout_canvas\");\nvar p = require(\"core/properties\");\nvar logging_1 = require(\"core/logging\");\nvar types_1 = require(\"core/util/types\");\npi2 = Math.PI / 2;\nALPHABETIC = 'alphabetic';\nTOP = 'top';\nBOTTOM = 'bottom';\nMIDDLE = 'middle';\nHANGING = 'hanging';\nLEFT = 'left';\nRIGHT = 'right';\nCENTER = 'center';\n_angle_lookup = {\n    above: {\n        parallel: 0,\n        normal: -pi2,\n        horizontal: 0,\n        vertical: -pi2\n    },\n    below: {\n        parallel: 0,\n        normal: pi2,\n        horizontal: 0,\n        vertical: pi2\n    },\n    left: {\n        parallel: -pi2,\n        normal: 0,\n        horizontal: 0,\n        vertical: -pi2\n    },\n    right: {\n        parallel: pi2,\n        normal: 0,\n        horizontal: 0,\n        vertical: pi2\n    }\n};\n_baseline_lookup = {\n    above: {\n        justified: TOP,\n        parallel: ALPHABETIC,\n        normal: MIDDLE,\n        horizontal: ALPHABETIC,\n        vertical: MIDDLE\n    },\n    below: {\n        justified: BOTTOM,\n        parallel: HANGING,\n        normal: MIDDLE,\n        horizontal: HANGING,\n        vertical: MIDDLE\n    },\n    left: {\n        justified: TOP,\n        parallel: ALPHABETIC,\n        normal: MIDDLE,\n        horizontal: MIDDLE,\n        vertical: ALPHABETIC\n    },\n    right: {\n        justified: TOP,\n        parallel: ALPHABETIC,\n        normal: MIDDLE,\n        horizontal: MIDDLE,\n        vertical: ALPHABETIC\n    }\n};\n_align_lookup = {\n    above: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: LEFT,\n        horizontal: CENTER,\n        vertical: LEFT\n    },\n    below: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: LEFT,\n        horizontal: CENTER,\n        vertical: LEFT\n    },\n    left: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: RIGHT,\n        horizontal: RIGHT,\n        vertical: CENTER\n    },\n    right: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: LEFT,\n        horizontal: LEFT,\n        vertical: CENTER\n    }\n};\n_align_lookup_negative = {\n    above: RIGHT,\n    below: LEFT,\n    left: RIGHT,\n    right: LEFT\n};\n_align_lookup_positive = {\n    above: LEFT,\n    below: RIGHT,\n    left: RIGHT,\n    right: LEFT\n};\nexports.update_panel_constraints = function (view) {\n    var s;\n    if ((view.model.props.visible != null) && !view.model.visible) {\n        return;\n    }\n    s = view.solver;\n    if ((view._size_constraint != null) && s.has_constraint(view._size_constraint)) {\n        s.remove_constraint(view._size_constraint);\n    }\n    view._size_constraint = solver_1.GE(view.model.panel._size, -view._get_size());\n    s.add_constraint(view._size_constraint);\n    if ((view._full_constraint != null) && s.has_constraint(view._full_constraint)) {\n        s.remove_constraint(view._full_constraint);\n    }\n    view._full_constraint = (function () {\n        switch (view.model.panel.side) {\n            case 'above':\n            case 'below':\n                return solver_1.EQ(view.model.panel._width, [-1, view.plot_model.canvas._width]);\n            case 'left':\n            case 'right':\n                return solver_1.EQ(view.model.panel._height, [-1, view.plot_model.canvas._height]);\n        }\n    })();\n    return s.add_constraint(view._full_constraint);\n};\nexports.SidePanel = (function (superClass) {\n    extend(SidePanel, superClass);\n    function SidePanel() {\n        return SidePanel.__super__.constructor.apply(this, arguments);\n    }\n    SidePanel.internal({\n        side: [p.String],\n        plot: [p.Instance]\n    });\n    SidePanel.prototype.initialize = function (attrs, options) {\n        SidePanel.__super__.initialize.call(this, attrs, options);\n        switch (this.side) {\n            case \"above\":\n                this._dim = 0;\n                this._normals = [0, -1];\n                return this._size = this._height;\n            case \"below\":\n                this._dim = 0;\n                this._normals = [0, 1];\n                return this._size = this._height;\n            case \"left\":\n                this._dim = 1;\n                this._normals = [-1, 0];\n                return this._size = this._width;\n            case \"right\":\n                this._dim = 1;\n                this._normals = [1, 0];\n                return this._size = this._width;\n            default:\n                return logging_1.logger.error(\"unrecognized side: '\" + this.side + \"'\");\n        }\n    };\n    SidePanel.prototype.get_constraints = function () {\n        return [solver_1.GE(this._top), solver_1.GE(this._bottom), solver_1.GE(this._left), solver_1.GE(this._right), solver_1.GE(this._width), solver_1.GE(this._height), solver_1.EQ(this._left, this._width, [-1, this._right]), solver_1.EQ(this._bottom, this._height, [-1, this._top])];\n    };\n    SidePanel.prototype.apply_label_text_heuristics = function (ctx, orient) {\n        var align, baseline, side;\n        side = this.side;\n        if (types_1.isString(orient)) {\n            baseline = _baseline_lookup[side][orient];\n            align = _align_lookup[side][orient];\n        }\n        else if (orient === 0) {\n            baseline = _baseline_lookup[side][orient];\n            align = _align_lookup[side][orient];\n        }\n        else if (orient < 0) {\n            baseline = 'middle';\n            align = _align_lookup_negative[side];\n        }\n        else if (orient > 0) {\n            baseline = 'middle';\n            align = _align_lookup_positive[side];\n        }\n        ctx.textBaseline = baseline;\n        ctx.textAlign = align;\n        return ctx;\n    };\n    SidePanel.prototype.get_label_angle_heuristic = function (orient) {\n        var side;\n        side = this.side;\n        return _angle_lookup[side][orient];\n    };\n    return SidePanel;\n})(layout_canvas_1.LayoutCanvas);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar kiwi_1 = require(\"kiwi\");\nexports.Variable = kiwi_1.Variable;\nexports.Expression = kiwi_1.Expression;\nexports.Constraint = kiwi_1.Constraint;\nexports.Operator = kiwi_1.Operator;\nexports.Strength = kiwi_1.Strength;\nfunction _constrainer(op) {\n    return function () {\n        var terms = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            terms[_i] = arguments[_i];\n        }\n        return new kiwi_1.Constraint(new (kiwi_1.Expression.bind.apply(kiwi_1.Expression, [void 0].concat(terms)))(), op);\n    };\n}\nfunction _weak_constrainer(op) {\n    return function () {\n        var terms = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            terms[_i] = arguments[_i];\n        }\n        return new kiwi_1.Constraint(new (kiwi_1.Expression.bind.apply(kiwi_1.Expression, [void 0].concat(terms)))(), op, kiwi_1.Strength.weak);\n    };\n}\nexports.EQ = _constrainer(kiwi_1.Operator.Eq);\nexports.LE = _constrainer(kiwi_1.Operator.Le);\nexports.GE = _constrainer(kiwi_1.Operator.Ge);\nexports.WEAK_EQ = _weak_constrainer(kiwi_1.Operator.Eq);\nexports.WEAK_LE = _weak_constrainer(kiwi_1.Operator.Le);\nexports.WEAK_GE = _weak_constrainer(kiwi_1.Operator.Ge);\nvar Solver = (function () {\n    function Solver() {\n        this.solver = new kiwi_1.Solver();\n    }\n    Solver.prototype.clear = function () {\n        this.solver = new kiwi_1.Solver();\n    };\n    Solver.prototype.toString = function () {\n        return \"Solver(num_constraints=\" + this.num_constraints + \", num_edit_variables=\" + this.num_edit_variables + \")\";\n    };\n    Object.defineProperty(Solver.prototype, \"num_constraints\", {\n        get: function () {\n            return this.solver.numConstraints;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Solver.prototype, \"num_edit_variables\", {\n        get: function () {\n            return this.solver.numEditVariables;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Solver.prototype.update_variables = function () {\n        this.solver.updateVariables();\n    };\n    Solver.prototype.has_constraint = function (constraint) {\n        return this.solver.hasConstraint(constraint);\n    };\n    Solver.prototype.add_constraint = function (constraint) {\n        this.solver.addConstraint(constraint);\n    };\n    Solver.prototype.remove_constraint = function (constraint) {\n        this.solver.removeConstraint(constraint);\n    };\n    Solver.prototype.add_edit_variable = function (variable, strength) {\n        this.solver.addEditVariable(variable, strength);\n    };\n    Solver.prototype.remove_edit_variable = function (variable) {\n        this.solver.removeEditVariable(variable);\n    };\n    Solver.prototype.suggest_value = function (variable, value) {\n        this.solver.suggestValue(variable, value);\n    };\n    return Solver;\n}());\nexports.Solver = Solver;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LogLevel, _loggers, _method_factory, noop, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar types_1 = require(\"./util/types\");\nnoop = function () { };\n_method_factory = function (method_name, logger_name) {\n    if (console[method_name] != null) {\n        return console[method_name].bind(console, logger_name);\n    }\n    else if (console.log != null) {\n        return console.log.bind(console, logger_name);\n    }\n    else {\n        return noop;\n    }\n};\n_loggers = {};\nLogLevel = (function () {\n    function LogLevel(name, level) {\n        this.name = name;\n        this.level = level;\n    }\n    return LogLevel;\n})();\nexports.Logger = (function () {\n    Logger.TRACE = new LogLevel(\"trace\", 0);\n    Logger.DEBUG = new LogLevel(\"debug\", 1);\n    Logger.INFO = new LogLevel(\"info\", 2);\n    Logger.WARN = new LogLevel(\"warn\", 6);\n    Logger.ERROR = new LogLevel(\"error\", 7);\n    Logger.FATAL = new LogLevel(\"fatal\", 8);\n    Logger.OFF = new LogLevel(\"off\", 9);\n    Logger.log_levels = {\n        trace: Logger.TRACE,\n        debug: Logger.DEBUG,\n        info: Logger.INFO,\n        warn: Logger.WARN,\n        error: Logger.ERROR,\n        fatal: Logger.FATAL,\n        off: Logger.OFF\n    };\n    Object.defineProperty(Logger, 'levels', {\n        get: function () {\n            return Object.keys(Logger.log_levels);\n        }\n    });\n    Logger.get = function (name, level) {\n        var logger;\n        if (level == null) {\n            level = Logger.INFO;\n        }\n        if (types_1.isString(name) && name.length > 0) {\n            logger = _loggers[name];\n            if (logger == null) {\n                logger = _loggers[name] = new Logger(name, level);\n            }\n            return logger;\n        }\n        else {\n            throw new TypeError(\"Logger.get() expects a string name and an optional log-level\");\n        }\n    };\n    function Logger(name, level) {\n        if (level == null) {\n            level = Logger.INFO;\n        }\n        this._name = name;\n        this.set_level(level);\n    }\n    Object.defineProperty(Logger.prototype, 'level', {\n        get: function () {\n            return this.get_level();\n        }\n    });\n    Logger.prototype.get_level = function () {\n        return this._log_level;\n    };\n    Logger.prototype.set_level = function (log_level) {\n        var __, logger_name, method_name, ref, results;\n        if (log_level instanceof LogLevel) {\n            this._log_level = log_level;\n        }\n        else if (types_1.isString(log_level) && (Logger.log_levels[log_level] != null)) {\n            this._log_level = Logger.log_levels[log_level];\n        }\n        else {\n            throw new Error(\"Logger.set_level() expects a log-level object or a string name of a log-level\");\n        }\n        logger_name = \"[\" + this._name + \"]\";\n        ref = Logger.log_levels;\n        results = [];\n        for (__ in ref) {\n            log_level = ref[__];\n            if (log_level === Logger.OFF) {\n                break;\n            }\n            else {\n                method_name = log_level.name;\n                if (log_level.level < this._log_level.level) {\n                    results.push(this[method_name] = noop);\n                }\n                else {\n                    results.push(this[method_name] = _method_factory(method_name, logger_name));\n                }\n            }\n        }\n        return results;\n    };\n    return Logger;\n})();\nexports.logger = exports.Logger.get(\"bokeh\");\nexports.set_log_level = function (level) {\n    if (indexOf.call(exports.Logger.levels, level) < 0) {\n        console.log(\"[bokeh] unrecognized logging level '\" + level + \"' passed to Bokeh.set_log_level(), ignoring\");\n        return console.log(\"[bokeh] valid log levels are: \" + (exports.Logger.levels.join(', ')));\n    }\n    else {\n        console.log(\"[bokeh] setting log level to: '\" + level + \"'\");\n        return exports.logger.set_level(level);\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar valueToString, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar signaling_1 = require(\"./signaling\");\nvar enums = require(\"./enums\");\nvar svg_colors = require(\"./util/svg_colors\");\nvar color_1 = require(\"./util/color\");\nvar array_1 = require(\"./util/array\");\nvar types_1 = require(\"./util/types\");\nvalueToString = function (value) {\n    try {\n        return JSON.stringify(value);\n    }\n    catch (error) {\n        return value.toString();\n    }\n};\nexports.Property = (function () {\n    extend(Property.prototype, signaling_1.Signalable);\n    Property.prototype.dataspec = false;\n    function Property(arg) {\n        this.obj = arg.obj, this.attr = arg.attr, this.default_value = arg.default_value;\n        this._init();\n        this.change = new signaling_1.Signal(this.obj, \"change\");\n        this.connect(this.change, (function (_this) {\n            return function () {\n                _this._init();\n                return _this.obj.propchange.emit();\n            };\n        })(this));\n    }\n    Property.prototype.update = function () {\n        return this._init();\n    };\n    Property.prototype.init = function () { };\n    Property.prototype.transform = function (values) {\n        return values;\n    };\n    Property.prototype.validate = function (value) { };\n    Property.prototype.value = function (do_spec_transform) {\n        var ret;\n        if (do_spec_transform == null) {\n            do_spec_transform = true;\n        }\n        if (this.spec.value === void 0) {\n            throw new Error(\"attempted to retrieve property value for property without value specification\");\n        }\n        ret = this.transform([this.spec.value])[0];\n        if ((this.spec.transform != null) && do_spec_transform) {\n            ret = this.spec.transform.compute(ret);\n        }\n        return ret;\n    };\n    Property.prototype.array = function (source) {\n        var data, i, length, ret, value;\n        if (!this.dataspec) {\n            throw new Error(\"attempted to retrieve property array for non-dataspec property\");\n        }\n        data = source.data;\n        if (this.spec.field != null) {\n            if (this.spec.field in data) {\n                ret = this.transform(source.get_column(this.spec.field));\n            }\n            else {\n                throw new Error(\"attempted to retrieve property array for nonexistent field '\" + this.spec.field + \"'\");\n            }\n        }\n        else {\n            length = source.get_length();\n            if (length == null) {\n                length = 1;\n            }\n            value = this.value(false);\n            ret = (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(value);\n                }\n                return results;\n            })();\n        }\n        if (this.spec.transform != null) {\n            ret = this.spec.transform.v_compute(ret);\n        }\n        return ret;\n    };\n    Property.prototype._init = function () {\n        var attr, attr_value, default_value, obj;\n        obj = this.obj;\n        if (obj == null) {\n            throw new Error(\"missing property object\");\n        }\n        if (obj.properties == null) {\n            throw new Error(\"property object must be a HasProps\");\n        }\n        attr = this.attr;\n        if (attr == null) {\n            throw new Error(\"missing property attr\");\n        }\n        attr_value = obj.getv(attr);\n        if (attr_value === void 0) {\n            default_value = this.default_value;\n            attr_value = (function () {\n                switch (false) {\n                    case default_value !== void 0:\n                        return null;\n                    case !types_1.isArray(default_value):\n                        return array_1.copy(default_value);\n                    case !types_1.isFunction(default_value):\n                        return default_value(obj);\n                    default:\n                        return default_value;\n                }\n            })();\n            obj.setv(attr, attr_value, {\n                silent: true,\n                defaults: true\n            });\n        }\n        if (types_1.isArray(attr_value)) {\n            this.spec = {\n                value: attr_value\n            };\n        }\n        else if (types_1.isObject(attr_value) && ((attr_value.value === void 0) !== (attr_value.field === void 0))) {\n            this.spec = attr_value;\n        }\n        else {\n            this.spec = {\n                value: attr_value\n            };\n        }\n        if ((this.spec.field != null) && !types_1.isString(this.spec.field)) {\n            throw new Error(\"field value for property '\" + attr + \"' is not a string\");\n        }\n        if (this.spec.value != null) {\n            this.validate(this.spec.value);\n        }\n        return this.init();\n    };\n    Property.prototype.toString = function () {\n        return this.name + \"(\" + this.obj + \".\" + this.attr + \", spec: \" + (valueToString(this.spec)) + \")\";\n    };\n    return Property;\n})();\nexports.simple_prop = function (name, pred) {\n    var Prop;\n    return Prop = (function (superClass) {\n        extend(Prop, superClass);\n        function Prop() {\n            return Prop.__super__.constructor.apply(this, arguments);\n        }\n        Prop.prototype.name = name;\n        Prop.prototype.validate = function (value) {\n            if (!pred(value)) {\n                throw new Error(name + \" property '\" + this.attr + \"' given invalid value: \" + (valueToString(value)));\n            }\n        };\n        return Prop;\n    })(exports.Property);\n};\nexports.Any = (function (superClass) {\n    extend(Any, superClass);\n    function Any() {\n        return Any.__super__.constructor.apply(this, arguments);\n    }\n    return Any;\n})(exports.simple_prop(\"Any\", function (x) {\n    return true;\n}));\nexports.Array = (function (superClass) {\n    extend(Array, superClass);\n    function Array() {\n        return Array.__super__.constructor.apply(this, arguments);\n    }\n    return Array;\n})(exports.simple_prop(\"Array\", function (x) {\n    return types_1.isArray(x) || x instanceof Float64Array;\n}));\nexports.Bool = (function (superClass) {\n    extend(Bool, superClass);\n    function Bool() {\n        return Bool.__super__.constructor.apply(this, arguments);\n    }\n    return Bool;\n})(exports.simple_prop(\"Bool\", types_1.isBoolean));\nexports.Boolean = exports.Bool;\nexports.Color = (function (superClass) {\n    extend(Color, superClass);\n    function Color() {\n        return Color.__super__.constructor.apply(this, arguments);\n    }\n    return Color;\n})(exports.simple_prop(\"Color\", function (x) {\n    return (svg_colors[x.toLowerCase()] != null) || x.substring(0, 1) === \"#\" || color_1.valid_rgb(x);\n}));\nexports.Instance = (function (superClass) {\n    extend(Instance, superClass);\n    function Instance() {\n        return Instance.__super__.constructor.apply(this, arguments);\n    }\n    return Instance;\n})(exports.simple_prop(\"Instance\", function (x) {\n    return x.properties != null;\n}));\nexports.Number = (function (superClass) {\n    extend(Number, superClass);\n    function Number() {\n        return Number.__super__.constructor.apply(this, arguments);\n    }\n    return Number;\n})(exports.simple_prop(\"Number\", function (x) {\n    return types_1.isNumber(x) || types_1.isBoolean(x);\n}));\nexports.Int = exports.Number;\nexports.Percent = (function (superClass) {\n    extend(Percent, superClass);\n    function Percent() {\n        return Percent.__super__.constructor.apply(this, arguments);\n    }\n    return Percent;\n})(exports.simple_prop(\"Number\", function (x) {\n    return (types_1.isNumber(x) || types_1.isBoolean(x)) && ((0 <= x && x <= 1.0));\n}));\nexports.String = (function (superClass) {\n    extend(String, superClass);\n    function String() {\n        return String.__super__.constructor.apply(this, arguments);\n    }\n    return String;\n})(exports.simple_prop(\"String\", types_1.isString));\nexports.Font = (function (superClass) {\n    extend(Font, superClass);\n    function Font() {\n        return Font.__super__.constructor.apply(this, arguments);\n    }\n    return Font;\n})(exports.String);\nexports.enum_prop = function (name, enum_values) {\n    var Enum;\n    return Enum = (function (superClass) {\n        extend(Enum, superClass);\n        function Enum() {\n            return Enum.__super__.constructor.apply(this, arguments);\n        }\n        Enum.prototype.name = name;\n        return Enum;\n    })(exports.simple_prop(name, function (x) {\n        return indexOf.call(enum_values, x) >= 0;\n    }));\n};\nexports.Anchor = (function (superClass) {\n    extend(Anchor, superClass);\n    function Anchor() {\n        return Anchor.__super__.constructor.apply(this, arguments);\n    }\n    return Anchor;\n})(exports.enum_prop(\"Anchor\", enums.LegendLocation));\nexports.AngleUnits = (function (superClass) {\n    extend(AngleUnits, superClass);\n    function AngleUnits() {\n        return AngleUnits.__super__.constructor.apply(this, arguments);\n    }\n    return AngleUnits;\n})(exports.enum_prop(\"AngleUnits\", enums.AngleUnits));\nexports.Direction = (function (superClass) {\n    extend(Direction, superClass);\n    function Direction() {\n        return Direction.__super__.constructor.apply(this, arguments);\n    }\n    Direction.prototype.transform = function (values) {\n        var i, j, ref, result;\n        result = new Uint8Array(values.length);\n        for (i = j = 0, ref = values.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            switch (values[i]) {\n                case 'clock':\n                    result[i] = false;\n                    break;\n                case 'anticlock':\n                    result[i] = true;\n            }\n        }\n        return result;\n    };\n    return Direction;\n})(exports.enum_prop(\"Direction\", enums.Direction));\nexports.Dimension = (function (superClass) {\n    extend(Dimension, superClass);\n    function Dimension() {\n        return Dimension.__super__.constructor.apply(this, arguments);\n    }\n    return Dimension;\n})(exports.enum_prop(\"Dimension\", enums.Dimension));\nexports.Dimensions = (function (superClass) {\n    extend(Dimensions, superClass);\n    function Dimensions() {\n        return Dimensions.__super__.constructor.apply(this, arguments);\n    }\n    return Dimensions;\n})(exports.enum_prop(\"Dimensions\", enums.Dimensions));\nexports.FontStyle = (function (superClass) {\n    extend(FontStyle, superClass);\n    function FontStyle() {\n        return FontStyle.__super__.constructor.apply(this, arguments);\n    }\n    return FontStyle;\n})(exports.enum_prop(\"FontStyle\", enums.FontStyle));\nexports.LatLon = (function (superClass) {\n    extend(LatLon, superClass);\n    function LatLon() {\n        return LatLon.__super__.constructor.apply(this, arguments);\n    }\n    return LatLon;\n})(exports.enum_prop(\"LatLon\", enums.LatLon));\nexports.LineCap = (function (superClass) {\n    extend(LineCap, superClass);\n    function LineCap() {\n        return LineCap.__super__.constructor.apply(this, arguments);\n    }\n    return LineCap;\n})(exports.enum_prop(\"LineCap\", enums.LineCap));\nexports.LineJoin = (function (superClass) {\n    extend(LineJoin, superClass);\n    function LineJoin() {\n        return LineJoin.__super__.constructor.apply(this, arguments);\n    }\n    return LineJoin;\n})(exports.enum_prop(\"LineJoin\", enums.LineJoin));\nexports.LegendLocation = (function (superClass) {\n    extend(LegendLocation, superClass);\n    function LegendLocation() {\n        return LegendLocation.__super__.constructor.apply(this, arguments);\n    }\n    return LegendLocation;\n})(exports.enum_prop(\"LegendLocation\", enums.LegendLocation));\nexports.Location = (function (superClass) {\n    extend(Location, superClass);\n    function Location() {\n        return Location.__super__.constructor.apply(this, arguments);\n    }\n    return Location;\n})(exports.enum_prop(\"Location\", enums.Location));\nexports.OutputBackend = (function (superClass) {\n    extend(OutputBackend, superClass);\n    function OutputBackend() {\n        return OutputBackend.__super__.constructor.apply(this, arguments);\n    }\n    return OutputBackend;\n})(exports.enum_prop(\"OutputBackend\", enums.OutputBackend));\nexports.Orientation = (function (superClass) {\n    extend(Orientation, superClass);\n    function Orientation() {\n        return Orientation.__super__.constructor.apply(this, arguments);\n    }\n    return Orientation;\n})(exports.enum_prop(\"Orientation\", enums.Orientation));\nexports.TextAlign = (function (superClass) {\n    extend(TextAlign, superClass);\n    function TextAlign() {\n        return TextAlign.__super__.constructor.apply(this, arguments);\n    }\n    return TextAlign;\n})(exports.enum_prop(\"TextAlign\", enums.TextAlign));\nexports.TextBaseline = (function (superClass) {\n    extend(TextBaseline, superClass);\n    function TextBaseline() {\n        return TextBaseline.__super__.constructor.apply(this, arguments);\n    }\n    return TextBaseline;\n})(exports.enum_prop(\"TextBaseline\", enums.TextBaseline));\nexports.RenderLevel = (function (superClass) {\n    extend(RenderLevel, superClass);\n    function RenderLevel() {\n        return RenderLevel.__super__.constructor.apply(this, arguments);\n    }\n    return RenderLevel;\n})(exports.enum_prop(\"RenderLevel\", enums.RenderLevel));\nexports.RenderMode = (function (superClass) {\n    extend(RenderMode, superClass);\n    function RenderMode() {\n        return RenderMode.__super__.constructor.apply(this, arguments);\n    }\n    return RenderMode;\n})(exports.enum_prop(\"RenderMode\", enums.RenderMode));\nexports.SizingMode = (function (superClass) {\n    extend(SizingMode, superClass);\n    function SizingMode() {\n        return SizingMode.__super__.constructor.apply(this, arguments);\n    }\n    return SizingMode;\n})(exports.enum_prop(\"SizingMode\", enums.SizingMode));\nexports.SpatialUnits = (function (superClass) {\n    extend(SpatialUnits, superClass);\n    function SpatialUnits() {\n        return SpatialUnits.__super__.constructor.apply(this, arguments);\n    }\n    return SpatialUnits;\n})(exports.enum_prop(\"SpatialUnits\", enums.SpatialUnits));\nexports.Distribution = (function (superClass) {\n    extend(Distribution, superClass);\n    function Distribution() {\n        return Distribution.__super__.constructor.apply(this, arguments);\n    }\n    return Distribution;\n})(exports.enum_prop(\"Distribution\", enums.DistributionTypes));\nexports.TransformStepMode = (function (superClass) {\n    extend(TransformStepMode, superClass);\n    function TransformStepMode() {\n        return TransformStepMode.__super__.constructor.apply(this, arguments);\n    }\n    return TransformStepMode;\n})(exports.enum_prop(\"TransformStepMode\", enums.TransformStepModes));\nexports.PaddingUnits = (function (superClass) {\n    extend(PaddingUnits, superClass);\n    function PaddingUnits() {\n        return PaddingUnits.__super__.constructor.apply(this, arguments);\n    }\n    return PaddingUnits;\n})(exports.enum_prop(\"PaddingUnits\", enums.PaddingUnits));\nexports.StartEnd = (function (superClass) {\n    extend(StartEnd, superClass);\n    function StartEnd() {\n        return StartEnd.__super__.constructor.apply(this, arguments);\n    }\n    return StartEnd;\n})(exports.enum_prop(\"StartEnd\", enums.StartEnd));\nexports.units_prop = function (name, valid_units, default_units) {\n    var UnitsProp;\n    return UnitsProp = (function (superClass) {\n        extend(UnitsProp, superClass);\n        function UnitsProp() {\n            return UnitsProp.__super__.constructor.apply(this, arguments);\n        }\n        UnitsProp.prototype.name = name;\n        UnitsProp.prototype.init = function () {\n            var units;\n            if (this.spec.units == null) {\n                this.spec.units = default_units;\n            }\n            this.units = this.spec.units;\n            units = this.spec.units;\n            if (indexOf.call(valid_units, units) < 0) {\n                throw new Error(name + \" units must be one of \" + valid_units + \", given invalid value: \" + units);\n            }\n        };\n        return UnitsProp;\n    })(exports.Number);\n};\nexports.Angle = (function (superClass) {\n    extend(Angle, superClass);\n    function Angle() {\n        return Angle.__super__.constructor.apply(this, arguments);\n    }\n    Angle.prototype.transform = function (values) {\n        var x;\n        if (this.spec.units === \"deg\") {\n            values = (function () {\n                var j, len, results;\n                results = [];\n                for (j = 0, len = values.length; j < len; j++) {\n                    x = values[j];\n                    results.push(x * Math.PI / 180.0);\n                }\n                return results;\n            })();\n        }\n        values = (function () {\n            var j, len, results;\n            results = [];\n            for (j = 0, len = values.length; j < len; j++) {\n                x = values[j];\n                results.push(-x);\n            }\n            return results;\n        })();\n        return Angle.__super__.transform.call(this, values);\n    };\n    return Angle;\n})(exports.units_prop(\"Angle\", enums.AngleUnits, \"rad\"));\nexports.Distance = (function (superClass) {\n    extend(Distance, superClass);\n    function Distance() {\n        return Distance.__super__.constructor.apply(this, arguments);\n    }\n    return Distance;\n})(exports.units_prop(\"Distance\", enums.SpatialUnits, \"data\"));\nexports.AngleSpec = (function (superClass) {\n    extend(AngleSpec, superClass);\n    function AngleSpec() {\n        return AngleSpec.__super__.constructor.apply(this, arguments);\n    }\n    AngleSpec.prototype.dataspec = true;\n    return AngleSpec;\n})(exports.Angle);\nexports.ColorSpec = (function (superClass) {\n    extend(ColorSpec, superClass);\n    function ColorSpec() {\n        return ColorSpec.__super__.constructor.apply(this, arguments);\n    }\n    ColorSpec.prototype.dataspec = true;\n    return ColorSpec;\n})(exports.Color);\nexports.DirectionSpec = (function (superClass) {\n    extend(DirectionSpec, superClass);\n    function DirectionSpec() {\n        return DirectionSpec.__super__.constructor.apply(this, arguments);\n    }\n    DirectionSpec.prototype.dataspec = true;\n    return DirectionSpec;\n})(exports.Distance);\nexports.DistanceSpec = (function (superClass) {\n    extend(DistanceSpec, superClass);\n    function DistanceSpec() {\n        return DistanceSpec.__super__.constructor.apply(this, arguments);\n    }\n    DistanceSpec.prototype.dataspec = true;\n    return DistanceSpec;\n})(exports.Distance);\nexports.FontSizeSpec = (function (superClass) {\n    extend(FontSizeSpec, superClass);\n    function FontSizeSpec() {\n        return FontSizeSpec.__super__.constructor.apply(this, arguments);\n    }\n    FontSizeSpec.prototype.dataspec = true;\n    return FontSizeSpec;\n})(exports.String);\nexports.NumberSpec = (function (superClass) {\n    extend(NumberSpec, superClass);\n    function NumberSpec() {\n        return NumberSpec.__super__.constructor.apply(this, arguments);\n    }\n    NumberSpec.prototype.dataspec = true;\n    return NumberSpec;\n})(exports.Number);\nexports.StringSpec = (function (superClass) {\n    extend(StringSpec, superClass);\n    function StringSpec() {\n        return StringSpec.__super__.constructor.apply(this, arguments);\n    }\n    StringSpec.prototype.dataspec = true;\n    return StringSpec;\n})(exports.String);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _fill_mixin, _gen_mixin, _line_mixin, _text_mixin;\nvar p = require(\"./properties\");\nvar object_1 = require(\"./util/object\");\n_gen_mixin = function (mixin, prefix) {\n    var name, result, type;\n    result = {};\n    if (prefix == null) {\n        prefix = \"\";\n    }\n    for (name in mixin) {\n        type = mixin[name];\n        result[prefix + name] = type;\n    }\n    return result;\n};\n_line_mixin = {\n    line_color: [p.ColorSpec, 'black'],\n    line_width: [p.NumberSpec, 1],\n    line_alpha: [p.NumberSpec, 1.0],\n    line_join: [p.LineJoin, 'miter'],\n    line_cap: [p.LineCap, 'butt'],\n    line_dash: [p.Array, []],\n    line_dash_offset: [p.Number, 0]\n};\nexports.line = function (prefix) {\n    return _gen_mixin(_line_mixin, prefix);\n};\n_fill_mixin = {\n    fill_color: [p.ColorSpec, 'gray'],\n    fill_alpha: [p.NumberSpec, 1.0]\n};\nexports.fill = function (prefix) {\n    return _gen_mixin(_fill_mixin, prefix);\n};\n_text_mixin = {\n    text_font: [p.Font, 'helvetica'],\n    text_font_size: [p.FontSizeSpec, '12pt'],\n    text_font_style: [p.FontStyle, 'normal'],\n    text_color: [p.ColorSpec, '#444444'],\n    text_alpha: [p.NumberSpec, 1.0],\n    text_align: [p.TextAlign, 'left'],\n    text_baseline: [p.TextBaseline, 'bottom']\n};\nexports.text = function (prefix) {\n    return _gen_mixin(_text_mixin, prefix);\n};\nexports.create = function (configs) {\n    var config, i, kind, len, prefix, ref, result;\n    result = {};\n    for (i = 0, len = configs.length; i < len; i++) {\n        config = configs[i];\n        ref = config.split(\":\"), kind = ref[0], prefix = ref[1];\n        if (this[kind] == null) {\n            throw new Error(\"Unknown property mixin kind '\" + kind + \"'\");\n        }\n        result = object_1.extend(result, this[kind](prefix));\n    }\n    return result;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar has_props_1 = require(\"./has_props\");\nvar logging_1 = require(\"./logging\");\nvar selector_1 = require(\"./selector\");\nvar hittest = require(\"./hittest\");\nvar p = require(\"./properties\");\nexports.SelectionManager = (function (superClass) {\n    extend(SelectionManager, superClass);\n    function SelectionManager() {\n        return SelectionManager.__super__.constructor.apply(this, arguments);\n    }\n    SelectionManager.prototype.type = 'SelectionManager';\n    SelectionManager.internal({\n        source: [p.Any]\n    });\n    SelectionManager.prototype.initialize = function (attrs, options) {\n        SelectionManager.__super__.initialize.call(this, attrs, options);\n        this.selector = new selector_1.Selector();\n        this.inspectors = {};\n        return this.last_inspection_was_empty = {};\n    };\n    SelectionManager.prototype.select = function (tool, renderer_views, geometry, final, append) {\n        var i, indices, indices_other, indices_renderers, j, len, r, source;\n        if (append == null) {\n            append = false;\n        }\n        source = this.source;\n        if (source !== renderer_views[0].model.data_source) {\n            logging_1.logger.warn('select called with mis-matched data sources');\n        }\n        indices_renderers = (function () {\n            var j, len, results;\n            results = [];\n            for (j = 0, len = renderer_views.length; j < len; j++) {\n                r = renderer_views[j];\n                results.push(r.hit_test(geometry));\n            }\n            return results;\n        })();\n        indices_renderers = (function () {\n            var j, len, results;\n            results = [];\n            for (j = 0, len = indices_renderers.length; j < len; j++) {\n                i = indices_renderers[j];\n                if (i !== null) {\n                    results.push(i);\n                }\n            }\n            return results;\n        })();\n        if (indices_renderers.length === 0) {\n            return false;\n        }\n        if (indices_renderers != null) {\n            indices = indices_renderers[0];\n            for (j = 0, len = indices_renderers.length; j < len; j++) {\n                indices_other = indices_renderers[j];\n                indices.update_through_union(indices_other);\n            }\n            this.selector.update(indices, final, append);\n            this.source.selected = this.selector.indices;\n            source.select.emit();\n            return !indices.is_empty();\n        }\n        else {\n            return false;\n        }\n    };\n    SelectionManager.prototype.inspect = function (tool, renderer_view, geometry, data) {\n        var indices, inspector, r_id, source;\n        source = this.source;\n        if (source !== renderer_view.model.data_source) {\n            logging_1.logger.warn('inspect called with mis-matched data sources');\n        }\n        indices = renderer_view.hit_test(geometry);\n        if (indices != null) {\n            r_id = renderer_view.model.id;\n            if (indices.is_empty()) {\n                if (this.last_inspection_was_empty[r_id] == null) {\n                    this.last_inspection_was_empty[r_id] = false;\n                }\n                if (this.last_inspection_was_empty[r_id]) {\n                    return;\n                }\n                else {\n                    this.last_inspection_was_empty[r_id] = true;\n                }\n            }\n            else {\n                this.last_inspection_was_empty[r_id] = false;\n            }\n            inspector = this._get_inspector(renderer_view);\n            inspector.update(indices, true, false, true);\n            this.source.setv({\n                inspected: inspector.indices\n            }, {\n                \"silent\": true\n            });\n            source.inspect.emit([indices, tool, renderer_view, source, data]);\n            return !indices.is_empty();\n        }\n        else {\n            return false;\n        }\n    };\n    SelectionManager.prototype.clear = function (rview) {\n        this.selector.clear();\n        return this.source.selected = hittest.create_hit_test_result();\n    };\n    SelectionManager.prototype._get_inspector = function (rview) {\n        var id;\n        id = rview.model.id;\n        if (this.inspectors[id] != null) {\n            return this.inspectors[id];\n        }\n        else {\n            return this.inspectors[id] = new selector_1.Selector();\n        }\n    };\n    return SelectionManager;\n})(has_props_1.HasProps);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar has_props_1 = require(\"./has_props\");\nvar hittest = require(\"./hittest\");\nvar p = require(\"./properties\");\nexports.Selector = (function (superClass) {\n    extend(Selector, superClass);\n    function Selector() {\n        return Selector.__super__.constructor.apply(this, arguments);\n    }\n    Selector.prototype.type = 'Selector';\n    Selector.prototype.update = function (indices, final, append, silent) {\n        if (silent == null) {\n            silent = false;\n        }\n        this.setv('timestamp', new Date(), {\n            silent: silent\n        });\n        this.setv('final', final, {\n            silent: silent\n        });\n        if (append) {\n            indices.update_through_union(this.indices);\n        }\n        return this.setv('indices', indices, {\n            silent: silent\n        });\n    };\n    Selector.prototype.clear = function () {\n        this.timestamp = new Date();\n        this.final = true;\n        return this.indices = hittest.create_hit_test_result();\n    };\n    Selector.internal({\n        indices: [\n            p.Any, function () {\n                return hittest.create_hit_test_result();\n            }\n        ],\n        final: [p.Boolean],\n        timestamp: [p.Any]\n    });\n    return Selector;\n})(has_props_1.HasProps);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Settings = (function () {\n    function Settings() {\n        this._dev = false;\n    }\n    Object.defineProperty(Settings.prototype, \"dev\", {\n        get: function () {\n            return this._dev;\n        },\n        set: function (dev) {\n            this._dev = dev;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Settings;\n}());\nexports.Settings = Settings;\nexports.settings = new Settings();\n","\"use strict\";\n// Based on https://github.com/phosphorjs/phosphor/blob/master/packages/signaling/src/index.ts\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar logging_1 = require(\"./logging\");\nvar callback_1 = require(\"./util/callback\");\nvar array_1 = require(\"./util/array\");\nvar Signal = (function () {\n    function Signal(sender, name) {\n        this.sender = sender;\n        this.name = name;\n    }\n    Signal.prototype.connect = function (slot, context) {\n        if (context === void 0) { context = null; }\n        if (!receiversForSender.has(this.sender)) {\n            receiversForSender.set(this.sender, []);\n        }\n        var receivers = receiversForSender.get(this.sender);\n        if (findConnection(receivers, this, slot, context) != null) {\n            return false;\n        }\n        var receiver = context || slot;\n        if (!sendersForReceiver.has(receiver)) {\n            sendersForReceiver.set(receiver, []);\n        }\n        var senders = sendersForReceiver.get(receiver);\n        var connection = { signal: this, slot: slot, context: context };\n        receivers.push(connection);\n        senders.push(connection);\n        return true;\n    };\n    Signal.prototype.disconnect = function (slot, context) {\n        if (context === void 0) { context = null; }\n        var receivers = receiversForSender.get(this.sender);\n        if (receivers == null || receivers.length === 0) {\n            return false;\n        }\n        var connection = findConnection(receivers, this, slot, context);\n        if (connection == null) {\n            return false;\n        }\n        var receiver = context || slot;\n        var senders = sendersForReceiver.get(receiver);\n        connection.signal = null;\n        scheduleCleanup(receivers);\n        scheduleCleanup(senders);\n        return true;\n    };\n    Signal.prototype.emit = function (args) {\n        var receivers = receiversForSender.get(this.sender) || [];\n        for (var _i = 0, receivers_1 = receivers; _i < receivers_1.length; _i++) {\n            var _a = receivers_1[_i], signal = _a.signal, slot = _a.slot, context = _a.context;\n            if (signal === this) {\n                slot.call(context, args, this.sender);\n            }\n        }\n    };\n    return Signal;\n}());\nexports.Signal = Signal;\n(function (Signal) {\n    function disconnectBetween(sender, receiver) {\n        var receivers = receiversForSender.get(sender);\n        if (receivers == null || receivers.length === 0)\n            return;\n        var senders = sendersForReceiver.get(receiver);\n        if (senders == null || senders.length === 0)\n            return;\n        for (var _i = 0, senders_1 = senders; _i < senders_1.length; _i++) {\n            var connection = senders_1[_i];\n            if (connection.signal == null)\n                return;\n            if (connection.signal.sender === sender)\n                connection.signal = null;\n        }\n        scheduleCleanup(receivers);\n        scheduleCleanup(senders);\n    }\n    Signal.disconnectBetween = disconnectBetween;\n    function disconnectSender(sender) {\n        var receivers = receiversForSender.get(sender);\n        if (receivers == null || receivers.length === 0)\n            return;\n        for (var _i = 0, receivers_2 = receivers; _i < receivers_2.length; _i++) {\n            var connection = receivers_2[_i];\n            if (connection.signal == null)\n                return;\n            var receiver = connection.context || connection.slot;\n            connection.signal = null;\n            scheduleCleanup(sendersForReceiver.get(receiver));\n        }\n        scheduleCleanup(receivers);\n    }\n    Signal.disconnectSender = disconnectSender;\n    function disconnectReceiver(receiver) {\n        var senders = sendersForReceiver.get(receiver);\n        if (senders == null || senders.length === 0)\n            return;\n        for (var _i = 0, senders_2 = senders; _i < senders_2.length; _i++) {\n            var connection = senders_2[_i];\n            if (connection.signal == null)\n                return;\n            var sender = connection.signal.sender;\n            connection.signal = null;\n            scheduleCleanup(receiversForSender.get(sender));\n        }\n        scheduleCleanup(senders);\n    }\n    Signal.disconnectReceiver = disconnectReceiver;\n    function disconnectAll(obj) {\n        var receivers = receiversForSender.get(obj);\n        if (receivers != null && receivers.length !== 0) {\n            for (var _i = 0, receivers_3 = receivers; _i < receivers_3.length; _i++) {\n                var connection = receivers_3[_i];\n                connection.signal = null;\n            }\n            scheduleCleanup(receivers);\n        }\n        var senders = sendersForReceiver.get(obj);\n        if (senders != null && senders.length !== 0) {\n            for (var _a = 0, senders_3 = senders; _a < senders_3.length; _a++) {\n                var connection = senders_3[_a];\n                connection.signal = null;\n            }\n            scheduleCleanup(senders);\n        }\n    }\n    Signal.disconnectAll = disconnectAll;\n})(Signal = exports.Signal || (exports.Signal = {}));\nexports.Signal = Signal;\nvar Signalable;\n(function (Signalable) {\n    function connect(signal, slot) {\n        return signal.connect(slot, this);\n    }\n    Signalable.connect = connect;\n    function listenTo(event, slot) {\n        logging_1.logger.warn(\"obj.listenTo('event', handler) is deprecated, use obj.connect(signal, slot)\");\n        var _a = event.split(\":\"), name = _a[0], attr = _a[1];\n        var signal = (attr == null) ? this[name] : this.properties[attr][name];\n        return signal.connect(slot, this);\n    }\n    Signalable.listenTo = listenTo;\n    function trigger(event, args) {\n        logging_1.logger.warn(\"obj.trigger('event', args) is deprecated, use signal.emit(args)\");\n        var _a = event.split(\":\"), name = _a[0], attr = _a[1];\n        var signal = (attr == null) ? this[name] : this.properties[attr][name];\n        return signal.emit(args);\n    }\n    Signalable.trigger = trigger;\n})(Signalable = exports.Signalable || (exports.Signalable = {}));\nvar receiversForSender = new WeakMap();\nvar sendersForReceiver = new WeakMap();\nfunction findConnection(conns, signal, slot, context) {\n    return array_1.find(conns, function (conn) { return conn.signal === signal && conn.slot === slot && conn.context === context; });\n}\nvar dirtySet = new Set();\nfunction scheduleCleanup(connections) {\n    if (dirtySet.size === 0) {\n        callback_1.defer(cleanupDirtySet);\n    }\n    dirtySet.add(connections);\n}\nfunction cleanupDirtySet() {\n    dirtySet.forEach(function (connections) {\n        array_1.removeBy(connections, function (connection) { return connection.signal == null; });\n    });\n    dirtySet.clear();\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Hammer = require(\"hammerjs\");\nvar signaling_1 = require(\"./signaling\");\nvar logging_1 = require(\"./logging\");\nvar dom_1 = require(\"./dom\");\nvar wheel_1 = require(\"./util/wheel\");\nvar object_1 = require(\"./util/object\");\nvar bokeh_events_1 = require(\"./bokeh_events\");\nexports.UIEvents = (function () {\n    function UIEvents(plot_view, toolbar, hit_area, plot) {\n        this.plot_view = plot_view;\n        this.toolbar = toolbar;\n        this.hit_area = hit_area;\n        this.plot = plot;\n        this.tap = new signaling_1.Signal(this, 'tap');\n        this.doubletap = new signaling_1.Signal(this, 'doubletap');\n        this.press = new signaling_1.Signal(this, 'press');\n        this.pan_start = new signaling_1.Signal(this, 'pan:start');\n        this.pan = new signaling_1.Signal(this, 'pan');\n        this.pan_end = new signaling_1.Signal(this, 'pan:end');\n        this.pinch_start = new signaling_1.Signal(this, 'pinch:start');\n        this.pinch = new signaling_1.Signal(this, 'pinch');\n        this.pinch_end = new signaling_1.Signal(this, 'pinch:end');\n        this.rotate_start = new signaling_1.Signal(this, 'rotate:start');\n        this.rotate = new signaling_1.Signal(this, 'rotate');\n        this.rotate_end = new signaling_1.Signal(this, 'rotate:end');\n        this.move_enter = new signaling_1.Signal(this, 'move:enter');\n        this.move = new signaling_1.Signal(this, 'move');\n        this.move_exit = new signaling_1.Signal(this, 'move:exit');\n        this.scroll = new signaling_1.Signal(this, 'scroll');\n        this.keydown = new signaling_1.Signal(this, 'keydown');\n        this.keyup = new signaling_1.Signal(this, 'keyup');\n        this._configure_hammerjs();\n    }\n    UIEvents.prototype._configure_hammerjs = function () {\n        this.hammer = new Hammer(this.hit_area);\n        this.hammer.get('doubletap').recognizeWith('tap');\n        this.hammer.get('tap').requireFailure('doubletap');\n        this.hammer.get('doubletap').dropRequireFailure('tap');\n        this.hammer.on('doubletap', (function (_this) {\n            return function (e) {\n                return _this._doubletap(e);\n            };\n        })(this));\n        this.hammer.on('tap', (function (_this) {\n            return function (e) {\n                return _this._tap(e);\n            };\n        })(this));\n        this.hammer.on('press', (function (_this) {\n            return function (e) {\n                return _this._press(e);\n            };\n        })(this));\n        this.hammer.get('pan').set({\n            direction: Hammer.DIRECTION_ALL\n        });\n        this.hammer.on('panstart', (function (_this) {\n            return function (e) {\n                return _this._pan_start(e);\n            };\n        })(this));\n        this.hammer.on('pan', (function (_this) {\n            return function (e) {\n                return _this._pan(e);\n            };\n        })(this));\n        this.hammer.on('panend', (function (_this) {\n            return function (e) {\n                return _this._pan_end(e);\n            };\n        })(this));\n        this.hammer.get('pinch').set({\n            enable: true\n        });\n        this.hammer.on('pinchstart', (function (_this) {\n            return function (e) {\n                return _this._pinch_start(e);\n            };\n        })(this));\n        this.hammer.on('pinch', (function (_this) {\n            return function (e) {\n                return _this._pinch(e);\n            };\n        })(this));\n        this.hammer.on('pinchend', (function (_this) {\n            return function (e) {\n                return _this._pinch_end(e);\n            };\n        })(this));\n        this.hammer.get('rotate').set({\n            enable: true\n        });\n        this.hammer.on('rotatestart', (function (_this) {\n            return function (e) {\n                return _this._rotate_start(e);\n            };\n        })(this));\n        this.hammer.on('rotate', (function (_this) {\n            return function (e) {\n                return _this._rotate(e);\n            };\n        })(this));\n        this.hammer.on('rotateend', (function (_this) {\n            return function (e) {\n                return _this._rotate_end(e);\n            };\n        })(this));\n        this.hit_area.addEventListener(\"mousemove\", (function (_this) {\n            return function (e) {\n                return _this._mouse_move(e);\n            };\n        })(this));\n        this.hit_area.addEventListener(\"mouseenter\", (function (_this) {\n            return function (e) {\n                return _this._mouse_enter(e);\n            };\n        })(this));\n        this.hit_area.addEventListener(\"mouseleave\", (function (_this) {\n            return function (e) {\n                return _this._mouse_exit(e);\n            };\n        })(this));\n        this.hit_area.addEventListener(\"wheel\", (function (_this) {\n            return function (e) {\n                return _this._mouse_wheel(e);\n            };\n        })(this));\n        document.addEventListener(\"keydown\", (function (_this) {\n            return function (e) {\n                return _this._key_down(e);\n            };\n        })(this));\n        return document.addEventListener(\"keyup\", (function (_this) {\n            return function (e) {\n                return _this._key_up(e);\n            };\n        })(this));\n    };\n    UIEvents.prototype.register_tool = function (tool_view) {\n        var et, id, type, v;\n        et = tool_view.model.event_type;\n        id = tool_view.model.id;\n        type = tool_view.model.type;\n        if (et == null) {\n            logging_1.logger.debug(\"Button tool: \" + type);\n            return;\n        }\n        v = tool_view;\n        switch (et) {\n            case \"pan\":\n                if (v._pan_start != null) {\n                    v.connect(this.pan_start, function (x) {\n                        if (x.id === id) {\n                            return v._pan_start(x.e);\n                        }\n                    });\n                }\n                if (v._pan != null) {\n                    v.connect(this.pan, function (x) {\n                        if (x.id === id) {\n                            return v._pan(x.e);\n                        }\n                    });\n                }\n                if (v._pan_end != null) {\n                    v.connect(this.pan_end, function (x) {\n                        if (x.id === id) {\n                            return v._pan_end(x.e);\n                        }\n                    });\n                }\n                break;\n            case \"pinch\":\n                if (v._pinch_start != null) {\n                    v.connect(this.pinch_start, function (x) {\n                        if (x.id === id) {\n                            return v._pinch_start(x.e);\n                        }\n                    });\n                }\n                if (v._pinch != null) {\n                    v.connect(this.pinch, function (x) {\n                        if (x.id === id) {\n                            return v._pinch(x.e);\n                        }\n                    });\n                }\n                if (v._pinch_end != null) {\n                    v.connect(this.pinch_end, function (x) {\n                        if (x.id === id) {\n                            return v._pinch_end(x.e);\n                        }\n                    });\n                }\n                break;\n            case \"rotate\":\n                if (v._rotate_start != null) {\n                    v.connect(this.rotate_start, function (x) {\n                        if (x.id === id) {\n                            return v._rotate_start(x.e);\n                        }\n                    });\n                }\n                if (v._rotate != null) {\n                    v.connect(this.rotate, function (x) {\n                        if (x.id === id) {\n                            return v._rotate(x.e);\n                        }\n                    });\n                }\n                if (v._rotate_end != null) {\n                    v.connect(this.rotate_end, function (x) {\n                        if (x.id === id) {\n                            return v._rotate_end(x.e);\n                        }\n                    });\n                }\n                break;\n            case \"move\":\n                if (v._move_enter != null) {\n                    v.connect(this.move_enter, function (x) {\n                        if (x.id === id) {\n                            return v._move_enter(x.e);\n                        }\n                    });\n                }\n                if (v._move != null) {\n                    v.connect(this.move, function (x) {\n                        if (x.id === id) {\n                            return v._move(x.e);\n                        }\n                    });\n                }\n                if (v._move_exit != null) {\n                    v.connect(this.move_exit, function (x) {\n                        if (x.id === id) {\n                            return v._move_exit(x.e);\n                        }\n                    });\n                }\n                break;\n            case \"tap\":\n                if (v._tap != null) {\n                    v.connect(this.tap, function (x) {\n                        if (x.id === id) {\n                            return v._tap(x.e);\n                        }\n                    });\n                }\n                break;\n            case \"press\":\n                if (v._press != null) {\n                    v.connect(this.press, function (x) {\n                        if (x.id === id) {\n                            return v._press(x.e);\n                        }\n                    });\n                }\n                break;\n            case \"scroll\":\n                if (v._scroll != null) {\n                    v.connect(this.scroll, function (x) {\n                        if (x.id === id) {\n                            return v._scroll(x.e);\n                        }\n                    });\n                }\n                break;\n            default:\n                throw new Error(\"unsupported event_type: \" + ev);\n        }\n        if (v._doubletap != null) {\n            v.connect(this.doubletap, function (x) {\n                return v._doubletap(x.e);\n            });\n        }\n        if (v._keydown != null) {\n            v.connect(this.keydown, function (x) {\n                return v._keydown(x.e);\n            });\n        }\n        if (v._keyup != null) {\n            v.connect(this.keyup, function (x) {\n                return v._keyup(x.e);\n            });\n        }\n        if ('ontouchstart' in window || navigator.maxTouchPoints > 0) {\n            if (et === 'pinch') {\n                logging_1.logger.debug(\"Registering scroll on touch screen\");\n                return v.connect(this.scroll, function (x) {\n                    if (x.id === id) {\n                        return v._scroll(x.e);\n                    }\n                });\n            }\n        }\n    };\n    UIEvents.prototype._hit_test_renderers = function (sx, sy) {\n        var i, ref, ref1, view;\n        ref = this.plot_view.get_renderer_views();\n        for (i = ref.length - 1; i >= 0; i += -1) {\n            view = ref[i];\n            if (((ref1 = view.model.level) === 'annotation' || ref1 === 'overlay') && (view.bbox != null)) {\n                if (view.bbox().contains(sx, sy)) {\n                    return view;\n                }\n            }\n        }\n        return null;\n    };\n    UIEvents.prototype._hit_test_frame = function (sx, sy) {\n        var canvas, vx, vy;\n        canvas = this.plot_view.canvas;\n        vx = canvas.sx_to_vx(sx);\n        vy = canvas.sy_to_vy(sy);\n        return this.plot_view.frame.contains(vx, vy);\n    };\n    UIEvents.prototype._trigger = function (signal, e) {\n        var active_gesture, active_inspectors, base, base_type, cursor, event_type, i, inspector, len, results, view;\n        event_type = signal.name;\n        base_type = event_type.split(\":\")[0];\n        view = this._hit_test_renderers(e.bokeh.sx, e.bokeh.sy);\n        switch (base_type) {\n            case \"move\":\n                active_inspectors = this.toolbar.inspectors.filter(function (t) {\n                    return t.active;\n                });\n                cursor = \"default\";\n                if (view != null) {\n                    if (view.model.cursor != null) {\n                        cursor = view.model.cursor();\n                    }\n                    if (!object_1.isEmpty(active_inspectors)) {\n                        signal = this.move_exit;\n                        event_type = signal.name;\n                    }\n                }\n                else if (this._hit_test_frame(e.bokeh.sx, e.bokeh.sy)) {\n                    if (!object_1.isEmpty(active_inspectors)) {\n                        cursor = \"crosshair\";\n                    }\n                }\n                this.plot_view.set_cursor(cursor);\n                results = [];\n                for (i = 0, len = active_inspectors.length; i < len; i++) {\n                    inspector = active_inspectors[i];\n                    results.push(this.trigger(signal, e, inspector.id));\n                }\n                return results;\n                break;\n            case \"tap\":\n                if (view != null) {\n                    if (typeof view.on_hit === \"function\") {\n                        view.on_hit(e.bokeh.sx, e.bokeh.sy);\n                    }\n                }\n                active_gesture = this.toolbar.gestures[base_type].active;\n                if (active_gesture != null) {\n                    return this.trigger(signal, e, active_gesture.id);\n                }\n                break;\n            case \"scroll\":\n                base = 'ontouchstart' in window || navigator.maxTouchPoints > 0 ? \"pinch\" : \"scroll\";\n                active_gesture = this.toolbar.gestures[base].active;\n                if (active_gesture != null) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    return this.trigger(signal, e, active_gesture.id);\n                }\n                break;\n            default:\n                active_gesture = this.toolbar.gestures[base_type].active;\n                if (active_gesture != null) {\n                    return this.trigger(signal, e, active_gesture.id);\n                }\n        }\n    };\n    UIEvents.prototype.trigger = function (signal, event, id) {\n        if (id == null) {\n            id = null;\n        }\n        return signal.emit({\n            id: id,\n            e: event\n        });\n    };\n    UIEvents.prototype._bokify_hammer = function (e, extras) {\n        var event_cls, left, ref, top, x, y;\n        if (extras == null) {\n            extras = {};\n        }\n        if (e.pointerType === 'mouse') {\n            x = e.srcEvent.pageX;\n            y = e.srcEvent.pageY;\n        }\n        else {\n            x = e.pointers[0].pageX;\n            y = e.pointers[0].pageY;\n        }\n        ref = dom_1.offset(e.target), left = ref.left, top = ref.top;\n        e.bokeh = {\n            sx: x - left,\n            sy: y - top\n        };\n        e.bokeh = object_1.extend(e.bokeh, extras);\n        event_cls = bokeh_events_1.BokehEvent.event_class(e);\n        if (event_cls != null) {\n            return this.plot.trigger_event(event_cls.from_event(e));\n        }\n        else {\n            return logging_1.logger.debug('Unhandled event of type ' + e.type);\n        }\n    };\n    UIEvents.prototype._bokify_point_event = function (e, extras) {\n        var event_cls, left, ref, top;\n        if (extras == null) {\n            extras = {};\n        }\n        ref = dom_1.offset(e.currentTarget), left = ref.left, top = ref.top;\n        e.bokeh = {\n            sx: e.pageX - left,\n            sy: e.pageY - top\n        };\n        e.bokeh = object_1.extend(e.bokeh, extras);\n        event_cls = bokeh_events_1.BokehEvent.event_class(e);\n        if (event_cls != null) {\n            return this.plot.trigger_event(event_cls.from_event(e));\n        }\n        else {\n            return logging_1.logger.debug('Unhandled event of type ' + e.type);\n        }\n    };\n    UIEvents.prototype._tap = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.tap, e);\n    };\n    UIEvents.prototype._doubletap = function (e) {\n        this._bokify_hammer(e);\n        return this.trigger(this.doubletap, e);\n    };\n    UIEvents.prototype._press = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.press, e);\n    };\n    UIEvents.prototype._pan_start = function (e) {\n        this._bokify_hammer(e);\n        e.bokeh.sx -= e.deltaX;\n        e.bokeh.sy -= e.deltaY;\n        return this._trigger(this.pan_start, e);\n    };\n    UIEvents.prototype._pan = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.pan, e);\n    };\n    UIEvents.prototype._pan_end = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.pan_end, e);\n    };\n    UIEvents.prototype._pinch_start = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.pinch_start, e);\n    };\n    UIEvents.prototype._pinch = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.pinch, e);\n    };\n    UIEvents.prototype._pinch_end = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.pinch_end, e);\n    };\n    UIEvents.prototype._rotate_start = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.rotate_start, e);\n    };\n    UIEvents.prototype._rotate = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.rotate, e);\n    };\n    UIEvents.prototype._rotate_end = function (e) {\n        this._bokify_hammer(e);\n        return this._trigger(this.rotate_end, e);\n    };\n    UIEvents.prototype._mouse_enter = function (e) {\n        this._bokify_point_event(e);\n        return this._trigger(this.move_enter, e);\n    };\n    UIEvents.prototype._mouse_move = function (e) {\n        this._bokify_point_event(e);\n        return this._trigger(this.move, e);\n    };\n    UIEvents.prototype._mouse_exit = function (e) {\n        this._bokify_point_event(e);\n        return this._trigger(this.move_exit, e);\n    };\n    UIEvents.prototype._mouse_wheel = function (e) {\n        this._bokify_point_event(e, {\n            delta: wheel_1.getDeltaY(e)\n        });\n        return this._trigger(this.scroll, e);\n    };\n    UIEvents.prototype._key_down = function (e) {\n        return this.trigger(this.keydown, e);\n    };\n    UIEvents.prototype._key_up = function (e) {\n        return this.trigger(this.keyup, e);\n    };\n    return UIEvents;\n})();\n","\"use strict\";\n//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar math_1 = require(\"./math\");\nvar slice = Array.prototype.slice;\nfunction copy(array /*| TypedArray*/) {\n    return slice.call(array);\n}\nexports.copy = copy;\nfunction concat(arrays) {\n    return (_a = []).concat.apply(_a, arrays);\n    var _a;\n}\nexports.concat = concat;\nfunction contains(array, value) {\n    return array.indexOf(value) >= 0;\n}\nexports.contains = contains;\nfunction nth(array, index) {\n    return array[index >= 0 ? index : array.length + index];\n}\nexports.nth = nth;\nfunction zip(As, Bs) {\n    var n = Math.min(As.length, Bs.length);\n    var ABs = new Array(n);\n    for (var i = 0; i < n; i++) {\n        ABs[i] = [As[i], Bs[i]];\n    }\n    return ABs;\n}\nexports.zip = zip;\nfunction unzip(ABs) {\n    var n = ABs.length;\n    var As = new Array(n);\n    var Bs = new Array(n);\n    for (var i = 0; i < n; i++) {\n        _a = ABs[i], As[i] = _a[0], Bs[i] = _a[1];\n    }\n    return [As, Bs];\n    var _a;\n}\nexports.unzip = unzip;\nfunction range(start, stop, step) {\n    if (step === void 0) { step = 1; }\n    if (stop == null) {\n        stop = start;\n        start = 0;\n    }\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n    for (var i = 0; i < length; i++, start += step) {\n        range[i] = start;\n    }\n    return range;\n}\nexports.range = range;\nfunction linspace(start, stop, num) {\n    if (num === void 0) { num = 100; }\n    var step = (stop - start) / (num - 1);\n    var array = new Array(num);\n    for (var i = 0; i < num; i++) {\n        array[i] = start + step * i;\n    }\n    return array;\n}\nexports.linspace = linspace;\nfunction transpose(array) {\n    var rows = array.length;\n    var cols = array[0].length;\n    var transposed = [];\n    for (var j = 0; j < cols; j++) {\n        transposed[j] = [];\n        for (var i = 0; i < rows; i++) {\n            transposed[j][i] = array[i][j];\n        }\n    }\n    return transposed;\n}\nexports.transpose = transpose;\nfunction sum(array) {\n    return array.reduce(function (a, b) { return a + b; }, 0);\n}\nexports.sum = sum;\nfunction cumsum(array) {\n    var result = [];\n    array.reduce(function (a, b, i) { return result[i] = a + b; }, 0);\n    return result;\n}\nexports.cumsum = cumsum;\nfunction min(array) {\n    var value;\n    var result = Infinity;\n    for (var i = 0, length_1 = array.length; i < length_1; i++) {\n        value = array[i];\n        if (value < result) {\n            result = value;\n        }\n    }\n    return result;\n}\nexports.min = min;\nfunction minBy(array, key) {\n    if (array.length == 0)\n        throw new Error(\"minBy() called with an empty array\");\n    var result = array[0];\n    var resultComputed = key(result);\n    for (var i = 1, length_2 = array.length; i < length_2; i++) {\n        var value = array[i];\n        var computed = key(value);\n        if (computed < resultComputed) {\n            result = value;\n            resultComputed = computed;\n        }\n    }\n    return result;\n}\nexports.minBy = minBy;\nfunction max(array) {\n    var value;\n    var result = -Infinity;\n    for (var i = 0, length_3 = array.length; i < length_3; i++) {\n        value = array[i];\n        if (value > result) {\n            result = value;\n        }\n    }\n    return result;\n}\nexports.max = max;\nfunction maxBy(array, key) {\n    if (array.length == 0)\n        throw new Error(\"maxBy() called with an empty array\");\n    var result = array[0];\n    var resultComputed = key(result);\n    for (var i = 1, length_4 = array.length; i < length_4; i++) {\n        var value = array[i];\n        var computed = key(value);\n        if (computed > resultComputed) {\n            result = value;\n            resultComputed = computed;\n        }\n    }\n    return result;\n}\nexports.maxBy = maxBy;\nfunction argmin(array) {\n    return minBy(range(array.length), function (i) { return array[i]; });\n}\nexports.argmin = argmin;\nfunction argmax(array) {\n    return maxBy(range(array.length), function (i) { return array[i]; });\n}\nexports.argmax = argmax;\nfunction all(array, predicate) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var item = array_1[_i];\n        if (!predicate(item))\n            return false;\n    }\n    return true;\n}\nexports.all = all;\nfunction any(array, predicate) {\n    for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {\n        var item = array_2[_i];\n        if (predicate(item))\n            return true;\n    }\n    return false;\n}\nexports.any = any;\nfunction findIndexFactory(dir) {\n    return function (array, predicate) {\n        var length = array.length;\n        var index = dir > 0 ? 0 : length - 1;\n        for (; index >= 0 && index < length; index += dir) {\n            if (predicate(array[index]))\n                return index;\n        }\n        return -1;\n    };\n}\nexports.findIndex = findIndexFactory(1);\nexports.findLastIndex = findIndexFactory(-1);\nfunction find(array, predicate) {\n    var index = exports.findIndex(array, predicate);\n    return index == -1 ? undefined : array[index];\n}\nexports.find = find;\nfunction findLast(array, predicate) {\n    var index = exports.findLastIndex(array, predicate);\n    return index == -1 ? undefined : array[index];\n}\nexports.findLast = findLast;\nfunction sortedIndex(array, value) {\n    var low = 0;\n    var high = array.length;\n    while (low < high) {\n        var mid = Math.floor((low + high) / 2);\n        if (array[mid] < value)\n            low = mid + 1;\n        else\n            high = mid;\n    }\n    return low;\n}\nexports.sortedIndex = sortedIndex;\nfunction sortBy(array, key) {\n    var tmp = array.map(function (value, index) {\n        return { value: value, index: index, key: key(value) };\n    });\n    tmp.sort(function (left, right) {\n        var a = left.key;\n        var b = right.key;\n        if (a !== b) {\n            if (a > b || a === undefined)\n                return 1;\n            if (a < b || b === undefined)\n                return -1;\n        }\n        return left.index - right.index;\n    });\n    return tmp.map(function (item) { return item.value; });\n}\nexports.sortBy = sortBy;\nfunction uniq(array) {\n    var result = [];\n    for (var _i = 0, array_3 = array; _i < array_3.length; _i++) {\n        var value = array_3[_i];\n        if (!contains(result, value)) {\n            result.push(value);\n        }\n    }\n    return result;\n}\nexports.uniq = uniq;\nfunction uniqBy(array, key) {\n    var result = [];\n    var seen = [];\n    for (var _i = 0, array_4 = array; _i < array_4.length; _i++) {\n        var value = array_4[_i];\n        var computed = key(value);\n        if (!contains(seen, computed)) {\n            seen.push(computed);\n            result.push(value);\n        }\n    }\n    return result;\n}\nexports.uniqBy = uniqBy;\nfunction union() {\n    var arrays = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        arrays[_i] = arguments[_i];\n    }\n    return uniq(concat(arrays));\n}\nexports.union = union;\nfunction intersection(array) {\n    var arrays = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        arrays[_i - 1] = arguments[_i];\n    }\n    var result = [];\n    top: for (var _a = 0, array_5 = array; _a < array_5.length; _a++) {\n        var item = array_5[_a];\n        if (contains(result, item))\n            continue;\n        for (var _b = 0, arrays_1 = arrays; _b < arrays_1.length; _b++) {\n            var other = arrays_1[_b];\n            if (!contains(other, item))\n                continue top;\n        }\n        result.push(item);\n    }\n    return result;\n}\nexports.intersection = intersection;\nfunction difference(array) {\n    var arrays = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        arrays[_i - 1] = arguments[_i];\n    }\n    var rest = concat(arrays);\n    return array.filter(function (value) { return !contains(rest, value); });\n}\nexports.difference = difference;\nfunction removeBy(array, key) {\n    for (var i = 0; i < array.length;) {\n        if (key(array[i]))\n            array.splice(i, 1);\n        else\n            i++;\n    }\n}\nexports.removeBy = removeBy;\n// Shuffle a collection, using the modern version of the\n// [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\nfunction shuffle(array) {\n    var length = array.length;\n    var shuffled = new Array(length);\n    for (var i = 0; i < length; i++) {\n        var rand = math_1.randomIn(0, i);\n        if (rand !== i)\n            shuffled[i] = shuffled[rand];\n        shuffled[rand] = array[i];\n    }\n    return shuffled;\n}\nexports.shuffle = shuffle;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction empty() {\n    return {\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity,\n    };\n}\nexports.empty = empty;\nfunction positive_x() {\n    return {\n        minX: Number.MIN_VALUE,\n        minY: -Infinity,\n        maxX: Infinity,\n        maxY: Infinity,\n    };\n}\nexports.positive_x = positive_x;\nfunction positive_y() {\n    return {\n        minX: -Infinity,\n        minY: Number.MIN_VALUE,\n        maxX: Infinity,\n        maxY: Infinity,\n    };\n}\nexports.positive_y = positive_y;\nfunction union(a, b) {\n    return {\n        minX: Math.min(a.minX, b.minX),\n        maxX: Math.max(a.maxX, b.maxX),\n        minY: Math.min(a.minY, b.minY),\n        maxY: Math.max(a.maxY, b.maxY),\n    };\n}\nexports.union = union;\nvar BBox = (function () {\n    function BBox(bbox) {\n        if (bbox == null) {\n            this.x0 = Infinity;\n            this.y0 = -Infinity;\n            this.x1 = Infinity;\n            this.y1 = -Infinity;\n        }\n        else {\n            this.x0 = bbox.x0;\n            this.y0 = bbox.y0;\n            this.x1 = bbox.x1;\n            this.y1 = bbox.y1;\n        }\n    }\n    Object.defineProperty(BBox.prototype, \"minX\", {\n        get: function () { return this.x0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"minY\", {\n        get: function () { return this.y0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"maxX\", {\n        get: function () { return this.x1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"maxY\", {\n        get: function () { return this.y1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"pt0\", {\n        get: function () { return [this.x0, this.y0]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"pt1\", {\n        get: function () { return [this.x1, this.y1]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"x\", {\n        get: function () { return this.x0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"y\", {\n        get: function () { return this.x1; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"width\", {\n        get: function () { return this.x1 - this.x0; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BBox.prototype, \"height\", {\n        get: function () { return this.y1 - this.y0; },\n        enumerable: true,\n        configurable: true\n    });\n    BBox.prototype.contains = function (x, y) {\n        return x >= this.x0 && x <= this.x1 && y >= this.y0 && y <= this.y1;\n    };\n    BBox.prototype.union = function (that) {\n        return new BBox({\n            x0: Math.min(this.x0, that.x0),\n            y0: Math.min(this.y0, that.y0),\n            x1: Math.max(this.x1, that.x1),\n            y1: Math.max(this.y1, that.y1),\n        });\n    };\n    return BBox;\n}());\nexports.BBox = BBox;\n","\"use strict\";\n//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction delay(func, wait) {\n    return setTimeout(func, wait);\n}\nexports.delay = delay;\nvar _defer = typeof requestAnimationFrame === \"function\" ? requestAnimationFrame : setImmediate;\nfunction defer(func) {\n    return _defer(func);\n}\nexports.defer = defer;\nfunction throttle(func, wait, options) {\n    if (options === void 0) { options = {}; }\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    var later = function () {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout)\n            context = args = null;\n    };\n    return function () {\n        var now = Date.now();\n        if (!previous && options.leading === false)\n            previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout)\n                context = args = null;\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\nexports.throttle = throttle;\nfunction once(func) {\n    var done = false;\n    var memo;\n    return function () {\n        if (!done) {\n            done = true;\n            memo = func();\n        }\n        return memo;\n    };\n}\nexports.once = once;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fixup_ellipse, fixup_image_smoothing, fixup_line_dash, fixup_line_dash_offset, fixup_measure_text;\nfixup_line_dash = function (ctx) {\n    if (!ctx.setLineDash) {\n        ctx.setLineDash = function (dash) {\n            ctx.mozDash = dash;\n            return ctx.webkitLineDash = dash;\n        };\n    }\n    if (!ctx.getLineDash) {\n        return ctx.getLineDash = function () {\n            return ctx.mozDash;\n        };\n    }\n};\nfixup_line_dash_offset = function (ctx) {\n    ctx.setLineDashOffset = function (dash_offset) {\n        ctx.lineDashOffset = dash_offset;\n        ctx.mozDashOffset = dash_offset;\n        return ctx.webkitLineDashOffset = dash_offset;\n    };\n    return ctx.getLineDashOffset = function () {\n        return ctx.mozDashOffset;\n    };\n};\nfixup_image_smoothing = function (ctx) {\n    ctx.setImageSmoothingEnabled = function (value) {\n        ctx.imageSmoothingEnabled = value;\n        ctx.mozImageSmoothingEnabled = value;\n        ctx.oImageSmoothingEnabled = value;\n        return ctx.webkitImageSmoothingEnabled = value;\n    };\n    return ctx.getImageSmoothingEnabled = function () {\n        var ref;\n        return (ref = ctx.imageSmoothingEnabled) != null ? ref : true;\n    };\n};\nfixup_measure_text = function (ctx) {\n    if (ctx.measureText && (ctx.html5MeasureText == null)) {\n        ctx.html5MeasureText = ctx.measureText;\n        return ctx.measureText = function (text) {\n            var textMetrics;\n            textMetrics = ctx.html5MeasureText(text);\n            textMetrics.ascent = ctx.html5MeasureText(\"m\").width * 1.6;\n            return textMetrics;\n        };\n    }\n};\nfixup_ellipse = function (ctx) {\n    var ellipse_bezier;\n    ellipse_bezier = function (x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {\n        var c, rx, ry;\n        if (anticlockwise == null) {\n            anticlockwise = false;\n        }\n        c = 0.551784;\n        ctx.translate(x, y);\n        ctx.rotate(rotation);\n        rx = radiusX;\n        ry = radiusY;\n        if (anticlockwise) {\n            rx = -radiusX;\n            ry = -radiusY;\n        }\n        ctx.moveTo(-rx, 0);\n        ctx.bezierCurveTo(-rx, ry * c, -rx * c, ry, 0, ry);\n        ctx.bezierCurveTo(rx * c, ry, rx, ry * c, rx, 0);\n        ctx.bezierCurveTo(rx, -ry * c, rx * c, -ry, 0, -ry);\n        ctx.bezierCurveTo(-rx * c, -ry, -rx, -ry * c, -rx, 0);\n        ctx.rotate(-rotation);\n        ctx.translate(-x, -y);\n    };\n    if (!ctx.ellipse) {\n        return ctx.ellipse = ellipse_bezier;\n    }\n};\nexports.fixup_ctx = function (ctx) {\n    fixup_line_dash(ctx);\n    fixup_line_dash_offset(ctx);\n    fixup_image_smoothing(ctx);\n    fixup_measure_text(ctx);\n    return fixup_ellipse(ctx);\n};\nexports.get_scale_ratio = function (ctx, hidpi, backend) {\n    var backingStoreRatio, devicePixelRatio;\n    if (backend === \"svg\") {\n        return 1;\n    }\n    else if (hidpi) {\n        devicePixelRatio = window.devicePixelRatio || 1;\n        backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n        return devicePixelRatio / backingStoreRatio;\n    }\n    else {\n        return 1;\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _component2hex, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar svg_colors = require(\"./svg_colors\");\n_component2hex = function (v) {\n    var h;\n    h = Number(v).toString(16);\n    return h = h.length === 1 ? '0' + h : h;\n};\nexports.color2hex = function (color) {\n    var hex, rgb, v;\n    color = color + '';\n    if (color.indexOf('#') === 0) {\n        return color;\n    }\n    else if (svg_colors[color] != null) {\n        return svg_colors[color];\n    }\n    else if (color.indexOf('rgb') === 0) {\n        rgb = color.match(/\\d+/g);\n        hex = ((function () {\n            var j, len, results;\n            results = [];\n            for (j = 0, len = rgb.length; j < len; j++) {\n                v = rgb[j];\n                results.push(_component2hex(v));\n            }\n            return results;\n        })()).join('');\n        return '#' + hex.slice(0, 8);\n    }\n    else {\n        return color;\n    }\n};\nexports.color2rgba = function (color, alpha) {\n    var hex, i, rgba;\n    if (alpha == null) {\n        alpha = 1;\n    }\n    if (!color) {\n        return [0, 0, 0, 0];\n    }\n    hex = exports.color2hex(color);\n    hex = hex.replace(/ |#/g, '');\n    if (hex.length <= 4) {\n        hex = hex.replace(/(.)/g, '$1$1');\n    }\n    hex = hex.match(/../g);\n    rgba = (function () {\n        var j, len, results;\n        results = [];\n        for (j = 0, len = hex.length; j < len; j++) {\n            i = hex[j];\n            results.push(parseInt(i, 16) / 255);\n        }\n        return results;\n    })();\n    while (rgba.length < 3) {\n        rgba.push(0);\n    }\n    if (rgba.length < 4) {\n        rgba.push(alpha);\n    }\n    return rgba.slice(0, 4);\n};\nexports.valid_rgb = function (value) {\n    var contents, params, ref, rgb;\n    switch (value.substring(0, 4)) {\n        case \"rgba\":\n            params = {\n                start: \"rgba(\",\n                len: 4,\n                alpha: true\n            };\n            break;\n        case \"rgb(\":\n            params = {\n                start: \"rgb(\",\n                len: 3,\n                alpha: false\n            };\n            break;\n        default:\n            return false;\n    }\n    if (new RegExp(\".*?(\\\\.).*(,)\").test(value)) {\n        throw new Error(\"color expects integers for rgb in rgb/rgba tuple, received \" + value);\n    }\n    contents = value.replace(params.start, \"\").replace(\")\", \"\").split(',').map(parseFloat);\n    if (contents.length !== params.len) {\n        throw new Error(\"color expects rgba \" + expect_len + \"-tuple, received \" + value);\n    }\n    if (params.alpha && !((0 <= (ref = contents[3]) && ref <= 1))) {\n        throw new Error(\"color expects rgba 4-tuple to have alpha value between 0 and 1\");\n    }\n    if (indexOf.call((function () {\n        var j, len, ref1, results;\n        ref1 = contents.slice(0, 3);\n        results = [];\n        for (j = 0, len = ref1.length; j < len; j++) {\n            rgb = ref1[j];\n            results.push((0 <= rgb && rgb <= 255));\n        }\n        return results;\n    })(), false) >= 0) {\n        throw new Error(\"color expects rgb to have value between 0 and 255\");\n    }\n    return true;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array_1 = require(\"./array\");\nvar eq_1 = require(\"./eq\");\nvar types_1 = require(\"./types\");\nexports.MultiDict = (function () {\n    function MultiDict() {\n        this._dict = {};\n    }\n    MultiDict.prototype._existing = function (key) {\n        if (key in this._dict) {\n            return this._dict[key];\n        }\n        else {\n            return null;\n        }\n    };\n    MultiDict.prototype.add_value = function (key, value) {\n        var existing;\n        if (value === null) {\n            throw new Error(\"Can't put null in this dict\");\n        }\n        if (types_1.isArray(value)) {\n            throw new Error(\"Can't put arrays in this dict\");\n        }\n        existing = this._existing(key);\n        if (existing === null) {\n            return this._dict[key] = value;\n        }\n        else if (types_1.isArray(existing)) {\n            return existing.push(value);\n        }\n        else {\n            return this._dict[key] = [existing, value];\n        }\n    };\n    MultiDict.prototype.remove_value = function (key, value) {\n        var existing, new_array;\n        existing = this._existing(key);\n        if (types_1.isArray(existing)) {\n            new_array = array_1.difference(existing, [value]);\n            if (new_array.length > 0) {\n                return this._dict[key] = new_array;\n            }\n            else {\n                return delete this._dict[key];\n            }\n        }\n        else if (eq_1.isEqual(existing, value)) {\n            return delete this._dict[key];\n        }\n    };\n    MultiDict.prototype.get_one = function (key, duplicate_error) {\n        var existing;\n        existing = this._existing(key);\n        if (types_1.isArray(existing)) {\n            if (existing.length === 1) {\n                return existing[0];\n            }\n            else {\n                throw new Error(duplicate_error);\n            }\n        }\n        else {\n            return existing;\n        }\n    };\n    return MultiDict;\n})();\nexports.Set = (function () {\n    function Set(array) {\n        if (!array) {\n            this.values = [];\n        }\n        else {\n            if (array.constructor === Set) {\n                return new Set(array.values);\n            }\n            if (array.constructor === Array) {\n                this.values = Set.compact(array);\n            }\n            else {\n                this.values = [array];\n            }\n        }\n    }\n    Set.compact = function (array) {\n        var item, j, len, newArray;\n        newArray = [];\n        for (j = 0, len = array.length; j < len; j++) {\n            item = array[j];\n            if (newArray.indexOf(item) === -1) {\n                newArray.push(item);\n            }\n        }\n        return newArray;\n    };\n    Set.prototype.push = function (item) {\n        if (this.missing(item)) {\n            return this.values.push(item);\n        }\n    };\n    Set.prototype.remove = function (item) {\n        var i;\n        i = this.values.indexOf(item);\n        return this.values = this.values.slice(0, i).concat(this.values.slice(i + 1));\n    };\n    Set.prototype.length = function () {\n        return this.values.length;\n    };\n    Set.prototype.includes = function (item) {\n        return this.values.indexOf(item) !== -1;\n    };\n    Set.prototype.missing = function (item) {\n        return !this.includes(item);\n    };\n    Set.prototype.slice = function (from, to) {\n        return this.values.slice(from, to);\n    };\n    Set.prototype.join = function (str) {\n        return this.values.join(str);\n    };\n    Set.prototype.toString = function () {\n        return this.join(', ');\n    };\n    Set.prototype.includes = function (item) {\n        return this.values.indexOf(item) !== -1;\n    };\n    Set.prototype.union = function (set) {\n        set = new Set(set);\n        return new Set(this.values.concat(set.values));\n    };\n    Set.prototype.intersect = function (set) {\n        var item, j, len, newSet, ref;\n        set = new Set(set);\n        newSet = new Set;\n        ref = set.values;\n        for (j = 0, len = ref.length; j < len; j++) {\n            item = ref[j];\n            if (this.includes(item) && set.includes(item)) {\n                newSet.push(item);\n            }\n        }\n        return newSet;\n    };\n    Set.prototype.diff = function (set) {\n        var item, j, len, newSet, ref;\n        set = new Set(set);\n        newSet = new Set;\n        ref = this.values;\n        for (j = 0, len = ref.length; j < len; j++) {\n            item = ref[j];\n            if (set.missing(item)) {\n                newSet.push(item);\n            }\n        }\n        return newSet;\n    };\n    return Set;\n})();\n","\"use strict\";\n//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"./types\");\nvar toString = Object.prototype.toString;\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b)\n        return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null)\n        return a === b;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b))\n        return false;\n    switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case '[object RegExp]':\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case '[object String]':\n            // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n            // equivalent to `new String(\"5\")`.\n            return '' + a === '' + b;\n        case '[object Number]':\n            // `NaN`s are equivalent, but non-reflexive.\n            // Object(NaN) is equivalent to NaN\n            if (+a !== +a)\n                return +b !== +b;\n            // An `egal` comparison is performed for other numeric values.\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n        case '[object Date]':\n        case '[object Boolean]':\n            // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n            // millisecond representations. Note that invalid dates with millisecond representations\n            // of `NaN` are not equivalent.\n            return +a === +b;\n    }\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n        if (typeof a != 'object' || typeof b != 'object')\n            return false;\n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        var aCtor = a.constructor, bCtor = b.constructor;\n        if (aCtor !== bCtor && !(types_1.isFunction(aCtor) && aCtor instanceof aCtor &&\n            types_1.isFunction(bCtor) && bCtor instanceof bCtor)\n            && ('constructor' in a && 'constructor' in b)) {\n            return false;\n        }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a)\n            return bStack[length] === b;\n    }\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length;\n        if (length !== b.length)\n            return false;\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n            if (!eq(a[length], b[length], aStack, bStack))\n                return false;\n        }\n    }\n    else {\n        // Deep compare objects.\n        var keys = Object.keys(a);\n        var key = void 0;\n        length = keys.length;\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (Object.keys(b).length !== length)\n            return false;\n        while (length--) {\n            // Deep compare each member\n            key = keys[length];\n            if (!(b.hasOwnProperty(key) && eq(a[key], b[key], aStack, bStack)))\n                return false;\n        }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n}\n// Perform a deep comparison to check if two objects are equal.\nfunction isEqual(a, b) {\n    return eq(a, b);\n}\nexports.isEqual = isEqual;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction angle_norm(angle) {\n    while (angle < 0) {\n        angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n        angle -= 2 * Math.PI;\n    }\n    return angle;\n}\nexports.angle_norm = angle_norm;\nfunction angle_dist(lhs, rhs) {\n    return Math.abs(angle_norm(lhs - rhs));\n}\nexports.angle_dist = angle_dist;\nfunction angle_between(mid, lhs, rhs, direction) {\n    var norm_mid = angle_norm(mid);\n    var d = angle_dist(lhs, rhs);\n    var cond = angle_dist(lhs, norm_mid) <= d && angle_dist(norm_mid, rhs) <= d;\n    if (direction == \"anticlock\")\n        return cond;\n    else\n        return !cond;\n}\nexports.angle_between = angle_between;\nfunction random() {\n    return Math.random();\n}\nexports.random = random;\nfunction randomIn(min, max) {\n    if (max == null) {\n        max = min;\n        min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n}\nexports.randomIn = randomIn;\nfunction atan2(start, end) {\n    /*\n     * Calculate the angle between a line containing start and end points (composed\n     * of [x, y] arrays) and the positive x-axis.\n     */\n    return Math.atan2(end[1] - start[1], end[0] - start[0]);\n}\nexports.atan2 = atan2;\n// http://www2.econ.osaka-u.ac.jp/~tanizaki/class/2013/econome3/13.pdf (Page 432)\nfunction rnorm(mu, sigma) {\n    // Generate a random normal with a mean of 0 and a sigma of 1\n    var r1;\n    var r2;\n    while (true) {\n        r1 = random();\n        r2 = random();\n        r2 = (2 * r2 - 1) * Math.sqrt(2 * (1 / Math.E));\n        if (-4 * r1 * r1 * Math.log(r1) >= r2 * r2)\n            break;\n    }\n    var rn = r2 / r1;\n    // Transform the standard normal to meet the characteristics that we want (mu, sigma)\n    rn = mu + sigma * rn;\n    return rn;\n}\nexports.rnorm = rnorm;\nfunction clamp(val, min, max) {\n    if (val > max)\n        return max;\n    if (val < min)\n        return min;\n    return val;\n}\nexports.clamp = clamp;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar array_1 = require(\"./array\");\nexports.keys = Object.keys;\nfunction values(object) {\n    var keys = Object.keys(object);\n    var length = keys.length;\n    var values = new Array(length);\n    for (var i = 0; i < length; i++) {\n        values[i] = object[keys[i]];\n    }\n    return values;\n}\nexports.values = values;\nfunction extend(dest) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {\n        var source = sources_1[_a];\n        for (var key in source) {\n            if (source.hasOwnProperty(key)) {\n                dest[key] = source[key];\n            }\n        }\n    }\n    return dest;\n}\nexports.extend = extend;\nfunction clone(obj) {\n    return extend({}, obj);\n}\nexports.clone = clone;\nfunction merge(obj1, obj2) {\n    /*\n     * Returns an object with the array values for obj1 and obj2 unioned by key.\n     */\n    var result = Object.create(Object.prototype);\n    var keys = array_1.concat([Object.keys(obj1), Object.keys(obj2)]);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        var arr1 = obj1.hasOwnProperty(key) ? obj1[key] : [];\n        var arr2 = obj2.hasOwnProperty(key) ? obj2[key] : [];\n        result[key] = array_1.union(arr1, arr2);\n    }\n    return result;\n}\nexports.merge = merge;\nfunction size(obj) {\n    return Object.keys(obj).length;\n}\nexports.size = size;\nfunction isEmpty(obj) {\n    return size(obj) === 0;\n}\nexports.isEmpty = isEmpty;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proj4 = require(\"proj4/lib/core\");\nexports.proj4 = proj4;\nvar Proj = require(\"proj4/lib/Proj\");\nvar toPoint = require(\"proj4/lib/common/toPoint\");\nvar defs = require(\"proj4/lib/defs\");\nvar transform = require(\"proj4/lib/transform\");\nproj4.defaultDatum = 'WGS84';\nproj4.WGS84 = new Proj('WGS84');\nproj4.Proj = Proj;\nproj4.toPoint = toPoint;\nproj4.defs = defs;\nproj4.transform = transform;\nexports.mercator = defs('GOOGLE');\nexports.wgs84 = defs('WGS84');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proj4_1 = require(\"./proj4\");\nexports.project_xy = function (x, y) {\n    var i, j, merc_x, merc_x_s, merc_y, merc_y_s, ref, ref1;\n    merc_x_s = [];\n    merc_y_s = [];\n    for (i = j = 0, ref = x.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        ref1 = proj4_1.proj4(proj4_1.mercator, [x[i], y[i]]), merc_x = ref1[0], merc_y = ref1[1];\n        merc_x_s[i] = merc_x;\n        merc_y_s[i] = merc_y;\n    }\n    return [merc_x_s, merc_y_s];\n};\nexports.project_xsys = function (xs, ys) {\n    var i, j, merc_x_s, merc_xs_s, merc_y_s, merc_ys_s, ref, ref1;\n    merc_xs_s = [];\n    merc_ys_s = [];\n    for (i = j = 0, ref = xs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        ref1 = exports.project_xy(xs[i], ys[i]), merc_x_s = ref1[0], merc_y_s = ref1[1];\n        merc_xs_s[i] = merc_x_s;\n        merc_ys_s[i] = merc_y_s;\n    }\n    return [merc_xs_s, merc_ys_s];\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar has_props_1 = require(\"../has_props\");\nvar types_1 = require(\"./types\");\nexports.create_ref = function (obj) {\n    var ref;\n    if (!(obj instanceof has_props_1.HasProps)) {\n        throw new Error(\"can only create refs for HasProps subclasses\");\n    }\n    ref = {\n        'type': obj.type,\n        'id': obj.id\n    };\n    if (obj._subtype != null) {\n        ref['subtype'] = obj._subtype;\n    }\n    return ref;\n};\nexports.is_ref = function (arg) {\n    var keys;\n    if (types_1.isObject(arg)) {\n        keys = Object.keys(arg).sort();\n        if (keys.length === 2) {\n            return keys[0] === 'id' && keys[1] === 'type';\n        }\n        if (keys.length === 3) {\n            return keys[0] === 'id' && keys[1] === 'subtype' && keys[2] === 'type';\n        }\n    }\n    return false;\n};\nexports.convert_to_ref = function (value) {\n    if (types_1.isArray(value)) {\n        return value.map(exports.convert_to_ref);\n    }\n    else {\n        if (value instanceof has_props_1.HasProps) {\n            return value.ref();\n        }\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.get_indices = function (data_source) {\n    var selected;\n    selected = data_source.selected;\n    if (selected['0d'].glyph) {\n        return selected['0d'].indices;\n    }\n    else if (selected['1d'].indices.length > 0) {\n        return selected['1d'].indices;\n    }\n    else if (selected['2d'].indices.length > 0) {\n        return selected['2d'].indices;\n    }\n    else {\n        return [];\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ARRAY_TYPES, DTYPES, _arrayBufferToBase64, _base64ToArrayBuffer, k, v;\nvar types_1 = require(\"./types\");\nARRAY_TYPES = {\n    float32: Float32Array,\n    float64: Float64Array,\n    uint8: Uint8Array,\n    int8: Int8Array,\n    uint16: Uint16Array,\n    int16: Int16Array,\n    uint32: Uint32Array,\n    int32: Int32Array\n};\nDTYPES = {};\nfor (k in ARRAY_TYPES) {\n    v = ARRAY_TYPES[k];\n    DTYPES[v.name] = k;\n}\n_arrayBufferToBase64 = function (buffer) {\n    var b, binary, bytes;\n    bytes = new Uint8Array(buffer);\n    binary = (function () {\n        var j, len1, results;\n        results = [];\n        for (j = 0, len1 = bytes.length; j < len1; j++) {\n            b = bytes[j];\n            results.push(String.fromCharCode(b));\n        }\n        return results;\n    })();\n    return btoa(binary.join(\"\"));\n};\n_base64ToArrayBuffer = function (base64) {\n    var binary_string, bytes, i, j, len, ref;\n    binary_string = atob(base64);\n    len = binary_string.length;\n    bytes = new Uint8Array(len);\n    for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n};\nexports.decode_base64 = function (input) {\n    var array, bytes, dtype, shape;\n    bytes = _base64ToArrayBuffer(input['__ndarray__']);\n    dtype = input['dtype'];\n    if (dtype in ARRAY_TYPES) {\n        array = new ARRAY_TYPES[dtype](bytes);\n    }\n    shape = input['shape'];\n    return [array, shape];\n};\nexports.encode_base64 = function (array, shape) {\n    var b64, data, dtype;\n    b64 = _arrayBufferToBase64(array.buffer);\n    dtype = DTYPES[array.constructor.name];\n    data = {\n        __ndarray__: b64,\n        shape: shape,\n        dtype: dtype\n    };\n    return data;\n};\nexports.decode_column_data = function (data) {\n    var arr, arrays, data_shapes, j, len1, new_data, ref, ref1, shape, shapes;\n    new_data = {};\n    data_shapes = {};\n    for (k in data) {\n        v = data[k];\n        if (types_1.isArray(v)) {\n            arrays = [];\n            shapes = [];\n            for (j = 0, len1 = v.length; j < len1; j++) {\n                arr = v[j];\n                if (types_1.isObject(arr) && '__ndarray__' in arr) {\n                    ref = exports.decode_base64(arr), arr = ref[0], shape = ref[1];\n                    shapes.push(shape);\n                    arrays.push(arr);\n                }\n                else if (types_1.isArray(arr)) {\n                    shapes.push([]);\n                    arrays.push(arr);\n                }\n            }\n            if (shapes.length > 0) {\n                new_data[k] = arrays;\n                data_shapes[k] = shapes;\n            }\n            else {\n                new_data[k] = v;\n            }\n        }\n        else if (types_1.isObject(v) && '__ndarray__' in v) {\n            ref1 = exports.decode_base64(v), arr = ref1[0], shape = ref1[1];\n            new_data[k] = arr;\n            data_shapes[k] = shape;\n        }\n        else {\n            new_data[k] = v;\n            data_shapes[k] = [];\n        }\n    }\n    return [new_data, data_shapes];\n};\nexports.encode_column_data = function (data, shapes) {\n    var i, j, new_array, new_data, ref, ref1, ref2;\n    new_data = {};\n    for (k in data) {\n        v = data[k];\n        if ((v != null ? v.buffer : void 0) instanceof ArrayBuffer) {\n            v = exports.encode_base64(v, shapes != null ? shapes[k] : void 0);\n        }\n        else if (types_1.isArray(v)) {\n            new_array = [];\n            for (i = j = 0, ref = v.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                if (((ref1 = v[i]) != null ? ref1.buffer : void 0) instanceof ArrayBuffer) {\n                    new_array.push(exports.encode_base64(v[i], shapes != null ? (ref2 = shapes[k]) != null ? ref2[i] : void 0 : void 0));\n                }\n                else {\n                    new_array.push(v[i]);\n                }\n            }\n            v = new_array;\n        }\n        new_data[k] = v;\n    }\n    return new_data;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\n/// <reference types=\"@types/rbush\" />\nvar rbush = require(\"rbush\");\nvar SpatialIndex = (function () {\n    function SpatialIndex() {\n    }\n    return SpatialIndex;\n}());\nexports.SpatialIndex = SpatialIndex;\nvar RBush = (function (_super) {\n    tslib_1.__extends(RBush, _super);\n    function RBush(points) {\n        var _this = _super.call(this) || this;\n        _this.index = rbush();\n        _this.index.load(points);\n        return _this;\n    }\n    Object.defineProperty(RBush.prototype, \"bbox\", {\n        get: function () {\n            var _a = this.index.toJSON(), minX = _a.minX, minY = _a.minY, maxX = _a.maxX, maxY = _a.maxY;\n            return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RBush.prototype.search = function (rect) {\n        return this.index.search(rect);\n    };\n    RBush.prototype.indices = function (rect) {\n        var points = this.search(rect);\n        var n = points.length;\n        var indices = new Array(n);\n        for (var j = 0; j < n; j++) {\n            indices[j] = points[j].i;\n        }\n        return indices;\n    };\n    return RBush;\n}(SpatialIndex));\nexports.RBush = RBush;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar settings_1 = require(\"../settings\");\nfunction startsWith(str, searchString, position) {\n    if (position === void 0) { position = 0; }\n    return str.substr(position, searchString.length) == searchString;\n}\nexports.startsWith = startsWith;\nfunction uuid4() {\n    // from ipython project\n    // http://www.ietf.org/rfc/rfc4122.txt\n    var s = new Array(32);\n    var hexDigits = \"0123456789ABCDEF\";\n    for (var i = 0; i < 32; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[12] = \"4\"; // bits 12-15 of the time_hi_and_version field to 0010\n    s[16] = hexDigits.substr((s[16].charCodeAt(0) & 0x3) | 0x8, 1); // bits 6-7 of the clock_seq_hi_and_reserved to 01\n    return s.join(\"\");\n}\nexports.uuid4 = uuid4;\nvar counter = 1000;\nfunction uniqueId(prefix) {\n    var id = settings_1.settings.dev ? \"j\" + counter++ : uuid4();\n    if (prefix != null)\n        return prefix + \"-\" + id;\n    else\n        return id;\n}\nexports.uniqueId = uniqueId;\nfunction escape(s) {\n    return s.replace(/(?:[&<>\"'`])/g, function (ch) {\n        switch (ch) {\n            case '&': return '&amp;';\n            case '<': return '&lt;';\n            case '>': return '&gt;';\n            case '\"': return '&quot;';\n            case \"'\": return '&#x27;';\n            case '`': return '&#x60;';\n            default: return ch;\n        }\n    });\n}\nexports.escape = escape;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.indianred = \"#CD5C5C\";\nexports.lightcoral = \"#F08080\";\nexports.salmon = \"#FA8072\";\nexports.darksalmon = \"#E9967A\";\nexports.lightsalmon = \"#FFA07A\";\nexports.crimson = \"#DC143C\";\nexports.red = \"#FF0000\";\nexports.firebrick = \"#B22222\";\nexports.darkred = \"#8B0000\";\nexports.pink = \"#FFC0CB\";\nexports.lightpink = \"#FFB6C1\";\nexports.hotpink = \"#FF69B4\";\nexports.deeppink = \"#FF1493\";\nexports.mediumvioletred = \"#C71585\";\nexports.palevioletred = \"#DB7093\";\nexports.coral = \"#FF7F50\";\nexports.tomato = \"#FF6347\";\nexports.orangered = \"#FF4500\";\nexports.darkorange = \"#FF8C00\";\nexports.orange = \"#FFA500\";\nexports.gold = \"#FFD700\";\nexports.yellow = \"#FFFF00\";\nexports.lightyellow = \"#FFFFE0\";\nexports.lemonchiffon = \"#FFFACD\";\nexports.lightgoldenrodyellow = \"#FAFAD2\";\nexports.papayawhip = \"#FFEFD5\";\nexports.moccasin = \"#FFE4B5\";\nexports.peachpuff = \"#FFDAB9\";\nexports.palegoldenrod = \"#EEE8AA\";\nexports.khaki = \"#F0E68C\";\nexports.darkkhaki = \"#BDB76B\";\nexports.lavender = \"#E6E6FA\";\nexports.thistle = \"#D8BFD8\";\nexports.plum = \"#DDA0DD\";\nexports.violet = \"#EE82EE\";\nexports.orchid = \"#DA70D6\";\nexports.fuchsia = \"#FF00FF\";\nexports.magenta = \"#FF00FF\";\nexports.mediumorchid = \"#BA55D3\";\nexports.mediumpurple = \"#9370DB\";\nexports.blueviolet = \"#8A2BE2\";\nexports.darkviolet = \"#9400D3\";\nexports.darkorchid = \"#9932CC\";\nexports.darkmagenta = \"#8B008B\";\nexports.purple = \"#800080\";\nexports.indigo = \"#4B0082\";\nexports.slateblue = \"#6A5ACD\";\nexports.darkslateblue = \"#483D8B\";\nexports.mediumslateblue = \"#7B68EE\";\nexports.greenyellow = \"#ADFF2F\";\nexports.chartreuse = \"#7FFF00\";\nexports.lawngreen = \"#7CFC00\";\nexports.lime = \"#00FF00\";\nexports.limegreen = \"#32CD32\";\nexports.palegreen = \"#98FB98\";\nexports.lightgreen = \"#90EE90\";\nexports.mediumspringgreen = \"#00FA9A\";\nexports.springgreen = \"#00FF7F\";\nexports.mediumseagreen = \"#3CB371\";\nexports.seagreen = \"#2E8B57\";\nexports.forestgreen = \"#228B22\";\nexports.green = \"#008000\";\nexports.darkgreen = \"#006400\";\nexports.yellowgreen = \"#9ACD32\";\nexports.olivedrab = \"#6B8E23\";\nexports.olive = \"#808000\";\nexports.darkolivegreen = \"#556B2F\";\nexports.mediumaquamarine = \"#66CDAA\";\nexports.darkseagreen = \"#8FBC8F\";\nexports.lightseagreen = \"#20B2AA\";\nexports.darkcyan = \"#008B8B\";\nexports.teal = \"#008080\";\nexports.aqua = \"#00FFFF\";\nexports.cyan = \"#00FFFF\";\nexports.lightcyan = \"#E0FFFF\";\nexports.paleturquoise = \"#AFEEEE\";\nexports.aquamarine = \"#7FFFD4\";\nexports.turquoise = \"#40E0D0\";\nexports.mediumturquoise = \"#48D1CC\";\nexports.darkturquoise = \"#00CED1\";\nexports.cadetblue = \"#5F9EA0\";\nexports.steelblue = \"#4682B4\";\nexports.lightsteelblue = \"#B0C4DE\";\nexports.powderblue = \"#B0E0E6\";\nexports.lightblue = \"#ADD8E6\";\nexports.skyblue = \"#87CEEB\";\nexports.lightskyblue = \"#87CEFA\";\nexports.deepskyblue = \"#00BFFF\";\nexports.dodgerblue = \"#1E90FF\";\nexports.cornflowerblue = \"#6495ED\";\nexports.royalblue = \"#4169E1\";\nexports.blue = \"#0000FF\";\nexports.mediumblue = \"#0000CD\";\nexports.darkblue = \"#00008B\";\nexports.navy = \"#000080\";\nexports.midnightblue = \"#191970\";\nexports.cornsilk = \"#FFF8DC\";\nexports.blanchedalmond = \"#FFEBCD\";\nexports.bisque = \"#FFE4C4\";\nexports.navajowhite = \"#FFDEAD\";\nexports.wheat = \"#F5DEB3\";\nexports.burlywood = \"#DEB887\";\nexports.tan = \"#D2B48C\";\nexports.rosybrown = \"#BC8F8F\";\nexports.sandybrown = \"#F4A460\";\nexports.goldenrod = \"#DAA520\";\nexports.darkgoldenrod = \"#B8860B\";\nexports.peru = \"#CD853F\";\nexports.chocolate = \"#D2691E\";\nexports.saddlebrown = \"#8B4513\";\nexports.sienna = \"#A0522D\";\nexports.brown = \"#A52A2A\";\nexports.maroon = \"#800000\";\nexports.white = \"#FFFFFF\";\nexports.snow = \"#FFFAFA\";\nexports.honeydew = \"#F0FFF0\";\nexports.mintcream = \"#F5FFFA\";\nexports.azure = \"#F0FFFF\";\nexports.aliceblue = \"#F0F8FF\";\nexports.ghostwhite = \"#F8F8FF\";\nexports.whitesmoke = \"#F5F5F5\";\nexports.seashell = \"#FFF5EE\";\nexports.beige = \"#F5F5DC\";\nexports.oldlace = \"#FDF5E6\";\nexports.floralwhite = \"#FFFAF0\";\nexports.ivory = \"#FFFFF0\";\nexports.antiquewhite = \"#FAEBD7\";\nexports.linen = \"#FAF0E6\";\nexports.lavenderblush = \"#FFF0F5\";\nexports.mistyrose = \"#FFE4E1\";\nexports.gainsboro = \"#DCDCDC\";\nexports.lightgray = \"#D3D3D3\";\nexports.lightgrey = \"#D3D3D3\";\nexports.silver = \"#C0C0C0\";\nexports.darkgray = \"#A9A9A9\";\nexports.darkgrey = \"#A9A9A9\";\nexports.gray = \"#808080\";\nexports.grey = \"#808080\";\nexports.dimgray = \"#696969\";\nexports.dimgrey = \"#696969\";\nexports.lightslategray = \"#778899\";\nexports.lightslategrey = \"#778899\";\nexports.slategray = \"#708090\";\nexports.slategrey = \"#708090\";\nexports.darkslategray = \"#2F4F4F\";\nexports.darkslategrey = \"#2F4F4F\";\nexports.black = \"#000000\";\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _format_number;\nvar SPrintf = require(\"sprintf\");\nvar Numbro = require(\"numbro\");\nvar tz = require(\"timezone\");\nvar string_1 = require(\"./string\");\nvar types_1 = require(\"./types\");\n_format_number = function (number) {\n    var format;\n    if (types_1.isNumber(number)) {\n        format = (function () {\n            switch (false) {\n                case Math.floor(number) !== number:\n                    return \"%d\";\n                case !(Math.abs(number) > 0.1 && Math.abs(number) < 1000):\n                    return \"%0.3f\";\n                default:\n                    return \"%0.3e\";\n            }\n        })();\n        return SPrintf.sprintf(format, number);\n    }\n    else {\n        return \"\" + number;\n    }\n};\nexports.replace_placeholders = function (string, data_source, i, formatters, special_vars) {\n    if (special_vars == null) {\n        special_vars = {};\n    }\n    string = string.replace(/(^|[^\\$])\\$(\\w+)/g, (function (_this) {\n        return function (match, prefix, name) {\n            return prefix + \"@$\" + name;\n        };\n    })(this));\n    string = string.replace(/(^|[^@])@(?:(\\$?\\w+)|{([^{}]+)})(?:{([^{}]+)})?/g, (function (_this) {\n        return function (match, prefix, name, long_name, format) {\n            var ref, replacement, value;\n            name = long_name != null ? long_name : name;\n            value = name[0] === \"$\" ? special_vars[name.substring(1)] : (ref = data_source.get_column(name)) != null ? ref[i] : void 0;\n            replacement = null;\n            if (value == null) {\n                replacement = \"???\";\n            }\n            else {\n                if (format === 'safe') {\n                    return \"\" + prefix + value;\n                }\n                else if (format != null) {\n                    if ((formatters != null) && name in formatters) {\n                        if (formatters[name] === \"numeral\") {\n                            replacement = Numbro.format(value, format);\n                        }\n                        else if (formatters[name] === \"datetime\") {\n                            replacement = tz(value, format);\n                        }\n                        else if (formatters[name] === \"printf\") {\n                            replacement = SPrintf(format, value);\n                        }\n                        else {\n                            throw new Error(\"Unknown tooltip field formatter type '\" + formatters[name] + \"'\");\n                        }\n                    }\n                    else {\n                        replacement = Numbro.format(value, format);\n                    }\n                }\n                else {\n                    replacement = _format_number(value);\n                }\n            }\n            return replacement = \"\" + prefix + (string_1.escape(replacement));\n        };\n    })(this));\n    return string;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cache;\nvar dom_1 = require(\"../dom\");\ncache = {};\nexports.get_text_height = function (font) {\n    var block, elem, result, text;\n    if (cache[font] != null) {\n        return cache[font];\n    }\n    text = dom_1.span({\n        style: {\n            font: font\n        }\n    }, \"Hg\");\n    block = dom_1.div({\n        style: {\n            display: \"inline-block\",\n            width: \"1px\",\n            height: \"0px\"\n        }\n    });\n    elem = dom_1.div({}, text, block);\n    document.body.appendChild(elem);\n    try {\n        result = {};\n        block.style.verticalAlign = \"baseline\";\n        result.ascent = dom_1.offset(block).top - dom_1.offset(text).top;\n        block.style.verticalAlign = \"bottom\";\n        result.height = dom_1.offset(block).top - dom_1.offset(text).top;\n        result.descent = result.height - result.ascent;\n    }\n    finally {\n        document.body.removeChild(elem);\n    }\n    cache[font] = result;\n    return result;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _delay_animation, delay_animation;\n_delay_animation = function (f) {\n    return f();\n};\ndelay_animation = (typeof window !== \"undefined\" && window !== null ? window.requestAnimationFrame : void 0) || (typeof window !== \"undefined\" && window !== null ? window.mozRequestAnimationFrame : void 0) || (typeof window !== \"undefined\" && window !== null ? window.webkitRequestAnimationFrame : void 0) || (typeof window !== \"undefined\" && window !== null ? window.msRequestAnimationFrame : void 0) || _delay_animation;\nexports.throttle = function (func, wait) {\n    var args, context, later, pending, previous, ref, result, timeout;\n    ref = [null, null, null, null], context = ref[0], args = ref[1], timeout = ref[2], result = ref[3];\n    previous = 0;\n    pending = false;\n    later = function () {\n        previous = new Date;\n        timeout = null;\n        pending = false;\n        return result = func.apply(context, args);\n    };\n    return function () {\n        var now, remaining;\n        now = new Date;\n        remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 && !pending) {\n            clearTimeout(timeout);\n            pending = true;\n            delay_animation(later);\n        }\n        else if (!timeout && !pending) {\n            timeout = setTimeout((function () {\n                return delay_animation(later);\n            }), remaining);\n        }\n        return result;\n    };\n};\n","\"use strict\";\n//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar toString = Object.prototype.toString;\nfunction isBoolean(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n}\nexports.isBoolean = isBoolean;\nfunction isNumber(obj) {\n    return toString.call(obj) === \"[object Number]\";\n}\nexports.isNumber = isNumber;\nfunction isString(obj) {\n    return toString.call(obj) === \"[object String]\";\n}\nexports.isString = isString;\nfunction isStrictNaN(obj) {\n    return isNumber(obj) && obj !== +obj;\n}\nexports.isStrictNaN = isStrictNaN;\nfunction isFunction(obj) {\n    return toString.call(obj) === \"[object Function]\";\n}\nexports.isFunction = isFunction;\nfunction isArray(obj) {\n    return Array.isArray(obj);\n}\nexports.isArray = isArray;\nfunction isObject(obj) {\n    var tp = typeof obj;\n    return tp === 'function' || tp === 'object' && !!obj;\n}\nexports.isObject = isObject;\n","\"use strict\";\n/*!\n * jQuery Mousewheel 3.1.13\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction fontSize(element) {\n    var value = getComputedStyle(element).fontSize;\n    if (value != null)\n        return parseInt(value, 10);\n    return null;\n}\nfunction lineHeight(element) {\n    var parent = element.offsetParent || document.body;\n    return fontSize(parent) || fontSize(element) || 16;\n}\nfunction pageHeight(element) {\n    return element.clientHeight; // XXX: should be content height?\n}\nfunction getDeltaY(event) {\n    var deltaY = -event.deltaY;\n    if (event.target instanceof HTMLElement) {\n        switch (event.deltaMode) {\n            case event.DOM_DELTA_LINE:\n                deltaY *= lineHeight(event.target);\n                break;\n            case event.DOM_DELTA_PAGE:\n                deltaY *= pageHeight(event.target);\n                break;\n        }\n    }\n    return deltaY;\n}\nexports.getDeltaY = getDeltaY;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar math_1 = require(\"./math\");\nexports.scale_highlow = function (range, factor, center) {\n    var high, low, ref, x, x0, x1;\n    if (center == null) {\n        center = null;\n    }\n    ref = [range.start, range.end], low = ref[0], high = ref[1];\n    x = center != null ? center : (high + low) / 2.0;\n    x0 = low - (low - x) * factor;\n    x1 = high - (high - x) * factor;\n    return [x0, x1];\n};\nexports.get_info = function (scales, arg) {\n    var end, info, name, ref, scale, start, x0, x1;\n    x0 = arg[0], x1 = arg[1];\n    info = {};\n    for (name in scales) {\n        scale = scales[name];\n        ref = scale.v_invert([x0, x1], true), start = ref[0], end = ref[1];\n        info[name] = {\n            start: start,\n            end: end\n        };\n    }\n    return info;\n};\nexports.scale_range = function (frame, factor, h_axis, v_axis, center) {\n    var hfactor, ref, ref1, vfactor, vx0, vx1, vy0, vy1, xrs, yrs;\n    if (h_axis == null) {\n        h_axis = true;\n    }\n    if (v_axis == null) {\n        v_axis = true;\n    }\n    if (center == null) {\n        center = null;\n    }\n    \"Utility function for zoom tools to calculate/create the zoom_info object\\nof the form required by ``PlotCanvasView.update_range``\\n\\nParameters:\\n  frame : CartesianFrame\\n  factor : Number\\n  h_axis : Boolean, optional\\n    whether to zoom the horizontal axis (default = true)\\n  v_axis : Boolean, optional\\n    whether to zoom the horizontal axis (default = true)\\n  center : object, optional\\n    of form {'x': Number, 'y', Number}\\n\\nReturns:\\n  object:\";\n    factor = math_1.clamp(factor, -0.9, 0.9);\n    hfactor = h_axis ? factor : 0;\n    ref = exports.scale_highlow(frame.h_range, hfactor, center != null ? center.x : void 0), vx0 = ref[0], vx1 = ref[1];\n    xrs = exports.get_info(frame.xscales, [vx0, vx1]);\n    vfactor = v_axis ? factor : 0;\n    ref1 = exports.scale_highlow(frame.v_range, vfactor, center != null ? center.y : void 0), vy0 = ref1[0], vy1 = ref1[1];\n    yrs = exports.get_info(frame.yscales, [vy0, vy1]);\n    return {\n        xrs: xrs,\n        yrs: yrs,\n        factor: factor\n    };\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar signaling_1 = require(\"./signaling\");\nvar string_1 = require(\"./util/string\");\nexports.View = (function () {\n    extend(View.prototype, signaling_1.Signalable);\n    View.getters = function (specs) {\n        var fn, name, results;\n        results = [];\n        for (name in specs) {\n            fn = specs[name];\n            results.push(Object.defineProperty(this.prototype, name, {\n                get: fn\n            }));\n        }\n        return results;\n    };\n    function View(options) {\n        var ref;\n        if (options == null) {\n            options = {};\n        }\n        this.removed = new signaling_1.Signal(this, \"removed\");\n        if (options.model != null) {\n            this.model = options.model;\n        }\n        else {\n            throw new Error(\"model of a view wasn't configured\");\n        }\n        this._parent = options.parent;\n        this.id = (ref = options.id) != null ? ref : string_1.uniqueId();\n        this.initialize(options);\n    }\n    View.prototype.initialize = function (options) { };\n    View.prototype.remove = function () {\n        this._parent = void 0;\n        this.disconnect_signals();\n        return this.removed.emit();\n    };\n    View.prototype.toString = function () {\n        return this.model.type + \"View(\" + this.id + \")\";\n    };\n    View.getters({\n        parent: function () {\n            if (this._parent !== void 0) {\n                return this._parent;\n            }\n            else {\n                throw new Error(\"parent of a view wasn't configured\");\n            }\n        },\n        is_root: function () {\n            return this.parent === null;\n        },\n        root: function () {\n            if (this.is_root) {\n                return this;\n            }\n            else {\n                return this.parent.root;\n            }\n        }\n    });\n    View.prototype.connect_signals = function () { };\n    View.prototype.disconnect_signals = function () {\n        return signaling_1.Signal.disconnectReceiver(this);\n    };\n    return View;\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ContextProperties, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar mixins = require(\"./property_mixins\");\nvar color_1 = require(\"./util/color\");\nContextProperties = (function () {\n    function ContextProperties(obj, prefix) {\n        var attr, do_spec, j, len, ref;\n        if (prefix == null) {\n            prefix = \"\";\n        }\n        this.obj = obj;\n        this.prefix = prefix;\n        this.cache = {};\n        do_spec = obj.properties[prefix + this.do_attr].spec;\n        this.doit = do_spec.value !== null;\n        ref = this.attrs;\n        for (j = 0, len = ref.length; j < len; j++) {\n            attr = ref[j];\n            this[attr] = obj.properties[prefix + attr];\n        }\n    }\n    ContextProperties.prototype.warm_cache = function (source) {\n        var attr, j, len, prop, ref, results;\n        ref = this.attrs;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n            attr = ref[j];\n            prop = this.obj.properties[this.prefix + attr];\n            if (prop.spec.value !== void 0) {\n                results.push(this.cache[attr] = prop.spec.value);\n            }\n            else {\n                results.push(this.cache[attr + \"_array\"] = prop.array(source));\n            }\n        }\n        return results;\n    };\n    ContextProperties.prototype.cache_select = function (attr, i) {\n        var prop;\n        prop = this.obj.properties[this.prefix + attr];\n        if (prop.spec.value !== void 0) {\n            return this.cache[attr] = prop.spec.value;\n        }\n        else {\n            return this.cache[attr] = this.cache[attr + \"_array\"][i];\n        }\n    };\n    return ContextProperties;\n})();\nexports.Line = (function (superClass) {\n    extend(Line, superClass);\n    function Line() {\n        return Line.__super__.constructor.apply(this, arguments);\n    }\n    Line.prototype.attrs = Object.keys(mixins.line());\n    Line.prototype.do_attr = \"line_color\";\n    Line.prototype.set_value = function (ctx) {\n        ctx.strokeStyle = this.line_color.value();\n        ctx.globalAlpha = this.line_alpha.value();\n        ctx.lineWidth = this.line_width.value();\n        ctx.lineJoin = this.line_join.value();\n        ctx.lineCap = this.line_cap.value();\n        ctx.setLineDash(this.line_dash.value());\n        return ctx.setLineDashOffset(this.line_dash_offset.value());\n    };\n    Line.prototype.set_vectorize = function (ctx, i) {\n        this.cache_select(\"line_color\", i);\n        if (ctx.strokeStyle !== this.cache.line_color) {\n            ctx.strokeStyle = this.cache.line_color;\n        }\n        this.cache_select(\"line_alpha\", i);\n        if (ctx.globalAlpha !== this.cache.line_alpha) {\n            ctx.globalAlpha = this.cache.line_alpha;\n        }\n        this.cache_select(\"line_width\", i);\n        if (ctx.lineWidth !== this.cache.line_width) {\n            ctx.lineWidth = this.cache.line_width;\n        }\n        this.cache_select(\"line_join\", i);\n        if (ctx.lineJoin !== this.cache.line_join) {\n            ctx.lineJoin = this.cache.line_join;\n        }\n        this.cache_select(\"line_cap\", i);\n        if (ctx.lineCap !== this.cache.line_cap) {\n            ctx.lineCap = this.cache.line_cap;\n        }\n        this.cache_select(\"line_dash\", i);\n        if (ctx.getLineDash() !== this.cache.line_dash) {\n            ctx.setLineDash(this.cache.line_dash);\n        }\n        this.cache_select(\"line_dash_offset\", i);\n        if (ctx.getLineDashOffset() !== this.cache.line_dash_offset) {\n            return ctx.setLineDashOffset(this.cache.line_dash_offset);\n        }\n    };\n    Line.prototype.color_value = function () {\n        var color;\n        color = color_1.color2rgba(this.line_color.value(), this.line_alpha.value());\n        return \"rgba(\" + (color[0] * 255) + \",\" + (color[1] * 255) + \",\" + (color[2] * 255) + \",\" + color[3] + \")\";\n    };\n    return Line;\n})(ContextProperties);\nexports.Fill = (function (superClass) {\n    extend(Fill, superClass);\n    function Fill() {\n        return Fill.__super__.constructor.apply(this, arguments);\n    }\n    Fill.prototype.attrs = Object.keys(mixins.fill());\n    Fill.prototype.do_attr = \"fill_color\";\n    Fill.prototype.set_value = function (ctx) {\n        ctx.fillStyle = this.fill_color.value();\n        return ctx.globalAlpha = this.fill_alpha.value();\n    };\n    Fill.prototype.set_vectorize = function (ctx, i) {\n        this.cache_select(\"fill_color\", i);\n        if (ctx.fillStyle !== this.cache.fill_color) {\n            ctx.fillStyle = this.cache.fill_color;\n        }\n        this.cache_select(\"fill_alpha\", i);\n        if (ctx.globalAlpha !== this.cache.fill_alpha) {\n            return ctx.globalAlpha = this.cache.fill_alpha;\n        }\n    };\n    Fill.prototype.color_value = function () {\n        var color;\n        color = color_1.color2rgba(this.fill_color.value(), this.fill_alpha.value());\n        return \"rgba(\" + (color[0] * 255) + \",\" + (color[1] * 255) + \",\" + (color[2] * 255) + \",\" + color[3] + \")\";\n    };\n    return Fill;\n})(ContextProperties);\nexports.Text = (function (superClass) {\n    extend(Text, superClass);\n    function Text() {\n        return Text.__super__.constructor.apply(this, arguments);\n    }\n    Text.prototype.attrs = Object.keys(mixins.text());\n    Text.prototype.do_attr = \"text_color\";\n    Text.prototype.cache_select = function (name, i) {\n        var val;\n        if (name === \"font\") {\n            val = Text.__super__.cache_select.call(this, \"text_font_style\", i) + \" \" + Text.__super__.cache_select.call(this, \"text_font_size\", i) + \" \" + Text.__super__.cache_select.call(this, \"text_font\", i);\n            return this.cache.font = val;\n        }\n        else {\n            return Text.__super__.cache_select.call(this, name, i);\n        }\n    };\n    Text.prototype.font_value = function () {\n        var font, font_size, font_style;\n        font = this.text_font.value();\n        font_size = this.text_font_size.value();\n        font_style = this.text_font_style.value();\n        return font_style + \" \" + font_size + \" \" + font;\n    };\n    Text.prototype.color_value = function () {\n        var color;\n        color = color_1.color2rgba(this.text_color.value(), this.text_alpha.value());\n        return \"rgba(\" + (color[0] * 255) + \",\" + (color[1] * 255) + \",\" + (color[2] * 255) + \",\" + color[3] + \")\";\n    };\n    Text.prototype.set_value = function (ctx) {\n        ctx.font = this.font_value();\n        ctx.fillStyle = this.text_color.value();\n        ctx.globalAlpha = this.text_alpha.value();\n        ctx.textAlign = this.text_align.value();\n        return ctx.textBaseline = this.text_baseline.value();\n    };\n    Text.prototype.set_vectorize = function (ctx, i) {\n        this.cache_select(\"font\", i);\n        if (ctx.font !== this.cache.font) {\n            ctx.font = this.cache.font;\n        }\n        this.cache_select(\"text_color\", i);\n        if (ctx.fillStyle !== this.cache.text_color) {\n            ctx.fillStyle = this.cache.text_color;\n        }\n        this.cache_select(\"text_alpha\", i);\n        if (ctx.globalAlpha !== this.cache.text_alpha) {\n            ctx.globalAlpha = this.cache.text_alpha;\n        }\n        this.cache_select(\"text_align\", i);\n        if (ctx.textAlign !== this.cache.text_align) {\n            ctx.textAlign = this.cache.text_align;\n        }\n        this.cache_select(\"text_baseline\", i);\n        if (ctx.textBaseline !== this.cache.text_baseline) {\n            return ctx.textBaseline = this.cache.text_baseline;\n        }\n    };\n    return Text;\n})(ContextProperties);\nexports.Visuals = (function () {\n    function Visuals(model) {\n        var cls, j, len, name, prefix, ref, ref1, ref2, spec;\n        ref = model.mixins;\n        for (j = 0, len = ref.length; j < len; j++) {\n            spec = ref[j];\n            ref1 = spec.split(\":\"), name = ref1[0], prefix = (ref2 = ref1[1]) != null ? ref2 : \"\";\n            cls = (function () {\n                switch (name) {\n                    case \"line\":\n                        return exports.Line;\n                    case \"fill\":\n                        return exports.Fill;\n                    case \"text\":\n                        return exports.Text;\n                }\n            })();\n            this[prefix + name] = new cls(model, prefix);\n        }\n    }\n    Visuals.prototype.warm_cache = function (source) {\n        var name, prop, ref, results;\n        ref = this;\n        results = [];\n        for (name in ref) {\n            if (!hasProp.call(ref, name))\n                continue;\n            prop = ref[name];\n            if (prop instanceof ContextProperties) {\n                results.push(prop.warm_cache(source));\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    return Visuals;\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventManager, extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar base_1 = require(\"./base\");\nvar version_1 = require(\"./version\");\nvar logging_1 = require(\"./core/logging\");\nvar has_props_1 = require(\"./core/has_props\");\nvar signaling_1 = require(\"./core/signaling\");\nvar refs_1 = require(\"./core/util/refs\");\nvar serialization_1 = require(\"./core/util/serialization\");\nvar data_structures_1 = require(\"./core/util/data_structures\");\nvar array_1 = require(\"./core/util/array\");\nvar object_1 = require(\"./core/util/object\");\nvar eq_1 = require(\"./core/util/eq\");\nvar types_1 = require(\"./core/util/types\");\nvar layout_dom_1 = require(\"./models/layouts/layout_dom\");\nvar column_data_source_1 = require(\"./models/sources/column_data_source\");\nEventManager = (function () {\n    function EventManager(document) {\n        this.document = document;\n        this.session = null;\n        this.subscribed_models = new data_structures_1.Set();\n    }\n    EventManager.prototype.send_event = function (event) {\n        var ref1;\n        return (ref1 = this.session) != null ? ref1.send_event(event) : void 0;\n    };\n    EventManager.prototype.trigger = function (event) {\n        var j, len, model, model_id, ref1, results;\n        ref1 = this.subscribed_models.values;\n        results = [];\n        for (j = 0, len = ref1.length; j < len; j++) {\n            model_id = ref1[j];\n            if (event.model_id !== null && event.model_id !== model_id) {\n                continue;\n            }\n            model = this.document._all_models[model_id];\n            results.push(model != null ? model._process_event(event) : void 0);\n        }\n        return results;\n    };\n    return EventManager;\n})();\nexports.DocumentChangedEvent = (function () {\n    function DocumentChangedEvent(document) {\n        this.document = document;\n    }\n    return DocumentChangedEvent;\n})();\nexports.ModelChangedEvent = (function (superClass) {\n    extend1(ModelChangedEvent, superClass);\n    function ModelChangedEvent(document, model1, attr1, old1, new_1, setter_id1) {\n        this.document = document;\n        this.model = model1;\n        this.attr = attr1;\n        this.old = old1;\n        this.new_ = new_1;\n        this.setter_id = setter_id1;\n        ModelChangedEvent.__super__.constructor.call(this, this.document);\n    }\n    ModelChangedEvent.prototype.json = function (references) {\n        var id, value, value_json, value_refs;\n        if (this.attr === 'id') {\n            logging_1.logger.warn(\"'id' field is immutable and should never be in a ModelChangedEvent \", this);\n            throw new Error(\"'id' field should never change, whatever code just set it is wrong\");\n        }\n        value = this.new_;\n        value_json = this.model.constructor._value_to_json(this.attr, value, this.model);\n        value_refs = {};\n        has_props_1.HasProps._value_record_references(value, value_refs, true);\n        if (this.model.id in value_refs && this.model !== value) {\n            delete value_refs[this.model.id];\n        }\n        for (id in value_refs) {\n            references[id] = value_refs[id];\n        }\n        return {\n            'kind': 'ModelChanged',\n            'model': this.model.ref(),\n            'attr': this.attr,\n            'new': value_json\n        };\n    };\n    return ModelChangedEvent;\n})(exports.DocumentChangedEvent);\nexports.TitleChangedEvent = (function (superClass) {\n    extend1(TitleChangedEvent, superClass);\n    function TitleChangedEvent(document, title1, setter_id1) {\n        this.document = document;\n        this.title = title1;\n        this.setter_id = setter_id1;\n        TitleChangedEvent.__super__.constructor.call(this, this.document);\n    }\n    TitleChangedEvent.prototype.json = function (references) {\n        return {\n            'kind': 'TitleChanged',\n            'title': this.title\n        };\n    };\n    return TitleChangedEvent;\n})(exports.DocumentChangedEvent);\nexports.RootAddedEvent = (function (superClass) {\n    extend1(RootAddedEvent, superClass);\n    function RootAddedEvent(document, model1, setter_id1) {\n        this.document = document;\n        this.model = model1;\n        this.setter_id = setter_id1;\n        RootAddedEvent.__super__.constructor.call(this, this.document);\n    }\n    RootAddedEvent.prototype.json = function (references) {\n        has_props_1.HasProps._value_record_references(this.model, references, true);\n        return {\n            'kind': 'RootAdded',\n            'model': this.model.ref()\n        };\n    };\n    return RootAddedEvent;\n})(exports.DocumentChangedEvent);\nexports.RootRemovedEvent = (function (superClass) {\n    extend1(RootRemovedEvent, superClass);\n    function RootRemovedEvent(document, model1, setter_id1) {\n        this.document = document;\n        this.model = model1;\n        this.setter_id = setter_id1;\n        RootRemovedEvent.__super__.constructor.call(this, this.document);\n    }\n    RootRemovedEvent.prototype.json = function (references) {\n        return {\n            'kind': 'RootRemoved',\n            'model': this.model.ref()\n        };\n    };\n    return RootRemovedEvent;\n})(exports.DocumentChangedEvent);\nexports.documents = [];\nexports.DEFAULT_TITLE = \"Bokeh Application\";\nexports.Document = (function () {\n    function Document() {\n        exports.documents.push(this);\n        this._title = exports.DEFAULT_TITLE;\n        this._roots = [];\n        this._all_models = {};\n        this._all_models_by_name = new data_structures_1.MultiDict();\n        this._all_models_freeze_count = 0;\n        this._callbacks = [];\n        this.event_manager = new EventManager(this);\n        this.idle = new signaling_1.Signal(this, \"idle\");\n        this._idle_roots = new WeakMap();\n    }\n    Object.defineProperty(Document.prototype, \"layoutables\", {\n        get: function () {\n            var j, len, ref1, results, root;\n            ref1 = this._roots;\n            results = [];\n            for (j = 0, len = ref1.length; j < len; j++) {\n                root = ref1[j];\n                if (root instanceof layout_dom_1.LayoutDOM) {\n                    results.push(root);\n                }\n            }\n            return results;\n        }\n    });\n    Object.defineProperty(Document.prototype, \"is_idle\", {\n        get: function () {\n            var j, len, ref1, root;\n            ref1 = this.layoutables;\n            for (j = 0, len = ref1.length; j < len; j++) {\n                root = ref1[j];\n                if (!this._idle_roots.has(root)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    });\n    Document.prototype.notify_idle = function (model) {\n        this._idle_roots.set(model, true);\n        if (this.is_idle) {\n            return this.idle.emit();\n        }\n    };\n    Document.prototype.clear = function () {\n        var results;\n        this._push_all_models_freeze();\n        try {\n            results = [];\n            while (this._roots.length > 0) {\n                results.push(this.remove_root(this._roots[0]));\n            }\n            return results;\n        }\n        finally {\n            this._pop_all_models_freeze();\n        }\n    };\n    Document.prototype.destructively_move = function (dest_doc) {\n        var j, l, len, len1, len2, n, r, ref1, roots;\n        if (dest_doc === this) {\n            throw new Error(\"Attempted to overwrite a document with itself\");\n        }\n        dest_doc.clear();\n        roots = [];\n        ref1 = this._roots;\n        for (j = 0, len = ref1.length; j < len; j++) {\n            r = ref1[j];\n            roots.push(r);\n        }\n        this.clear();\n        for (l = 0, len1 = roots.length; l < len1; l++) {\n            r = roots[l];\n            if (r.document !== null) {\n                throw new Error(\"Somehow we didn't detach \" + r);\n            }\n        }\n        if (Object.keys(this._all_models).length !== 0) {\n            throw new Error(\"@_all_models still had stuff in it: \" + this._all_models);\n        }\n        for (n = 0, len2 = roots.length; n < len2; n++) {\n            r = roots[n];\n            dest_doc.add_root(r);\n        }\n        return dest_doc.set_title(this._title);\n    };\n    Document.prototype._push_all_models_freeze = function () {\n        return this._all_models_freeze_count += 1;\n    };\n    Document.prototype._pop_all_models_freeze = function () {\n        this._all_models_freeze_count -= 1;\n        if (this._all_models_freeze_count === 0) {\n            return this._recompute_all_models();\n        }\n    };\n    Document.prototype._invalidate_all_models = function () {\n        logging_1.logger.debug(\"invalidating document models\");\n        if (this._all_models_freeze_count === 0) {\n            return this._recompute_all_models();\n        }\n    };\n    Document.prototype._recompute_all_models = function () {\n        var a, d, j, l, len, len1, len2, len3, m, n, name, new_all_models_set, o, old_all_models_set, r, recomputed, ref1, ref2, ref3, ref4, to_attach, to_detach;\n        new_all_models_set = new data_structures_1.Set();\n        ref1 = this._roots;\n        for (j = 0, len = ref1.length; j < len; j++) {\n            r = ref1[j];\n            new_all_models_set = new_all_models_set.union(r.references());\n        }\n        old_all_models_set = new data_structures_1.Set(object_1.values(this._all_models));\n        to_detach = old_all_models_set.diff(new_all_models_set);\n        to_attach = new_all_models_set.diff(old_all_models_set);\n        recomputed = {};\n        ref2 = new_all_models_set.values;\n        for (l = 0, len1 = ref2.length; l < len1; l++) {\n            m = ref2[l];\n            recomputed[m.id] = m;\n        }\n        ref3 = to_detach.values;\n        for (n = 0, len2 = ref3.length; n < len2; n++) {\n            d = ref3[n];\n            d.detach_document();\n            name = d.name;\n            if (name !== null) {\n                this._all_models_by_name.remove_value(name, d);\n            }\n        }\n        ref4 = to_attach.values;\n        for (o = 0, len3 = ref4.length; o < len3; o++) {\n            a = ref4[o];\n            a.attach_document(this);\n            name = a.name;\n            if (name !== null) {\n                this._all_models_by_name.add_value(name, a);\n            }\n        }\n        return this._all_models = recomputed;\n    };\n    Document.prototype.roots = function () {\n        return this._roots;\n    };\n    Document.prototype.add_root = function (model, setter_id) {\n        logging_1.logger.debug(\"Adding root: \" + model);\n        if (indexOf.call(this._roots, model) >= 0) {\n            return;\n        }\n        this._push_all_models_freeze();\n        try {\n            this._roots.push(model);\n        }\n        finally {\n            this._pop_all_models_freeze();\n        }\n        return this._trigger_on_change(new exports.RootAddedEvent(this, model, setter_id));\n    };\n    Document.prototype.remove_root = function (model, setter_id) {\n        var i;\n        i = this._roots.indexOf(model);\n        if (i < 0) {\n            return;\n        }\n        this._push_all_models_freeze();\n        try {\n            this._roots.splice(i, 1);\n        }\n        finally {\n            this._pop_all_models_freeze();\n        }\n        return this._trigger_on_change(new exports.RootRemovedEvent(this, model, setter_id));\n    };\n    Document.prototype.title = function () {\n        return this._title;\n    };\n    Document.prototype.set_title = function (title, setter_id) {\n        if (title !== this._title) {\n            this._title = title;\n            return this._trigger_on_change(new exports.TitleChangedEvent(this, title, setter_id));\n        }\n    };\n    Document.prototype.get_model_by_id = function (model_id) {\n        if (model_id in this._all_models) {\n            return this._all_models[model_id];\n        }\n        else {\n            return null;\n        }\n    };\n    Document.prototype.get_model_by_name = function (name) {\n        return this._all_models_by_name.get_one(name, \"Multiple models are named '\" + name + \"'\");\n    };\n    Document.prototype.on_change = function (callback) {\n        if (indexOf.call(this._callbacks, callback) >= 0) {\n            return;\n        }\n        return this._callbacks.push(callback);\n    };\n    Document.prototype.remove_on_change = function (callback) {\n        var i;\n        i = this._callbacks.indexOf(callback);\n        if (i >= 0) {\n            return this._callbacks.splice(i, 1);\n        }\n    };\n    Document.prototype._trigger_on_change = function (event) {\n        var cb, j, len, ref1, results;\n        ref1 = this._callbacks;\n        results = [];\n        for (j = 0, len = ref1.length; j < len; j++) {\n            cb = ref1[j];\n            results.push(cb(event));\n        }\n        return results;\n    };\n    Document.prototype._notify_change = function (model, attr, old, new_, options) {\n        if (attr === 'name') {\n            this._all_models_by_name.remove_value(old, model);\n            if (new_ !== null) {\n                this._all_models_by_name.add_value(new_, model);\n            }\n        }\n        return this._trigger_on_change(new exports.ModelChangedEvent(this, model, attr, old, new_, options != null ? options.setter_id : void 0));\n    };\n    Document._references_json = function (references, include_defaults) {\n        var j, len, r, ref, references_json;\n        if (include_defaults == null) {\n            include_defaults = true;\n        }\n        references_json = [];\n        for (j = 0, len = references.length; j < len; j++) {\n            r = references[j];\n            ref = r.ref();\n            ref['attributes'] = r.attributes_as_json(include_defaults);\n            delete ref['attributes']['id'];\n            references_json.push(ref);\n        }\n        return references_json;\n    };\n    Document._instantiate_object = function (obj_id, obj_type, obj_attrs) {\n        var full_attrs, model;\n        full_attrs = object_1.extend({}, obj_attrs, {\n            id: obj_id\n        });\n        model = base_1.Models(obj_type);\n        return new model(full_attrs, {\n            silent: true,\n            defer_initialization: true\n        });\n    };\n    Document._instantiate_references_json = function (references_json, existing_models) {\n        var instance, j, len, obj, obj_attrs, obj_id, obj_type, references;\n        references = {};\n        for (j = 0, len = references_json.length; j < len; j++) {\n            obj = references_json[j];\n            obj_id = obj['id'];\n            obj_type = obj['type'];\n            obj_attrs = obj['attributes'];\n            if (obj_id in existing_models) {\n                instance = existing_models[obj_id];\n            }\n            else {\n                instance = Document._instantiate_object(obj_id, obj_type, obj_attrs);\n                if ('subtype' in obj) {\n                    instance.set_subtype(obj['subtype']);\n                }\n            }\n            references[instance.id] = instance;\n        }\n        return references;\n    };\n    Document._resolve_refs = function (value, old_references, new_references) {\n        var resolve_array, resolve_dict, resolve_ref;\n        resolve_ref = function (v) {\n            if (refs_1.is_ref(v)) {\n                if (v['id'] in old_references) {\n                    return old_references[v['id']];\n                }\n                else if (v['id'] in new_references) {\n                    return new_references[v['id']];\n                }\n                else {\n                    throw new Error(\"reference \" + (JSON.stringify(v)) + \" isn't known (not in Document?)\");\n                }\n            }\n            else if (types_1.isArray(v)) {\n                return resolve_array(v);\n            }\n            else if (types_1.isObject(v)) {\n                return resolve_dict(v);\n            }\n            else {\n                return v;\n            }\n        };\n        resolve_dict = function (dict) {\n            var k, resolved, v;\n            resolved = {};\n            for (k in dict) {\n                v = dict[k];\n                resolved[k] = resolve_ref(v);\n            }\n            return resolved;\n        };\n        resolve_array = function (array) {\n            var j, len, results, v;\n            results = [];\n            for (j = 0, len = array.length; j < len; j++) {\n                v = array[j];\n                results.push(resolve_ref(v));\n            }\n            return results;\n        };\n        return resolve_ref(value);\n    };\n    Document._initialize_references_json = function (references_json, old_references, new_references) {\n        var foreach_depth_first, instance, j, len, obj, obj_attrs, obj_id, to_update, was_new;\n        to_update = {};\n        for (j = 0, len = references_json.length; j < len; j++) {\n            obj = references_json[j];\n            obj_id = obj['id'];\n            obj_attrs = obj['attributes'];\n            was_new = false;\n            instance = obj_id in old_references ? old_references[obj_id] : (was_new = true, new_references[obj_id]);\n            obj_attrs = Document._resolve_refs(obj_attrs, old_references, new_references);\n            to_update[instance.id] = [instance, obj_attrs, was_new];\n        }\n        foreach_depth_first = function (items, f) {\n            var already_started, foreach_value, k, results, v;\n            already_started = {};\n            foreach_value = function (v, f) {\n                var a, attrs, e, k, l, len1, ref1, results, results1, same_as_v;\n                if (v instanceof has_props_1.HasProps) {\n                    if (!(v.id in already_started) && v.id in items) {\n                        already_started[v.id] = true;\n                        ref1 = items[v.id], same_as_v = ref1[0], attrs = ref1[1], was_new = ref1[2];\n                        for (a in attrs) {\n                            e = attrs[a];\n                            foreach_value(e, f);\n                        }\n                        return f(v, attrs, was_new);\n                    }\n                }\n                else if (types_1.isArray(v)) {\n                    results = [];\n                    for (l = 0, len1 = v.length; l < len1; l++) {\n                        e = v[l];\n                        results.push(foreach_value(e, f));\n                    }\n                    return results;\n                }\n                else if (types_1.isObject(v)) {\n                    results1 = [];\n                    for (k in v) {\n                        e = v[k];\n                        results1.push(foreach_value(e, f));\n                    }\n                    return results1;\n                }\n            };\n            results = [];\n            for (k in items) {\n                v = items[k];\n                results.push(foreach_value(v[0], f));\n            }\n            return results;\n        };\n        foreach_depth_first(to_update, function (instance, attrs, was_new) {\n            if (was_new) {\n                return instance.setv(attrs, {\n                    silent: true\n                });\n            }\n        });\n        return foreach_depth_first(to_update, function (instance, attrs, was_new) {\n            if (was_new) {\n                return instance.finalize(attrs);\n            }\n        });\n    };\n    Document._event_for_attribute_change = function (changed_obj, key, new_value, doc, value_refs) {\n        var changed_model, event;\n        changed_model = doc.get_model_by_id(changed_obj.id);\n        if (!changed_model.attribute_is_serializable(key)) {\n            return null;\n        }\n        event = {\n            'kind': 'ModelChanged',\n            'model': {\n                id: changed_obj.id,\n                type: changed_obj.type\n            },\n            'attr': key,\n            'new': new_value\n        };\n        has_props_1.HasProps._json_record_references(doc, new_value, value_refs, true);\n        return event;\n    };\n    Document._events_to_sync_objects = function (from_obj, to_obj, to_doc, value_refs) {\n        var added, events, from_keys, j, key, l, len, len1, len2, n, new_value, old_value, removed, shared, to_keys;\n        from_keys = Object.keys(from_obj.attributes);\n        to_keys = Object.keys(to_obj.attributes);\n        removed = array_1.difference(from_keys, to_keys);\n        added = array_1.difference(to_keys, from_keys);\n        shared = array_1.intersection(from_keys, to_keys);\n        events = [];\n        for (j = 0, len = removed.length; j < len; j++) {\n            key = removed[j];\n            logging_1.logger.warn(\"Server sent key \" + key + \" but we don't seem to have it in our JSON\");\n        }\n        for (l = 0, len1 = added.length; l < len1; l++) {\n            key = added[l];\n            new_value = to_obj.attributes[key];\n            events.push(Document._event_for_attribute_change(from_obj, key, new_value, to_doc, value_refs));\n        }\n        for (n = 0, len2 = shared.length; n < len2; n++) {\n            key = shared[n];\n            old_value = from_obj.attributes[key];\n            new_value = to_obj.attributes[key];\n            if (old_value === null && new_value === null) {\n            }\n            else if (old_value === null || new_value === null) {\n                events.push(Document._event_for_attribute_change(from_obj, key, new_value, to_doc, value_refs));\n            }\n            else {\n                if (!eq_1.isEqual(old_value, new_value)) {\n                    events.push(Document._event_for_attribute_change(from_obj, key, new_value, to_doc, value_refs));\n                }\n            }\n        }\n        return events.filter(function (e) {\n            return e !== null;\n        });\n    };\n    Document._compute_patch_since_json = function (from_json, to_doc) {\n        var events, from_references, from_root_ids, from_roots, id, include_defaults, j, l, len, len1, model, r, ref1, ref2, ref3, refs, to_json, to_references, to_root_ids, to_roots, update_model_events, value_refs;\n        to_json = to_doc.to_json(include_defaults = false);\n        refs = function (json) {\n            var j, len, obj, ref1, result;\n            result = {};\n            ref1 = json['roots']['references'];\n            for (j = 0, len = ref1.length; j < len; j++) {\n                obj = ref1[j];\n                result[obj.id] = obj;\n            }\n            return result;\n        };\n        from_references = refs(from_json);\n        from_roots = {};\n        from_root_ids = [];\n        ref1 = from_json['roots']['root_ids'];\n        for (j = 0, len = ref1.length; j < len; j++) {\n            r = ref1[j];\n            from_roots[r] = from_references[r];\n            from_root_ids.push(r);\n        }\n        to_references = refs(to_json);\n        to_roots = {};\n        to_root_ids = [];\n        ref2 = to_json['roots']['root_ids'];\n        for (l = 0, len1 = ref2.length; l < len1; l++) {\n            r = ref2[l];\n            to_roots[r] = to_references[r];\n            to_root_ids.push(r);\n        }\n        from_root_ids.sort();\n        to_root_ids.sort();\n        if (array_1.difference(from_root_ids, to_root_ids).length > 0 || array_1.difference(to_root_ids, from_root_ids).length > 0) {\n            throw new Error(\"Not implemented: computing add/remove of document roots\");\n        }\n        value_refs = {};\n        events = [];\n        ref3 = to_doc._all_models;\n        for (id in ref3) {\n            model = ref3[id];\n            if (id in from_references) {\n                update_model_events = Document._events_to_sync_objects(from_references[id], to_references[id], to_doc, value_refs);\n                events = events.concat(update_model_events);\n            }\n        }\n        return {\n            'events': events,\n            'references': Document._references_json(object_1.values(value_refs), include_defaults = false)\n        };\n    };\n    Document.prototype.to_json_string = function (include_defaults) {\n        if (include_defaults == null) {\n            include_defaults = true;\n        }\n        return JSON.stringify(this.to_json(include_defaults));\n    };\n    Document.prototype.to_json = function (include_defaults) {\n        var j, len, r, ref1, root_ids, root_references;\n        if (include_defaults == null) {\n            include_defaults = true;\n        }\n        root_ids = [];\n        ref1 = this._roots;\n        for (j = 0, len = ref1.length; j < len; j++) {\n            r = ref1[j];\n            root_ids.push(r.id);\n        }\n        root_references = object_1.values(this._all_models);\n        return {\n            'title': this._title,\n            'roots': {\n                'root_ids': root_ids,\n                'references': Document._references_json(root_references, include_defaults)\n            }\n        };\n    };\n    Document.from_json_string = function (s) {\n        var json;\n        if (s === null || (s == null)) {\n            throw new Error(\"JSON string is \" + (typeof s));\n        }\n        json = JSON.parse(s);\n        return Document.from_json(json);\n    };\n    Document.from_json = function (json) {\n        var doc, is_dev, j, len, py_version, r, references, references_json, root_ids, roots_json, versions_string;\n        logging_1.logger.debug(\"Creating Document from JSON\");\n        if (typeof json !== 'object') {\n            throw new Error(\"JSON object has wrong type \" + (typeof json));\n        }\n        py_version = json['version'];\n        is_dev = py_version.indexOf('+') !== -1 || py_version.indexOf('-') !== -1;\n        versions_string = \"Library versions: JS (\" + version_1.version + \")  /  Python (\" + py_version + \")\";\n        if (!is_dev && version_1.version !== py_version) {\n            logging_1.logger.warn(\"JS/Python version mismatch\");\n            logging_1.logger.warn(versions_string);\n        }\n        else {\n            logging_1.logger.debug(versions_string);\n        }\n        roots_json = json['roots'];\n        root_ids = roots_json['root_ids'];\n        references_json = roots_json['references'];\n        references = Document._instantiate_references_json(references_json, {});\n        Document._initialize_references_json(references_json, {}, references);\n        doc = new Document();\n        for (j = 0, len = root_ids.length; j < len; j++) {\n            r = root_ids[j];\n            doc.add_root(references[r]);\n        }\n        doc.set_title(json['title']);\n        return doc;\n    };\n    Document.prototype.replace_with_json = function (json) {\n        var replacement;\n        replacement = Document.from_json(json);\n        return replacement.destructively_move(this);\n    };\n    Document.prototype.create_json_patch_string = function (events) {\n        return JSON.stringify(this.create_json_patch(events));\n    };\n    Document.prototype.create_json_patch = function (events) {\n        var event, j, json_events, len, references, result;\n        references = {};\n        json_events = [];\n        for (j = 0, len = events.length; j < len; j++) {\n            event = events[j];\n            if (event.document !== this) {\n                logging_1.logger.warn(\"Cannot create a patch using events from a different document, event had \", event.document, \" we are \", this);\n                throw new Error(\"Cannot create a patch using events from a different document\");\n            }\n            json_events.push(event.json(references));\n        }\n        return result = {\n            events: json_events,\n            references: Document._references_json(object_1.values(references))\n        };\n    };\n    Document.prototype.apply_json_patch_string = function (patch) {\n        return this.apply_json_patch(JSON.parse(patch));\n    };\n    Document.prototype.apply_json_patch = function (patch, setter_id) {\n        var attr, column_source, column_source_id, data, event_json, events_json, id, j, l, len, len1, model_id, model_type, new_references, obj1, old_references, patched_id, patched_obj, patches, ref1, references, references_json, results, rollover, root_id, root_obj, shapes, value;\n        references_json = patch['references'];\n        events_json = patch['events'];\n        references = Document._instantiate_references_json(references_json, this._all_models);\n        for (j = 0, len = events_json.length; j < len; j++) {\n            event_json = events_json[j];\n            if ('model' in event_json) {\n                model_id = event_json['model']['id'];\n                if (model_id in this._all_models) {\n                    references[model_id] = this._all_models[model_id];\n                }\n                else {\n                    if (!(model_id in references)) {\n                        logging_1.logger.warn(\"Got an event for unknown model \", event_json['model']);\n                        throw new Error(\"event model wasn't known\");\n                    }\n                }\n            }\n        }\n        old_references = {};\n        new_references = {};\n        for (id in references) {\n            value = references[id];\n            if (id in this._all_models) {\n                old_references[id] = value;\n            }\n            else {\n                new_references[id] = value;\n            }\n        }\n        Document._initialize_references_json(references_json, old_references, new_references);\n        results = [];\n        for (l = 0, len1 = events_json.length; l < len1; l++) {\n            event_json = events_json[l];\n            switch (event_json.kind) {\n                case 'ModelChanged':\n                    patched_id = event_json['model']['id'];\n                    if (!(patched_id in this._all_models)) {\n                        throw new Error(\"Cannot apply patch to \" + patched_id + \" which is not in the document\");\n                    }\n                    patched_obj = this._all_models[patched_id];\n                    attr = event_json['attr'];\n                    model_type = event_json['model']['type'];\n                    if (attr === 'data' && model_type === 'ColumnDataSource') {\n                        ref1 = serialization_1.decode_column_data(event_json['new']), data = ref1[0], shapes = ref1[1];\n                        results.push(patched_obj.setv({\n                            _shapes: shapes,\n                            data: data\n                        }, {\n                            setter_id: setter_id\n                        }));\n                    }\n                    else {\n                        value = Document._resolve_refs(event_json['new'], old_references, new_references);\n                        results.push(patched_obj.setv((obj1 = {},\n                            obj1[\"\" + attr] = value,\n                            obj1), {\n                            setter_id: setter_id\n                        }));\n                    }\n                    break;\n                case 'ColumnsStreamed':\n                    column_source_id = event_json['column_source']['id'];\n                    if (!(column_source_id in this._all_models)) {\n                        throw new Error(\"Cannot stream to \" + column_source_id + \" which is not in the document\");\n                    }\n                    column_source = this._all_models[column_source_id];\n                    if (!(column_source instanceof column_data_source_1.ColumnDataSource)) {\n                        throw new Error(\"Cannot stream to non-ColumnDataSource\");\n                    }\n                    data = event_json['data'];\n                    rollover = event_json['rollover'];\n                    results.push(column_source.stream(data, rollover));\n                    break;\n                case 'ColumnsPatched':\n                    column_source_id = event_json['column_source']['id'];\n                    if (!(column_source_id in this._all_models)) {\n                        throw new Error(\"Cannot patch \" + column_source_id + \" which is not in the document\");\n                    }\n                    column_source = this._all_models[column_source_id];\n                    if (!(column_source instanceof column_data_source_1.ColumnDataSource)) {\n                        throw new Error(\"Cannot patch non-ColumnDataSource\");\n                    }\n                    patches = event_json['patches'];\n                    results.push(column_source.patch(patches));\n                    break;\n                case 'RootAdded':\n                    root_id = event_json['model']['id'];\n                    root_obj = references[root_id];\n                    results.push(this.add_root(root_obj, setter_id));\n                    break;\n                case 'RootRemoved':\n                    root_id = event_json['model']['id'];\n                    root_obj = references[root_id];\n                    results.push(this.remove_root(root_obj, setter_id));\n                    break;\n                case 'TitleChanged':\n                    results.push(this.set_title(event_json['title'], setter_id));\n                    break;\n                default:\n                    throw new Error(\"Unknown patch event \" + JSON.stringify(event_json));\n            }\n        }\n        return results;\n    };\n    return Document;\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _create_view, _get_session, _handle_notebook_comms, _init_comms, _render_document_to_element, _sessions, _update_comms_callback, add_document_from_session, add_model_from_session, add_model_static, fill_render_item_from_script_tag;\nvar base = require(\"./base\");\nvar client_1 = require(\"./client\");\nvar logging_1 = require(\"./core/logging\");\nvar document_1 = require(\"./document\");\nvar dom_1 = require(\"./core/dom\");\nexports.BOKEH_ROOT = \"bk-root\";\n_handle_notebook_comms = function (msg) {\n    var data;\n    logging_1.logger.debug(\"handling notebook comms\");\n    data = JSON.parse(msg.content.data);\n    if ('events' in data && 'references' in data) {\n        return this.apply_json_patch(data);\n    }\n    else if ('doc' in data) {\n        return this.replace_with_json(data['doc']);\n    }\n    else {\n        throw new Error(\"handling notebook comms message: \", msg);\n    }\n};\n_update_comms_callback = function (target, doc, comm) {\n    if (target === comm.target_name) {\n        return comm.on_msg(_handle_notebook_comms.bind(doc));\n    }\n};\n_init_comms = function (target, doc) {\n    var comm_manager, e, id, promise, ref, update_comms;\n    if ((typeof Jupyter !== \"undefined\" && Jupyter !== null) && (Jupyter.notebook.kernel != null)) {\n        logging_1.logger.info(\"Registering Jupyter comms for target \" + target);\n        comm_manager = Jupyter.notebook.kernel.comm_manager;\n        update_comms = function (comm) {\n            return _update_comms_callback(target, doc, comm);\n        };\n        ref = comm_manager.comms;\n        for (id in ref) {\n            promise = ref[id];\n            promise.then(update_comms);\n        }\n        try {\n            return comm_manager.register_target(target, function (comm, msg) {\n                logging_1.logger.info(\"Registering Jupyter comms for target \" + target);\n                return comm.on_msg(_handle_notebook_comms.bind(doc));\n            });\n        }\n        catch (error1) {\n            e = error1;\n            return logging_1.logger.warn(\"Jupyter comms failed to register. push_notebook() will not function. (exception reported: \" + e + \")\");\n        }\n    }\n    else {\n        return console.warn('Jupyter notebooks comms not available. push_notebook() will not function');\n    }\n};\n_create_view = function (model) {\n    var view;\n    view = new model.default_view({\n        model: model,\n        parent: null\n    });\n    base.index[model.id] = view;\n    return view;\n};\n_render_document_to_element = function (element, document, use_for_title) {\n    var i, len, model, ref, render_model, unrender_model, views;\n    views = {};\n    render_model = function (model) {\n        var view;\n        view = _create_view(model);\n        view.renderTo(element);\n        return views[model.id] = view;\n    };\n    unrender_model = function (model) {\n        var view;\n        if (model.id in views) {\n            view = views[model.id];\n            element.removeChild(view.el);\n            delete views[model.id];\n            return delete base.index[model.id];\n        }\n    };\n    ref = document.roots();\n    for (i = 0, len = ref.length; i < len; i++) {\n        model = ref[i];\n        render_model(model);\n    }\n    if (use_for_title) {\n        window.document.title = document.title();\n    }\n    document.on_change(function (event) {\n        if (event instanceof document_1.RootAddedEvent) {\n            return render_model(event.model);\n        }\n        else if (event instanceof document_1.RootRemovedEvent) {\n            return unrender_model(event.model);\n        }\n        else if (use_for_title && event instanceof document_1.TitleChangedEvent) {\n            return window.document.title = event.title;\n        }\n    });\n    return views;\n};\nadd_model_static = function (element, model_id, doc) {\n    var model, view;\n    model = doc.get_model_by_id(model_id);\n    if (model == null) {\n        throw new Error(\"Model \" + model_id + \" was not in document \" + doc);\n    }\n    view = _create_view(model);\n    return view.renderTo(element, true);\n};\nexports.add_document_static = function (element, doc, use_for_title) {\n    return _render_document_to_element(element, doc, use_for_title);\n};\nexports.add_document_standalone = function (document, element, use_for_title) {\n    if (use_for_title == null) {\n        use_for_title = false;\n    }\n    return _render_document_to_element(element, document, use_for_title);\n};\n_sessions = {};\n_get_session = function (websocket_url, session_id, args_string) {\n    var subsessions;\n    if (websocket_url == null) {\n        throw new Error(\"Missing websocket_url\");\n    }\n    if (!(websocket_url in _sessions)) {\n        _sessions[websocket_url] = {};\n    }\n    subsessions = _sessions[websocket_url];\n    if (!(session_id in subsessions)) {\n        subsessions[session_id] = client_1.pull_session(websocket_url, session_id, args_string);\n    }\n    return subsessions[session_id];\n};\nadd_document_from_session = function (element, websocket_url, session_id, use_for_title) {\n    var args_string, promise;\n    args_string = window.location.search.substr(1);\n    promise = _get_session(websocket_url, session_id, args_string);\n    return promise.then(function (session) {\n        return _render_document_to_element(element, session.document, use_for_title);\n    }, function (error) {\n        logging_1.logger.error(\"Failed to load Bokeh session \" + session_id + \": \" + error);\n        throw error;\n    });\n};\nadd_model_from_session = function (element, websocket_url, model_id, session_id) {\n    var args_string, promise;\n    args_string = window.location.search.substr(1);\n    promise = _get_session(websocket_url, session_id, args_string);\n    return promise.then(function (session) {\n        var model, view;\n        model = session.document.get_model_by_id(model_id);\n        if (model == null) {\n            throw new Error(\"Did not find model \" + model_id + \" in session\");\n        }\n        view = _create_view(model);\n        return view.renderTo(element, true);\n    }, function (error) {\n        logging_1.logger.error(\"Failed to load Bokeh session \" + session_id + \": \" + error);\n        throw error;\n    });\n};\nexports.inject_css = function (url) {\n    var element;\n    element = dom_1.link({\n        href: url,\n        rel: \"stylesheet\",\n        type: \"text/css\"\n    });\n    return document.body.appendChild(element);\n};\nexports.inject_raw_css = function (css) {\n    var element;\n    element = dom_1.style({}, css);\n    return document.body.appendChild(element);\n};\nfill_render_item_from_script_tag = function (script, item) {\n    var info;\n    info = script.dataset;\n    if ((info.bokehLogLevel != null) && info.bokehLogLevel.length > 0) {\n        logging_1.set_log_level(info.bokehLogLevel);\n    }\n    if ((info.bokehDocId != null) && info.bokehDocId.length > 0) {\n        item['docid'] = info.bokehDocId;\n    }\n    if ((info.bokehModelId != null) && info.bokehModelId.length > 0) {\n        item['modelid'] = info.bokehModelId;\n    }\n    if ((info.bokehSessionId != null) && info.bokehSessionId.length > 0) {\n        item['sessionid'] = info.bokehSessionId;\n    }\n    return logging_1.logger.info(\"Will inject Bokeh script tag with params \" + (JSON.stringify(item)));\n};\nexports.embed_items = function (docs_json, render_items, app_path, absolute_url) {\n    var child, container, docid, docs, elem, element_id, i, item, len, loc, promise, protocol, results, use_for_title, websocket_url;\n    protocol = 'ws:';\n    if (window.location.protocol === 'https:') {\n        protocol = 'wss:';\n    }\n    if (absolute_url != null) {\n        loc = new URL(absolute_url);\n    }\n    else {\n        loc = window.location;\n    }\n    if (app_path != null) {\n        if (app_path === \"/\") {\n            app_path = \"\";\n        }\n    }\n    else {\n        app_path = loc.pathname.replace(/\\/+$/, '');\n    }\n    websocket_url = protocol + '//' + loc.host + app_path + '/ws';\n    logging_1.logger.debug(\"embed: computed ws url: \" + websocket_url);\n    docs = {};\n    for (docid in docs_json) {\n        docs[docid] = document_1.Document.from_json(docs_json[docid]);\n    }\n    results = [];\n    for (i = 0, len = render_items.length; i < len; i++) {\n        item = render_items[i];\n        if (item.notebook_comms_target != null) {\n            _init_comms(item.notebook_comms_target, docs[docid]);\n        }\n        element_id = item['elementid'];\n        elem = document.getElementById(element_id);\n        if (elem == null) {\n            throw new Error(\"Error rendering Bokeh model: could not find tag with id: \" + element_id);\n        }\n        if (!document.body.contains(elem)) {\n            throw new Error(\"Error rendering Bokeh model: element with id '\" + element_id + \"' must be under <body>\");\n        }\n        if (elem.tagName === \"SCRIPT\") {\n            fill_render_item_from_script_tag(elem, item);\n            container = dom_1.div({\n                \"class\": exports.BOKEH_ROOT\n            });\n            dom_1.replaceWith(elem, container);\n            child = dom_1.div();\n            container.appendChild(child);\n            elem = child;\n        }\n        use_for_title = (item.use_for_title != null) && item.use_for_title;\n        promise = null;\n        if (item.modelid != null) {\n            if (item.docid != null) {\n                add_model_static(elem, item.modelid, docs[item.docid]);\n            }\n            else if (item.sessionid != null) {\n                promise = add_model_from_session(elem, websocket_url, item.modelid, item.sessionid);\n            }\n            else {\n                throw new Error(\"Error rendering Bokeh model \" + item['modelid'] + \" to element \" + element_id + \": no document ID or session ID specified\");\n            }\n        }\n        else {\n            if (item.docid != null) {\n                exports.add_document_static(elem, docs[item.docid], use_for_title);\n            }\n            else if (item.sessionid != null) {\n                promise = add_document_from_session(elem, websocket_url, item.sessionid, use_for_title);\n            }\n            else {\n                throw new Error(\"Error rendering Bokeh document to element \" + element_id + \": no document ID or session ID specified\");\n            }\n        }\n        if (promise !== null) {\n            results.push(promise.then(function (value) {\n                return console.log(\"Bokeh items were rendered successfully\");\n            }, function (error) {\n                return console.log(\"Error rendering Bokeh items \", error);\n            }));\n        }\n        else {\n            results.push(void 0);\n        }\n    }\n    return results;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"./polyfill\");\nvar version_1 = require(\"./version\");\nexports.version = version_1.version;\nvar embed = require(\"./embed\");\nexports.embed = embed;\nvar logging_1 = require(\"./core/logging\");\nexports.logger = logging_1.logger;\nexports.set_log_level = logging_1.set_log_level;\nvar settings_1 = require(\"./core/settings\");\nexports.settings = settings_1.settings;\nvar base_1 = require(\"./base\");\nexports.Models = base_1.Models;\nexports.index = base_1.index;\nvar document_1 = require(\"./document\");\nexports.documents = document_1.documents;\nvar safely_1 = require(\"./safely\");\nexports.safely = safely_1.safely;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar has_props_1 = require(\"./core/has_props\");\nvar p = require(\"./core/properties\");\nvar types_1 = require(\"./core/util/types\");\nvar object_1 = require(\"./core/util/object\");\nvar logging_1 = require(\"./core/logging\");\nexports.Model = (function (superClass) {\n    extend(Model, superClass);\n    function Model() {\n        return Model.__super__.constructor.apply(this, arguments);\n    }\n    Model.prototype.type = \"Model\";\n    Model.define({\n        tags: [p.Array, []],\n        name: [p.String],\n        js_property_callbacks: [p.Any, {}],\n        js_event_callbacks: [p.Any, {}],\n        subscribed_events: [p.Array, []]\n    });\n    Model.prototype.connect_signals = function () {\n        var attr, callbacks, cb, evt, i, len, ref1, ref2, ref3;\n        Model.__super__.connect_signals.call(this);\n        ref1 = this.js_property_callbacks;\n        for (evt in ref1) {\n            callbacks = ref1[evt];\n            ref2 = evt.split(':'), evt = ref2[0], attr = (ref3 = ref2[1]) != null ? ref3 : null;\n            for (i = 0, len = callbacks.length; i < len; i++) {\n                cb = callbacks[i];\n                if (attr !== null) {\n                    this.connect(this.properties[attr][evt], function () {\n                        return cb.execute(this);\n                    });\n                }\n                else {\n                    this.connect(this[evt], function () {\n                        return cb.execute(this);\n                    });\n                }\n            }\n        }\n        this.connect(this.properties.js_event_callbacks.change, function () {\n            return this._update_event_callbacks;\n        });\n        return this.connect(this.properties.subscribed_events.change, function () {\n            return this._update_event_callbacks;\n        });\n    };\n    Model.prototype._process_event = function (event) {\n        var callback, i, len, ref1, ref2;\n        if (event.is_applicable_to(this)) {\n            event = event._customize_event(this);\n            ref2 = (ref1 = this.js_event_callbacks[event.event_name]) != null ? ref1 : [];\n            for (i = 0, len = ref2.length; i < len; i++) {\n                callback = ref2[i];\n                callback.execute(event, {});\n            }\n            if (this.subscribed_events.some(function (m) {\n                return m === event.event_name;\n            })) {\n                return this.document.event_manager.send_event(event);\n            }\n        }\n    };\n    Model.prototype.trigger_event = function (event) {\n        var ref1;\n        return (ref1 = this.document) != null ? ref1.event_manager.trigger(event.set_model_id(this.id)) : void 0;\n    };\n    Model.prototype._update_event_callbacks = function () {\n        if (this.document == null) {\n            logging_1.logger.warn('WARNING: Document not defined for updating event callbacks');\n            return;\n        }\n        return this.document.event_manager.subscribed_models.push(this.id);\n    };\n    Model.prototype._doc_attached = function () {\n        if (!object_1.isEmpty(this.js_event_callbacks) || !object_1.isEmpty(this.subscribed_events)) {\n            return this._update_event_callbacks();\n        }\n    };\n    Model.prototype.select = function (selector) {\n        if (selector.prototype instanceof Model) {\n            return this.references().filter(function (ref) {\n                return ref instanceof selector;\n            });\n        }\n        else if (types_1.isString(selector)) {\n            return this.references().filter(function (ref) {\n                return ref.name === selector;\n            });\n        }\n        else {\n            throw new Error(\"invalid selector\");\n        }\n    };\n    Model.prototype.select_one = function (selector) {\n        var result;\n        result = this.select(selector);\n        switch (result.length) {\n            case 0:\n                return null;\n            case 1:\n                return result[0];\n            default:\n                throw new Error(\"found more than one object matching given selector\");\n        }\n    };\n    return Model;\n})(has_props_1.HasProps);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar side_panel_1 = require(\"core/layout/side_panel\");\nvar p = require(\"core/properties\");\nvar renderer_1 = require(\"../renderers/renderer\");\nexports.AnnotationView = (function (superClass) {\n    extend(AnnotationView, superClass);\n    function AnnotationView() {\n        return AnnotationView.__super__.constructor.apply(this, arguments);\n    }\n    AnnotationView.prototype._get_panel_offset = function () {\n        var x, y;\n        x = this.model.panel._left.value;\n        y = this.model.panel._bottom.value;\n        return {\n            x: x,\n            y: -y\n        };\n    };\n    AnnotationView.prototype._get_size = function () {\n        return -1;\n    };\n    return AnnotationView;\n})(renderer_1.RendererView);\nexports.Annotation = (function (superClass) {\n    extend(Annotation, superClass);\n    function Annotation() {\n        return Annotation.__super__.constructor.apply(this, arguments);\n    }\n    Annotation.prototype.type = 'Annotation';\n    Annotation.prototype.default_view = exports.AnnotationView;\n    Annotation.define({\n        plot: [p.Instance]\n    });\n    Annotation.override({\n        level: 'annotation'\n    });\n    Annotation.prototype.add_panel = function (side) {\n        this.panel = new side_panel_1.SidePanel({\n            side: side\n        });\n        this.panel.attach_document(this.document);\n        return this.level = 'overlay';\n    };\n    return Annotation;\n})(renderer_1.Renderer);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar arrow_head_1 = require(\"./arrow_head\");\nvar column_data_source_1 = require(\"../sources/column_data_source\");\nvar p = require(\"core/properties\");\nvar math_1 = require(\"core/util/math\");\nexports.ArrowView = (function (superClass) {\n    extend(ArrowView, superClass);\n    function ArrowView() {\n        return ArrowView.__super__.constructor.apply(this, arguments);\n    }\n    ArrowView.prototype.initialize = function (options) {\n        ArrowView.__super__.initialize.call(this, options);\n        if (this.model.source == null) {\n            this.model.source = new column_data_source_1.ColumnDataSource();\n        }\n        this.canvas = this.plot_model.canvas;\n        return this.set_data(this.model.source);\n    };\n    ArrowView.prototype.connect_signals = function () {\n        ArrowView.__super__.connect_signals.call(this);\n        this.connect(this.model.change, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n        this.connect(this.model.source.streaming, function () {\n            return this.set_data(this.model.source);\n        });\n        this.connect(this.model.source.patching, function () {\n            return this.set_data(this.model.source);\n        });\n        return this.connect(this.model.source.change, function () {\n            return this.set_data(this.model.source);\n        });\n    };\n    ArrowView.prototype.set_data = function (source) {\n        ArrowView.__super__.set_data.call(this, source);\n        this.visuals.warm_cache(source);\n        return this.plot_view.request_render();\n    };\n    ArrowView.prototype._map_data = function () {\n        var end, start, x_name, y_name;\n        if (this.model.start_units === 'data') {\n            start = this.plot_view.map_to_screen(this._x_start, this._y_start, x_name = this.model.x_range_name, y_name = this.model.y_range_name);\n        }\n        else {\n            start = [this.canvas.v_vx_to_sx(this._x_start), this.canvas.v_vy_to_sy(this._y_start)];\n        }\n        if (this.model.end_units === 'data') {\n            end = this.plot_view.map_to_screen(this._x_end, this._y_end, x_name = this.model.x_range_name, y_name = this.model.y_range_name);\n        }\n        else {\n            end = [this.canvas.v_vx_to_sx(this._x_end), this.canvas.v_vy_to_sy(this._y_end)];\n        }\n        return [start, end];\n    };\n    ArrowView.prototype.render = function () {\n        var ctx, ref;\n        if (!this.model.visible) {\n            return;\n        }\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        ref = this._map_data(), this.start = ref[0], this.end = ref[1];\n        if (this.model.end != null) {\n            this._arrow_head(ctx, \"render\", this.model.end, this.start, this.end);\n        }\n        if (this.model.start != null) {\n            this._arrow_head(ctx, \"render\", this.model.start, this.end, this.start);\n        }\n        ctx.beginPath();\n        ctx.rect(0, 0, this.canvas._width.value, this.canvas._height.value);\n        if (this.model.end != null) {\n            this._arrow_head(ctx, \"clip\", this.model.end, this.start, this.end);\n        }\n        if (this.model.start != null) {\n            this._arrow_head(ctx, \"clip\", this.model.start, this.end, this.start);\n        }\n        ctx.closePath();\n        ctx.clip();\n        this._arrow_body(ctx);\n        return ctx.restore();\n    };\n    ArrowView.prototype._arrow_body = function (ctx) {\n        var i, j, ref, results;\n        if (!this.visuals.line.doit) {\n            return;\n        }\n        results = [];\n        for (i = j = 0, ref = this._x_start.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            this.visuals.line.set_vectorize(ctx, i);\n            ctx.beginPath();\n            ctx.moveTo(this.start[0][i], this.start[1][i]);\n            ctx.lineTo(this.end[0][i], this.end[1][i]);\n            results.push(ctx.stroke());\n        }\n        return results;\n    };\n    ArrowView.prototype._arrow_head = function (ctx, action, head, start, end) {\n        var angle, i, j, ref, results;\n        results = [];\n        for (i = j = 0, ref = this._x_start.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            angle = Math.PI / 2 + math_1.atan2([start[0][i], start[1][i]], [end[0][i], end[1][i]]);\n            ctx.save();\n            ctx.translate(end[0][i], end[1][i]);\n            ctx.rotate(angle);\n            if (action === \"render\") {\n                head.render(ctx);\n            }\n            else if (action === \"clip\") {\n                head.clip(ctx);\n            }\n            results.push(ctx.restore());\n        }\n        return results;\n    };\n    return ArrowView;\n})(annotation_1.AnnotationView);\nexports.Arrow = (function (superClass) {\n    extend(Arrow, superClass);\n    function Arrow() {\n        return Arrow.__super__.constructor.apply(this, arguments);\n    }\n    Arrow.prototype.default_view = exports.ArrowView;\n    Arrow.prototype.type = 'Arrow';\n    Arrow.mixins(['line']);\n    Arrow.define({\n        x_start: [p.NumberSpec],\n        y_start: [p.NumberSpec],\n        start_units: [p.String, 'data'],\n        start: [p.Instance, null],\n        x_end: [p.NumberSpec],\n        y_end: [p.NumberSpec],\n        end_units: [p.String, 'data'],\n        end: [p.Instance, new arrow_head_1.OpenHead({})],\n        source: [p.Instance],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default']\n    });\n    return Arrow;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar visuals_1 = require(\"core/visuals\");\nvar p = require(\"core/properties\");\nexports.ArrowHead = (function (superClass) {\n    extend(ArrowHead, superClass);\n    function ArrowHead() {\n        return ArrowHead.__super__.constructor.apply(this, arguments);\n    }\n    ArrowHead.prototype.type = 'ArrowHead';\n    ArrowHead.prototype.initialize = function (options) {\n        ArrowHead.__super__.initialize.call(this, options);\n        return this.visuals = new visuals_1.Visuals(this);\n    };\n    ArrowHead.prototype.render = function (ctx, i) {\n        return null;\n    };\n    ArrowHead.prototype.clip = function (ctx, i) {\n        return null;\n    };\n    return ArrowHead;\n})(annotation_1.Annotation);\nexports.OpenHead = (function (superClass) {\n    extend(OpenHead, superClass);\n    function OpenHead() {\n        return OpenHead.__super__.constructor.apply(this, arguments);\n    }\n    OpenHead.prototype.type = 'OpenHead';\n    OpenHead.prototype.clip = function (ctx, i) {\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.moveTo(0.5 * this.size, this.size);\n        ctx.lineTo(0.5 * this.size, -2);\n        ctx.lineTo(-0.5 * this.size, -2);\n        ctx.lineTo(-0.5 * this.size, this.size);\n        ctx.lineTo(0, 0);\n        return ctx.lineTo(0.5 * this.size, this.size);\n    };\n    OpenHead.prototype.render = function (ctx, i) {\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_vectorize(ctx, i);\n            ctx.beginPath();\n            ctx.moveTo(0.5 * this.size, this.size);\n            ctx.lineTo(0, 0);\n            ctx.lineTo(-0.5 * this.size, this.size);\n            return ctx.stroke();\n        }\n    };\n    OpenHead.mixins(['line']);\n    OpenHead.define({\n        size: [p.Number, 25]\n    });\n    return OpenHead;\n})(exports.ArrowHead);\nexports.NormalHead = (function (superClass) {\n    extend(NormalHead, superClass);\n    function NormalHead() {\n        return NormalHead.__super__.constructor.apply(this, arguments);\n    }\n    NormalHead.prototype.type = 'NormalHead';\n    NormalHead.prototype.clip = function (ctx, i) {\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.moveTo(0.5 * this.size, this.size);\n        ctx.lineTo(0.5 * this.size, -2);\n        ctx.lineTo(-0.5 * this.size, -2);\n        ctx.lineTo(-0.5 * this.size, this.size);\n        return ctx.lineTo(0.5 * this.size, this.size);\n    };\n    NormalHead.prototype.render = function (ctx, i) {\n        if (this.visuals.fill.doit) {\n            this.visuals.fill.set_vectorize(ctx, i);\n            this._normal(ctx, i);\n            ctx.fill();\n        }\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_vectorize(ctx, i);\n            this._normal(ctx, i);\n            return ctx.stroke();\n        }\n    };\n    NormalHead.prototype._normal = function (ctx, i) {\n        ctx.beginPath();\n        ctx.moveTo(0.5 * this.size, this.size);\n        ctx.lineTo(0, 0);\n        ctx.lineTo(-0.5 * this.size, this.size);\n        return ctx.closePath();\n    };\n    NormalHead.mixins(['line', 'fill']);\n    NormalHead.define({\n        size: [p.Number, 25]\n    });\n    NormalHead.override({\n        fill_color: 'black'\n    });\n    return NormalHead;\n})(exports.ArrowHead);\nexports.VeeHead = (function (superClass) {\n    extend(VeeHead, superClass);\n    function VeeHead() {\n        return VeeHead.__super__.constructor.apply(this, arguments);\n    }\n    VeeHead.prototype.type = 'VeeHead';\n    VeeHead.prototype.clip = function (ctx, i) {\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.moveTo(0.5 * this.size, this.size);\n        ctx.lineTo(0.5 * this.size, -2);\n        ctx.lineTo(-0.5 * this.size, -2);\n        ctx.lineTo(-0.5 * this.size, this.size);\n        ctx.lineTo(0, 0.5 * this.size);\n        return ctx.lineTo(0.5 * this.size, this.size);\n    };\n    VeeHead.prototype.render = function (ctx, i) {\n        if (this.visuals.fill.doit) {\n            this.visuals.fill.set_vectorize(ctx, i);\n            this._vee(ctx, i);\n            ctx.fill();\n        }\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_vectorize(ctx, i);\n            this._vee(ctx, i);\n            return ctx.stroke();\n        }\n    };\n    VeeHead.prototype._vee = function (ctx, i) {\n        ctx.beginPath();\n        ctx.moveTo(0.5 * this.size, this.size);\n        ctx.lineTo(0, 0);\n        ctx.lineTo(-0.5 * this.size, this.size);\n        ctx.lineTo(0, 0.5 * this.size);\n        return ctx.closePath();\n    };\n    VeeHead.mixins(['line', 'fill']);\n    VeeHead.define({\n        size: [p.Number, 25]\n    });\n    VeeHead.override({\n        fill_color: 'black'\n    });\n    return VeeHead;\n})(exports.ArrowHead);\nexports.TeeHead = (function (superClass) {\n    extend(TeeHead, superClass);\n    function TeeHead() {\n        return TeeHead.__super__.constructor.apply(this, arguments);\n    }\n    TeeHead.prototype.type = 'TeeHead';\n    TeeHead.prototype.render = function (ctx, i) {\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_vectorize(ctx, i);\n            ctx.beginPath();\n            ctx.moveTo(0.5 * this.size, 0);\n            ctx.lineTo(-0.5 * this.size, 0);\n            return ctx.stroke();\n        }\n    };\n    TeeHead.mixins(['line']);\n    TeeHead.define({\n        size: [p.Number, 25]\n    });\n    return TeeHead;\n})(exports.ArrowHead);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar column_data_source_1 = require(\"../sources/column_data_source\");\nvar p = require(\"core/properties\");\nexports.BandView = (function (superClass) {\n    extend(BandView, superClass);\n    function BandView() {\n        return BandView.__super__.constructor.apply(this, arguments);\n    }\n    BandView.prototype.initialize = function (options) {\n        BandView.__super__.initialize.call(this, options);\n        return this.set_data(this.model.source);\n    };\n    BandView.prototype.connect_signals = function () {\n        BandView.__super__.connect_signals.call(this);\n        this.connect(this.model.source.streaming, function () {\n            return this.set_data(this.model.source);\n        });\n        this.connect(this.model.source.patching, function () {\n            return this.set_data(this.model.source);\n        });\n        return this.connect(this.model.source.change, function () {\n            return this.set_data(this.model.source);\n        });\n    };\n    BandView.prototype.set_data = function (source) {\n        BandView.__super__.set_data.call(this, source);\n        this.visuals.warm_cache(source);\n        return this.plot_view.request_render();\n    };\n    BandView.prototype._map_data = function () {\n        var _base_vx, _lower, _lower_vx, _upper, _upper_vx, base_scale, i, j, limit_scale, ref, x_scale, y_scale;\n        x_scale = this.plot_view.frame.xscales[this.model.x_range_name];\n        y_scale = this.plot_view.frame.yscales[this.model.y_range_name];\n        limit_scale = this.model.dimension === \"height\" ? y_scale : x_scale;\n        base_scale = this.model.dimension === \"height\" ? x_scale : y_scale;\n        if (this.model.lower.units === \"data\") {\n            _lower_vx = limit_scale.v_compute(this._lower);\n        }\n        else {\n            _lower_vx = this._lower;\n        }\n        if (this.model.upper.units === \"data\") {\n            _upper_vx = limit_scale.v_compute(this._upper);\n        }\n        else {\n            _upper_vx = this._upper;\n        }\n        if (this.model.base.units === \"data\") {\n            _base_vx = base_scale.v_compute(this._base);\n        }\n        else {\n            _base_vx = this._base;\n        }\n        ref = this.model._normals(), i = ref[0], j = ref[1];\n        _lower = [_lower_vx, _base_vx];\n        _upper = [_upper_vx, _base_vx];\n        this._lower_sx = this.plot_model.canvas.v_vx_to_sx(_lower[i]);\n        this._lower_sy = this.plot_model.canvas.v_vy_to_sy(_lower[j]);\n        this._upper_sx = this.plot_model.canvas.v_vx_to_sx(_upper[i]);\n        return this._upper_sy = this.plot_model.canvas.v_vy_to_sy(_upper[j]);\n    };\n    BandView.prototype.render = function () {\n        var ctx, i, k, l, m, n, ref, ref1, ref2, ref3;\n        if (!this.model.visible) {\n            return;\n        }\n        this._map_data();\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.beginPath();\n        ctx.moveTo(this._lower_sx[0], this._lower_sy[0]);\n        for (i = k = 0, ref = this._lower_sx.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            ctx.lineTo(this._lower_sx[i], this._lower_sy[i]);\n        }\n        for (i = l = ref1 = this._upper_sx.length - 1; ref1 <= 0 ? l <= 0 : l >= 0; i = ref1 <= 0 ? ++l : --l) {\n            ctx.lineTo(this._upper_sx[i], this._upper_sy[i]);\n        }\n        ctx.closePath();\n        if (this.visuals.fill.doit) {\n            this.visuals.fill.set_value(ctx);\n            ctx.fill();\n        }\n        ctx.beginPath();\n        ctx.moveTo(this._lower_sx[0], this._lower_sy[0]);\n        for (i = m = 0, ref2 = this._lower_sx.length; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {\n            ctx.lineTo(this._lower_sx[i], this._lower_sy[i]);\n        }\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_value(ctx);\n            ctx.stroke();\n        }\n        ctx.beginPath();\n        ctx.moveTo(this._upper_sx[0], this._upper_sy[0]);\n        for (i = n = 0, ref3 = this._upper_sx.length; 0 <= ref3 ? n < ref3 : n > ref3; i = 0 <= ref3 ? ++n : --n) {\n            ctx.lineTo(this._upper_sx[i], this._upper_sy[i]);\n        }\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_value(ctx);\n            return ctx.stroke();\n        }\n    };\n    return BandView;\n})(annotation_1.AnnotationView);\nexports.Band = (function (superClass) {\n    extend(Band, superClass);\n    function Band() {\n        return Band.__super__.constructor.apply(this, arguments);\n    }\n    Band.prototype.default_view = exports.BandView;\n    Band.prototype.type = 'Band';\n    Band.mixins(['line', 'fill']);\n    Band.define({\n        lower: [p.DistanceSpec],\n        upper: [p.DistanceSpec],\n        base: [p.DistanceSpec],\n        dimension: [p.Dimension, 'height'],\n        source: [\n            p.Instance, function () {\n                return new column_data_source_1.ColumnDataSource();\n            }\n        ],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default']\n    });\n    Band.override({\n        fill_color: \"#fff9ba\",\n        fill_alpha: 0.4,\n        line_color: \"#cccccc\",\n        line_alpha: 0.3\n    });\n    Band.prototype._normals = function () {\n        var i, j, ref, ref1;\n        if (this.dimension === 'height') {\n            ref = [1, 0], i = ref[0], j = ref[1];\n        }\n        else {\n            ref1 = [0, 1], i = ref1[0], j = ref1[1];\n        }\n        return [i, j];\n    };\n    return Band;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar signaling_1 = require(\"core/signaling\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.BoxAnnotationView = (function (superClass) {\n    extend(BoxAnnotationView, superClass);\n    function BoxAnnotationView() {\n        return BoxAnnotationView.__super__.constructor.apply(this, arguments);\n    }\n    BoxAnnotationView.prototype.initialize = function (options) {\n        BoxAnnotationView.__super__.initialize.call(this, options);\n        this.plot_view.canvas_overlays.appendChild(this.el);\n        this.el.classList.add(\"bk-shading\");\n        return dom_1.hide(this.el);\n    };\n    BoxAnnotationView.prototype.connect_signals = function () {\n        BoxAnnotationView.__super__.connect_signals.call(this);\n        if (this.model.render_mode === 'css') {\n            this.connect(this.model.change, function () {\n                return this.render();\n            });\n            return this.connect(this.model.data_update, function () {\n                return this.render();\n            });\n        }\n        else {\n            this.connect(this.model.change, (function (_this) {\n                return function () {\n                    return _this.plot_view.request_render();\n                };\n            })(this));\n            return this.connect(this.model.data_update, (function (_this) {\n                return function () {\n                    return _this.plot_view.request_render();\n                };\n            })(this));\n        }\n    };\n    BoxAnnotationView.prototype.render = function () {\n        var canvas, frame, sbottom, sleft, sright, stop, xscale, yscale;\n        if (!this.model.visible && this.model.render_mode === 'css') {\n            dom_1.hide(this.el);\n        }\n        if (!this.model.visible) {\n            return;\n        }\n        if ((this.model.left == null) && (this.model.right == null) && (this.model.top == null) && (this.model.bottom == null)) {\n            dom_1.hide(this.el);\n            return null;\n        }\n        frame = this.plot_model.frame;\n        canvas = this.plot_model.canvas;\n        xscale = this.plot_view.frame.xscales[this.model.x_range_name];\n        yscale = this.plot_view.frame.yscales[this.model.y_range_name];\n        sleft = canvas.vx_to_sx(this._calc_dim(this.model.left, this.model.left_units, xscale, frame.h_range.start));\n        sright = canvas.vx_to_sx(this._calc_dim(this.model.right, this.model.right_units, xscale, frame.h_range.end));\n        sbottom = canvas.vy_to_sy(this._calc_dim(this.model.bottom, this.model.bottom_units, yscale, frame.v_range.start));\n        stop = canvas.vy_to_sy(this._calc_dim(this.model.top, this.model.top_units, yscale, frame.v_range.end));\n        if (this.model.render_mode === 'css') {\n            return this._css_box(sleft, sright, sbottom, stop);\n        }\n        else {\n            return this._canvas_box(sleft, sright, sbottom, stop);\n        }\n    };\n    BoxAnnotationView.prototype._css_box = function (sleft, sright, sbottom, stop) {\n        var ld, sh, sw;\n        sw = Math.abs(sright - sleft);\n        sh = Math.abs(sbottom - stop);\n        this.el.style.left = sleft + \"px\";\n        this.el.style.width = sw + \"px\";\n        this.el.style.top = stop + \"px\";\n        this.el.style.height = sh + \"px\";\n        this.el.style.borderWidth = this.model.line_width.value + \"px\";\n        this.el.style.borderColor = this.model.line_color.value;\n        this.el.style.backgroundColor = this.model.fill_color.value;\n        this.el.style.opacity = this.model.fill_alpha.value;\n        ld = this.model.line_dash;\n        if (types_1.isArray(ld)) {\n            ld = ld.length < 2 ? \"solid\" : \"dashed\";\n        }\n        if (types_1.isString(ld)) {\n            this.el.style.borderStyle = ld;\n        }\n        return dom_1.show(this.el);\n    };\n    BoxAnnotationView.prototype._canvas_box = function (sleft, sright, sbottom, stop) {\n        var ctx;\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        ctx.beginPath();\n        ctx.rect(sleft, stop, sright - sleft, sbottom - stop);\n        this.visuals.fill.set_value(ctx);\n        ctx.fill();\n        this.visuals.line.set_value(ctx);\n        ctx.stroke();\n        return ctx.restore();\n    };\n    BoxAnnotationView.prototype._calc_dim = function (dim, dim_units, scale, frame_extrema) {\n        var vdim;\n        if (dim != null) {\n            if (dim_units === 'data') {\n                vdim = scale.compute(dim);\n            }\n            else {\n                vdim = dim;\n            }\n        }\n        else {\n            vdim = frame_extrema;\n        }\n        return vdim;\n    };\n    return BoxAnnotationView;\n})(annotation_1.AnnotationView);\nexports.BoxAnnotation = (function (superClass) {\n    extend(BoxAnnotation, superClass);\n    function BoxAnnotation() {\n        return BoxAnnotation.__super__.constructor.apply(this, arguments);\n    }\n    BoxAnnotation.prototype.default_view = exports.BoxAnnotationView;\n    BoxAnnotation.prototype.type = 'BoxAnnotation';\n    BoxAnnotation.mixins(['line', 'fill']);\n    BoxAnnotation.define({\n        render_mode: [p.RenderMode, 'canvas'],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default'],\n        top: [p.Number, null],\n        top_units: [p.SpatialUnits, 'data'],\n        bottom: [p.Number, null],\n        bottom_units: [p.SpatialUnits, 'data'],\n        left: [p.Number, null],\n        left_units: [p.SpatialUnits, 'data'],\n        right: [p.Number, null],\n        right_units: [p.SpatialUnits, 'data']\n    });\n    BoxAnnotation.override({\n        fill_color: '#fff9ba',\n        fill_alpha: 0.4,\n        line_color: '#cccccc',\n        line_alpha: 0.3\n    });\n    BoxAnnotation.prototype.initialize = function (attrs, options) {\n        BoxAnnotation.__super__.initialize.call(this, attrs, options);\n        return this.data_update = new signaling_1.Signal(this, \"data_update\");\n    };\n    BoxAnnotation.prototype.update = function (arg) {\n        var bottom, left, right, top;\n        left = arg.left, right = arg.right, top = arg.top, bottom = arg.bottom;\n        this.setv({\n            left: left,\n            right: right,\n            top: top,\n            bottom: bottom\n        }, {\n            silent: true\n        });\n        return this.data_update.emit();\n    };\n    return BoxAnnotation;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LONG_DIM_MAX_SCALAR, LONG_DIM_MIN_SCALAR, SHORT_DIM, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar basic_ticker_1 = require(\"../tickers/basic_ticker\");\nvar basic_tick_formatter_1 = require(\"../formatters/basic_tick_formatter\");\nvar linear_color_mapper_1 = require(\"../mappers/linear_color_mapper\");\nvar linear_scale_1 = require(\"../scales/linear_scale\");\nvar log_scale_1 = require(\"../scales/log_scale\");\nvar range1d_1 = require(\"../ranges/range1d\");\nvar p = require(\"core/properties\");\nvar text_util = require(\"core/util/text\");\nvar array_1 = require(\"core/util/array\");\nvar object_1 = require(\"core/util/object\");\nvar types_1 = require(\"core/util/types\");\nSHORT_DIM = 25;\nLONG_DIM_MIN_SCALAR = 0.3;\nLONG_DIM_MAX_SCALAR = 0.8;\nexports.ColorBarView = (function (superClass) {\n    extend(ColorBarView, superClass);\n    function ColorBarView() {\n        return ColorBarView.__super__.constructor.apply(this, arguments);\n    }\n    ColorBarView.prototype.initialize = function (options) {\n        ColorBarView.__super__.initialize.call(this, options);\n        return this._set_canvas_image();\n    };\n    ColorBarView.prototype.connect_signals = function () {\n        ColorBarView.__super__.connect_signals.call(this);\n        this.connect(this.model.properties.visible.change, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n        this.connect(this.model.ticker.change, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n        this.connect(this.model.formatter.change, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n        if (this.model.color_mapper != null) {\n            return this.connect(this.model.color_mapper.change, function () {\n                this._set_canvas_image();\n                return this.plot_view.request_render();\n            });\n        }\n    };\n    ColorBarView.prototype._get_panel_offset = function () {\n        var x, y;\n        x = this.model.panel._left.value;\n        y = this.model.panel._top.value;\n        return {\n            x: x,\n            y: -y\n        };\n    };\n    ColorBarView.prototype._get_size = function () {\n        var bbox, side;\n        if (this.model.color_mapper == null) {\n            return;\n        }\n        bbox = this.compute_legend_dimensions();\n        side = this.model.panel.side;\n        if (side === 'above' || side === 'below') {\n            return bbox.height;\n        }\n        if (side === 'left' || side === 'right') {\n            return bbox.width;\n        }\n    };\n    ColorBarView.prototype._set_canvas_image = function () {\n        var buf, buf8, canvas, cmap, h, image_ctx, image_data, k, palette, ref, ref1, ref2, ref3, results, w;\n        if (this.model.color_mapper == null) {\n            return;\n        }\n        palette = this.model.color_mapper.palette;\n        if (this.model.orientation === 'vertical') {\n            palette = palette.slice(0).reverse();\n        }\n        switch (this.model.orientation) {\n            case \"vertical\":\n                ref = [1, palette.length], w = ref[0], h = ref[1];\n                break;\n            case \"horizontal\":\n                ref1 = [palette.length, 1], w = ref1[0], h = ref1[1];\n        }\n        canvas = document.createElement('canvas');\n        ref2 = [w, h], canvas.width = ref2[0], canvas.height = ref2[1];\n        image_ctx = canvas.getContext('2d');\n        image_data = image_ctx.getImageData(0, 0, w, h);\n        cmap = new linear_color_mapper_1.LinearColorMapper({\n            palette: palette\n        });\n        buf = cmap.v_map_screen((function () {\n            results = [];\n            for (var k = 0, ref3 = palette.length; 0 <= ref3 ? k < ref3 : k > ref3; 0 <= ref3 ? k++ : k--) {\n                results.push(k);\n            }\n            return results;\n        }).apply(this));\n        buf8 = new Uint8Array(buf);\n        image_data.data.set(buf8);\n        image_ctx.putImageData(image_data, 0, 0);\n        return this.image = canvas;\n    };\n    ColorBarView.prototype.compute_legend_dimensions = function () {\n        var image_dimensions, image_height, image_width, label_extent, legend_height, legend_width, padding, ref, tick_extent, title_extent;\n        image_dimensions = this.model._computed_image_dimensions();\n        ref = [image_dimensions.height, image_dimensions.width], image_height = ref[0], image_width = ref[1];\n        label_extent = this._get_label_extent();\n        title_extent = this.model._title_extent();\n        tick_extent = this.model._tick_extent();\n        padding = this.model.padding;\n        switch (this.model.orientation) {\n            case \"vertical\":\n                legend_height = image_height + title_extent + padding * 2;\n                legend_width = image_width + tick_extent + label_extent + padding * 2;\n                break;\n            case \"horizontal\":\n                legend_height = image_height + title_extent + tick_extent + label_extent + padding * 2;\n                legend_width = image_width + padding * 2;\n        }\n        return {\n            height: legend_height,\n            width: legend_width\n        };\n    };\n    ColorBarView.prototype.compute_legend_location = function () {\n        var h_range, legend_dimensions, legend_height, legend_margin, legend_width, location, ref, sx, sy, v_range, x, y;\n        legend_dimensions = this.compute_legend_dimensions();\n        ref = [legend_dimensions.height, legend_dimensions.width], legend_height = ref[0], legend_width = ref[1];\n        legend_margin = this.model.margin;\n        location = this.model.location;\n        h_range = this.plot_view.frame.h_range;\n        v_range = this.plot_view.frame.v_range;\n        if (types_1.isString(location)) {\n            switch (location) {\n                case 'top_left':\n                    x = h_range.start + legend_margin;\n                    y = v_range.end - legend_margin;\n                    break;\n                case 'top_center':\n                    x = (h_range.end + h_range.start) / 2 - legend_width / 2;\n                    y = v_range.end - legend_margin;\n                    break;\n                case 'top_right':\n                    x = h_range.end - legend_margin - legend_width;\n                    y = v_range.end - legend_margin;\n                    break;\n                case 'center_right':\n                    x = h_range.end - legend_margin - legend_width;\n                    y = (v_range.end + v_range.start) / 2 + legend_height / 2;\n                    break;\n                case 'bottom_right':\n                    x = h_range.end - legend_margin - legend_width;\n                    y = v_range.start + legend_margin + legend_height;\n                    break;\n                case 'bottom_center':\n                    x = (h_range.end + h_range.start) / 2 - legend_width / 2;\n                    y = v_range.start + legend_margin + legend_height;\n                    break;\n                case 'bottom_left':\n                    x = h_range.start + legend_margin;\n                    y = v_range.start + legend_margin + legend_height;\n                    break;\n                case 'center_left':\n                    x = h_range.start + legend_margin;\n                    y = (v_range.end + v_range.start) / 2 + legend_height / 2;\n                    break;\n                case 'center':\n                    x = (h_range.end + h_range.start) / 2 - legend_width / 2;\n                    y = (v_range.end + v_range.start) / 2 + legend_height / 2;\n            }\n        }\n        else if (types_1.isArray(location) && location.length === 2) {\n            x = location[0], y = location[1];\n        }\n        sx = this.plot_view.canvas.vx_to_sx(x);\n        sy = this.plot_view.canvas.vy_to_sy(y);\n        return {\n            sx: sx,\n            sy: sy\n        };\n    };\n    ColorBarView.prototype.render = function () {\n        var ctx, frame_offset, image_offset, location, panel_offset;\n        if (!this.model.visible || (this.model.color_mapper == null)) {\n            return;\n        }\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        if (this.model.panel != null) {\n            panel_offset = this._get_panel_offset();\n            ctx.translate(panel_offset.x, panel_offset.y);\n            frame_offset = this._get_frame_offset();\n            ctx.translate(frame_offset.x, frame_offset.y);\n        }\n        location = this.compute_legend_location();\n        ctx.translate(location.sx, location.sy);\n        this._draw_bbox(ctx);\n        image_offset = this._get_image_offset();\n        ctx.translate(image_offset.x, image_offset.y);\n        this._draw_image(ctx);\n        if ((this.model.color_mapper.low != null) && (this.model.color_mapper.high != null)) {\n            this._draw_major_ticks(ctx);\n            this._draw_minor_ticks(ctx);\n            this._draw_major_labels(ctx);\n        }\n        if (this.model.title) {\n            this._draw_title(ctx);\n        }\n        return ctx.restore();\n    };\n    ColorBarView.prototype._draw_bbox = function (ctx) {\n        var bbox;\n        bbox = this.compute_legend_dimensions();\n        ctx.save();\n        if (this.visuals.background_fill.doit) {\n            this.visuals.background_fill.set_value(ctx);\n            ctx.fillRect(0, 0, bbox.width, bbox.height);\n        }\n        if (this.visuals.border_line.doit) {\n            this.visuals.border_line.set_value(ctx);\n            ctx.strokeRect(0, 0, bbox.width, bbox.height);\n        }\n        return ctx.restore();\n    };\n    ColorBarView.prototype._draw_image = function (ctx) {\n        var image;\n        image = this.model._computed_image_dimensions();\n        ctx.save();\n        ctx.setImageSmoothingEnabled(false);\n        ctx.globalAlpha = this.model.scale_alpha;\n        ctx.drawImage(this.image, 0, 0, image.width, image.height);\n        if (this.visuals.bar_line.doit) {\n            this.visuals.bar_line.set_value(ctx);\n            ctx.strokeRect(0, 0, image.width, image.height);\n        }\n        return ctx.restore();\n    };\n    ColorBarView.prototype._draw_major_ticks = function (ctx) {\n        var i, image, k, nx, ny, ref, ref1, ref2, ref3, sx, sy, tin, tout, x_offset, y_offset;\n        if (!this.visuals.major_tick_line.doit) {\n            return;\n        }\n        ref = this.model._normals(), nx = ref[0], ny = ref[1];\n        image = this.model._computed_image_dimensions();\n        ref1 = [image.width * nx, image.height * ny], x_offset = ref1[0], y_offset = ref1[1];\n        ref2 = this.model._tick_coordinates().major, sx = ref2[0], sy = ref2[1];\n        tin = this.model.major_tick_in;\n        tout = this.model.major_tick_out;\n        ctx.save();\n        ctx.translate(x_offset, y_offset);\n        this.visuals.major_tick_line.set_value(ctx);\n        for (i = k = 0, ref3 = sx.length; 0 <= ref3 ? k < ref3 : k > ref3; i = 0 <= ref3 ? ++k : --k) {\n            ctx.beginPath();\n            ctx.moveTo(Math.round(sx[i] + nx * tout), Math.round(sy[i] + ny * tout));\n            ctx.lineTo(Math.round(sx[i] - nx * tin), Math.round(sy[i] - ny * tin));\n            ctx.stroke();\n        }\n        return ctx.restore();\n    };\n    ColorBarView.prototype._draw_minor_ticks = function (ctx) {\n        var i, image, k, nx, ny, ref, ref1, ref2, ref3, sx, sy, tin, tout, x_offset, y_offset;\n        if (!this.visuals.minor_tick_line.doit) {\n            return;\n        }\n        ref = this.model._normals(), nx = ref[0], ny = ref[1];\n        image = this.model._computed_image_dimensions();\n        ref1 = [image.width * nx, image.height * ny], x_offset = ref1[0], y_offset = ref1[1];\n        ref2 = this.model._tick_coordinates().minor, sx = ref2[0], sy = ref2[1];\n        tin = this.model.minor_tick_in;\n        tout = this.model.minor_tick_out;\n        ctx.save();\n        ctx.translate(x_offset, y_offset);\n        this.visuals.minor_tick_line.set_value(ctx);\n        for (i = k = 0, ref3 = sx.length; 0 <= ref3 ? k < ref3 : k > ref3; i = 0 <= ref3 ? ++k : --k) {\n            ctx.beginPath();\n            ctx.moveTo(Math.round(sx[i] + nx * tout), Math.round(sy[i] + ny * tout));\n            ctx.lineTo(Math.round(sx[i] - nx * tin), Math.round(sy[i] - ny * tin));\n            ctx.stroke();\n        }\n        return ctx.restore();\n    };\n    ColorBarView.prototype._draw_major_labels = function (ctx) {\n        var formatted_labels, i, image, k, labels, nx, ny, ref, ref1, ref2, ref3, ref4, standoff, sx, sy, x_offset, x_standoff, y_offset, y_standoff;\n        if (!this.visuals.major_label_text.doit) {\n            return;\n        }\n        ref = this.model._normals(), nx = ref[0], ny = ref[1];\n        image = this.model._computed_image_dimensions();\n        ref1 = [image.width * nx, image.height * ny], x_offset = ref1[0], y_offset = ref1[1];\n        standoff = this.model.label_standoff + this.model._tick_extent();\n        ref2 = [standoff * nx, standoff * ny], x_standoff = ref2[0], y_standoff = ref2[1];\n        ref3 = this.model._tick_coordinates().major, sx = ref3[0], sy = ref3[1];\n        labels = this.model._tick_coordinates().major_labels;\n        formatted_labels = this.model.formatter.doFormat(labels, null);\n        this.visuals.major_label_text.set_value(ctx);\n        ctx.save();\n        ctx.translate(x_offset + x_standoff, y_offset + y_standoff);\n        for (i = k = 0, ref4 = sx.length; 0 <= ref4 ? k < ref4 : k > ref4; i = 0 <= ref4 ? ++k : --k) {\n            ctx.fillText(formatted_labels[i], Math.round(sx[i] + nx * this.model.label_standoff), Math.round(sy[i] + ny * this.model.label_standoff));\n        }\n        return ctx.restore();\n    };\n    ColorBarView.prototype._draw_title = function (ctx) {\n        if (!this.visuals.title_text.doit) {\n            return;\n        }\n        ctx.save();\n        this.visuals.title_text.set_value(ctx);\n        ctx.fillText(this.model.title, 0, -this.model.title_standoff);\n        return ctx.restore();\n    };\n    ColorBarView.prototype._get_label_extent = function () {\n        var ctx, formatted_labels, label, label_extent, major_labels;\n        major_labels = this.model._tick_coordinates().major_labels;\n        if ((this.model.color_mapper.low != null) && (this.model.color_mapper.high != null) && !object_1.isEmpty(major_labels)) {\n            ctx = this.plot_view.canvas_view.ctx;\n            ctx.save();\n            this.visuals.major_label_text.set_value(ctx);\n            switch (this.model.orientation) {\n                case \"vertical\":\n                    formatted_labels = this.model.formatter.doFormat(major_labels);\n                    label_extent = array_1.max((function () {\n                        var k, len, results;\n                        results = [];\n                        for (k = 0, len = formatted_labels.length; k < len; k++) {\n                            label = formatted_labels[k];\n                            results.push(ctx.measureText(label.toString()).width);\n                        }\n                        return results;\n                    })());\n                    break;\n                case \"horizontal\":\n                    label_extent = text_util.get_text_height(this.visuals.major_label_text.font_value()).height;\n            }\n            label_extent += this.model.label_standoff;\n            ctx.restore();\n        }\n        else {\n            label_extent = 0;\n        }\n        return label_extent;\n    };\n    ColorBarView.prototype._get_frame_offset = function () {\n        var frame, panel, ref, xoff, yoff;\n        ref = [0, 0], xoff = ref[0], yoff = ref[1];\n        panel = this.model.panel;\n        frame = this.plot_view.frame;\n        switch (panel.side) {\n            case \"left\":\n            case \"right\":\n                yoff = Math.abs(panel._top.value - frame._top.value);\n                break;\n            case \"above\":\n            case \"below\":\n                xoff = Math.abs(frame._left.value);\n        }\n        return {\n            x: xoff,\n            y: yoff\n        };\n    };\n    ColorBarView.prototype._get_image_offset = function () {\n        var x, y;\n        x = this.model.padding;\n        y = this.model.padding + this.model._title_extent();\n        return {\n            x: x,\n            y: y\n        };\n    };\n    return ColorBarView;\n})(annotation_1.AnnotationView);\nexports.ColorBar = (function (superClass) {\n    extend(ColorBar, superClass);\n    function ColorBar() {\n        return ColorBar.__super__.constructor.apply(this, arguments);\n    }\n    ColorBar.prototype.default_view = exports.ColorBarView;\n    ColorBar.prototype.type = 'ColorBar';\n    ColorBar.mixins(['text:major_label_', 'text:title_', 'line:major_tick_', 'line:minor_tick_', 'line:border_', 'line:bar_', 'fill:background_']);\n    ColorBar.define({\n        location: [p.Any, 'top_right'],\n        orientation: [p.Orientation, 'vertical'],\n        title: [p.String],\n        title_standoff: [p.Number, 2],\n        height: [p.Any, 'auto'],\n        width: [p.Any, 'auto'],\n        scale_alpha: [p.Number, 1.0],\n        ticker: [\n            p.Instance, function () {\n                return new basic_ticker_1.BasicTicker();\n            }\n        ],\n        formatter: [\n            p.Instance, function () {\n                return new basic_tick_formatter_1.BasicTickFormatter();\n            }\n        ],\n        color_mapper: [p.Instance],\n        label_standoff: [p.Number, 5],\n        margin: [p.Number, 30],\n        padding: [p.Number, 10],\n        major_tick_in: [p.Number, 5],\n        major_tick_out: [p.Number, 0],\n        minor_tick_in: [p.Number, 0],\n        minor_tick_out: [p.Number, 0]\n    });\n    ColorBar.override({\n        background_fill_color: \"#ffffff\",\n        background_fill_alpha: 0.95,\n        bar_line_color: null,\n        border_line_color: null,\n        major_label_text_align: \"center\",\n        major_label_text_baseline: \"middle\",\n        major_label_text_font_size: \"8pt\",\n        major_tick_line_color: \"#ffffff\",\n        minor_tick_line_color: null,\n        title_text_font_size: \"10pt\",\n        title_text_font_style: \"italic\"\n    });\n    ColorBar.prototype.initialize = function (attrs, options) {\n        return ColorBar.__super__.initialize.call(this, attrs, options);\n    };\n    ColorBar.prototype._normals = function () {\n        var i, j, ref, ref1;\n        if (this.orientation === 'vertical') {\n            ref = [1, 0], i = ref[0], j = ref[1];\n        }\n        else {\n            ref1 = [0, 1], i = ref1[0], j = ref1[1];\n        }\n        return [i, j];\n    };\n    ColorBar.prototype._title_extent = function () {\n        var font_value, title_extent;\n        font_value = this.title_text_font + \" \" + this.title_text_font_size + \" \" + this.title_text_font_style;\n        title_extent = this.title ? text_util.get_text_height(font_value).height + this.title_standoff : 0;\n        return title_extent;\n    };\n    ColorBar.prototype._tick_extent = function () {\n        var tick_extent;\n        if ((this.color_mapper.low != null) && (this.color_mapper.high != null)) {\n            tick_extent = array_1.max([this.major_tick_out, this.minor_tick_out]);\n        }\n        else {\n            tick_extent = 0;\n        }\n        return tick_extent;\n    };\n    ColorBar.prototype._computed_image_dimensions = function () {\n        /*\n        Heuristics to determine ColorBar image dimensions if set to \"auto\"\n        \n        Note: Returns the height/width values for the ColorBar's scale image, not\n        the dimensions of the entire ColorBar.\n        \n        If the short dimension (the width of a vertical bar or height of a\n        horizontal bar) is set to \"auto\", the resulting dimension will be set to\n        25 px.\n        \n        For a ColorBar in a side panel with the long dimension (the height of a\n        vertical bar or width of a horizontal bar) set to \"auto\", the\n        resulting dimension will be as long as the adjacent frame edge, so that the\n        bar \"fits\" to the plot.\n        \n        For a ColorBar in the plot frame with the long dimension set to \"auto\", the\n        resulting dimension will be the greater of:\n          * The length of the color palette * 25px\n          * The parallel frame dimension * 0.30\n            (i.e the frame height for a vertical ColorBar)\n        But not greater than:\n          * The parallel frame dimension * 0.80\n         */\n        var frame_height, frame_width, height, title_extent, width;\n        frame_height = this.plot.plot_canvas.frame._height.value;\n        frame_width = this.plot.plot_canvas.frame._width.value;\n        title_extent = this._title_extent();\n        switch (this.orientation) {\n            case \"vertical\":\n                if (this.height === 'auto') {\n                    if (this.panel != null) {\n                        height = frame_height - 2 * this.padding - title_extent;\n                    }\n                    else {\n                        height = array_1.max([this.color_mapper.palette.length * SHORT_DIM, frame_height * LONG_DIM_MIN_SCALAR]);\n                        height = array_1.min([height, frame_height * LONG_DIM_MAX_SCALAR - 2 * this.padding - title_extent]);\n                    }\n                }\n                else {\n                    height = this.height;\n                }\n                width = this.width === 'auto' ? SHORT_DIM : this.width;\n                break;\n            case \"horizontal\":\n                height = this.height === 'auto' ? SHORT_DIM : this.height;\n                if (this.width === 'auto') {\n                    if (this.panel != null) {\n                        width = frame_width - 2 * this.padding;\n                    }\n                    else {\n                        width = array_1.max([this.color_mapper.palette.length * SHORT_DIM, frame_width * LONG_DIM_MIN_SCALAR]);\n                        width = array_1.min([width, frame_width * LONG_DIM_MAX_SCALAR - 2 * this.padding]);\n                    }\n                }\n                else {\n                    width = this.width;\n                }\n        }\n        return {\n            \"height\": height,\n            \"width\": width\n        };\n    };\n    ColorBar.prototype._tick_coordinate_scale = function (scale_length) {\n        /*\n        Creates and returns a scale instance that maps the `color_mapper` range\n        (low to high) to a screen space range equal to the length of the ColorBar's\n        scale image. The scale is used to calculate the tick coordinates in screen\n        coordinates for plotting purposes.\n        \n        Note: the type of color_mapper has to match the type of scale (i.e.\n        a LinearColorMapper will require a corresponding LinearScale instance).\n         */\n        var ranges, scale;\n        ranges = {\n            'source_range': new range1d_1.Range1d({\n                start: this.color_mapper.low,\n                end: this.color_mapper.high\n            }),\n            'target_range': new range1d_1.Range1d({\n                start: 0,\n                end: scale_length\n            })\n        };\n        switch (this.color_mapper.type) {\n            case \"LinearColorMapper\":\n                scale = new linear_scale_1.LinearScale(ranges);\n                break;\n            case \"LogColorMapper\":\n                scale = new log_scale_1.LogScale(ranges);\n        }\n        return scale;\n    };\n    ColorBar.prototype._tick_coordinates = function () {\n        var coord, end, i, ii, image_dimensions, j, k, l, major_coords, major_labels, majors, minor_coords, minors, ref, ref1, ref2, ref3, scale, scale_length, start, ticks;\n        image_dimensions = this._computed_image_dimensions();\n        switch (this.orientation) {\n            case \"vertical\":\n                scale_length = image_dimensions.height;\n                break;\n            case \"horizontal\":\n                scale_length = image_dimensions.width;\n        }\n        scale = this._tick_coordinate_scale(scale_length);\n        ref = this._normals(), i = ref[0], j = ref[1];\n        ref1 = [this.color_mapper.low, this.color_mapper.high], start = ref1[0], end = ref1[1];\n        ticks = this.ticker.get_ticks(start, end, null, null, this.ticker.desired_num_ticks);\n        majors = ticks.major;\n        minors = ticks.minor;\n        major_coords = [[], []];\n        minor_coords = [[], []];\n        for (ii = k = 0, ref2 = majors.length; 0 <= ref2 ? k < ref2 : k > ref2; ii = 0 <= ref2 ? ++k : --k) {\n            if (majors[ii] < start || majors[ii] > end) {\n                continue;\n            }\n            major_coords[i].push(majors[ii]);\n            major_coords[j].push(0);\n        }\n        for (ii = l = 0, ref3 = minors.length; 0 <= ref3 ? l < ref3 : l > ref3; ii = 0 <= ref3 ? ++l : --l) {\n            if (minors[ii] < start || minors[ii] > end) {\n                continue;\n            }\n            minor_coords[i].push(minors[ii]);\n            minor_coords[j].push(0);\n        }\n        major_labels = major_coords[i].slice(0);\n        major_coords[i] = scale.v_compute(major_coords[i]);\n        minor_coords[i] = scale.v_compute(minor_coords[i]);\n        if (this.orientation === 'vertical') {\n            major_coords[i] = new Float64Array((function () {\n                var len, m, ref4, results;\n                ref4 = major_coords[i];\n                results = [];\n                for (m = 0, len = ref4.length; m < len; m++) {\n                    coord = ref4[m];\n                    results.push(scale_length - coord);\n                }\n                return results;\n            })());\n            minor_coords[i] = new Float64Array((function () {\n                var len, m, ref4, results;\n                ref4 = minor_coords[i];\n                results = [];\n                for (m = 0, len = ref4.length; m < len; m++) {\n                    coord = ref4[m];\n                    results.push(scale_length - coord);\n                }\n                return results;\n            })());\n        }\n        return {\n            \"major\": major_coords,\n            \"minor\": minor_coords,\n            \"major_labels\": major_labels\n        };\n    };\n    return ColorBar;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar annotation_1 = require(\"./annotation\");\nexports.Annotation = annotation_1.Annotation;\nvar arrow_1 = require(\"./arrow\");\nexports.Arrow = arrow_1.Arrow;\nvar arrow_head_1 = require(\"./arrow_head\");\nexports.ArrowHead = arrow_head_1.ArrowHead;\nvar arrow_head_2 = require(\"./arrow_head\");\nexports.OpenHead = arrow_head_2.OpenHead;\nvar arrow_head_3 = require(\"./arrow_head\");\nexports.NormalHead = arrow_head_3.NormalHead;\nvar arrow_head_4 = require(\"./arrow_head\");\nexports.TeeHead = arrow_head_4.TeeHead;\nvar arrow_head_5 = require(\"./arrow_head\");\nexports.VeeHead = arrow_head_5.VeeHead;\nvar band_1 = require(\"./band\");\nexports.Band = band_1.Band;\nvar box_annotation_1 = require(\"./box_annotation\");\nexports.BoxAnnotation = box_annotation_1.BoxAnnotation;\nvar color_bar_1 = require(\"./color_bar\");\nexports.ColorBar = color_bar_1.ColorBar;\nvar label_1 = require(\"./label\");\nexports.Label = label_1.Label;\nvar label_set_1 = require(\"./label_set\");\nexports.LabelSet = label_set_1.LabelSet;\nvar legend_1 = require(\"./legend\");\nexports.Legend = legend_1.Legend;\nvar legend_item_1 = require(\"./legend_item\");\nexports.LegendItem = legend_item_1.LegendItem;\nvar poly_annotation_1 = require(\"./poly_annotation\");\nexports.PolyAnnotation = poly_annotation_1.PolyAnnotation;\nvar span_1 = require(\"./span\");\nexports.Span = span_1.Span;\nvar text_annotation_1 = require(\"./text_annotation\");\nexports.TextAnnotation = text_annotation_1.TextAnnotation;\nvar title_1 = require(\"./title\");\nexports.Title = title_1.Title;\nvar tooltip_1 = require(\"./tooltip\");\nexports.Tooltip = tooltip_1.Tooltip;\nvar whisker_1 = require(\"./whisker\");\nexports.Whisker = whisker_1.Whisker;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar text_annotation_1 = require(\"./text_annotation\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nexports.LabelView = (function (superClass) {\n    extend(LabelView, superClass);\n    function LabelView() {\n        return LabelView.__super__.constructor.apply(this, arguments);\n    }\n    LabelView.prototype.initialize = function (options) {\n        LabelView.__super__.initialize.call(this, options);\n        this.canvas = this.plot_model.canvas;\n        return this.visuals.warm_cache(null);\n    };\n    LabelView.prototype._get_size = function () {\n        var ctx, height, side, width;\n        ctx = this.plot_view.canvas_view.ctx;\n        this.visuals.text.set_value(ctx);\n        side = this.model.panel.side;\n        if (side === \"above\" || side === \"below\") {\n            height = ctx.measureText(this.model.text).ascent;\n            return height;\n        }\n        if (side === 'left' || side === 'right') {\n            width = ctx.measureText(this.model.text).width;\n            return width;\n        }\n    };\n    LabelView.prototype.render = function () {\n        var angle, ctx, panel_offset, sx, sy, vx, vy, xscale, yscale;\n        if (!this.model.visible && this.model.render_mode === 'css') {\n            dom_1.hide(this.el);\n        }\n        if (!this.model.visible) {\n            return;\n        }\n        xscale = this.plot_view.frame.xscales[this.model.x_range_name];\n        yscale = this.plot_view.frame.yscales[this.model.y_range_name];\n        ctx = this.plot_view.canvas_view.ctx;\n        switch (this.model.angle_units) {\n            case \"rad\":\n                angle = -1 * this.model.angle;\n                break;\n            case \"deg\":\n                angle = -1 * this.model.angle * Math.PI / 180.0;\n        }\n        if (this.model.x_units === \"data\") {\n            vx = xscale.compute(this.model.x);\n        }\n        else {\n            vx = this.model.x;\n        }\n        sx = this.canvas.vx_to_sx(vx);\n        if (this.model.y_units === \"data\") {\n            vy = yscale.compute(this.model.y);\n        }\n        else {\n            vy = this.model.y;\n        }\n        sy = this.canvas.vy_to_sy(vy);\n        if (this.model.panel != null) {\n            panel_offset = this._get_panel_offset();\n            sx += panel_offset.x;\n            sy += panel_offset.y;\n        }\n        if (this.model.render_mode === 'canvas') {\n            return this._canvas_text(ctx, this.model.text, sx + this.model.x_offset, sy - this.model.y_offset, angle);\n        }\n        else {\n            return this._css_text(ctx, this.model.text, sx + this.model.x_offset, sy - this.model.y_offset, angle);\n        }\n    };\n    return LabelView;\n})(text_annotation_1.TextAnnotationView);\nexports.Label = (function (superClass) {\n    extend(Label, superClass);\n    function Label() {\n        return Label.__super__.constructor.apply(this, arguments);\n    }\n    Label.prototype.default_view = exports.LabelView;\n    Label.prototype.type = 'Label';\n    Label.mixins(['text', 'line:border_', 'fill:background_']);\n    Label.define({\n        x: [p.Number],\n        x_units: [p.SpatialUnits, 'data'],\n        y: [p.Number],\n        y_units: [p.SpatialUnits, 'data'],\n        text: [p.String],\n        angle: [p.Angle, 0],\n        angle_units: [p.AngleUnits, 'rad'],\n        x_offset: [p.Number, 0],\n        y_offset: [p.Number, 0],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default'],\n        render_mode: [p.RenderMode, 'canvas']\n    });\n    Label.override({\n        background_fill_color: null,\n        border_line_color: null\n    });\n    return Label;\n})(text_annotation_1.TextAnnotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar text_annotation_1 = require(\"./text_annotation\");\nvar column_data_source_1 = require(\"../sources/column_data_source\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.LabelSetView = (function (superClass) {\n    extend(LabelSetView, superClass);\n    function LabelSetView() {\n        return LabelSetView.__super__.constructor.apply(this, arguments);\n    }\n    LabelSetView.prototype.initialize = function (options) {\n        var i, j, ref, results;\n        LabelSetView.__super__.initialize.call(this, options);\n        this.set_data(this.model.source);\n        if (this.model.render_mode === 'css') {\n            results = [];\n            for (i = j = 0, ref = this._text.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                this.title_div = dom_1.div({\n                    \"class\": 'bk-annotation-child',\n                    style: {\n                        display: \"none\"\n                    }\n                });\n                results.push(this.el.appendChild(this.title_div));\n            }\n            return results;\n        }\n    };\n    LabelSetView.prototype.connect_signals = function () {\n        LabelSetView.__super__.connect_signals.call(this);\n        if (this.model.render_mode === 'css') {\n            this.connect(this.model.change, function () {\n                this.set_data(this.model.source);\n                return this.render();\n            });\n            this.connect(this.model.source.streaming, function () {\n                this.set_data(this.model.source);\n                return this.render();\n            });\n            this.connect(this.model.source.patching, function () {\n                this.set_data(this.model.source);\n                return this.render();\n            });\n            return this.connect(this.model.source.change, function () {\n                this.set_data(this.model.source);\n                return this.render();\n            });\n        }\n        else {\n            this.connect(this.model.change, function () {\n                this.set_data(this.model.source);\n                return this.plot_view.request_render();\n            });\n            this.connect(this.model.source.streaming, function () {\n                this.set_data(this.model.source);\n                return this.plot_view.request_render();\n            });\n            this.connect(this.model.source.patching, function () {\n                this.set_data(this.model.source);\n                return this.plot_view.request_render();\n            });\n            return this.connect(this.model.source.change, function () {\n                this.set_data(this.model.source);\n                return this.plot_view.request_render();\n            });\n        }\n    };\n    LabelSetView.prototype.set_data = function (source) {\n        LabelSetView.__super__.set_data.call(this, source);\n        return this.visuals.warm_cache(source);\n    };\n    LabelSetView.prototype._map_data = function () {\n        var sx, sy, vx, vy, xscale, yscale;\n        xscale = this.plot_view.frame.xscales[this.model.x_range_name];\n        yscale = this.plot_view.frame.yscales[this.model.y_range_name];\n        if (this.model.x_units === \"data\") {\n            vx = xscale.v_compute(this._x);\n        }\n        else {\n            vx = this._x.slice(0);\n        }\n        sx = this.canvas.v_vx_to_sx(vx);\n        if (this.model.y_units === \"data\") {\n            vy = yscale.v_compute(this._y);\n        }\n        else {\n            vy = this._y.slice(0);\n        }\n        sy = this.canvas.v_vy_to_sy(vy);\n        return [sx, sy];\n    };\n    LabelSetView.prototype.render = function () {\n        var ctx, i, j, k, ref, ref1, ref2, results, results1, sx, sy;\n        if (!this.model.visible && this.model.render_mode === 'css') {\n            dom_1.hide(this.el);\n        }\n        if (!this.model.visible) {\n            return;\n        }\n        ctx = this.plot_view.canvas_view.ctx;\n        ref = this._map_data(), sx = ref[0], sy = ref[1];\n        if (this.model.render_mode === 'canvas') {\n            results = [];\n            for (i = j = 0, ref1 = this._text.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n                results.push(this._v_canvas_text(ctx, i, this._text[i], sx[i] + this._x_offset[i], sy[i] - this._y_offset[i], this._angle[i]));\n            }\n            return results;\n        }\n        else {\n            results1 = [];\n            for (i = k = 0, ref2 = this._text.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {\n                results1.push(this._v_css_text(ctx, i, this._text[i], sx[i] + this._x_offset[i], sy[i] - this._y_offset[i], this._angle[i]));\n            }\n            return results1;\n        }\n    };\n    LabelSetView.prototype._get_size = function () {\n        var ctx, height, side, width;\n        ctx = this.plot_view.canvas_view.ctx;\n        this.visuals.text.set_value(ctx);\n        side = this.model.panel.side;\n        if (side === \"above\" || side === \"below\") {\n            height = ctx.measureText(this._text[0]).ascent;\n            return height;\n        }\n        if (side === 'left' || side === 'right') {\n            width = ctx.measureText(this._text[0]).width;\n            return width;\n        }\n    };\n    LabelSetView.prototype._v_canvas_text = function (ctx, i, text, sx, sy, angle) {\n        var bbox_dims;\n        this.visuals.text.set_vectorize(ctx, i);\n        bbox_dims = this._calculate_bounding_box_dimensions(ctx, text);\n        ctx.save();\n        ctx.beginPath();\n        ctx.translate(sx, sy);\n        ctx.rotate(angle);\n        ctx.rect(bbox_dims[0], bbox_dims[1], bbox_dims[2], bbox_dims[3]);\n        if (this.visuals.background_fill.doit) {\n            this.visuals.background_fill.set_vectorize(ctx, i);\n            ctx.fill();\n        }\n        if (this.visuals.border_line.doit) {\n            this.visuals.border_line.set_vectorize(ctx, i);\n            ctx.stroke();\n        }\n        if (this.visuals.text.doit) {\n            this.visuals.text.set_vectorize(ctx, i);\n            ctx.fillText(text, 0, 0);\n        }\n        return ctx.restore();\n    };\n    LabelSetView.prototype._v_css_text = function (ctx, i, text, sx, sy, angle) {\n        var bbox_dims, el, ld, line_dash;\n        el = this.el.childNodes[i];\n        el.textContent = text;\n        this.visuals.text.set_vectorize(ctx, i);\n        bbox_dims = this._calculate_bounding_box_dimensions(ctx, text);\n        ld = this.visuals.border_line.line_dash.value();\n        if (types_1.isArray(ld)) {\n            line_dash = ld.length < 2 ? \"solid\" : \"dashed\";\n        }\n        if (types_1.isString(ld)) {\n            line_dash = ld;\n        }\n        this.visuals.border_line.set_vectorize(ctx, i);\n        this.visuals.background_fill.set_vectorize(ctx, i);\n        el.style.position = 'absolute';\n        el.style.left = (sx + bbox_dims[0]) + \"px\";\n        el.style.top = (sy + bbox_dims[1]) + \"px\";\n        el.style.color = \"\" + (this.visuals.text.text_color.value());\n        el.style.opacity = \"\" + (this.visuals.text.text_alpha.value());\n        el.style.font = \"\" + (this.visuals.text.font_value());\n        el.style.lineHeight = \"normal\";\n        if (angle) {\n            el.style.transform = \"rotate(\" + angle + \"rad)\";\n        }\n        if (this.visuals.background_fill.doit) {\n            el.style.backgroundColor = \"\" + (this.visuals.background_fill.color_value());\n        }\n        if (this.visuals.border_line.doit) {\n            el.style.borderStyle = \"\" + line_dash;\n            el.style.borderWidth = (this.visuals.border_line.line_width.value()) + \"px\";\n            el.style.borderColor = \"\" + (this.visuals.border_line.color_value());\n        }\n        return dom_1.show(el);\n    };\n    return LabelSetView;\n})(text_annotation_1.TextAnnotationView);\nexports.LabelSet = (function (superClass) {\n    extend(LabelSet, superClass);\n    function LabelSet() {\n        return LabelSet.__super__.constructor.apply(this, arguments);\n    }\n    LabelSet.prototype.default_view = exports.LabelSetView;\n    LabelSet.prototype.type = 'Label';\n    LabelSet.mixins(['text', 'line:border_', 'fill:background_']);\n    LabelSet.define({\n        x: [p.NumberSpec],\n        y: [p.NumberSpec],\n        x_units: [p.SpatialUnits, 'data'],\n        y_units: [p.SpatialUnits, 'data'],\n        text: [\n            p.StringSpec, {\n                field: \"text\"\n            }\n        ],\n        angle: [p.AngleSpec, 0],\n        x_offset: [\n            p.NumberSpec, {\n                value: 0\n            }\n        ],\n        y_offset: [\n            p.NumberSpec, {\n                value: 0\n            }\n        ],\n        source: [\n            p.Instance, function () {\n                return new column_data_source_1.ColumnDataSource();\n            }\n        ],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default'],\n        render_mode: [p.RenderMode, 'canvas']\n    });\n    LabelSet.override({\n        background_fill_color: null,\n        border_line_color: null\n    });\n    return LabelSet;\n})(text_annotation_1.TextAnnotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar p = require(\"core/properties\");\nvar text_1 = require(\"core/util/text\");\nvar bbox_1 = require(\"core/util/bbox\");\nvar array_1 = require(\"core/util/array\");\nvar object_1 = require(\"core/util/object\");\nvar types_1 = require(\"core/util/types\");\nexports.LegendView = (function (superClass) {\n    extend(LegendView, superClass);\n    function LegendView() {\n        return LegendView.__super__.constructor.apply(this, arguments);\n    }\n    LegendView.prototype.initialize = function (options) {\n        return LegendView.__super__.initialize.call(this, options);\n    };\n    LegendView.prototype.connect_signals = function () {\n        LegendView.__super__.connect_signals.call(this);\n        return this.connect(this.model.properties.visible.change, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n    };\n    LegendView.prototype.compute_legend_bbox = function () {\n        var ctx, glyph_height, glyph_width, h_range, i, label_height, label_standoff, label_width, legend_height, legend_margin, legend_names, legend_padding, legend_spacing, legend_width, len, location, max_label_width, name, panel, ref, ref1, ref2, v_range, width, x, y;\n        legend_names = this.model.get_legend_names();\n        glyph_height = this.model.glyph_height;\n        glyph_width = this.model.glyph_width;\n        label_height = this.model.label_height;\n        label_width = this.model.label_width;\n        this.max_label_height = array_1.max([text_1.get_text_height(this.visuals.label_text.font_value()).height, label_height, glyph_height]);\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        this.visuals.label_text.set_value(ctx);\n        this.text_widths = {};\n        for (i = 0, len = legend_names.length; i < len; i++) {\n            name = legend_names[i];\n            this.text_widths[name] = array_1.max([ctx.measureText(name).width, label_width]);\n        }\n        ctx.restore();\n        max_label_width = array_1.max(object_1.values(this.text_widths));\n        legend_margin = this.model.margin;\n        legend_padding = this.model.padding;\n        legend_spacing = this.model.spacing;\n        label_standoff = this.model.label_standoff;\n        if (this.model.orientation === \"vertical\") {\n            legend_height = legend_names.length * this.max_label_height + (legend_names.length - 1) * legend_spacing + 2 * legend_padding;\n            legend_width = max_label_width + glyph_width + label_standoff + 2 * legend_padding;\n        }\n        else {\n            legend_width = 2 * legend_padding + (legend_names.length - 1) * legend_spacing;\n            ref = this.text_widths;\n            for (name in ref) {\n                width = ref[name];\n                legend_width += array_1.max([width, label_width]) + glyph_width + label_standoff;\n            }\n            legend_height = this.max_label_height + 2 * legend_padding;\n        }\n        panel = (ref1 = this.model.panel) != null ? ref1 : this.plot_view.frame;\n        h_range = {\n            start: panel._left.value,\n            end: panel._right.value\n        };\n        v_range = {\n            start: panel._bottom.value,\n            end: panel._top.value\n        };\n        location = this.model.location;\n        if (types_1.isString(location)) {\n            switch (location) {\n                case 'top_left':\n                    x = h_range.start + legend_margin;\n                    y = v_range.end - legend_margin;\n                    break;\n                case 'top_center':\n                    x = (h_range.end + h_range.start) / 2 - legend_width / 2;\n                    y = v_range.end - legend_margin;\n                    break;\n                case 'top_right':\n                    x = h_range.end - legend_margin - legend_width;\n                    y = v_range.end - legend_margin;\n                    break;\n                case 'center_right':\n                    x = h_range.end - legend_margin - legend_width;\n                    y = (v_range.end + v_range.start) / 2 + legend_height / 2;\n                    break;\n                case 'bottom_right':\n                    x = h_range.end - legend_margin - legend_width;\n                    y = v_range.start + legend_margin + legend_height;\n                    break;\n                case 'bottom_center':\n                    x = (h_range.end + h_range.start) / 2 - legend_width / 2;\n                    y = v_range.start + legend_margin + legend_height;\n                    break;\n                case 'bottom_left':\n                    x = h_range.start + legend_margin;\n                    y = v_range.start + legend_margin + legend_height;\n                    break;\n                case 'center_left':\n                    x = h_range.start + legend_margin;\n                    y = (v_range.end + v_range.start) / 2 + legend_height / 2;\n                    break;\n                case 'center':\n                    x = (h_range.end + h_range.start) / 2 - legend_width / 2;\n                    y = (v_range.end + v_range.start) / 2 + legend_height / 2;\n            }\n        }\n        else if (types_1.isArray(location) && location.length === 2) {\n            x = location[0], y = location[1];\n            if ((ref2 = panel.side) === \"left\" || ref2 === \"right\" || ref2 === \"above\" || ref2 === \"below\") {\n                x += h_range.start;\n                y += v_range.end;\n            }\n            else {\n                x += h_range.start;\n                y += v_range.start;\n            }\n        }\n        x = this.plot_view.canvas.vx_to_sx(x);\n        y = this.plot_view.canvas.vy_to_sy(y);\n        return {\n            x: x,\n            y: y,\n            width: legend_width,\n            height: legend_height\n        };\n    };\n    LegendView.prototype.bbox = function () {\n        var height, ref, width, x, y;\n        ref = this.compute_legend_bbox(), x = ref.x, y = ref.y, width = ref.width, height = ref.height;\n        return new bbox_1.BBox({\n            x0: x,\n            y0: y,\n            x1: x + width,\n            y1: y + height\n        });\n    };\n    LegendView.prototype.on_hit = function (sx, sy) {\n        var bbox, field, glyph_height, glyph_width, h, i, item, j, k, l, label, label_standoff, labels, legend_bbox, legend_spacing, len, len1, len2, len3, r, ref, ref1, ref2, ref3, ref4, vertical, w, x1, x2, xoffset, y1, y2, yoffset;\n        glyph_height = this.model.glyph_height;\n        glyph_width = this.model.glyph_width;\n        legend_spacing = this.model.spacing;\n        label_standoff = this.model.label_standoff;\n        xoffset = yoffset = this.model.padding;\n        legend_bbox = this.compute_legend_bbox();\n        vertical = this.model.orientation === \"vertical\";\n        ref = this.model.items;\n        for (i = 0, len = ref.length; i < len; i++) {\n            item = ref[i];\n            labels = item.get_labels_list_from_label_prop();\n            field = item.get_field_from_label_prop();\n            for (j = 0, len1 = labels.length; j < len1; j++) {\n                label = labels[j];\n                x1 = legend_bbox.x + xoffset;\n                y1 = legend_bbox.y + yoffset;\n                x2 = x1 + glyph_width;\n                y2 = y1 + glyph_height;\n                if (vertical) {\n                    ref1 = [legend_bbox.width - 2 * this.model.padding, this.max_label_height], w = ref1[0], h = ref1[1];\n                }\n                else {\n                    ref2 = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height], w = ref2[0], h = ref2[1];\n                }\n                bbox = new bbox_1.BBox({\n                    x0: x1,\n                    y0: y1,\n                    x1: x1 + w,\n                    y1: y1 + h\n                });\n                if (bbox.contains(sx, sy)) {\n                    switch (this.model.click_policy) {\n                        case \"hide\":\n                            ref3 = item.renderers;\n                            for (k = 0, len2 = ref3.length; k < len2; k++) {\n                                r = ref3[k];\n                                r.visible = !r.visible;\n                            }\n                            break;\n                        case \"mute\":\n                            ref4 = item.renderers;\n                            for (l = 0, len3 = ref4.length; l < len3; l++) {\n                                r = ref4[l];\n                                r.muted = !r.muted;\n                            }\n                    }\n                    return true;\n                }\n                if (vertical) {\n                    yoffset += this.max_label_height + legend_spacing;\n                }\n                else {\n                    xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing;\n                }\n            }\n        }\n        return false;\n    };\n    LegendView.prototype.render = function () {\n        var bbox, ctx;\n        if (!this.model.visible) {\n            return;\n        }\n        if (this.model.items.length === 0) {\n            return;\n        }\n        ctx = this.plot_view.canvas_view.ctx;\n        bbox = this.compute_legend_bbox();\n        ctx.save();\n        this._draw_legend_box(ctx, bbox);\n        this._draw_legend_items(ctx, bbox);\n        return ctx.restore();\n    };\n    LegendView.prototype._draw_legend_box = function (ctx, bbox) {\n        ctx.beginPath();\n        ctx.rect(bbox.x, bbox.y, bbox.width, bbox.height);\n        this.visuals.background_fill.set_value(ctx);\n        ctx.fill();\n        if (this.visuals.border_line.doit) {\n            this.visuals.border_line.set_value(ctx);\n            return ctx.stroke();\n        }\n    };\n    LegendView.prototype._draw_legend_items = function (ctx, bbox) {\n        var active, field, glyph_height, glyph_width, h, i, item, j, k, label, label_standoff, labels, legend_spacing, len, len1, len2, r, ref, ref1, ref2, ref3, vertical, view, w, x1, x2, xoffset, y1, y2, yoffset;\n        glyph_height = this.model.glyph_height;\n        glyph_width = this.model.glyph_width;\n        legend_spacing = this.model.spacing;\n        label_standoff = this.model.label_standoff;\n        xoffset = yoffset = this.model.padding;\n        vertical = this.model.orientation === \"vertical\";\n        ref = this.model.items;\n        for (i = 0, len = ref.length; i < len; i++) {\n            item = ref[i];\n            labels = item.get_labels_list_from_label_prop();\n            field = item.get_field_from_label_prop();\n            if (labels.length === 0) {\n                continue;\n            }\n            active = (function () {\n                switch (this.model.click_policy) {\n                    case \"none\":\n                        return true;\n                    case \"hide\":\n                        return array_1.all(item.renderers, function (r) {\n                            return r.visible;\n                        });\n                    case \"mute\":\n                        return array_1.all(item.renderers, function (r) {\n                            return !r.muted;\n                        });\n                }\n            }).call(this);\n            for (j = 0, len1 = labels.length; j < len1; j++) {\n                label = labels[j];\n                x1 = bbox.x + xoffset;\n                y1 = bbox.y + yoffset;\n                x2 = x1 + glyph_width;\n                y2 = y1 + glyph_height;\n                if (vertical) {\n                    yoffset += this.max_label_height + legend_spacing;\n                }\n                else {\n                    xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing;\n                }\n                this.visuals.label_text.set_value(ctx);\n                ctx.fillText(label, x2 + label_standoff, y1 + this.max_label_height / 2.0);\n                ref1 = item.renderers;\n                for (k = 0, len2 = ref1.length; k < len2; k++) {\n                    r = ref1[k];\n                    view = this.plot_view.renderer_views[r.id];\n                    view.draw_legend(ctx, x1, x2, y1, y2, field, label);\n                }\n                if (!active) {\n                    if (vertical) {\n                        ref2 = [bbox.width - 2 * this.model.padding, this.max_label_height], w = ref2[0], h = ref2[1];\n                    }\n                    else {\n                        ref3 = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height], w = ref3[0], h = ref3[1];\n                    }\n                    ctx.beginPath();\n                    ctx.rect(x1, y1, w, h);\n                    this.visuals.inactive_fill.set_value(ctx);\n                    ctx.fill();\n                }\n            }\n        }\n        return null;\n    };\n    LegendView.prototype._get_size = function () {\n        var bbox, side;\n        bbox = this.compute_legend_bbox();\n        side = this.model.panel.side;\n        if (side === 'above' || side === 'below') {\n            return bbox.height;\n        }\n        if (side === 'left' || side === 'right') {\n            return bbox.width;\n        }\n    };\n    return LegendView;\n})(annotation_1.AnnotationView);\nexports.Legend = (function (superClass) {\n    extend(Legend, superClass);\n    function Legend() {\n        return Legend.__super__.constructor.apply(this, arguments);\n    }\n    Legend.prototype.default_view = exports.LegendView;\n    Legend.prototype.type = 'Legend';\n    Legend.prototype.cursor = function () {\n        if (this.click_policy === \"none\") {\n            return null;\n        }\n        else {\n            return \"pointer\";\n        }\n    };\n    Legend.prototype.get_legend_names = function () {\n        var i, item, labels, legend_names, len, ref;\n        legend_names = [];\n        ref = this.items;\n        for (i = 0, len = ref.length; i < len; i++) {\n            item = ref[i];\n            labels = item.get_labels_list_from_label_prop();\n            legend_names = legend_names.concat(labels);\n        }\n        return legend_names;\n    };\n    Legend.mixins(['text:label_', 'fill:inactive_', 'line:border_', 'fill:background_']);\n    Legend.define({\n        orientation: [p.Orientation, 'vertical'],\n        location: [p.Any, 'top_right'],\n        label_standoff: [p.Number, 5],\n        glyph_height: [p.Number, 20],\n        glyph_width: [p.Number, 20],\n        label_height: [p.Number, 20],\n        label_width: [p.Number, 20],\n        margin: [p.Number, 10],\n        padding: [p.Number, 10],\n        spacing: [p.Number, 3],\n        items: [p.Array, []],\n        click_policy: [p.Any, \"none\"]\n    });\n    Legend.override({\n        border_line_color: \"#e5e5e5\",\n        border_line_alpha: 0.5,\n        border_line_width: 1,\n        background_fill_color: \"#ffffff\",\n        background_fill_alpha: 0.95,\n        inactive_fill_color: \"white\",\n        inactive_fill_alpha: 0.9,\n        label_text_font_size: \"10pt\",\n        label_text_baseline: \"middle\"\n    });\n    return Legend;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; }, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar model_1 = require(\"../../model\");\nvar p = require(\"core/properties\");\nvar logging_1 = require(\"core/logging\");\nvar array_1 = require(\"core/util/array\");\nvar column_data_source_1 = require(\"../../models/sources/column_data_source\");\nexports.LegendItem = (function (superClass) {\n    extend(LegendItem, superClass);\n    function LegendItem() {\n        this.get_labels_list_from_label_prop = bind(this.get_labels_list_from_label_prop, this);\n        this.get_field_from_label_prop = bind(this.get_field_from_label_prop, this);\n        return LegendItem.__super__.constructor.apply(this, arguments);\n    }\n    LegendItem.prototype.type = \"LegendItem\";\n    LegendItem.prototype._check_data_sources_on_renderers = function () {\n        var field, i, len, r, ref, source;\n        field = this.get_field_from_label_prop();\n        if (field != null) {\n            if (this.renderers.length < 1) {\n                return false;\n            }\n            source = this.renderers[0].data_source;\n            if (source != null) {\n                ref = this.renderers;\n                for (i = 0, len = ref.length; i < len; i++) {\n                    r = ref[i];\n                    if (r.data_source !== source) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    LegendItem.prototype._check_field_label_on_data_source = function () {\n        var field, source;\n        field = this.get_field_from_label_prop();\n        if (field != null) {\n            if (this.renderers.length < 1) {\n                return false;\n            }\n            source = this.renderers[0].data_source;\n            if ((source != null) && indexOf.call(source.columns(), field) < 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LegendItem.prototype.initialize = function (attrs, options) {\n        var data_source_validation, field_validation;\n        LegendItem.__super__.initialize.call(this, attrs, options);\n        data_source_validation = this._check_data_sources_on_renderers();\n        if (!data_source_validation) {\n            logging_1.logger.error(\"Non matching data sources on legend item renderers\");\n        }\n        field_validation = this._check_field_label_on_data_source();\n        if (!field_validation) {\n            return logging_1.logger.error(\"Bad column name on label: \" + this.label);\n        }\n    };\n    LegendItem.define({\n        label: [p.StringSpec, null],\n        renderers: [p.Array, []]\n    });\n    LegendItem.prototype.get_field_from_label_prop = function () {\n        if ((this.label != null) && (this.label.field != null)) {\n            return this.label.field;\n        }\n    };\n    LegendItem.prototype.get_labels_list_from_label_prop = function () {\n        var data, field, source;\n        if ((this.label != null) && (this.label.value != null)) {\n            return [this.label.value];\n        }\n        field = this.get_field_from_label_prop();\n        if (field != null) {\n            if (this.renderers[0] && (this.renderers[0].data_source != null)) {\n                source = this.renderers[0].data_source;\n            }\n            else {\n                return [\"No source found\"];\n            }\n            if (source instanceof column_data_source_1.ColumnDataSource) {\n                data = source.get_column(field);\n                if (data != null) {\n                    return array_1.uniq(data);\n                }\n                else {\n                    return [\"Invalid field\"];\n                }\n            }\n        }\n        return [];\n    };\n    return LegendItem;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar signaling_1 = require(\"core/signaling\");\nvar p = require(\"core/properties\");\nexports.PolyAnnotationView = (function (superClass) {\n    extend(PolyAnnotationView, superClass);\n    function PolyAnnotationView() {\n        return PolyAnnotationView.__super__.constructor.apply(this, arguments);\n    }\n    PolyAnnotationView.prototype.connect_signals = function () {\n        PolyAnnotationView.__super__.connect_signals.call(this);\n        this.connect(this.model.change, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n        return this.connect(this.model.data_update, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n    };\n    PolyAnnotationView.prototype.render = function (ctx) {\n        var canvas, i, j, ref, sx, sy, vx, vy, xs, ys;\n        if (!this.model.visible) {\n            return;\n        }\n        xs = this.model.xs;\n        ys = this.model.ys;\n        if (xs.length !== ys.length) {\n            return null;\n        }\n        if (xs.length < 3 || ys.length < 3) {\n            return null;\n        }\n        canvas = this.plot_view.canvas;\n        ctx = this.plot_view.canvas_view.ctx;\n        for (i = j = 0, ref = xs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            if (this.model.xs_units === 'screen') {\n                vx = xs[i];\n            }\n            if (this.model.ys_units === 'screen') {\n                vy = ys[i];\n            }\n            sx = canvas.vx_to_sx(vx);\n            sy = canvas.vy_to_sy(vy);\n            if (i === 0) {\n                ctx.beginPath();\n                ctx.moveTo(sx, sy);\n            }\n            else {\n                ctx.lineTo(sx, sy);\n            }\n        }\n        ctx.closePath();\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_value(ctx);\n            ctx.stroke();\n        }\n        if (this.visuals.fill.doit) {\n            this.visuals.fill.set_value(ctx);\n            return ctx.fill();\n        }\n    };\n    return PolyAnnotationView;\n})(annotation_1.AnnotationView);\nexports.PolyAnnotation = (function (superClass) {\n    extend(PolyAnnotation, superClass);\n    function PolyAnnotation() {\n        return PolyAnnotation.__super__.constructor.apply(this, arguments);\n    }\n    PolyAnnotation.prototype.default_view = exports.PolyAnnotationView;\n    PolyAnnotation.prototype.type = \"PolyAnnotation\";\n    PolyAnnotation.mixins(['line', 'fill']);\n    PolyAnnotation.define({\n        xs: [p.Array, []],\n        xs_units: [p.SpatialUnits, 'data'],\n        ys: [p.Array, []],\n        ys_units: [p.SpatialUnits, 'data'],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default']\n    });\n    PolyAnnotation.override({\n        fill_color: \"#fff9ba\",\n        fill_alpha: 0.4,\n        line_color: \"#cccccc\",\n        line_alpha: 0.3\n    });\n    PolyAnnotation.prototype.initialize = function (attrs, options) {\n        PolyAnnotation.__super__.initialize.call(this, attrs, options);\n        return this.data_update = new signaling_1.Signal(this, \"data_update\");\n    };\n    PolyAnnotation.prototype.update = function (arg) {\n        var xs, ys;\n        xs = arg.xs, ys = arg.ys;\n        this.setv({\n            xs: xs,\n            ys: ys\n        }, {\n            silent: true\n        });\n        return this.data_update.emit();\n    };\n    return PolyAnnotation;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nexports.SpanView = (function (superClass) {\n    extend(SpanView, superClass);\n    function SpanView() {\n        return SpanView.__super__.constructor.apply(this, arguments);\n    }\n    SpanView.prototype.initialize = function (options) {\n        SpanView.__super__.initialize.call(this, options);\n        this.plot_view.canvas_overlays.appendChild(this.el);\n        this.el.style.position = \"absolute\";\n        return dom_1.hide(this.el);\n    };\n    SpanView.prototype.connect_signals = function () {\n        SpanView.__super__.connect_signals.call(this);\n        if (this.model.for_hover) {\n            return this.connect(this.model.properties.computed_location.change, function () {\n                return this._draw_span();\n            });\n        }\n        else {\n            if (this.model.render_mode === 'canvas') {\n                this.connect(this.model.change, (function (_this) {\n                    return function () {\n                        return _this.plot_view.request_render();\n                    };\n                })(this));\n                return this.connect(this.model.properties.location.change, (function (_this) {\n                    return function () {\n                        return _this.plot_view.request_render();\n                    };\n                })(this));\n            }\n            else {\n                this.connect(this.model.change, function () {\n                    return this.render();\n                });\n                return this.connect(this.model.properties.location.change, function () {\n                    return this._draw_span();\n                });\n            }\n        }\n    };\n    SpanView.prototype.render = function () {\n        if (!this.model.visible && this.model.render_mode === 'css') {\n            dom_1.hide(this.el);\n        }\n        if (!this.model.visible) {\n            return;\n        }\n        return this._draw_span();\n    };\n    SpanView.prototype._draw_span = function () {\n        var canvas, ctx, frame, height, loc, sleft, stop, width, xscale, yscale;\n        if (this.model.for_hover) {\n            loc = this.model.computed_location;\n        }\n        else {\n            loc = this.model.location;\n        }\n        if (loc == null) {\n            dom_1.hide(this.el);\n            return;\n        }\n        frame = this.plot_model.frame;\n        canvas = this.plot_model.canvas;\n        xscale = this.plot_view.frame.xscales[this.model.x_range_name];\n        yscale = this.plot_view.frame.yscales[this.model.y_range_name];\n        if (this.model.dimension === 'width') {\n            stop = canvas.vy_to_sy(this._calc_dim(loc, yscale));\n            sleft = canvas.vx_to_sx(frame._left.value);\n            width = frame._width.value;\n            height = this.model.properties.line_width.value();\n        }\n        else {\n            stop = canvas.vy_to_sy(frame._top.value);\n            sleft = canvas.vx_to_sx(this._calc_dim(loc, xscale));\n            width = this.model.properties.line_width.value();\n            height = frame._height.value;\n        }\n        if (this.model.render_mode === \"css\") {\n            this.el.style.top = stop + \"px\";\n            this.el.style.left = sleft + \"px\";\n            this.el.style.width = width + \"px\";\n            this.el.style.height = height + \"px\";\n            this.el.style.zIndex = 1000;\n            this.el.style.backgroundColor = this.model.properties.line_color.value();\n            this.el.style.opacity = this.model.properties.line_alpha.value();\n            return dom_1.show(this.el);\n        }\n        else if (this.model.render_mode === \"canvas\") {\n            ctx = this.plot_view.canvas_view.ctx;\n            ctx.save();\n            ctx.beginPath();\n            this.visuals.line.set_value(ctx);\n            ctx.moveTo(sleft, stop);\n            if (this.model.dimension === \"width\") {\n                ctx.lineTo(sleft + width, stop);\n            }\n            else {\n                ctx.lineTo(sleft, stop + height);\n            }\n            ctx.stroke();\n            return ctx.restore();\n        }\n    };\n    SpanView.prototype._calc_dim = function (location, scale) {\n        var vdim;\n        if (this.model.location_units === 'data') {\n            vdim = scale.compute(location);\n        }\n        else {\n            vdim = location;\n        }\n        return vdim;\n    };\n    return SpanView;\n})(annotation_1.AnnotationView);\nexports.Span = (function (superClass) {\n    extend(Span, superClass);\n    function Span() {\n        return Span.__super__.constructor.apply(this, arguments);\n    }\n    Span.prototype.default_view = exports.SpanView;\n    Span.prototype.type = 'Span';\n    Span.mixins(['line']);\n    Span.define({\n        render_mode: [p.RenderMode, 'canvas'],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default'],\n        location: [p.Number, null],\n        location_units: [p.SpatialUnits, 'data'],\n        dimension: [p.Dimension, 'width']\n    });\n    Span.override({\n        line_color: 'black'\n    });\n    Span.internal({\n        for_hover: [p.Boolean, false],\n        computed_location: [p.Number, null]\n    });\n    return Span;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar dom_1 = require(\"core/dom\");\nvar types_1 = require(\"core/util/types\");\nvar text_1 = require(\"core/util/text\");\nexports.TextAnnotationView = (function (superClass) {\n    extend(TextAnnotationView, superClass);\n    function TextAnnotationView() {\n        return TextAnnotationView.__super__.constructor.apply(this, arguments);\n    }\n    TextAnnotationView.prototype.initialize = function (options) {\n        TextAnnotationView.__super__.initialize.call(this, options);\n        this.canvas = this.plot_model.canvas;\n        this.frame = this.plot_model.frame;\n        if (this.model.render_mode === 'css') {\n            this.el.classList.add('bk-annotation');\n            return this.plot_view.canvas_overlays.appendChild(this.el);\n        }\n    };\n    TextAnnotationView.prototype.connect_signals = function () {\n        TextAnnotationView.__super__.connect_signals.call(this);\n        if (this.model.render_mode === 'css') {\n            return this.connect(this.model.change, function () {\n                return this.render();\n            });\n        }\n        else {\n            return this.connect(this.model.change, (function (_this) {\n                return function () {\n                    return _this.plot_view.request_render();\n                };\n            })(this));\n        }\n    };\n    TextAnnotationView.prototype._calculate_text_dimensions = function (ctx, text) {\n        var height, width;\n        width = ctx.measureText(text).width;\n        height = text_1.get_text_height(this.visuals.text.font_value()).height;\n        return [width, height];\n    };\n    TextAnnotationView.prototype._calculate_bounding_box_dimensions = function (ctx, text) {\n        var height, ref, width, x_offset, y_offset;\n        ref = this._calculate_text_dimensions(ctx, text), width = ref[0], height = ref[1];\n        switch (ctx.textAlign) {\n            case 'left':\n                x_offset = 0;\n                break;\n            case 'center':\n                x_offset = -width / 2;\n                break;\n            case 'right':\n                x_offset = -width;\n        }\n        switch (ctx.textBaseline) {\n            case 'top':\n                y_offset = 0.0;\n                break;\n            case 'middle':\n                y_offset = -0.5 * height;\n                break;\n            case 'bottom':\n                y_offset = -1.0 * height;\n                break;\n            case 'alphabetic':\n                y_offset = -0.8 * height;\n                break;\n            case 'hanging':\n                y_offset = -0.17 * height;\n                break;\n            case 'ideographic':\n                y_offset = -0.83 * height;\n        }\n        return [x_offset, y_offset, width, height];\n    };\n    TextAnnotationView.prototype._get_size = function () {\n        var ctx;\n        ctx = this.plot_view.canvas_view.ctx;\n        this.visuals.text.set_value(ctx);\n        return ctx.measureText(this.model.text).ascent;\n    };\n    TextAnnotationView.prototype.render = function () {\n        return null;\n    };\n    TextAnnotationView.prototype._canvas_text = function (ctx, text, sx, sy, angle) {\n        var bbox_dims;\n        this.visuals.text.set_value(ctx);\n        bbox_dims = this._calculate_bounding_box_dimensions(ctx, text);\n        ctx.save();\n        ctx.beginPath();\n        ctx.translate(sx, sy);\n        if (angle) {\n            ctx.rotate(angle);\n        }\n        ctx.rect(bbox_dims[0], bbox_dims[1], bbox_dims[2], bbox_dims[3]);\n        if (this.visuals.background_fill.doit) {\n            this.visuals.background_fill.set_value(ctx);\n            ctx.fill();\n        }\n        if (this.visuals.border_line.doit) {\n            this.visuals.border_line.set_value(ctx);\n            ctx.stroke();\n        }\n        if (this.visuals.text.doit) {\n            this.visuals.text.set_value(ctx);\n            ctx.fillText(text, 0, 0);\n        }\n        return ctx.restore();\n    };\n    TextAnnotationView.prototype._css_text = function (ctx, text, sx, sy, angle) {\n        var bbox_dims, ld, line_dash;\n        dom_1.hide(this.el);\n        this.visuals.text.set_value(ctx);\n        bbox_dims = this._calculate_bounding_box_dimensions(ctx, text);\n        ld = this.visuals.border_line.line_dash.value();\n        if (types_1.isArray(ld)) {\n            if (ld.length < 2) {\n                line_dash = \"solid\";\n            }\n            else {\n                line_dash = \"dashed\";\n            }\n        }\n        if (types_1.isString(ld)) {\n            line_dash = ld;\n        }\n        this.visuals.border_line.set_value(ctx);\n        this.visuals.background_fill.set_value(ctx);\n        this.el.style.position = 'absolute';\n        this.el.style.left = (sx + bbox_dims[0]) + \"px\";\n        this.el.style.top = (sy + bbox_dims[1]) + \"px\";\n        this.el.style.color = \"\" + (this.visuals.text.text_color.value());\n        this.el.style.opacity = \"\" + (this.visuals.text.text_alpha.value());\n        this.el.style.font = \"\" + (this.visuals.text.font_value());\n        this.el.style.lineHeight = \"normal\";\n        if (angle) {\n            this.el.style.transform = \"rotate(\" + angle + \"rad)\";\n        }\n        if (this.visuals.background_fill.doit) {\n            this.el.style.backgroundColor = \"\" + (this.visuals.background_fill.color_value());\n        }\n        if (this.visuals.border_line.doit) {\n            this.el.style.borderStyle = \"\" + line_dash;\n            this.el.style.borderWidth = (this.visuals.border_line.line_width.value()) + \"px\";\n            this.el.style.borderColor = \"\" + (this.visuals.border_line.color_value());\n        }\n        this.el.textContent = text;\n        return dom_1.show(this.el);\n    };\n    return TextAnnotationView;\n})(annotation_1.AnnotationView);\nexports.TextAnnotation = (function (superClass) {\n    extend(TextAnnotation, superClass);\n    function TextAnnotation() {\n        return TextAnnotation.__super__.constructor.apply(this, arguments);\n    }\n    TextAnnotation.prototype.type = 'TextAnnotation';\n    TextAnnotation.prototype.default_view = exports.TextAnnotationView;\n    return TextAnnotation;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar text_annotation_1 = require(\"./text_annotation\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nvar Visuals = require(\"core/visuals\");\nexports.TitleView = (function (superClass) {\n    extend(TitleView, superClass);\n    function TitleView() {\n        return TitleView.__super__.constructor.apply(this, arguments);\n    }\n    TitleView.prototype.initialize = function (options) {\n        var ctx;\n        TitleView.__super__.initialize.call(this, options);\n        this.visuals.text = new Visuals.Text(this.model);\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        this.model.panel.apply_label_text_heuristics(ctx, 'justified');\n        this.model.text_baseline = ctx.textBaseline;\n        this.model.text_align = this.model.align;\n        return ctx.restore();\n    };\n    TitleView.prototype._get_computed_location = function () {\n        var height, ref, sx, sy, vx, vy, width;\n        ref = this._calculate_text_dimensions(this.plot_view.canvas_view.ctx, this.text), width = ref[0], height = ref[1];\n        switch (this.model.panel.side) {\n            case 'left':\n                vx = 0;\n                vy = this._get_text_location(this.model.align, this.frame.v_range) + this.model.offset;\n                break;\n            case 'right':\n                vx = this.canvas._right.value - 1;\n                vy = this.canvas._height.value - this._get_text_location(this.model.align, this.frame.v_range) - this.model.offset;\n                break;\n            case 'above':\n                vx = this._get_text_location(this.model.align, this.frame.h_range) + this.model.offset;\n                vy = this.canvas._top.value - 10;\n                break;\n            case 'below':\n                vx = this._get_text_location(this.model.align, this.frame.h_range) + this.model.offset;\n                vy = 0;\n        }\n        sx = this.canvas.vx_to_sx(vx);\n        sy = this.canvas.vy_to_sy(vy);\n        return [sx, sy];\n    };\n    TitleView.prototype._get_text_location = function (alignment, range) {\n        var text_location;\n        switch (alignment) {\n            case 'left':\n                text_location = range.start;\n                break;\n            case 'center':\n                text_location = (range.end + range.start) / 2;\n                break;\n            case 'right':\n                text_location = range.end;\n        }\n        return text_location;\n    };\n    TitleView.prototype.render = function () {\n        var angle, ctx, ref, sx, sy;\n        if (!this.model.visible && this.model.render_mode === 'css') {\n            dom_1.hide(this.el);\n        }\n        if (!this.model.visible) {\n            return;\n        }\n        angle = this.model.panel.get_label_angle_heuristic('parallel');\n        ref = this._get_computed_location(), sx = ref[0], sy = ref[1];\n        ctx = this.plot_view.canvas_view.ctx;\n        if (this.model.text === \"\" || this.model.text === null) {\n            return;\n        }\n        if (this.model.render_mode === 'canvas') {\n            return this._canvas_text(ctx, this.model.text, sx, sy, angle);\n        }\n        else {\n            return this._css_text(ctx, this.model.text, sx, sy, angle);\n        }\n    };\n    TitleView.prototype._get_size = function () {\n        var ctx, text;\n        text = this.model.text;\n        if (text === \"\" || text === null) {\n            return 0;\n        }\n        else {\n            ctx = this.plot_view.canvas_view.ctx;\n            this.visuals.text.set_value(ctx);\n            return ctx.measureText(text).ascent + 10;\n        }\n    };\n    return TitleView;\n})(text_annotation_1.TextAnnotationView);\nexports.Title = (function (superClass) {\n    extend(Title, superClass);\n    function Title() {\n        return Title.__super__.constructor.apply(this, arguments);\n    }\n    Title.prototype.default_view = exports.TitleView;\n    Title.prototype.type = 'Title';\n    Title.mixins(['line:border_', 'fill:background_']);\n    Title.define({\n        text: [p.String],\n        text_font: [p.Font, 'helvetica'],\n        text_font_size: [p.FontSizeSpec, '10pt'],\n        text_font_style: [p.FontStyle, 'bold'],\n        text_color: [p.ColorSpec, '#444444'],\n        text_alpha: [p.NumberSpec, 1.0],\n        align: [p.TextAlign, 'left'],\n        offset: [p.Number, 0],\n        render_mode: [p.RenderMode, 'canvas']\n    });\n    Title.override({\n        background_fill_color: null,\n        border_line_color: null\n    });\n    Title.internal({\n        text_align: [p.TextAlign, 'left'],\n        text_baseline: [p.TextBaseline, 'bottom']\n    });\n    return Title;\n})(text_annotation_1.TextAnnotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nexports.TooltipView = (function (superClass) {\n    extend(TooltipView, superClass);\n    function TooltipView() {\n        return TooltipView.__super__.constructor.apply(this, arguments);\n    }\n    TooltipView.prototype.className = \"bk-tooltip\";\n    TooltipView.prototype.initialize = function (options) {\n        TooltipView.__super__.initialize.call(this, options);\n        this.plot_view.canvas_overlays.appendChild(this.el);\n        this.el.style.zIndex = 1010;\n        return dom_1.hide(this.el);\n    };\n    TooltipView.prototype.connect_signals = function () {\n        TooltipView.__super__.connect_signals.call(this);\n        return this.connect(this.model.properties.data.change, function () {\n            return this._draw_tips();\n        });\n    };\n    TooltipView.prototype.render = function () {\n        if (!this.model.visible) {\n            return;\n        }\n        return this._draw_tips();\n    };\n    TooltipView.prototype._draw_tips = function () {\n        var arrow_size, attachment, bottom, content, data, height, i, left, len, side, sx, sy, tip, top, val, vx, vy, width;\n        data = this.model.data;\n        dom_1.empty(this.el);\n        dom_1.hide(this.el);\n        if (this.model.custom) {\n            this.el.classList.add(\"bk-tooltip-custom\");\n        }\n        else {\n            this.el.classList.remove(\"bk-tooltip-custom\");\n        }\n        if (data.length === 0) {\n            return;\n        }\n        for (i = 0, len = data.length; i < len; i++) {\n            val = data[i];\n            vx = val[0], vy = val[1], content = val[2];\n            if (this.model.inner_only && !this.plot_view.frame.contains(vx, vy)) {\n                continue;\n            }\n            tip = dom_1.div({}, content);\n            this.el.appendChild(tip);\n        }\n        sx = this.plot_view.model.canvas.vx_to_sx(vx);\n        sy = this.plot_view.model.canvas.vy_to_sy(vy);\n        attachment = this.model.attachment;\n        switch (attachment) {\n            case \"horizontal\":\n                width = this.plot_view.frame._width.value;\n                left = this.plot_view.frame._left.value;\n                if (vx - left < width / 2) {\n                    side = 'right';\n                }\n                else {\n                    side = 'left';\n                }\n                break;\n            case \"vertical\":\n                height = this.plot_view.frame._height.value;\n                bottom = this.plot_view.frame._bottom.value;\n                if (vy - bottom < height / 2) {\n                    side = 'below';\n                }\n                else {\n                    side = 'above';\n                }\n                break;\n            default:\n                side = attachment;\n        }\n        this.el.classList.remove(\"bk-right\");\n        this.el.classList.remove(\"bk-left\");\n        this.el.classList.remove(\"bk-above\");\n        this.el.classList.remove(\"bk-below\");\n        arrow_size = 10;\n        dom_1.show(this.el);\n        switch (side) {\n            case \"right\":\n                this.el.classList.add(\"bk-left\");\n                left = sx + (this.el.offsetWidth - this.el.clientWidth) + arrow_size;\n                top = sy - this.el.offsetHeight / 2;\n                break;\n            case \"left\":\n                this.el.classList.add(\"bk-right\");\n                left = sx - this.el.offsetWidth - arrow_size;\n                top = sy - this.el.offsetHeight / 2;\n                break;\n            case \"above\":\n                this.el.classList.add(\"bk-above\");\n                top = sy + (this.el.offsetHeight - this.el.clientHeight) + arrow_size;\n                left = Math.round(sx - this.el.offsetWidth / 2);\n                break;\n            case \"below\":\n                this.el.classList.add(\"bk-below\");\n                top = sy - this.el.offsetHeight - arrow_size;\n                left = Math.round(sx - this.el.offsetWidth / 2);\n        }\n        if (this.model.show_arrow) {\n            this.el.classList.add(\"bk-tooltip-arrow\");\n        }\n        if (this.el.childNodes.length > 0) {\n            this.el.style.top = top + \"px\";\n            return this.el.style.left = left + \"px\";\n        }\n        else {\n            return dom_1.hide(this.el);\n        }\n    };\n    return TooltipView;\n})(annotation_1.AnnotationView);\nexports.Tooltip = (function (superClass) {\n    extend(Tooltip, superClass);\n    function Tooltip() {\n        return Tooltip.__super__.constructor.apply(this, arguments);\n    }\n    Tooltip.prototype.default_view = exports.TooltipView;\n    Tooltip.prototype.type = 'Tooltip';\n    Tooltip.define({\n        attachment: [p.String, 'horizontal'],\n        inner_only: [p.Bool, true],\n        show_arrow: [p.Bool, true]\n    });\n    Tooltip.override({\n        level: 'overlay'\n    });\n    Tooltip.internal({\n        data: [p.Any, []],\n        custom: [p.Any]\n    });\n    Tooltip.prototype.clear = function () {\n        return this.data = [];\n    };\n    Tooltip.prototype.add = function (vx, vy, content) {\n        var data;\n        data = this.data;\n        data.push([vx, vy, content]);\n        this.data = data;\n        return this.properties.data.change.emit();\n    };\n    return Tooltip;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar annotation_1 = require(\"./annotation\");\nvar column_data_source_1 = require(\"../sources/column_data_source\");\nvar arrow_head_1 = require(\"./arrow_head\");\nvar p = require(\"core/properties\");\nexports.WhiskerView = (function (superClass) {\n    extend(WhiskerView, superClass);\n    function WhiskerView() {\n        return WhiskerView.__super__.constructor.apply(this, arguments);\n    }\n    WhiskerView.prototype.initialize = function (options) {\n        WhiskerView.__super__.initialize.call(this, options);\n        return this.set_data(this.model.source);\n    };\n    WhiskerView.prototype.connect_signals = function () {\n        WhiskerView.__super__.connect_signals.call(this);\n        this.connect(this.model.source.streaming, function () {\n            return this.set_data(this.model.source);\n        });\n        this.connect(this.model.source.patching, function () {\n            return this.set_data(this.model.source);\n        });\n        return this.connect(this.model.source.change, function () {\n            return this.set_data(this.model.source);\n        });\n    };\n    WhiskerView.prototype.set_data = function (source) {\n        WhiskerView.__super__.set_data.call(this, source);\n        this.visuals.warm_cache(source);\n        return this.plot_view.request_render();\n    };\n    WhiskerView.prototype._map_data = function () {\n        var _base_vx, _lower, _lower_vx, _upper, _upper_vx, base_scale, i, j, limit_scale, ref, x_scale, y_scale;\n        x_scale = this.plot_view.frame.xscales[this.model.x_range_name];\n        y_scale = this.plot_view.frame.yscales[this.model.y_range_name];\n        limit_scale = this.model.dimension === \"height\" ? y_scale : x_scale;\n        base_scale = this.model.dimension === \"height\" ? x_scale : y_scale;\n        if (this.model.lower.units === \"data\") {\n            _lower_vx = limit_scale.v_compute(this._lower);\n        }\n        else {\n            _lower_vx = this._lower;\n        }\n        if (this.model.upper.units === \"data\") {\n            _upper_vx = limit_scale.v_compute(this._upper);\n        }\n        else {\n            _upper_vx = this._upper;\n        }\n        if (this.model.base.units === \"data\") {\n            _base_vx = base_scale.v_compute(this._base);\n        }\n        else {\n            _base_vx = this._base;\n        }\n        ref = this.model._normals(), i = ref[0], j = ref[1];\n        _lower = [_lower_vx, _base_vx];\n        _upper = [_upper_vx, _base_vx];\n        this._lower_sx = this.plot_model.canvas.v_vx_to_sx(_lower[i]);\n        this._lower_sy = this.plot_model.canvas.v_vy_to_sy(_lower[j]);\n        this._upper_sx = this.plot_model.canvas.v_vx_to_sx(_upper[i]);\n        return this._upper_sy = this.plot_model.canvas.v_vy_to_sy(_upper[j]);\n    };\n    WhiskerView.prototype.render = function () {\n        var angle, ctx, i, k, l, m, ref, ref1, ref2, results;\n        if (!this.model.visible) {\n            return;\n        }\n        this._map_data();\n        ctx = this.plot_view.canvas_view.ctx;\n        if (this.visuals.line.doit) {\n            for (i = k = 0, ref = this._lower_sx.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.beginPath();\n                ctx.moveTo(this._lower_sx[i], this._lower_sy[i]);\n                ctx.lineTo(this._upper_sx[i], this._upper_sy[i]);\n                ctx.stroke();\n            }\n        }\n        angle = this.model.dimension === \"height\" ? 0 : Math.PI / 2;\n        if (this.model.lower_head != null) {\n            for (i = l = 0, ref1 = this._lower_sx.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n                ctx.save();\n                ctx.translate(this._lower_sx[i], this._lower_sy[i]);\n                ctx.rotate(angle + Math.PI);\n                this.model.lower_head.render(ctx, i);\n                ctx.restore();\n            }\n        }\n        if (this.model.upper_head != null) {\n            results = [];\n            for (i = m = 0, ref2 = this._upper_sx.length; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {\n                ctx.save();\n                ctx.translate(this._upper_sx[i], this._upper_sy[i]);\n                ctx.rotate(angle);\n                this.model.upper_head.render(ctx, i);\n                results.push(ctx.restore());\n            }\n            return results;\n        }\n    };\n    return WhiskerView;\n})(annotation_1.AnnotationView);\nexports.Whisker = (function (superClass) {\n    extend(Whisker, superClass);\n    function Whisker() {\n        return Whisker.__super__.constructor.apply(this, arguments);\n    }\n    Whisker.prototype.default_view = exports.WhiskerView;\n    Whisker.prototype.type = 'Whisker';\n    Whisker.mixins(['line']);\n    Whisker.define({\n        lower: [p.DistanceSpec],\n        lower_head: [\n            p.Instance, function () {\n                return new arrow_head_1.TeeHead({\n                    level: \"underlay\",\n                    size: 10\n                });\n            }\n        ],\n        upper: [p.DistanceSpec],\n        upper_head: [\n            p.Instance, function () {\n                return new arrow_head_1.TeeHead({\n                    level: \"underlay\",\n                    size: 10\n                });\n            }\n        ],\n        base: [p.DistanceSpec],\n        dimension: [p.Dimension, 'height'],\n        source: [\n            p.Instance, function () {\n                return new column_data_source_1.ColumnDataSource();\n            }\n        ],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default']\n    });\n    Whisker.override({\n        level: 'underlay'\n    });\n    Whisker.prototype._normals = function () {\n        var i, j, ref, ref1;\n        if (this.dimension === 'height') {\n            ref = [1, 0], i = ref[0], j = ref[1];\n        }\n        else {\n            ref1 = [0, 1], i = ref1[0], j = ref1[1];\n        }\n        return [i, j];\n    };\n    return Whisker;\n})(annotation_1.Annotation);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar side_panel_1 = require(\"core/layout/side_panel\");\nvar guide_renderer_1 = require(\"../renderers/guide_renderer\");\nvar renderer_1 = require(\"../renderers/renderer\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.AxisView = (function (superClass) {\n    extend(AxisView, superClass);\n    function AxisView() {\n        return AxisView.__super__.constructor.apply(this, arguments);\n    }\n    AxisView.prototype.initialize = function (options) {\n        AxisView.__super__.initialize.call(this, options);\n        this._x_range_name = this.model.x_range_name;\n        return this._y_range_name = this.model.y_range_name;\n    };\n    AxisView.prototype.render = function () {\n        var ctx;\n        if (this.model.visible === false) {\n            return;\n        }\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        this._draw_rule(ctx);\n        this._draw_major_ticks(ctx);\n        this._draw_minor_ticks(ctx);\n        this._draw_major_labels(ctx);\n        this._draw_axis_label(ctx);\n        return ctx.restore();\n    };\n    AxisView.prototype.connect_signals = function () {\n        AxisView.__super__.connect_signals.call(this);\n        return this.connect(this.model.change, (function (_this) {\n            return function () {\n                return _this.plot_view.request_render();\n            };\n        })(this));\n    };\n    AxisView.prototype._get_size = function () {\n        return this._tick_extent() + this._tick_label_extent() + this._axis_label_extent();\n    };\n    AxisView.prototype._draw_rule = function (ctx) {\n        var coords, i, k, nx, ny, ref, ref1, ref2, ref3, ref4, sx, sy, x, xoff, y, yoff;\n        if (!this.visuals.axis_line.doit) {\n            return;\n        }\n        ref = coords = this.model.rule_coords, x = ref[0], y = ref[1];\n        ref1 = this.plot_view.map_to_screen(x, y, this._x_range_name, this._y_range_name), sx = ref1[0], sy = ref1[1];\n        ref2 = this.model.normals, nx = ref2[0], ny = ref2[1];\n        ref3 = this.model.offsets, xoff = ref3[0], yoff = ref3[1];\n        this.visuals.axis_line.set_value(ctx);\n        ctx.beginPath();\n        ctx.moveTo(Math.round(sx[0] + nx * xoff), Math.round(sy[0] + ny * yoff));\n        for (i = k = 1, ref4 = sx.length; 1 <= ref4 ? k < ref4 : k > ref4; i = 1 <= ref4 ? ++k : --k) {\n            ctx.lineTo(Math.round(sx[i] + nx * xoff), Math.round(sy[i] + ny * yoff));\n        }\n        return ctx.stroke();\n    };\n    AxisView.prototype._draw_major_ticks = function (ctx) {\n        var coords, i, k, nx, ny, ref, ref1, ref2, ref3, ref4, results, sx, sy, tin, tout, x, xoff, y, yoff;\n        if (!this.visuals.major_tick_line.doit) {\n            return;\n        }\n        coords = this.model.tick_coords;\n        ref = coords.major, x = ref[0], y = ref[1];\n        ref1 = this.plot_view.map_to_screen(x, y, this._x_range_name, this._y_range_name), sx = ref1[0], sy = ref1[1];\n        ref2 = this.model.normals, nx = ref2[0], ny = ref2[1];\n        ref3 = this.model.offsets, xoff = ref3[0], yoff = ref3[1];\n        tin = this.model.major_tick_in;\n        tout = this.model.major_tick_out;\n        this.visuals.major_tick_line.set_value(ctx);\n        results = [];\n        for (i = k = 0, ref4 = sx.length; 0 <= ref4 ? k < ref4 : k > ref4; i = 0 <= ref4 ? ++k : --k) {\n            ctx.beginPath();\n            ctx.moveTo(Math.round(sx[i] + nx * tout + nx * xoff), Math.round(sy[i] + ny * tout + ny * yoff));\n            ctx.lineTo(Math.round(sx[i] - nx * tin + nx * xoff), Math.round(sy[i] - ny * tin + ny * yoff));\n            results.push(ctx.stroke());\n        }\n        return results;\n    };\n    AxisView.prototype._draw_minor_ticks = function (ctx) {\n        var coords, i, k, nx, ny, ref, ref1, ref2, ref3, ref4, results, sx, sy, tin, tout, x, xoff, y, yoff;\n        if (!this.visuals.minor_tick_line.doit) {\n            return;\n        }\n        coords = this.model.tick_coords;\n        ref = coords.minor, x = ref[0], y = ref[1];\n        ref1 = this.plot_view.map_to_screen(x, y, this._x_range_name, this._y_range_name), sx = ref1[0], sy = ref1[1];\n        ref2 = this.model.normals, nx = ref2[0], ny = ref2[1];\n        ref3 = this.model.offsets, xoff = ref3[0], yoff = ref3[1];\n        tin = this.model.minor_tick_in;\n        tout = this.model.minor_tick_out;\n        this.visuals.minor_tick_line.set_value(ctx);\n        results = [];\n        for (i = k = 0, ref4 = sx.length; 0 <= ref4 ? k < ref4 : k > ref4; i = 0 <= ref4 ? ++k : --k) {\n            ctx.beginPath();\n            ctx.moveTo(Math.round(sx[i] + nx * tout + nx * xoff), Math.round(sy[i] + ny * tout + ny * yoff));\n            ctx.lineTo(Math.round(sx[i] - nx * tin + nx * xoff), Math.round(sy[i] - ny * tin + ny * yoff));\n            results.push(ctx.stroke());\n        }\n        return results;\n    };\n    AxisView.prototype._draw_major_labels = function (ctx) {\n        var angle, coords, dim, i, k, labels, nx, ny, orient, ref, ref1, ref2, ref3, ref4, results, side, standoff, sx, sy, x, xoff, y, yoff;\n        coords = this.model.tick_coords;\n        ref = coords.major, x = ref[0], y = ref[1];\n        ref1 = this.plot_view.map_to_screen(x, y, this._x_range_name, this._y_range_name), sx = ref1[0], sy = ref1[1];\n        ref2 = this.model.normals, nx = ref2[0], ny = ref2[1];\n        ref3 = this.model.offsets, xoff = ref3[0], yoff = ref3[1];\n        dim = this.model.dimension;\n        side = this.model.panel_side;\n        orient = this.model.major_label_orientation;\n        if (types_1.isString(orient)) {\n            angle = this.model.panel.get_label_angle_heuristic(orient);\n        }\n        else {\n            angle = -orient;\n        }\n        standoff = this._tick_extent() + this.model.major_label_standoff;\n        labels = this.model.compute_labels(coords.major[dim]);\n        this.visuals.major_label_text.set_value(ctx);\n        this.model.panel.apply_label_text_heuristics(ctx, orient);\n        results = [];\n        for (i = k = 0, ref4 = sx.length; 0 <= ref4 ? k < ref4 : k > ref4; i = 0 <= ref4 ? ++k : --k) {\n            if (angle) {\n                ctx.translate(sx[i] + nx * standoff + nx * xoff, sy[i] + ny * standoff + ny * yoff);\n                ctx.rotate(angle);\n                ctx.fillText(labels[i], 0, 0);\n                ctx.rotate(-angle);\n                results.push(ctx.translate(-sx[i] - nx * standoff + nx * xoff, -sy[i] - ny * standoff + ny * yoff));\n            }\n            else {\n                results.push(ctx.fillText(labels[i], Math.round(sx[i] + nx * standoff + nx * xoff), Math.round(sy[i] + ny * standoff + ny * yoff)));\n            }\n        }\n        return results;\n    };\n    AxisView.prototype._draw_axis_label = function (ctx) {\n        var angle, label, nx, ny, orient, ref, ref1, ref2, ref3, side, standoff, sx, sy, x, xoff, y, yoff;\n        label = this.model.axis_label;\n        if (label == null) {\n            return;\n        }\n        ref = this.model.rule_coords, x = ref[0], y = ref[1];\n        ref1 = this.plot_view.map_to_screen(x, y, this._x_range_name, this._y_range_name), sx = ref1[0], sy = ref1[1];\n        ref2 = this.model.normals, nx = ref2[0], ny = ref2[1];\n        ref3 = this.model.offsets, xoff = ref3[0], yoff = ref3[1];\n        side = this.model.panel_side;\n        orient = 'parallel';\n        angle = this.model.panel.get_label_angle_heuristic(orient);\n        standoff = this._tick_extent() + this._tick_label_extent() + this.model.axis_label_standoff;\n        sx = (sx[0] + sx[sx.length - 1]) / 2;\n        sy = (sy[0] + sy[sy.length - 1]) / 2;\n        this.visuals.axis_label_text.set_value(ctx);\n        this.model.panel.apply_label_text_heuristics(ctx, orient);\n        x = sx + nx * standoff + nx * xoff;\n        y = sy + ny * standoff + ny * yoff;\n        if (isNaN(x) || isNaN(y)) {\n            return;\n        }\n        if (angle) {\n            ctx.translate(x, y);\n            ctx.rotate(angle);\n            ctx.fillText(label, 0, 0);\n            ctx.rotate(-angle);\n            return ctx.translate(-x, -y);\n        }\n        else {\n            return ctx.fillText(label, x, y);\n        }\n    };\n    AxisView.prototype._tick_extent = function () {\n        return this.model.major_tick_out;\n    };\n    AxisView.prototype._tick_label_extent = function () {\n        var angle, c, coords, ctx, dim, extent, h, hfactor, hscale, i, k, labels, orient, ref, s, side, val, w, wfactor;\n        extent = 0;\n        ctx = this.plot_view.canvas_view.ctx;\n        dim = this.model.dimension;\n        coords = this.model.tick_coords.major;\n        side = this.model.panel_side;\n        orient = this.model.major_label_orientation;\n        labels = this.model.compute_labels(coords[dim]);\n        this.visuals.major_label_text.set_value(ctx);\n        if (types_1.isString(orient)) {\n            hscale = 1;\n            angle = this.model.panel.get_label_angle_heuristic(orient);\n        }\n        else {\n            hscale = 2;\n            angle = -orient;\n        }\n        angle = Math.abs(angle);\n        c = Math.cos(angle);\n        s = Math.sin(angle);\n        if (side === \"above\" || side === \"below\") {\n            wfactor = s;\n            hfactor = c;\n        }\n        else {\n            wfactor = c;\n            hfactor = s;\n        }\n        for (i = k = 0, ref = labels.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            if (labels[i] == null) {\n                continue;\n            }\n            w = ctx.measureText(labels[i]).width * 1.1;\n            h = ctx.measureText(labels[i]).ascent * 0.9;\n            val = w * wfactor + (h / hscale) * hfactor;\n            if (val > extent) {\n                extent = val;\n            }\n        }\n        if (extent > 0) {\n            extent += this.model.major_label_standoff;\n        }\n        return extent;\n    };\n    AxisView.prototype._axis_label_extent = function () {\n        var angle, axis_label, c, ctx, extent, h, orient, s, side, w;\n        extent = 0;\n        side = this.model.panel_side;\n        axis_label = this.model.axis_label;\n        orient = 'parallel';\n        ctx = this.plot_view.canvas_view.ctx;\n        this.visuals.axis_label_text.set_value(ctx);\n        angle = Math.abs(this.model.panel.get_label_angle_heuristic(orient));\n        c = Math.cos(angle);\n        s = Math.sin(angle);\n        if (axis_label) {\n            extent += this.model.axis_label_standoff;\n            this.visuals.axis_label_text.set_value(ctx);\n            w = ctx.measureText(axis_label).width * 1.1;\n            h = ctx.measureText(axis_label).ascent * 0.9;\n            if (side === \"above\" || side === \"below\") {\n                extent += w * s + h * c;\n            }\n            else {\n                extent += w * c + h * s;\n            }\n        }\n        return extent;\n    };\n    return AxisView;\n})(renderer_1.RendererView);\nexports.Axis = (function (superClass) {\n    extend(Axis, superClass);\n    function Axis() {\n        return Axis.__super__.constructor.apply(this, arguments);\n    }\n    Axis.prototype.default_view = exports.AxisView;\n    Axis.prototype.type = 'Axis';\n    Axis.mixins(['line:axis_', 'line:major_tick_', 'line:minor_tick_', 'text:major_label_', 'text:axis_label_']);\n    Axis.define({\n        bounds: [p.Any, 'auto'],\n        ticker: [p.Instance, null],\n        formatter: [p.Instance, null],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default'],\n        axis_label: [p.String, ''],\n        axis_label_standoff: [p.Int, 5],\n        major_label_standoff: [p.Int, 5],\n        major_label_orientation: [p.Any, \"horizontal\"],\n        major_label_overrides: [p.Any, {}],\n        major_tick_in: [p.Number, 2],\n        major_tick_out: [p.Number, 6],\n        minor_tick_in: [p.Number, 0],\n        minor_tick_out: [p.Number, 4]\n    });\n    Axis.override({\n        axis_line_color: 'black',\n        major_tick_line_color: 'black',\n        minor_tick_line_color: 'black',\n        major_label_text_font_size: \"8pt\",\n        major_label_text_align: \"center\",\n        major_label_text_baseline: \"alphabetic\",\n        axis_label_text_font_size: \"10pt\",\n        axis_label_text_font_style: \"italic\"\n    });\n    Axis.internal({\n        panel_side: [p.Any]\n    });\n    Axis.prototype.compute_labels = function (ticks) {\n        var i, k, labels, ref;\n        labels = this.formatter.doFormat(ticks, this);\n        for (i = k = 0, ref = ticks.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            if (ticks[i] in this.major_label_overrides) {\n                labels[i] = this.major_label_overrides[ticks[i]];\n            }\n        }\n        return labels;\n    };\n    Axis.getters({\n        computed_bounds: function () {\n            return this._computed_bounds();\n        },\n        rule_coords: function () {\n            return this._rule_coords();\n        },\n        tick_coords: function () {\n            return this._tick_coords();\n        },\n        ranges: function () {\n            return this._ranges();\n        },\n        normals: function () {\n            return this.panel._normals;\n        },\n        dimension: function () {\n            return this.panel._dim;\n        },\n        offsets: function () {\n            return this._offsets();\n        },\n        loc: function () {\n            return this._get_loc();\n        }\n    });\n    Axis.prototype.add_panel = function (side) {\n        this.panel = new side_panel_1.SidePanel({\n            side: side\n        });\n        this.panel.attach_document(this.document);\n        return this.panel_side = side;\n    };\n    Axis.prototype._offsets = function () {\n        var frame, ref, side, xoff, yoff;\n        side = this.panel_side;\n        ref = [0, 0], xoff = ref[0], yoff = ref[1];\n        frame = this.plot.plot_canvas.frame;\n        switch (side) {\n            case \"below\":\n                yoff = Math.abs(this.panel._top.value - frame._bottom.value);\n                break;\n            case \"above\":\n                yoff = Math.abs(this.panel._bottom.value - frame._top.value);\n                break;\n            case \"right\":\n                xoff = Math.abs(this.panel._left.value - frame._right.value);\n                break;\n            case \"left\":\n                xoff = Math.abs(this.panel._right.value - frame._left.value);\n        }\n        return [xoff, yoff];\n    };\n    Axis.prototype._ranges = function () {\n        var frame, i, j, ranges;\n        i = this.dimension;\n        j = (i + 1) % 2;\n        frame = this.plot.plot_canvas.frame;\n        ranges = [frame.x_ranges[this.x_range_name], frame.y_ranges[this.y_range_name]];\n        return [ranges[i], ranges[j]];\n    };\n    Axis.prototype._computed_bounds = function () {\n        var cross_range, end, range, range_bounds, ref, ref1, start, user_bounds;\n        ref = this.ranges, range = ref[0], cross_range = ref[1];\n        user_bounds = (ref1 = this.bounds) != null ? ref1 : 'auto';\n        range_bounds = [range.min, range.max];\n        if (user_bounds === 'auto') {\n            return range_bounds;\n        }\n        if (types_1.isArray(user_bounds)) {\n            if (Math.abs(user_bounds[0] - user_bounds[1]) > Math.abs(range_bounds[0] - range_bounds[1])) {\n                start = Math.max(Math.min(user_bounds[0], user_bounds[1]), range_bounds[0]);\n                end = Math.min(Math.max(user_bounds[0], user_bounds[1]), range_bounds[1]);\n            }\n            else {\n                start = Math.min(user_bounds[0], user_bounds[1]);\n                end = Math.max(user_bounds[0], user_bounds[1]);\n            }\n            return [start, end];\n        }\n        logging_1.logger.error(\"user bounds '\" + user_bounds + \"' not understood\");\n        return null;\n    };\n    Axis.prototype._rule_coords = function () {\n        var coords, cross_range, end, i, j, range, ref, ref1, start, xs, ys;\n        i = this.dimension;\n        j = (i + 1) % 2;\n        ref = this.ranges, range = ref[0], cross_range = ref[1];\n        ref1 = this.computed_bounds, start = ref1[0], end = ref1[1];\n        xs = new Array(2);\n        ys = new Array(2);\n        coords = [xs, ys];\n        coords[i][0] = Math.max(start, range.min);\n        coords[i][1] = Math.min(end, range.max);\n        if (coords[i][0] > coords[i][1]) {\n            coords[i][0] = coords[i][1] = 0 / 0;\n        }\n        coords[j][0] = this.loc;\n        coords[j][1] = this.loc;\n        return coords;\n    };\n    Axis.prototype._tick_coords = function () {\n        var coords, cross_range, end, i, ii, j, k, l, m, majors, minor_coords, minor_xs, minor_ys, minors, range, range_max, range_min, ref, ref1, ref2, ref3, ref4, ref5, start, ticks, xs, ys;\n        i = this.dimension;\n        j = (i + 1) % 2;\n        ref = this.ranges, range = ref[0], cross_range = ref[1];\n        ref1 = this.computed_bounds, start = ref1[0], end = ref1[1];\n        ticks = this.ticker.get_ticks(start, end, range, this.loc, {});\n        majors = ticks.major;\n        minors = ticks.minor;\n        xs = [];\n        ys = [];\n        coords = [xs, ys];\n        minor_xs = [];\n        minor_ys = [];\n        minor_coords = [minor_xs, minor_ys];\n        if (range.type === \"FactorRange\") {\n            for (ii = k = 0, ref2 = majors.length; 0 <= ref2 ? k < ref2 : k > ref2; ii = 0 <= ref2 ? ++k : --k) {\n                coords[i].push(majors[ii]);\n                coords[j].push(this.loc);\n            }\n        }\n        else {\n            ref3 = [range.min, range.max], range_min = ref3[0], range_max = ref3[1];\n            for (ii = l = 0, ref4 = majors.length; 0 <= ref4 ? l < ref4 : l > ref4; ii = 0 <= ref4 ? ++l : --l) {\n                if (majors[ii] < range_min || majors[ii] > range_max) {\n                    continue;\n                }\n                coords[i].push(majors[ii]);\n                coords[j].push(this.loc);\n            }\n            for (ii = m = 0, ref5 = minors.length; 0 <= ref5 ? m < ref5 : m > ref5; ii = 0 <= ref5 ? ++m : --m) {\n                if (minors[ii] < range_min || minors[ii] > range_max) {\n                    continue;\n                }\n                minor_coords[i].push(minors[ii]);\n                minor_coords[j].push(this.loc);\n            }\n        }\n        return {\n            \"major\": coords,\n            \"minor\": minor_coords\n        };\n    };\n    Axis.prototype._get_loc = function () {\n        var cend, cross_range, cstart, range, ref, side;\n        ref = this.ranges, range = ref[0], cross_range = ref[1];\n        cstart = cross_range.start;\n        cend = cross_range.end;\n        side = this.panel_side;\n        switch (side) {\n            case 'left':\n            case 'below':\n                return cross_range.start;\n            case 'right':\n            case 'above':\n                return cross_range.end;\n        }\n    };\n    return Axis;\n})(guide_renderer_1.GuideRenderer);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar axis_1 = require(\"./axis\");\nvar categorical_tick_formatter_1 = require(\"../formatters/categorical_tick_formatter\");\nvar categorical_ticker_1 = require(\"../tickers/categorical_ticker\");\nvar logging_1 = require(\"core/logging\");\nexports.CategoricalAxisView = (function (superClass) {\n    extend(CategoricalAxisView, superClass);\n    function CategoricalAxisView() {\n        return CategoricalAxisView.__super__.constructor.apply(this, arguments);\n    }\n    return CategoricalAxisView;\n})(axis_1.AxisView);\nexports.CategoricalAxis = (function (superClass) {\n    extend(CategoricalAxis, superClass);\n    function CategoricalAxis() {\n        return CategoricalAxis.__super__.constructor.apply(this, arguments);\n    }\n    CategoricalAxis.prototype.default_view = exports.CategoricalAxisView;\n    CategoricalAxis.prototype.type = 'CategoricalAxis';\n    CategoricalAxis.override({\n        ticker: function () {\n            return new categorical_ticker_1.CategoricalTicker();\n        },\n        formatter: function () {\n            return new categorical_tick_formatter_1.CategoricalTickFormatter();\n        }\n    });\n    CategoricalAxis.prototype._computed_bounds = function () {\n        var cross_range, range, range_bounds, ref, ref1, user_bounds;\n        ref = this.ranges, range = ref[0], cross_range = ref[1];\n        user_bounds = (ref1 = this.bounds) != null ? ref1 : 'auto';\n        range_bounds = [range.min, range.max];\n        if (user_bounds !== 'auto') {\n            logging_1.logger.warn(\"Categorical Axes only support user_bounds='auto', ignoring\");\n        }\n        return range_bounds;\n    };\n    return CategoricalAxis;\n})(axis_1.Axis);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar axis_1 = require(\"./axis\");\nexports.ContinuousAxis = (function (superClass) {\n    extend(ContinuousAxis, superClass);\n    function ContinuousAxis() {\n        return ContinuousAxis.__super__.constructor.apply(this, arguments);\n    }\n    ContinuousAxis.prototype.type = 'ContinuousAxis';\n    return ContinuousAxis;\n})(axis_1.Axis);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar linear_axis_1 = require(\"./linear_axis\");\nvar datetime_tick_formatter_1 = require(\"../formatters/datetime_tick_formatter\");\nvar datetime_ticker_1 = require(\"../tickers/datetime_ticker\");\nexports.DatetimeAxisView = (function (superClass) {\n    extend(DatetimeAxisView, superClass);\n    function DatetimeAxisView() {\n        return DatetimeAxisView.__super__.constructor.apply(this, arguments);\n    }\n    return DatetimeAxisView;\n})(linear_axis_1.LinearAxisView);\nexports.DatetimeAxis = (function (superClass) {\n    extend(DatetimeAxis, superClass);\n    function DatetimeAxis() {\n        return DatetimeAxis.__super__.constructor.apply(this, arguments);\n    }\n    DatetimeAxis.prototype.default_view = exports.DatetimeAxisView;\n    DatetimeAxis.prototype.type = 'DatetimeAxis';\n    DatetimeAxis.override({\n        ticker: function () {\n            return new datetime_ticker_1.DatetimeTicker();\n        },\n        formatter: function () {\n            return new datetime_tick_formatter_1.DatetimeTickFormatter();\n        }\n    });\n    return DatetimeAxis;\n})(linear_axis_1.LinearAxis);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar axis_1 = require(\"./axis\");\nexports.Axis = axis_1.Axis;\nvar categorical_axis_1 = require(\"./categorical_axis\");\nexports.CategoricalAxis = categorical_axis_1.CategoricalAxis;\nvar continuous_axis_1 = require(\"./continuous_axis\");\nexports.ContinuousAxis = continuous_axis_1.ContinuousAxis;\nvar datetime_axis_1 = require(\"./datetime_axis\");\nexports.DatetimeAxis = datetime_axis_1.DatetimeAxis;\nvar linear_axis_1 = require(\"./linear_axis\");\nexports.LinearAxis = linear_axis_1.LinearAxis;\nvar log_axis_1 = require(\"./log_axis\");\nexports.LogAxis = log_axis_1.LogAxis;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar axis_1 = require(\"./axis\");\nvar continuous_axis_1 = require(\"./continuous_axis\");\nvar basic_tick_formatter_1 = require(\"../formatters/basic_tick_formatter\");\nvar basic_ticker_1 = require(\"../tickers/basic_ticker\");\nexports.LinearAxisView = (function (superClass) {\n    extend(LinearAxisView, superClass);\n    function LinearAxisView() {\n        return LinearAxisView.__super__.constructor.apply(this, arguments);\n    }\n    return LinearAxisView;\n})(axis_1.AxisView);\nexports.LinearAxis = (function (superClass) {\n    extend(LinearAxis, superClass);\n    function LinearAxis() {\n        return LinearAxis.__super__.constructor.apply(this, arguments);\n    }\n    LinearAxis.prototype.default_view = exports.LinearAxisView;\n    LinearAxis.prototype.type = 'LinearAxis';\n    LinearAxis.override({\n        ticker: function () {\n            return new basic_ticker_1.BasicTicker();\n        },\n        formatter: function () {\n            return new basic_tick_formatter_1.BasicTickFormatter();\n        }\n    });\n    return LinearAxis;\n})(continuous_axis_1.ContinuousAxis);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar axis_1 = require(\"./axis\");\nvar continuous_axis_1 = require(\"./continuous_axis\");\nvar log_tick_formatter_1 = require(\"../formatters/log_tick_formatter\");\nvar log_ticker_1 = require(\"../tickers/log_ticker\");\nexports.LogAxisView = (function (superClass) {\n    extend(LogAxisView, superClass);\n    function LogAxisView() {\n        return LogAxisView.__super__.constructor.apply(this, arguments);\n    }\n    return LogAxisView;\n})(axis_1.AxisView);\nexports.LogAxis = (function (superClass) {\n    extend(LogAxis, superClass);\n    function LogAxis() {\n        return LogAxis.__super__.constructor.apply(this, arguments);\n    }\n    LogAxis.prototype.default_view = exports.LogAxisView;\n    LogAxis.prototype.type = 'LogAxis';\n    LogAxis.override({\n        ticker: function () {\n            return new log_ticker_1.LogTicker();\n        },\n        formatter: function () {\n            return new log_tick_formatter_1.LogTickFormatter();\n        }\n    });\n    return LogAxis;\n})(continuous_axis_1.ContinuousAxis);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, slice = [].slice;\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nvar model_1 = require(\"../../model\");\nexports.CustomJS = (function (superClass) {\n    extend(CustomJS, superClass);\n    function CustomJS() {\n        return CustomJS.__super__.constructor.apply(this, arguments);\n    }\n    CustomJS.prototype.type = 'CustomJS';\n    CustomJS.define({\n        args: [p.Any, {}],\n        code: [p.String, '']\n    });\n    CustomJS.getters({\n        values: function () {\n            return this._make_values();\n        },\n        func: function () {\n            return this._make_func();\n        }\n    });\n    CustomJS.prototype.execute = function (cb_obj, cb_data) {\n        return this.func.apply(cb_obj, this.values.concat(cb_obj, cb_data, require, {}));\n    };\n    CustomJS.prototype._make_values = function () {\n        return object_1.values(this.args);\n    };\n    CustomJS.prototype._make_func = function () {\n        return (function (func, args, ctor) {\n            ctor.prototype = func.prototype;\n            var child = new ctor, result = func.apply(child, args);\n            return Object(result) === result ? result : child;\n        })(Function, slice.call(Object.keys(this.args)).concat([\"cb_obj\"], [\"cb_data\"], [\"require\"], [\"exports\"], [this.code]), function () { });\n    };\n    return CustomJS;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar customjs_1 = require(\"./customjs\");\nexports.CustomJS = customjs_1.CustomJS;\nvar open_url_1 = require(\"./open_url\");\nexports.OpenURL = open_url_1.OpenURL;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nvar p = require(\"core/properties\");\nvar selection_1 = require(\"core/util/selection\");\nvar templating_1 = require(\"core/util/templating\");\nexports.OpenURL = (function (superClass) {\n    extend(OpenURL, superClass);\n    function OpenURL() {\n        return OpenURL.__super__.constructor.apply(this, arguments);\n    }\n    OpenURL.prototype.type = 'OpenURL';\n    OpenURL.define({\n        url: [p.String, 'http://']\n    });\n    OpenURL.prototype.execute = function (data_source) {\n        var i, j, len, ref, url;\n        ref = selection_1.get_indices(data_source);\n        for (j = 0, len = ref.length; j < len; j++) {\n            i = ref[j];\n            url = templating_1.replace_placeholders(this.url, data_source, i);\n            window.open(url);\n        }\n        return null;\n    };\n    return OpenURL;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar layout_canvas_1 = require(\"core/layout/layout_canvas\");\nvar dom_view_1 = require(\"core/dom_view\");\nvar solver_1 = require(\"core/layout/solver\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar dom_1 = require(\"core/dom\");\nvar canvas_1 = require(\"core/util/canvas\");\nvar canvas2svg = require(\"canvas2svg\");\nif (window.CanvasPixelArray != null) {\n    CanvasPixelArray.prototype.set = function (arr) {\n        var i, j, ref, results;\n        results = [];\n        for (i = j = 0, ref = this.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            results.push(this[i] = arr[i]);\n        }\n        return results;\n    };\n}\nexports.CanvasView = (function (superClass) {\n    extend(CanvasView, superClass);\n    function CanvasView() {\n        return CanvasView.__super__.constructor.apply(this, arguments);\n    }\n    CanvasView.prototype.className = \"bk-canvas-wrapper\";\n    CanvasView.prototype.initialize = function (options) {\n        CanvasView.__super__.initialize.call(this, options);\n        this.map_el = this.model.map ? this.el.appendChild(dom_1.div({\n            \"class\": \"bk-canvas-map\"\n        })) : null;\n        this.events_el = this.el.appendChild(dom_1.div({\n            \"class\": \"bk-canvas-events\"\n        }));\n        this.overlays_el = this.el.appendChild(dom_1.div({\n            \"class\": \"bk-canvas-overlays\"\n        }));\n        switch (this.model.output_backend) {\n            case \"canvas\":\n            case \"webgl\":\n                this.canvas_el = this.el.appendChild(dom_1.canvas({\n                    \"class\": \"bk-canvas\"\n                }));\n                this._ctx = this.canvas_el.getContext('2d');\n                break;\n            case \"svg\":\n                this._ctx = new canvas2svg();\n                this.canvas_el = this.el.appendChild(this._ctx.getSvg());\n        }\n        this.ctx = this.get_ctx();\n        canvas_1.fixup_ctx(this.ctx);\n        return logging_1.logger.debug(\"CanvasView initialized\");\n    };\n    CanvasView.prototype.get_ctx = function () {\n        return this._ctx;\n    };\n    CanvasView.prototype.get_canvas_element = function () {\n        return this.canvas_el;\n    };\n    CanvasView.prototype.prepare_canvas = function () {\n        var height, pixel_ratio, width;\n        width = this.model._width.value;\n        height = this.model._height.value;\n        this.el.style.width = width + \"px\";\n        this.el.style.height = height + \"px\";\n        pixel_ratio = canvas_1.get_scale_ratio(this.ctx, this.model.use_hidpi, this.model.output_backend);\n        this.model.pixel_ratio = pixel_ratio;\n        this.canvas_el.style.width = width + \"px\";\n        this.canvas_el.style.height = height + \"px\";\n        this.canvas_el.setAttribute('width', width * pixel_ratio);\n        this.canvas_el.setAttribute('height', height * pixel_ratio);\n        return logging_1.logger.debug(\"Rendering CanvasView with width: \" + width + \", height: \" + height + \", pixel ratio: \" + pixel_ratio);\n    };\n    CanvasView.prototype.set_dims = function (arg) {\n        var height, width;\n        width = arg[0], height = arg[1];\n        if (width === 0 || height === 0) {\n            return;\n        }\n        if ((this._width_constraint != null) && this.solver.has_constraint(this._width_constraint)) {\n            this.solver.remove_constraint(this._width_constraint);\n        }\n        if ((this._height_constraint != null) && this.solver.has_constraint(this._height_constraint)) {\n            this.solver.remove_constraint(this._height_constraint);\n        }\n        this._width_constraint = solver_1.EQ(this.model._width, -width);\n        this.solver.add_constraint(this._width_constraint);\n        this._height_constraint = solver_1.EQ(this.model._height, -height);\n        this.solver.add_constraint(this._height_constraint);\n        return this.solver.update_variables();\n    };\n    return CanvasView;\n})(dom_view_1.DOMView);\nexports.Canvas = (function (superClass) {\n    extend(Canvas, superClass);\n    function Canvas() {\n        return Canvas.__super__.constructor.apply(this, arguments);\n    }\n    Canvas.prototype.type = 'Canvas';\n    Canvas.prototype.default_view = exports.CanvasView;\n    Canvas.internal({\n        map: [p.Boolean, false],\n        initial_width: [p.Number],\n        initial_height: [p.Number],\n        use_hidpi: [p.Boolean, true],\n        pixel_ratio: [p.Number, 1],\n        output_backend: [p.OutputBackend, \"canvas\"]\n    });\n    Canvas.prototype.initialize = function (attrs, options) {\n        Canvas.__super__.initialize.call(this, attrs, options);\n        return this.panel = this;\n    };\n    Canvas.prototype.vx_to_sx = function (x) {\n        return x;\n    };\n    Canvas.prototype.vy_to_sy = function (y) {\n        return this._height.value - (y + 1);\n    };\n    Canvas.prototype.v_vx_to_sx = function (xx) {\n        return new Float64Array(xx);\n    };\n    Canvas.prototype.v_vy_to_sy = function (yy) {\n        var _yy, height, idx, j, len, y;\n        _yy = new Float64Array(yy.length);\n        height = this._height.value;\n        for (idx = j = 0, len = yy.length; j < len; idx = ++j) {\n            y = yy[idx];\n            _yy[idx] = height - (y + 1);\n        }\n        return _yy;\n    };\n    Canvas.prototype.sx_to_vx = function (x) {\n        return x;\n    };\n    Canvas.prototype.sy_to_vy = function (y) {\n        return this._height.value - (y + 1);\n    };\n    Canvas.prototype.v_sx_to_vx = function (xx) {\n        return new Float64Array(xx);\n    };\n    Canvas.prototype.v_sy_to_vy = function (yy) {\n        var _yy, height, idx, j, len, y;\n        _yy = new Float64Array(yy.length);\n        height = this._height.value;\n        for (idx = j = 0, len = yy.length; j < len; idx = ++j) {\n            y = yy[idx];\n            _yy[idx] = height - (y + 1);\n        }\n        return _yy;\n    };\n    Canvas.prototype.get_constraints = function () {\n        return Canvas.__super__.get_constraints.call(this).concat([solver_1.GE(this._top), solver_1.GE(this._bottom), solver_1.GE(this._left), solver_1.GE(this._right), solver_1.GE(this._width), solver_1.GE(this._height), solver_1.EQ(this._width, [-1, this._right]), solver_1.EQ(this._height, [-1, this._top])]);\n    };\n    return Canvas;\n})(layout_canvas_1.LayoutCanvas);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar categorical_scale_1 = require(\"../scales/categorical_scale\");\nvar linear_scale_1 = require(\"../scales/linear_scale\");\nvar log_scale_1 = require(\"../scales/log_scale\");\nvar range1d_1 = require(\"../ranges/range1d\");\nvar data_range1d_1 = require(\"../ranges/data_range1d\");\nvar factor_range_1 = require(\"../ranges/factor_range\");\nvar solver_1 = require(\"core/layout/solver\");\nvar layout_canvas_1 = require(\"core/layout/layout_canvas\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nexports.CartesianFrame = (function (superClass) {\n    extend(CartesianFrame, superClass);\n    function CartesianFrame() {\n        return CartesianFrame.__super__.constructor.apply(this, arguments);\n    }\n    CartesianFrame.prototype.type = 'CartesianFrame';\n    CartesianFrame.prototype.initialize = function (attrs, options) {\n        CartesianFrame.__super__.initialize.call(this, attrs, options);\n        this.panel = this;\n        this._configure_scales();\n        this.connect(this.change, (function (_this) {\n            return function () {\n                return _this._configure_scales();\n            };\n        })(this));\n        return null;\n    };\n    CartesianFrame.prototype.contains = function (vx, vy) {\n        return vx >= this._left.value && vx <= this._right.value && vy >= this._bottom.value && vy <= this._top.value;\n    };\n    CartesianFrame.prototype.map_to_screen = function (x, y, canvas, x_name, y_name) {\n        var sx, sy, vx, vy;\n        if (x_name == null) {\n            x_name = 'default';\n        }\n        if (y_name == null) {\n            y_name = 'default';\n        }\n        vx = this.xscales[x_name].v_compute(x);\n        sx = canvas.v_vx_to_sx(vx);\n        vy = this.yscales[y_name].v_compute(y);\n        sy = canvas.v_vy_to_sy(vy);\n        return [sx, sy];\n    };\n    CartesianFrame.prototype._get_ranges = function (range, extra_ranges) {\n        var extra_range, name, ranges;\n        ranges = {};\n        ranges['default'] = range;\n        if (extra_ranges != null) {\n            for (name in extra_ranges) {\n                extra_range = extra_ranges[name];\n                ranges[name] = extra_range;\n            }\n        }\n        return ranges;\n    };\n    CartesianFrame.prototype._get_scales = function (scale, ranges, frame_range) {\n        var name, range, s, scales;\n        scales = {};\n        for (name in ranges) {\n            range = ranges[name];\n            if (range instanceof data_range1d_1.DataRange1d || range instanceof range1d_1.Range1d) {\n                if (!(scale instanceof log_scale_1.LogScale) && !(scale instanceof linear_scale_1.LinearScale)) {\n                    throw new Error(\"Range \" + range.type + \" is incompatible is Scale \" + scale.type);\n                }\n                if (scale instanceof categorical_scale_1.CategoricalScale) {\n                    throw new Error(\"Range \" + range.type + \" is incompatible is Scale \" + scale.type);\n                }\n            }\n            if (range instanceof factor_range_1.FactorRange) {\n                if (!(scale instanceof categorical_scale_1.CategoricalScale)) {\n                    throw new Error(\"Range \" + range.type + \" is incompatible is Scale \" + scale.type);\n                }\n            }\n            if (scale instanceof log_scale_1.LogScale && range instanceof data_range1d_1.DataRange1d) {\n                range.scale_hint = \"log\";\n            }\n            s = scale.clone();\n            s.setv({\n                source_range: range,\n                target_range: frame_range\n            });\n            scales[name] = s;\n        }\n        return scales;\n    };\n    CartesianFrame.prototype._configure_frame_ranges = function () {\n        this._h_range = new range1d_1.Range1d({\n            start: this._left.value,\n            end: this._left.value + this._width.value\n        });\n        return this._v_range = new range1d_1.Range1d({\n            start: this._bottom.value,\n            end: this._bottom.value + this._height.value\n        });\n    };\n    CartesianFrame.prototype._configure_scales = function () {\n        this._configure_frame_ranges();\n        this._x_ranges = this._get_ranges(this.x_range, this.extra_x_ranges);\n        this._y_ranges = this._get_ranges(this.y_range, this.extra_y_ranges);\n        this._xscales = this._get_scales(this.x_scale, this._x_ranges, this._h_range);\n        return this._yscales = this._get_scales(this.y_scale, this._y_ranges, this._v_range);\n    };\n    CartesianFrame.prototype._update_scales = function () {\n        var name, ref, ref1, scale;\n        this._configure_frame_ranges();\n        ref = this._xscales;\n        for (name in ref) {\n            scale = ref[name];\n            scale.target_range = this._h_range;\n        }\n        ref1 = this._yscales;\n        for (name in ref1) {\n            scale = ref1[name];\n            scale.target_range = this._v_range;\n        }\n        return null;\n    };\n    CartesianFrame.getters({\n        h_range: function () {\n            return this._h_range;\n        },\n        v_range: function () {\n            return this._v_range;\n        },\n        x_ranges: function () {\n            return this._x_ranges;\n        },\n        y_ranges: function () {\n            return this._y_ranges;\n        },\n        xscales: function () {\n            return this._xscales;\n        },\n        yscales: function () {\n            return this._yscales;\n        },\n        x_mappers: function () {\n            logging_1.logger.warn(\"x_mappers attr is deprecated, use xscales\");\n            return this._xscales;\n        },\n        y_mappers: function () {\n            logging_1.logger.warn(\"y_mappers attr is deprecated, use yscales\");\n            return this._yscales;\n        }\n    });\n    CartesianFrame.internal({\n        extra_x_ranges: [p.Any, {}],\n        extra_y_ranges: [p.Any, {}],\n        x_range: [p.Instance],\n        y_range: [p.Instance],\n        x_scale: [p.Instance],\n        y_scale: [p.Instance]\n    });\n    CartesianFrame.prototype.get_constraints = function () {\n        return [solver_1.GE(this._top), solver_1.GE(this._bottom), solver_1.GE(this._left), solver_1.GE(this._right), solver_1.GE(this._width), solver_1.GE(this._height), solver_1.EQ(this._left, this._width, [-1, this._right]), solver_1.EQ(this._bottom, this._height, [-1, this._top])];\n    };\n    return CartesianFrame;\n})(layout_canvas_1.LayoutCanvas);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar canvas_1 = require(\"./canvas\");\nexports.Canvas = canvas_1.Canvas;\nvar cartesian_frame_1 = require(\"./cartesian_frame\");\nexports.CartesianFrame = cartesian_frame_1.CartesianFrame;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar tick_formatter_1 = require(\"./tick_formatter\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.BasicTickFormatter = (function (superClass) {\n    extend(BasicTickFormatter, superClass);\n    function BasicTickFormatter() {\n        return BasicTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    BasicTickFormatter.prototype.type = 'BasicTickFormatter';\n    BasicTickFormatter.define({\n        precision: [p.Any, 'auto'],\n        use_scientific: [p.Bool, true],\n        power_limit_high: [p.Number, 5],\n        power_limit_low: [p.Number, -3]\n    });\n    BasicTickFormatter.getters({\n        scientific_limit_low: function () {\n            return Math.pow(10.0, this.power_limit_low);\n        },\n        scientific_limit_high: function () {\n            return Math.pow(10.0, this.power_limit_high);\n        }\n    });\n    BasicTickFormatter.prototype.initialize = function (attrs, options) {\n        BasicTickFormatter.__super__.initialize.call(this, attrs, options);\n        return this.last_precision = 3;\n    };\n    BasicTickFormatter.prototype.doFormat = function (ticks, axis) {\n        var i, is_ok, j, k, l, labels, len, m, n, need_sci, o, precision, ref, ref1, ref2, ref3, ref4, tick, tick_abs, x, zero_eps;\n        if (ticks.length === 0) {\n            return [];\n        }\n        zero_eps = 0;\n        if (ticks.length >= 2) {\n            zero_eps = Math.abs(ticks[1] - ticks[0]) / 10000;\n        }\n        need_sci = false;\n        if (this.use_scientific) {\n            for (j = 0, len = ticks.length; j < len; j++) {\n                tick = ticks[j];\n                tick_abs = Math.abs(tick);\n                if (tick_abs > zero_eps && (tick_abs >= this.scientific_limit_high || tick_abs <= this.scientific_limit_low)) {\n                    need_sci = true;\n                    break;\n                }\n            }\n        }\n        precision = this.precision;\n        if ((precision == null) || types_1.isNumber(precision)) {\n            labels = new Array(ticks.length);\n            if (need_sci) {\n                for (i = k = 0, ref = ticks.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n                    labels[i] = ticks[i].toExponential(precision || void 0);\n                }\n            }\n            else {\n                for (i = l = 0, ref1 = ticks.length; 0 <= ref1 ? l < ref1 : l > ref1; i = 0 <= ref1 ? ++l : --l) {\n                    labels[i] = ticks[i].toFixed(precision || void 0).replace(/(\\.[0-9]*?)0+$/, \"$1\").replace(/\\.$/, \"\");\n                }\n            }\n            return labels;\n        }\n        else if (precision === 'auto') {\n            labels = new Array(ticks.length);\n            for (x = m = ref2 = this.last_precision; ref2 <= 15 ? m <= 15 : m >= 15; x = ref2 <= 15 ? ++m : --m) {\n                is_ok = true;\n                if (need_sci) {\n                    for (i = n = 0, ref3 = ticks.length; 0 <= ref3 ? n < ref3 : n > ref3; i = 0 <= ref3 ? ++n : --n) {\n                        labels[i] = ticks[i].toExponential(x);\n                        if (i > 0) {\n                            if (labels[i] === labels[i - 1]) {\n                                is_ok = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (is_ok) {\n                        break;\n                    }\n                }\n                else {\n                    for (i = o = 0, ref4 = ticks.length; 0 <= ref4 ? o < ref4 : o > ref4; i = 0 <= ref4 ? ++o : --o) {\n                        labels[i] = ticks[i].toFixed(x).replace(/(\\.[0-9]*?)0+$/, \"$1\").replace(/\\.$/, \"\");\n                        if (i > 0) {\n                            if (labels[i] === labels[i - 1]) {\n                                is_ok = false;\n                                break;\n                            }\n                        }\n                    }\n                    if (is_ok) {\n                        break;\n                    }\n                }\n                if (is_ok) {\n                    this.last_precision = x;\n                    return labels;\n                }\n            }\n        }\n        return labels;\n    };\n    return BasicTickFormatter;\n})(tick_formatter_1.TickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar tick_formatter_1 = require(\"./tick_formatter\");\nexports.CategoricalTickFormatter = (function (superClass) {\n    extend(CategoricalTickFormatter, superClass);\n    function CategoricalTickFormatter() {\n        return CategoricalTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    CategoricalTickFormatter.prototype.type = 'CategoricalTickFormatter';\n    CategoricalTickFormatter.prototype.doFormat = function (ticks, axis) {\n        return ticks;\n    };\n    return CategoricalTickFormatter;\n})(tick_formatter_1.TickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _array, _strftime, _us, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar SPrintf = require(\"sprintf\");\nvar tz = require(\"timezone\");\nvar tick_formatter_1 = require(\"./tick_formatter\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nvar types_1 = require(\"core/util/types\");\n_us = function (t) {\n    return Math.round(((t / 1000) % 1) * 1000000);\n};\n_array = function (t) {\n    return tz(t, \"%Y %m %d %H %M %S\").split(/\\s+/).map(function (e) {\n        return parseInt(e, 10);\n    });\n};\n_strftime = function (t, format) {\n    var microsecond_replacement_string;\n    if (types_1.isFunction(format)) {\n        return format(t);\n    }\n    else {\n        microsecond_replacement_string = SPrintf.sprintf(\"$1%06d\", _us(t));\n        format = format.replace(/((^|[^%])(%%)*)%f/, microsecond_replacement_string);\n        if (format.indexOf(\"%\") === -1) {\n            return format;\n        }\n        return tz(t, format);\n    }\n};\nexports.DatetimeTickFormatter = (function (superClass) {\n    extend(DatetimeTickFormatter, superClass);\n    function DatetimeTickFormatter() {\n        return DatetimeTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    DatetimeTickFormatter.prototype.type = 'DatetimeTickFormatter';\n    DatetimeTickFormatter.define({\n        microseconds: [p.Array, ['%fus']],\n        milliseconds: [p.Array, ['%3Nms', '%S.%3Ns']],\n        seconds: [p.Array, ['%Ss']],\n        minsec: [p.Array, [':%M:%S']],\n        minutes: [p.Array, [':%M', '%Mm']],\n        hourmin: [p.Array, ['%H:%M']],\n        hours: [p.Array, ['%Hh', '%H:%M']],\n        days: [p.Array, ['%m/%d', '%a%d']],\n        months: [p.Array, ['%m/%Y', '%b%y']],\n        years: [p.Array, ['%Y']]\n    });\n    DatetimeTickFormatter.prototype.format_order = ['microseconds', 'milliseconds', 'seconds', 'minsec', 'minutes', 'hourmin', 'hours', 'days', 'months', 'years'];\n    DatetimeTickFormatter.prototype.strip_leading_zeros = true;\n    DatetimeTickFormatter.prototype.initialize = function (attrs, options) {\n        DatetimeTickFormatter.__super__.initialize.call(this, attrs, options);\n        return this._update_width_formats();\n    };\n    DatetimeTickFormatter.prototype._update_width_formats = function () {\n        var _widths, now;\n        now = tz(new Date());\n        _widths = function (fmt_strings) {\n            var fmt_string, sizes, sorted;\n            sizes = (function () {\n                var j, len, results;\n                results = [];\n                for (j = 0, len = fmt_strings.length; j < len; j++) {\n                    fmt_string = fmt_strings[j];\n                    results.push(_strftime(now, fmt_string).length);\n                }\n                return results;\n            })();\n            sorted = array_1.sortBy(array_1.zip(sizes, fmt_strings), function (arg) {\n                var fmt, size;\n                size = arg[0], fmt = arg[1];\n                return size;\n            });\n            return array_1.unzip(sorted);\n        };\n        return this._width_formats = {\n            microseconds: _widths(this.microseconds),\n            milliseconds: _widths(this.milliseconds),\n            seconds: _widths(this.seconds),\n            minsec: _widths(this.minsec),\n            minutes: _widths(this.minutes),\n            hourmin: _widths(this.hourmin),\n            hours: _widths(this.hours),\n            days: _widths(this.days),\n            months: _widths(this.months),\n            years: _widths(this.years)\n        };\n    };\n    DatetimeTickFormatter.prototype._get_resolution_str = function (resolution_secs, span_secs) {\n        var adjusted_secs;\n        adjusted_secs = resolution_secs * 1.1;\n        switch (false) {\n            case !(adjusted_secs < 1e-3):\n                return \"microseconds\";\n            case !(adjusted_secs < 1.0):\n                return \"milliseconds\";\n            case !(adjusted_secs < 60):\n                if (span_secs >= 60) {\n                    return \"minsec\";\n                }\n                else {\n                    return \"seconds\";\n                }\n            case !(adjusted_secs < 3600):\n                if (span_secs >= 3600) {\n                    return \"hourmin\";\n                }\n                else {\n                    return \"minutes\";\n                }\n            case !(adjusted_secs < 24 * 3600):\n                return \"hours\";\n            case !(adjusted_secs < 31 * 24 * 3600):\n                return \"days\";\n            case !(adjusted_secs < 365 * 24 * 3600):\n                return \"months\";\n            default:\n                return \"years\";\n        }\n    };\n    DatetimeTickFormatter.prototype.doFormat = function (ticks, axis, num_labels, char_width, fill_ratio, ticker) {\n        var error, fmt, format, formats, good_formats, hybrid_handled, i, j, k, l, labels, len, len1, next_format, next_ndx, r, ref, ref1, ref2, resol, resol_ndx, s, span, ss, t, time_tuple_ndx_for_resol, tm, widths;\n        if (num_labels == null) {\n            num_labels = null;\n        }\n        if (char_width == null) {\n            char_width = null;\n        }\n        if (fill_ratio == null) {\n            fill_ratio = 0.3;\n        }\n        if (ticker == null) {\n            ticker = null;\n        }\n        if (ticks.length === 0) {\n            return [];\n        }\n        span = Math.abs(ticks[ticks.length - 1] - ticks[0]) / 1000.0;\n        if (ticker) {\n            r = ticker.resolution;\n        }\n        else {\n            r = span / (ticks.length - 1);\n        }\n        resol = this._get_resolution_str(r, span);\n        ref = this._width_formats[resol], widths = ref[0], formats = ref[1];\n        format = formats[0];\n        if (char_width) {\n            good_formats = [];\n            for (i = j = 0, ref1 = widths.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n                if (widths[i] * ticks.length < fill_ratio * char_width) {\n                    good_formats.push(this._width_formats[i]);\n                }\n            }\n            if (good_formats.length > 0) {\n                format = good_formats[good_formats.length - 1];\n            }\n        }\n        labels = [];\n        resol_ndx = this.format_order.indexOf(resol);\n        time_tuple_ndx_for_resol = {};\n        ref2 = this.format_order;\n        for (k = 0, len = ref2.length; k < len; k++) {\n            fmt = ref2[k];\n            time_tuple_ndx_for_resol[fmt] = 0;\n        }\n        time_tuple_ndx_for_resol[\"seconds\"] = 5;\n        time_tuple_ndx_for_resol[\"minsec\"] = 4;\n        time_tuple_ndx_for_resol[\"minutes\"] = 4;\n        time_tuple_ndx_for_resol[\"hourmin\"] = 3;\n        time_tuple_ndx_for_resol[\"hours\"] = 3;\n        for (l = 0, len1 = ticks.length; l < len1; l++) {\n            t = ticks[l];\n            try {\n                tm = _array(t);\n                s = _strftime(t, format);\n            }\n            catch (error1) {\n                error = error1;\n                logging_1.logger.warn(\"unable to format tick for timestamp value \" + t);\n                logging_1.logger.warn(\" - \" + error);\n                labels.push(\"ERR\");\n                continue;\n            }\n            hybrid_handled = false;\n            next_ndx = resol_ndx;\n            while (tm[time_tuple_ndx_for_resol[this.format_order[next_ndx]]] === 0) {\n                next_ndx += 1;\n                if (next_ndx === this.format_order.length) {\n                    break;\n                }\n                if ((resol === \"minsec\" || resol === \"hourmin\") && !hybrid_handled) {\n                    if ((resol === \"minsec\" && tm[4] === 0 && tm[5] !== 0) || (resol === \"hourmin\" && tm[3] === 0 && tm[4] !== 0)) {\n                        next_format = this._width_formats[this.format_order[resol_ndx - 1]][1][0];\n                        s = _strftime(t, next_format);\n                        break;\n                    }\n                    else {\n                        hybrid_handled = true;\n                    }\n                }\n                next_format = this._width_formats[this.format_order[next_ndx]][1][0];\n                s = _strftime(t, next_format);\n            }\n            if (this.strip_leading_zeros) {\n                ss = s.replace(/^0+/g, \"\");\n                if (ss !== s && isNaN(parseInt(ss))) {\n                    ss = '0' + ss;\n                }\n                labels.push(ss);\n            }\n            else {\n                labels.push(s);\n            }\n        }\n        return labels;\n    };\n    return DatetimeTickFormatter;\n})(tick_formatter_1.TickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, slice = [].slice;\nvar tick_formatter_1 = require(\"./tick_formatter\");\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nexports.FuncTickFormatter = (function (superClass) {\n    extend(FuncTickFormatter, superClass);\n    function FuncTickFormatter() {\n        return FuncTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    FuncTickFormatter.prototype.type = 'FuncTickFormatter';\n    FuncTickFormatter.define({\n        args: [p.Any, {}],\n        code: [p.String, '']\n    });\n    FuncTickFormatter.prototype._make_func = function () {\n        return (function (func, args, ctor) {\n            ctor.prototype = func.prototype;\n            var child = new ctor, result = func.apply(child, args);\n            return Object(result) === result ? result : child;\n        })(Function, [\"tick\"].concat(slice.call(Object.keys(this.args)), [\"require\"], [this.code]), function () { });\n    };\n    FuncTickFormatter.prototype.doFormat = function (ticks, axis) {\n        var func, tick;\n        func = this._make_func();\n        return (function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = ticks.length; i < len; i++) {\n                tick = ticks[i];\n                results.push(func.apply(null, [tick].concat(slice.call(object_1.values(this.args)), [require])));\n            }\n            return results;\n        }).call(this);\n    };\n    return FuncTickFormatter;\n})(tick_formatter_1.TickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar basic_tick_formatter_1 = require(\"./basic_tick_formatter\");\nexports.BasicTickFormatter = basic_tick_formatter_1.BasicTickFormatter;\nvar categorical_tick_formatter_1 = require(\"./categorical_tick_formatter\");\nexports.CategoricalTickFormatter = categorical_tick_formatter_1.CategoricalTickFormatter;\nvar datetime_tick_formatter_1 = require(\"./datetime_tick_formatter\");\nexports.DatetimeTickFormatter = datetime_tick_formatter_1.DatetimeTickFormatter;\nvar func_tick_formatter_1 = require(\"./func_tick_formatter\");\nexports.FuncTickFormatter = func_tick_formatter_1.FuncTickFormatter;\nvar log_tick_formatter_1 = require(\"./log_tick_formatter\");\nexports.LogTickFormatter = log_tick_formatter_1.LogTickFormatter;\nvar mercator_tick_formatter_1 = require(\"./mercator_tick_formatter\");\nexports.MercatorTickFormatter = mercator_tick_formatter_1.MercatorTickFormatter;\nvar numeral_tick_formatter_1 = require(\"./numeral_tick_formatter\");\nexports.NumeralTickFormatter = numeral_tick_formatter_1.NumeralTickFormatter;\nvar printf_tick_formatter_1 = require(\"./printf_tick_formatter\");\nexports.PrintfTickFormatter = printf_tick_formatter_1.PrintfTickFormatter;\nvar tick_formatter_1 = require(\"./tick_formatter\");\nexports.TickFormatter = tick_formatter_1.TickFormatter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar basic_tick_formatter_1 = require(\"./basic_tick_formatter\");\nvar tick_formatter_1 = require(\"./tick_formatter\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nexports.LogTickFormatter = (function (superClass) {\n    extend(LogTickFormatter, superClass);\n    function LogTickFormatter() {\n        return LogTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    LogTickFormatter.prototype.type = 'LogTickFormatter';\n    LogTickFormatter.define({\n        ticker: [p.Instance, null]\n    });\n    LogTickFormatter.prototype.initialize = function (attrs, options) {\n        LogTickFormatter.__super__.initialize.call(this, attrs, options);\n        this.basic_formatter = new basic_tick_formatter_1.BasicTickFormatter();\n        if (this.ticker == null) {\n            return logging_1.logger.warn(\"LogTickFormatter not configured with a ticker, using default base of 10 (labels will be incorrect if ticker base is not 10)\");\n        }\n    };\n    LogTickFormatter.prototype.doFormat = function (ticks, axis) {\n        var base, i, j, labels, ref, small_interval;\n        if (ticks.length === 0) {\n            return [];\n        }\n        if (this.ticker != null) {\n            base = this.ticker.base;\n        }\n        else {\n            base = 10;\n        }\n        small_interval = false;\n        labels = new Array(ticks.length);\n        for (i = j = 0, ref = ticks.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            labels[i] = base + \"^\" + (Math.round(Math.log(ticks[i]) / Math.log(base)));\n            if ((i > 0) && (labels[i] === labels[i - 1])) {\n                small_interval = true;\n                break;\n            }\n        }\n        if (small_interval) {\n            labels = this.basic_formatter.doFormat(ticks);\n        }\n        return labels;\n    };\n    return LogTickFormatter;\n})(tick_formatter_1.TickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar basic_tick_formatter_1 = require(\"./basic_tick_formatter\");\nvar p = require(\"core/properties\");\nvar proj4_1 = require(\"core/util/proj4\");\nexports.MercatorTickFormatter = (function (superClass) {\n    extend(MercatorTickFormatter, superClass);\n    function MercatorTickFormatter() {\n        return MercatorTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    MercatorTickFormatter.prototype.type = 'MercatorTickFormatter';\n    MercatorTickFormatter.define({\n        dimension: [p.LatLon]\n    });\n    MercatorTickFormatter.prototype.doFormat = function (ticks, axis) {\n        var i, j, k, lat, lon, proj_ticks, ref, ref1, ref2, ref3;\n        if (this.dimension == null) {\n            throw new Error(\"MercatorTickFormatter.dimension not configured\");\n        }\n        if (ticks.length === 0) {\n            return [];\n        }\n        proj_ticks = new Array(ticks.length);\n        if (this.dimension === \"lon\") {\n            for (i = j = 0, ref = ticks.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                ref1 = proj4_1.proj4(proj4_1.mercator).inverse([ticks[i], axis.loc]), lon = ref1[0], lat = ref1[1];\n                proj_ticks[i] = lon;\n            }\n        }\n        else {\n            for (i = k = 0, ref2 = ticks.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {\n                ref3 = proj4_1.proj4(proj4_1.mercator).inverse([axis.loc, ticks[i]]), lon = ref3[0], lat = ref3[1];\n                proj_ticks[i] = lat;\n            }\n        }\n        return MercatorTickFormatter.__super__.doFormat.call(this, proj_ticks, axis);\n    };\n    return MercatorTickFormatter;\n})(basic_tick_formatter_1.BasicTickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar Numbro = require(\"numbro\");\nvar tick_formatter_1 = require(\"./tick_formatter\");\nvar p = require(\"core/properties\");\nexports.NumeralTickFormatter = (function (superClass) {\n    extend(NumeralTickFormatter, superClass);\n    function NumeralTickFormatter() {\n        return NumeralTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    NumeralTickFormatter.prototype.type = 'NumeralTickFormatter';\n    NumeralTickFormatter.define({\n        format: [p.String, '0,0'],\n        language: [p.String, 'en'],\n        rounding: [p.String, 'round']\n    });\n    NumeralTickFormatter.prototype.doFormat = function (ticks, axis) {\n        var format, labels, language, rounding, tick;\n        format = this.format;\n        language = this.language;\n        rounding = (function () {\n            switch (this.rounding) {\n                case \"round\":\n                case \"nearest\":\n                    return Math.round;\n                case \"floor\":\n                case \"rounddown\":\n                    return Math.floor;\n                case \"ceil\":\n                case \"roundup\":\n                    return Math.ceil;\n            }\n        }).call(this);\n        labels = (function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = ticks.length; i < len; i++) {\n                tick = ticks[i];\n                results.push(Numbro.format(tick, format, language, rounding));\n            }\n            return results;\n        })();\n        return labels;\n    };\n    return NumeralTickFormatter;\n})(tick_formatter_1.TickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar SPrintf = require(\"sprintf\");\nvar tick_formatter_1 = require(\"./tick_formatter\");\nvar p = require(\"core/properties\");\nexports.PrintfTickFormatter = (function (superClass) {\n    extend(PrintfTickFormatter, superClass);\n    function PrintfTickFormatter() {\n        return PrintfTickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    PrintfTickFormatter.prototype.type = 'PrintfTickFormatter';\n    PrintfTickFormatter.define({\n        format: [p.String, '%s']\n    });\n    PrintfTickFormatter.prototype.doFormat = function (ticks, axis) {\n        var format, labels, tick;\n        format = this.format;\n        labels = (function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = ticks.length; i < len; i++) {\n                tick = ticks[i];\n                results.push(SPrintf.sprintf(format, tick));\n            }\n            return results;\n        })();\n        return labels;\n    };\n    return PrintfTickFormatter;\n})(tick_formatter_1.TickFormatter);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nexports.TickFormatter = (function (superClass) {\n    extend(TickFormatter, superClass);\n    function TickFormatter() {\n        return TickFormatter.__super__.constructor.apply(this, arguments);\n    }\n    TickFormatter.prototype.type = 'TickFormatter';\n    TickFormatter.prototype.doFormat = function (ticks, axis) { };\n    return TickFormatter;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nvar math_1 = require(\"core/util/math\");\nexports.AnnularWedgeView = (function (superClass) {\n    extend(AnnularWedgeView, superClass);\n    function AnnularWedgeView() {\n        return AnnularWedgeView.__super__.constructor.apply(this, arguments);\n    }\n    AnnularWedgeView.prototype._map_data = function () {\n        var i, j, ref, results;\n        if (this.model.properties.inner_radius.units === \"data\") {\n            this.sinner_radius = this.sdist(this.renderer.xscale, this._x, this._inner_radius);\n        }\n        else {\n            this.sinner_radius = this._inner_radius;\n        }\n        if (this.model.properties.outer_radius.units === \"data\") {\n            this.souter_radius = this.sdist(this.renderer.xscale, this._x, this._outer_radius);\n        }\n        else {\n            this.souter_radius = this._outer_radius;\n        }\n        this._angle = new Float32Array(this._start_angle.length);\n        results = [];\n        for (i = j = 0, ref = this._start_angle.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            results.push(this._angle[i] = this._end_angle[i] - this._start_angle[i]);\n        }\n        return results;\n    };\n    AnnularWedgeView.prototype._render = function (ctx, indices, arg) {\n        var _angle, _start_angle, direction, i, j, len, results, sinner_radius, souter_radius, sx, sy;\n        sx = arg.sx, sy = arg.sy, _start_angle = arg._start_angle, _angle = arg._angle, sinner_radius = arg.sinner_radius, souter_radius = arg.souter_radius;\n        direction = this.model.properties.direction.value();\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + sinner_radius[i] + souter_radius[i] + _start_angle[i] + _angle[i])) {\n                continue;\n            }\n            ctx.translate(sx[i], sy[i]);\n            ctx.rotate(_start_angle[i]);\n            ctx.moveTo(souter_radius[i], 0);\n            ctx.beginPath();\n            ctx.arc(0, 0, souter_radius[i], 0, _angle[i], direction);\n            ctx.rotate(_angle[i]);\n            ctx.lineTo(sinner_radius[i], 0);\n            ctx.arc(0, 0, sinner_radius[i], 0, -_angle[i], !direction);\n            ctx.closePath();\n            ctx.rotate(-_angle[i] - _start_angle[i]);\n            ctx.translate(-sx[i], -sy[i]);\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    AnnularWedgeView.prototype._hit_point = function (geometry) {\n        var angle, bbox, candidates, direction, dist, hits, i, ir2, j, k, len, len1, or2, ref, ref1, ref2, ref3, ref4, sx, sx0, sx1, sy, sy0, sy1, vx, vx0, vx1, vy, vy0, vy1, x, x0, x1, y, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        if (this.model.properties.outer_radius.units === \"data\") {\n            x0 = x - this.max_outer_radius;\n            x1 = x + this.max_outer_radius;\n            y0 = y - this.max_outer_radius;\n            y1 = y + this.max_outer_radius;\n        }\n        else {\n            vx0 = vx - this.max_outer_radius;\n            vx1 = vx + this.max_outer_radius;\n            ref1 = this.renderer.xscale.v_invert([vx0, vx1], true), x0 = ref1[0], x1 = ref1[1];\n            vy0 = vy - this.max_outer_radius;\n            vy1 = vy + this.max_outer_radius;\n            ref2 = this.renderer.yscale.v_invert([vy0, vy1], true), y0 = ref2[0], y1 = ref2[1];\n        }\n        candidates = [];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        ref3 = this.index.indices(bbox);\n        for (j = 0, len = ref3.length; j < len; j++) {\n            i = ref3[j];\n            or2 = Math.pow(this.souter_radius[i], 2);\n            ir2 = Math.pow(this.sinner_radius[i], 2);\n            sx0 = this.renderer.xscale.compute(x, true);\n            sx1 = this.renderer.xscale.compute(this._x[i], true);\n            sy0 = this.renderer.yscale.compute(y, true);\n            sy1 = this.renderer.yscale.compute(this._y[i], true);\n            dist = Math.pow(sx0 - sx1, 2) + Math.pow(sy0 - sy1, 2);\n            if (dist <= or2 && dist >= ir2) {\n                candidates.push([i, dist]);\n            }\n        }\n        direction = this.model.properties.direction.value();\n        hits = [];\n        for (k = 0, len1 = candidates.length; k < len1; k++) {\n            ref4 = candidates[k], i = ref4[0], dist = ref4[1];\n            sx = this.renderer.plot_view.canvas.vx_to_sx(vx);\n            sy = this.renderer.plot_view.canvas.vy_to_sy(vy);\n            angle = Math.atan2(sy - this.sy[i], sx - this.sx[i]);\n            if (math_1.angle_between(-angle, -this._start_angle[i], -this._end_angle[i], direction)) {\n                hits.push([i, dist]);\n            }\n        }\n        return hittest.create_1d_hit_test_result(hits);\n    };\n    AnnularWedgeView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    AnnularWedgeView.prototype._scxy = function (i) {\n        var a, r;\n        r = (this.sinner_radius[i] + this.souter_radius[i]) / 2;\n        a = (this._start_angle[i] + this._end_angle[i]) / 2;\n        return {\n            x: this.sx[i] + r * Math.cos(a),\n            y: this.sy[i] + r * Math.sin(a)\n        };\n    };\n    AnnularWedgeView.prototype.scx = function (i) {\n        return this._scxy(i).x;\n    };\n    AnnularWedgeView.prototype.scy = function (i) {\n        return this._scxy(i).y;\n    };\n    return AnnularWedgeView;\n})(xy_glyph_1.XYGlyphView);\nexports.AnnularWedge = (function (superClass) {\n    extend(AnnularWedge, superClass);\n    function AnnularWedge() {\n        return AnnularWedge.__super__.constructor.apply(this, arguments);\n    }\n    AnnularWedge.prototype.default_view = exports.AnnularWedgeView;\n    AnnularWedge.prototype.type = 'AnnularWedge';\n    AnnularWedge.mixins(['line', 'fill']);\n    AnnularWedge.define({\n        direction: [p.Direction, 'anticlock'],\n        inner_radius: [p.DistanceSpec],\n        outer_radius: [p.DistanceSpec],\n        start_angle: [p.AngleSpec],\n        end_angle: [p.AngleSpec]\n    });\n    return AnnularWedge;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nexports.AnnulusView = (function (superClass) {\n    extend(AnnulusView, superClass);\n    function AnnulusView() {\n        return AnnulusView.__super__.constructor.apply(this, arguments);\n    }\n    AnnulusView.prototype._map_data = function () {\n        if (this.model.properties.inner_radius.units === \"data\") {\n            this.sinner_radius = this.sdist(this.renderer.xscale, this._x, this._inner_radius);\n        }\n        else {\n            this.sinner_radius = this._inner_radius;\n        }\n        if (this.model.properties.outer_radius.units === \"data\") {\n            return this.souter_radius = this.sdist(this.renderer.xscale, this._x, this._outer_radius);\n        }\n        else {\n            return this.souter_radius = this._outer_radius;\n        }\n    };\n    AnnulusView.prototype._render = function (ctx, indices, arg) {\n        var clockwise, i, isie, j, k, len, len1, ref, results, sinner_radius, souter_radius, sx, sy;\n        sx = arg.sx, sy = arg.sy, sinner_radius = arg.sinner_radius, souter_radius = arg.souter_radius;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + sinner_radius[i] + souter_radius[i])) {\n                continue;\n            }\n            isie = navigator.userAgent.indexOf('MSIE') >= 0 || navigator.userAgent.indexOf('Trident') > 0 || navigator.userAgent.indexOf('Edge') > 0;\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.beginPath();\n                if (isie) {\n                    ref = [false, true];\n                    for (k = 0, len1 = ref.length; k < len1; k++) {\n                        clockwise = ref[k];\n                        ctx.arc(sx[i], sy[i], sinner_radius[i], 0, Math.PI, clockwise);\n                        ctx.arc(sx[i], sy[i], souter_radius[i], Math.PI, 0, !clockwise);\n                    }\n                }\n                else {\n                    ctx.arc(sx[i], sy[i], sinner_radius[i], 0, 2 * Math.PI, true);\n                    ctx.arc(sx[i], sy[i], souter_radius[i], 2 * Math.PI, 0, false);\n                }\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.beginPath();\n                ctx.arc(sx[i], sy[i], sinner_radius[i], 0, 2 * Math.PI);\n                ctx.moveTo(sx[i] + souter_radius[i], sy[i]);\n                ctx.arc(sx[i], sy[i], souter_radius[i], 0, 2 * Math.PI);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    AnnulusView.prototype._hit_point = function (geometry) {\n        var bbox, dist, hits, i, ir2, j, len, or2, ref, ref1, sx0, sx1, sy0, sy1, vx, vy, x, x0, x1, y, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        x0 = x - this.max_radius;\n        x1 = x + this.max_radius;\n        y = this.renderer.yscale.invert(vy, true);\n        y0 = y - this.max_radius;\n        y1 = y + this.max_radius;\n        hits = [];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        ref1 = this.index.indices(bbox);\n        for (j = 0, len = ref1.length; j < len; j++) {\n            i = ref1[j];\n            or2 = Math.pow(this.souter_radius[i], 2);\n            ir2 = Math.pow(this.sinner_radius[i], 2);\n            sx0 = this.renderer.xscale.compute(x);\n            sx1 = this.renderer.xscale.compute(this._x[i]);\n            sy0 = this.renderer.yscale.compute(y);\n            sy1 = this.renderer.yscale.compute(this._y[i]);\n            dist = Math.pow(sx0 - sx1, 2) + Math.pow(sy0 - sy1, 2);\n            if (dist <= or2 && dist >= ir2) {\n                hits.push([i, dist]);\n            }\n        }\n        return hittest.create_1d_hit_test_result(hits);\n    };\n    AnnulusView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        var data, indices, r, sinner_radius, souter_radius, sx, sy;\n        indices = [index];\n        sx = {};\n        sx[index] = (x0 + x1) / 2;\n        sy = {};\n        sy[index] = (y0 + y1) / 2;\n        r = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.5;\n        sinner_radius = {};\n        sinner_radius[index] = r * 0.4;\n        souter_radius = {};\n        souter_radius[index] = r * 0.8;\n        data = {\n            sx: sx,\n            sy: sy,\n            sinner_radius: sinner_radius,\n            souter_radius: souter_radius\n        };\n        return this._render(ctx, indices, data);\n    };\n    return AnnulusView;\n})(xy_glyph_1.XYGlyphView);\nexports.Annulus = (function (superClass) {\n    extend(Annulus, superClass);\n    function Annulus() {\n        return Annulus.__super__.constructor.apply(this, arguments);\n    }\n    Annulus.prototype.default_view = exports.AnnulusView;\n    Annulus.prototype.type = 'Annulus';\n    Annulus.mixins(['line', 'fill']);\n    Annulus.define({\n        inner_radius: [p.DistanceSpec],\n        outer_radius: [p.DistanceSpec]\n    });\n    return Annulus;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar p = require(\"core/properties\");\nexports.ArcView = (function (superClass) {\n    extend(ArcView, superClass);\n    function ArcView() {\n        return ArcView.__super__.constructor.apply(this, arguments);\n    }\n    ArcView.prototype._map_data = function () {\n        if (this.model.properties.radius.units === \"data\") {\n            return this.sradius = this.sdist(this.renderer.xscale, this._x, this._radius);\n        }\n        else {\n            return this.sradius = this._radius;\n        }\n    };\n    ArcView.prototype._render = function (ctx, indices, arg) {\n        var _end_angle, _start_angle, direction, i, j, len, results, sradius, sx, sy;\n        sx = arg.sx, sy = arg.sy, sradius = arg.sradius, _start_angle = arg._start_angle, _end_angle = arg._end_angle;\n        if (this.visuals.line.doit) {\n            direction = this.model.properties.direction.value();\n            results = [];\n            for (j = 0, len = indices.length; j < len; j++) {\n                i = indices[j];\n                if (isNaN(sx[i] + sy[i] + sradius[i] + _start_angle[i] + _end_angle[i])) {\n                    continue;\n                }\n                ctx.beginPath();\n                ctx.arc(sx[i], sy[i], sradius[i], _start_angle[i], _end_angle[i], direction);\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            return results;\n        }\n    };\n    ArcView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_line_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return ArcView;\n})(xy_glyph_1.XYGlyphView);\nexports.Arc = (function (superClass) {\n    extend(Arc, superClass);\n    function Arc() {\n        return Arc.__super__.constructor.apply(this, arguments);\n    }\n    Arc.prototype.default_view = exports.ArcView;\n    Arc.prototype.type = 'Arc';\n    Arc.mixins(['line']);\n    Arc.define({\n        direction: [p.Direction, 'anticlock'],\n        radius: [p.DistanceSpec],\n        start_angle: [p.AngleSpec],\n        end_angle: [p.AngleSpec]\n    });\n    return Arc;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _cbb, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\n_cbb = function (x0, y0, x1, y1, x2, y2, x3, y3) {\n    var a, b, b2ac, bounds, c, i, j, jlen, k, mt, sqrtb2ac, t, t1, t2, tvalues, x, y;\n    tvalues = [];\n    bounds = [[], []];\n    for (i = k = 0; k <= 2; i = ++k) {\n        if (i === 0) {\n            b = 6 * x0 - 12 * x1 + 6 * x2;\n            a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n            c = 3 * x1 - 3 * x0;\n        }\n        else {\n            b = 6 * y0 - 12 * y1 + 6 * y2;\n            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n            c = 3 * y1 - 3 * y0;\n        }\n        if (Math.abs(a) < 1e-12) {\n            if (Math.abs(b) < 1e-12) {\n                continue;\n            }\n            t = -c / b;\n            if (0 < t && t < 1) {\n                tvalues.push(t);\n            }\n            continue;\n        }\n        b2ac = b * b - 4 * c * a;\n        sqrtb2ac = Math.sqrt(b2ac);\n        if (b2ac < 0) {\n            continue;\n        }\n        t1 = (-b + sqrtb2ac) / (2 * a);\n        if (0 < t1 && t1 < 1) {\n            tvalues.push(t1);\n        }\n        t2 = (-b - sqrtb2ac) / (2 * a);\n        if (0 < t2 && t2 < 1) {\n            tvalues.push(t2);\n        }\n    }\n    j = tvalues.length;\n    jlen = j;\n    while (j--) {\n        t = tvalues[j];\n        mt = 1 - t;\n        x = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n        bounds[0][j] = x;\n        y = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n        bounds[1][j] = y;\n    }\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    return [Math.min.apply(null, bounds[0]), Math.max.apply(null, bounds[1]), Math.max.apply(null, bounds[0]), Math.min.apply(null, bounds[1])];\n};\nexports.BezierView = (function (superClass) {\n    extend(BezierView, superClass);\n    function BezierView() {\n        return BezierView.__super__.constructor.apply(this, arguments);\n    }\n    BezierView.prototype._index_data = function () {\n        var i, k, points, ref, ref1, x0, x1, y0, y1;\n        points = [];\n        for (i = k = 0, ref = this._x0.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            if (isNaN(this._x0[i] + this._x1[i] + this._y0[i] + this._y1[i] + this._cx0[i] + this._cy0[i] + this._cx1[i] + this._cy1[i])) {\n                continue;\n            }\n            ref1 = _cbb(this._x0[i], this._y0[i], this._x1[i], this._y1[i], this._cx0[i], this._cy0[i], this._cx1[i], this._cy1[i]), x0 = ref1[0], y0 = ref1[1], x1 = ref1[2], y1 = ref1[3];\n            points.push({\n                minX: x0,\n                minY: y0,\n                maxX: x1,\n                maxY: y1,\n                i: i\n            });\n        }\n        return new spatial_1.RBush(points);\n    };\n    BezierView.prototype._render = function (ctx, indices, arg) {\n        var i, k, len, results, scx, scx0, scx1, scy0, scy1, sx0, sx1, sy0, sy1;\n        sx0 = arg.sx0, sy0 = arg.sy0, sx1 = arg.sx1, sy1 = arg.sy1, scx = arg.scx, scx0 = arg.scx0, scy0 = arg.scy0, scx1 = arg.scx1, scy1 = arg.scy1;\n        if (this.visuals.line.doit) {\n            results = [];\n            for (k = 0, len = indices.length; k < len; k++) {\n                i = indices[k];\n                if (isNaN(sx0[i] + sy0[i] + sx1[i] + sy1[i] + scx0[i] + scy0[i] + scx1[i] + scy1[i])) {\n                    continue;\n                }\n                ctx.beginPath();\n                ctx.moveTo(sx0[i], sy0[i]);\n                ctx.bezierCurveTo(scx0[i], scy0[i], scx1[i], scy1[i], sx1[i], sy1[i]);\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            return results;\n        }\n    };\n    BezierView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_line_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return BezierView;\n})(glyph_1.GlyphView);\nexports.Bezier = (function (superClass) {\n    extend(Bezier, superClass);\n    function Bezier() {\n        return Bezier.__super__.constructor.apply(this, arguments);\n    }\n    Bezier.prototype.default_view = exports.BezierView;\n    Bezier.prototype.type = 'Bezier';\n    Bezier.coords([['x0', 'y0'], ['x1', 'y1'], ['cx0', 'cy0'], ['cx1', 'cy1']]);\n    Bezier.mixins(['line']);\n    return Bezier;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nexports.CircleView = (function (superClass) {\n    extend(CircleView, superClass);\n    function CircleView() {\n        return CircleView.__super__.constructor.apply(this, arguments);\n    }\n    CircleView.prototype._map_data = function () {\n        var rd, s;\n        if (this._radius != null) {\n            if (this.model.properties.radius.spec.units === \"data\") {\n                rd = this.model.properties.radius_dimension.spec.value;\n                return this.sradius = this.sdist(this.renderer[rd + \"scale\"], this[\"_\" + rd], this._radius);\n            }\n            else {\n                this.sradius = this._radius;\n                return this.max_size = 2 * this.max_radius;\n            }\n        }\n        else {\n            return this.sradius = (function () {\n                var j, len, ref, results;\n                ref = this._size;\n                results = [];\n                for (j = 0, len = ref.length; j < len; j++) {\n                    s = ref[j];\n                    results.push(s / 2);\n                }\n                return results;\n            }).call(this);\n        }\n    };\n    CircleView.prototype._mask_data = function (all_indices) {\n        var bbox, hr, ref, ref1, ref2, ref3, sx0, sx1, sy0, sy1, vr, x0, x1, y0, y1;\n        hr = this.renderer.plot_view.frame.h_range;\n        vr = this.renderer.plot_view.frame.v_range;\n        if ((this._radius != null) && this.model.properties.radius.units === \"data\") {\n            sx0 = hr.start;\n            sx1 = hr.end;\n            ref = this.renderer.xscale.v_invert([sx0, sx1], true), x0 = ref[0], x1 = ref[1];\n            x0 -= this.max_radius;\n            x1 += this.max_radius;\n            sy0 = vr.start;\n            sy1 = vr.end;\n            ref1 = this.renderer.yscale.v_invert([sy0, sy1], true), y0 = ref1[0], y1 = ref1[1];\n            y0 -= this.max_radius;\n            y1 += this.max_radius;\n        }\n        else {\n            sx0 = hr.start - this.max_size;\n            sx1 = hr.end + this.max_size;\n            ref2 = this.renderer.xscale.v_invert([sx0, sx1], true), x0 = ref2[0], x1 = ref2[1];\n            sy0 = vr.start - this.max_size;\n            sy1 = vr.end + this.max_size;\n            ref3 = this.renderer.yscale.v_invert([sy0, sy1], true), y0 = ref3[0], y1 = ref3[1];\n        }\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        return this.index.indices(bbox);\n    };\n    CircleView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, sradius, sx, sy;\n        sx = arg.sx, sy = arg.sy, sradius = arg.sradius;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + sradius[i])) {\n                continue;\n            }\n            ctx.beginPath();\n            ctx.arc(sx[i], sy[i], sradius[i], 0, 2 * Math.PI, false);\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    CircleView.prototype._hit_point = function (geometry) {\n        var bbox, candidates, dist, hits, i, j, k, len, len1, r2, ref, ref1, ref2, ref3, ref4, sx, sx0, sx1, sy, sy0, sy1, vx, vx0, vx1, vy, vy0, vy1, x, x0, x1, y, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        if ((this._radius != null) && this.model.properties.radius.units === \"data\") {\n            x0 = x - this.max_radius;\n            x1 = x + this.max_radius;\n            y0 = y - this.max_radius;\n            y1 = y + this.max_radius;\n        }\n        else {\n            vx0 = vx - this.max_size;\n            vx1 = vx + this.max_size;\n            ref1 = this.renderer.xscale.v_invert([vx0, vx1], true), x0 = ref1[0], x1 = ref1[1];\n            ref2 = [Math.min(x0, x1), Math.max(x0, x1)], x0 = ref2[0], x1 = ref2[1];\n            vy0 = vy - this.max_size;\n            vy1 = vy + this.max_size;\n            ref3 = this.renderer.yscale.v_invert([vy0, vy1], true), y0 = ref3[0], y1 = ref3[1];\n            ref4 = [Math.min(y0, y1), Math.max(y0, y1)], y0 = ref4[0], y1 = ref4[1];\n        }\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        candidates = this.index.indices(bbox);\n        hits = [];\n        if ((this._radius != null) && this.model.properties.radius.units === \"data\") {\n            for (j = 0, len = candidates.length; j < len; j++) {\n                i = candidates[j];\n                r2 = Math.pow(this.sradius[i], 2);\n                sx0 = this.renderer.xscale.compute(x, true);\n                sx1 = this.renderer.xscale.compute(this._x[i], true);\n                sy0 = this.renderer.yscale.compute(y, true);\n                sy1 = this.renderer.yscale.compute(this._y[i], true);\n                dist = Math.pow(sx0 - sx1, 2) + Math.pow(sy0 - sy1, 2);\n                if (dist <= r2) {\n                    hits.push([i, dist]);\n                }\n            }\n        }\n        else {\n            sx = this.renderer.plot_view.canvas.vx_to_sx(vx);\n            sy = this.renderer.plot_view.canvas.vy_to_sy(vy);\n            for (k = 0, len1 = candidates.length; k < len1; k++) {\n                i = candidates[k];\n                r2 = Math.pow(this.sradius[i], 2);\n                dist = Math.pow(this.sx[i] - sx, 2) + Math.pow(this.sy[i] - sy, 2);\n                if (dist <= r2) {\n                    hits.push([i, dist]);\n                }\n            }\n        }\n        return hittest.create_1d_hit_test_result(hits);\n    };\n    CircleView.prototype._hit_span = function (geometry) {\n        var bbox, hits, maxX, maxY, minX, minY, ms, ref, ref1, ref2, ref3, ref4, ref5, result, vx, vx0, vx1, vy, vy0, vy1, x0, x1, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        ref1 = this.bounds(), minX = ref1.minX, minY = ref1.minY, maxX = ref1.maxX, maxY = ref1.maxY;\n        result = hittest.create_hit_test_result();\n        if (geometry.direction === 'h') {\n            y0 = minY;\n            y1 = maxY;\n            if ((this._radius != null) && this.model.properties.radius.units === \"data\") {\n                vx0 = vx - this.max_radius;\n                vx1 = vx + this.max_radius;\n                ref2 = this.renderer.xscale.v_invert([vx0, vx1]), x0 = ref2[0], x1 = ref2[1];\n            }\n            else {\n                ms = this.max_size / 2;\n                vx0 = vx - ms;\n                vx1 = vx + ms;\n                ref3 = this.renderer.xscale.v_invert([vx0, vx1], true), x0 = ref3[0], x1 = ref3[1];\n            }\n        }\n        else {\n            x0 = minX;\n            x1 = maxX;\n            if ((this._radius != null) && this.model.properties.radius.units === \"data\") {\n                vy0 = vy - this.max_radius;\n                vy1 = vy + this.max_radius;\n                ref4 = this.renderer.yscale.v_invert([vy0, vy1]), y0 = ref4[0], y1 = ref4[1];\n            }\n            else {\n                ms = this.max_size / 2;\n                vy0 = vy - ms;\n                vy1 = vy + ms;\n                ref5 = this.renderer.yscale.v_invert([vy0, vy1], true), y0 = ref5[0], y1 = ref5[1];\n            }\n        }\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        hits = this.index.indices(bbox);\n        result['1d'].indices = hits;\n        return result;\n    };\n    CircleView.prototype._hit_rect = function (geometry) {\n        var bbox, ref, ref1, result, x0, x1, y0, y1;\n        ref = this.renderer.xscale.v_invert([geometry.vx0, geometry.vx1], true), x0 = ref[0], x1 = ref[1];\n        ref1 = this.renderer.yscale.v_invert([geometry.vy0, geometry.vy1], true), y0 = ref1[0], y1 = ref1[1];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = this.index.indices(bbox);\n        return result;\n    };\n    CircleView.prototype._hit_poly = function (geometry) {\n        var candidates, hits, i, idx, j, k, ref, ref1, ref2, result, results, sx, sy, vx, vy;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        sx = this.renderer.plot_view.canvas.v_vx_to_sx(vx);\n        sy = this.renderer.plot_view.canvas.v_vy_to_sy(vy);\n        candidates = (function () {\n            results = [];\n            for (var j = 0, ref1 = this.sx.length; 0 <= ref1 ? j < ref1 : j > ref1; 0 <= ref1 ? j++ : j--) {\n                results.push(j);\n            }\n            return results;\n        }).apply(this);\n        hits = [];\n        for (i = k = 0, ref2 = candidates.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {\n            idx = candidates[i];\n            if (hittest.point_in_poly(this.sx[i], this.sy[i], sx, sy)) {\n                hits.push(idx);\n            }\n        }\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    CircleView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        var data, indices, sradius, sx, sy;\n        indices = [index];\n        sx = {};\n        sx[index] = (x0 + x1) / 2;\n        sy = {};\n        sy[index] = (y0 + y1) / 2;\n        sradius = {};\n        sradius[index] = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.2;\n        data = {\n            sx: sx,\n            sy: sy,\n            sradius: sradius\n        };\n        return this._render(ctx, indices, data);\n    };\n    return CircleView;\n})(xy_glyph_1.XYGlyphView);\nexports.Circle = (function (superClass) {\n    extend(Circle, superClass);\n    function Circle() {\n        return Circle.__super__.constructor.apply(this, arguments);\n    }\n    Circle.prototype.default_view = exports.CircleView;\n    Circle.prototype.type = 'Circle';\n    Circle.mixins(['line', 'fill']);\n    Circle.define({\n        angle: [p.AngleSpec, 0],\n        size: [\n            p.DistanceSpec, {\n                units: \"screen\",\n                value: 4\n            }\n        ],\n        radius: [p.DistanceSpec, null],\n        radius_dimension: [p.String, 'x']\n    });\n    Circle.prototype.initialize = function (attrs, options) {\n        Circle.__super__.initialize.call(this, attrs, options);\n        return this.properties.radius.optional = true;\n    };\n    return Circle;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar p = require(\"core/properties\");\nexports.EllipseView = (function (superClass) {\n    extend(EllipseView, superClass);\n    function EllipseView() {\n        return EllipseView.__super__.constructor.apply(this, arguments);\n    }\n    EllipseView.prototype._set_data = function () {\n        this.max_w2 = 0;\n        if (this.model.properties.width.units === \"data\") {\n            this.max_w2 = this.max_width / 2;\n        }\n        this.max_h2 = 0;\n        if (this.model.properties.height.units === \"data\") {\n            return this.max_h2 = this.max_height / 2;\n        }\n    };\n    EllipseView.prototype._map_data = function () {\n        if (this.model.properties.width.units === \"data\") {\n            this.sw = this.sdist(this.renderer.xscale, this._x, this._width, 'center');\n        }\n        else {\n            this.sw = this._width;\n        }\n        if (this.model.properties.height.units === \"data\") {\n            return this.sh = this.sdist(this.renderer.yscale, this._y, this._height, 'center');\n        }\n        else {\n            return this.sh = this._height;\n        }\n    };\n    EllipseView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, sh, sw, sx, sy;\n        sx = arg.sx, sy = arg.sy, sw = arg.sw, sh = arg.sh;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + sw[i] + sh[i] + this._angle[i])) {\n                continue;\n            }\n            ctx.beginPath();\n            ctx.ellipse(sx[i], sy[i], sw[i] / 2.0, sh[i] / 2.0, this._angle[i], 0, 2 * Math.PI);\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    EllipseView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        var d, data, indices, scale, sh, sw, sx, sy;\n        indices = [index];\n        sx = {};\n        sx[index] = (x0 + x1) / 2;\n        sy = {};\n        sy[index] = (y0 + y1) / 2;\n        scale = this.sw[index] / this.sh[index];\n        d = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.8;\n        sw = {};\n        sh = {};\n        if (scale > 1) {\n            sw[index] = d;\n            sh[index] = d / scale;\n        }\n        else {\n            sw[index] = d * scale;\n            sh[index] = d;\n        }\n        data = {\n            sx: sx,\n            sy: sy,\n            sw: sw,\n            sh: sh\n        };\n        return this._render(ctx, indices, data);\n    };\n    EllipseView.prototype._bounds = function (bds) {\n        return this.max_wh2_bounds(bds);\n    };\n    return EllipseView;\n})(xy_glyph_1.XYGlyphView);\nexports.Ellipse = (function (superClass) {\n    extend(Ellipse, superClass);\n    function Ellipse() {\n        return Ellipse.__super__.constructor.apply(this, arguments);\n    }\n    Ellipse.prototype.default_view = exports.EllipseView;\n    Ellipse.prototype.type = 'Ellipse';\n    Ellipse.mixins(['line', 'fill']);\n    Ellipse.define({\n        angle: [p.AngleSpec, 0.0],\n        width: [p.DistanceSpec],\n        height: [p.DistanceSpec]\n    });\n    return Ellipse;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar bbox = require(\"core/util/bbox\");\nvar proj = require(\"core/util/projections\");\nvar view_1 = require(\"core/view\");\nvar model_1 = require(\"../../model\");\nvar visuals_1 = require(\"core/visuals\");\nvar logging_1 = require(\"core/logging\");\nvar object_1 = require(\"core/util/object\");\nvar types_1 = require(\"core/util/types\");\nexports.GlyphView = (function (superClass) {\n    extend1(GlyphView, superClass);\n    function GlyphView() {\n        return GlyphView.__super__.constructor.apply(this, arguments);\n    }\n    GlyphView.prototype.initialize = function (options) {\n        var Cls, ctx, e, glglyphs;\n        GlyphView.__super__.initialize.call(this, options);\n        this._nohit_warned = {};\n        this.renderer = options.renderer;\n        this.visuals = new visuals_1.Visuals(this.model);\n        ctx = this.renderer.plot_view.canvas_view.ctx;\n        if (ctx.glcanvas != null) {\n            try {\n                glglyphs = require(\"models/glyphs/webgl/index\");\n            }\n            catch (error) {\n                e = error;\n                if (e.code === 'MODULE_NOT_FOUND') {\n                    logging_1.logger.warn('WebGL was requested and is supported, but bokeh-gl(.min).js is not available, falling back to 2D rendering.');\n                    glglyphs = null;\n                }\n                else {\n                    throw e;\n                }\n            }\n            if (glglyphs != null) {\n                Cls = glglyphs[this.model.type + 'GLGlyph'];\n                if (Cls != null) {\n                    return this.glglyph = new Cls(ctx.glcanvas.gl, this);\n                }\n            }\n        }\n    };\n    GlyphView.prototype.set_visuals = function (source) {\n        this.visuals.warm_cache(source);\n        if (this.glglyph != null) {\n            return this.glglyph.set_visuals_changed();\n        }\n    };\n    GlyphView.prototype.render = function (ctx, indices, data) {\n        ctx.beginPath();\n        if (this.glglyph != null) {\n            if (this.glglyph.render(ctx, indices, data)) {\n                return;\n            }\n        }\n        return this._render(ctx, indices, data);\n    };\n    GlyphView.prototype.has_finished = function () {\n        return true;\n    };\n    GlyphView.prototype.notify_finished = function () {\n        return this.renderer.notify_finished();\n    };\n    GlyphView.prototype.bounds = function () {\n        if (this.index == null) {\n            return bbox.empty();\n        }\n        else {\n            return this._bounds(this.index.bbox);\n        }\n    };\n    GlyphView.prototype.log_bounds = function () {\n        var bb, j, k, len, len1, positive_x_bbs, positive_y_bbs, x, y;\n        if (this.index == null) {\n            return bbox.empty();\n        }\n        bb = bbox.empty();\n        positive_x_bbs = this.index.search(bbox.positive_x());\n        positive_y_bbs = this.index.search(bbox.positive_y());\n        for (j = 0, len = positive_x_bbs.length; j < len; j++) {\n            x = positive_x_bbs[j];\n            if (x.minX < bb.minX) {\n                bb.minX = x.minX;\n            }\n            if (x.maxX > bb.maxX) {\n                bb.maxX = x.maxX;\n            }\n        }\n        for (k = 0, len1 = positive_y_bbs.length; k < len1; k++) {\n            y = positive_y_bbs[k];\n            if (y.minY < bb.minY) {\n                bb.minY = y.minY;\n            }\n            if (y.maxY > bb.maxY) {\n                bb.maxY = y.maxY;\n            }\n        }\n        return this._bounds(bb);\n    };\n    GlyphView.prototype.max_wh2_bounds = function (bds) {\n        return {\n            minX: bds.minX - this.max_w2,\n            maxX: bds.maxX + this.max_w2,\n            minY: bds.minY - this.max_h2,\n            maxY: bds.maxY + this.max_h2\n        };\n    };\n    GlyphView.prototype.get_anchor_point = function (anchor, i, arg) {\n        var sx, sy;\n        sx = arg[0], sy = arg[1];\n        switch (anchor) {\n            case \"center\":\n                return {\n                    x: this.scx(i, sx, sy),\n                    y: this.scy(i, sx, sy)\n                };\n            default:\n                return null;\n        }\n    };\n    GlyphView.prototype.scx = function (i) {\n        return this.sx[i];\n    };\n    GlyphView.prototype.scy = function (i) {\n        return this.sy[i];\n    };\n    GlyphView.prototype.sdist = function (scale, pts, spans, pts_location, dilate) {\n        var d, halfspan, i, pt0, pt1, spt0, spt1;\n        if (pts_location == null) {\n            pts_location = \"edge\";\n        }\n        if (dilate == null) {\n            dilate = false;\n        }\n        if (types_1.isString(pts[0])) {\n            pts = scale.v_compute(pts);\n        }\n        if (pts_location === 'center') {\n            halfspan = (function () {\n                var j, len, results;\n                results = [];\n                for (j = 0, len = spans.length; j < len; j++) {\n                    d = spans[j];\n                    results.push(d / 2);\n                }\n                return results;\n            })();\n            pt0 = (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = pts.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(pts[i] - halfspan[i]);\n                }\n                return results;\n            })();\n            pt1 = (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = pts.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(pts[i] + halfspan[i]);\n                }\n                return results;\n            })();\n        }\n        else {\n            pt0 = pts;\n            pt1 = (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = pt0.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(pt0[i] + spans[i]);\n                }\n                return results;\n            })();\n        }\n        spt0 = scale.v_compute(pt0);\n        spt1 = scale.v_compute(pt1);\n        if (dilate) {\n            return (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = spt0.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(Math.ceil(Math.abs(spt1[i] - spt0[i])));\n                }\n                return results;\n            })();\n        }\n        else {\n            return (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = spt0.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(Math.abs(spt1[i] - spt0[i]));\n                }\n                return results;\n            })();\n        }\n    };\n    GlyphView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return null;\n    };\n    GlyphView.prototype._generic_line_legend = function (ctx, x0, x1, y0, y1, index) {\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(x0, (y0 + y1) / 2);\n        ctx.lineTo(x1, (y0 + y1) / 2);\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_vectorize(ctx, index);\n            ctx.stroke();\n        }\n        return ctx.restore();\n    };\n    GlyphView.prototype._generic_area_legend = function (ctx, x0, x1, y0, y1, index) {\n        var dh, dw, h, indices, sx0, sx1, sy0, sy1, w;\n        indices = [index];\n        w = Math.abs(x1 - x0);\n        dw = w * 0.1;\n        h = Math.abs(y1 - y0);\n        dh = h * 0.1;\n        sx0 = x0 + dw;\n        sx1 = x1 - dw;\n        sy0 = y0 + dh;\n        sy1 = y1 - dh;\n        if (this.visuals.fill.doit) {\n            this.visuals.fill.set_vectorize(ctx, index);\n            ctx.fillRect(sx0, sy0, sx1 - sx0, sy1 - sy0);\n        }\n        if (this.visuals.line.doit) {\n            ctx.beginPath();\n            ctx.rect(sx0, sy0, sx1 - sx0, sy1 - sy0);\n            this.visuals.line.set_vectorize(ctx, index);\n            return ctx.stroke();\n        }\n    };\n    GlyphView.prototype.hit_test = function (geometry) {\n        var func, result;\n        result = null;\n        func = \"_hit_\" + geometry.type;\n        if (this[func] != null) {\n            result = this[func](geometry);\n        }\n        else if (this._nohit_warned[geometry.type] == null) {\n            logging_1.logger.debug(\"'\" + geometry.type + \"' selection not available for \" + this.model.type);\n            this._nohit_warned[geometry.type] = true;\n        }\n        return result;\n    };\n    GlyphView.prototype.set_data = function (source, indices) {\n        var data, ref, ref1;\n        data = this.model.materialize_dataspecs(source);\n        object_1.extend(this, data);\n        if (this.renderer.plot_view.model.use_map) {\n            if (this._x != null) {\n                ref = proj.project_xy(this._x, this._y), this._x = ref[0], this._y = ref[1];\n            }\n            if (this._xs != null) {\n                ref1 = proj.project_xsys(this._xs, this._ys), this._xs = ref1[0], this._ys = ref1[1];\n            }\n        }\n        if (this.glglyph != null) {\n            this.glglyph.set_data_changed(this._x.length);\n        }\n        this._set_data(source, indices);\n        return this.index = this._index_data();\n    };\n    GlyphView.prototype._set_data = function () { };\n    GlyphView.prototype._index_data = function () { };\n    GlyphView.prototype.mask_data = function (indices) {\n        if (this.glglyph != null) {\n            return indices;\n        }\n        else {\n            return this._mask_data(indices);\n        }\n    };\n    GlyphView.prototype._mask_data = function (indices) {\n        return indices;\n    };\n    GlyphView.prototype._bounds = function (bounds) {\n        return bounds;\n    };\n    GlyphView.prototype.map_data = function () {\n        var i, j, k, len, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, sx, sxname, sy, syname, xname, yname;\n        ref = this.model._coords;\n        for (j = 0, len = ref.length; j < len; j++) {\n            ref1 = ref[j], xname = ref1[0], yname = ref1[1];\n            sxname = \"s\" + xname;\n            syname = \"s\" + yname;\n            xname = \"_\" + xname;\n            yname = \"_\" + yname;\n            if (types_1.isArray((ref2 = this[xname]) != null ? ref2[0] : void 0) || ((ref3 = this[xname]) != null ? (ref4 = ref3[0]) != null ? ref4.buffer : void 0 : void 0) instanceof ArrayBuffer) {\n                ref5 = [[], []], this[sxname] = ref5[0], this[syname] = ref5[1];\n                for (i = k = 0, ref6 = this[xname].length; 0 <= ref6 ? k < ref6 : k > ref6; i = 0 <= ref6 ? ++k : --k) {\n                    ref7 = this.map_to_screen(this[xname][i], this[yname][i]), sx = ref7[0], sy = ref7[1];\n                    this[sxname].push(sx);\n                    this[syname].push(sy);\n                }\n            }\n            else {\n                ref8 = this.map_to_screen(this[xname], this[yname]), this[sxname] = ref8[0], this[syname] = ref8[1];\n            }\n        }\n        return this._map_data();\n    };\n    GlyphView.prototype._map_data = function () { };\n    GlyphView.prototype.map_to_screen = function (x, y) {\n        return this.renderer.plot_view.map_to_screen(x, y, this.model.x_range_name, this.model.y_range_name);\n    };\n    return GlyphView;\n})(view_1.View);\nexports.Glyph = (function (superClass) {\n    extend1(Glyph, superClass);\n    function Glyph() {\n        return Glyph.__super__.constructor.apply(this, arguments);\n    }\n    Glyph.prototype._coords = [];\n    Glyph.coords = function (coords) {\n        var _coords, j, len, ref, result, x, y;\n        _coords = this.prototype._coords.concat(coords);\n        this.prototype._coords = _coords;\n        result = {};\n        for (j = 0, len = coords.length; j < len; j++) {\n            ref = coords[j], x = ref[0], y = ref[1];\n            result[x] = [p.NumberSpec];\n            result[y] = [p.NumberSpec];\n        }\n        return this.define(result);\n    };\n    Glyph.internal({\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default']\n    });\n    return Glyph;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\nvar categorical_scale_1 = require(\"../scales/categorical_scale\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nexports.HBarView = (function (superClass) {\n    extend(HBarView, superClass);\n    function HBarView() {\n        return HBarView.__super__.constructor.apply(this, arguments);\n    }\n    HBarView.prototype._map_data = function () {\n        var i, j, ref, vleft, vright, vy;\n        vy = this.renderer.yscale.v_compute(this._y);\n        this.sy = this.renderer.plot_view.canvas.v_vy_to_sy(vy);\n        vright = this.renderer.xscale.v_compute(this._right);\n        vleft = this.renderer.xscale.v_compute(this._left);\n        this.sright = this.renderer.plot_view.canvas.v_vx_to_sx(vright);\n        this.sleft = this.renderer.plot_view.canvas.v_vx_to_sx(vleft);\n        this.stop = [];\n        this.sbottom = [];\n        this.sh = this.sdist(this.renderer.yscale, this._y, this._height, 'center');\n        for (i = j = 0, ref = this.sy.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            this.stop.push(this.sy[i] - this.sh[i] / 2);\n            this.sbottom.push(this.sy[i] + this.sh[i] / 2);\n        }\n        return null;\n    };\n    HBarView.prototype._index_data = function () {\n        var b, height, i, j, l, left, map_to_synthetic, points, r, ref, right, t, y;\n        map_to_synthetic = function (scale, array) {\n            if (scale instanceof categorical_scale_1.CategoricalScale) {\n                return scale.v_compute(array, true);\n            }\n            else {\n                return array;\n            }\n        };\n        left = map_to_synthetic(this.renderer.xscale, this._left);\n        right = map_to_synthetic(this.renderer.xscale, this._right);\n        y = map_to_synthetic(this.renderer.yscale, this._y);\n        height = map_to_synthetic(this.renderer.yscale, this._height);\n        points = [];\n        for (i = j = 0, ref = y.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            l = left[i];\n            r = right[i];\n            t = y[i] + 0.5 * height[i];\n            b = y[i] - 0.5 * height[i];\n            if (isNaN(l + r + t + b) || !isFinite(l + r + t + b)) {\n                continue;\n            }\n            points.push({\n                minX: l,\n                minY: b,\n                maxX: r,\n                maxY: t,\n                i: i\n            });\n        }\n        return new spatial_1.RBush(points);\n    };\n    HBarView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, sbottom, sleft, sright, stop;\n        sleft = arg.sleft, sright = arg.sright, stop = arg.stop, sbottom = arg.sbottom;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sleft[i] + stop[i] + sright[i] + sbottom[i])) {\n                continue;\n            }\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fillRect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i]);\n            }\n            if (this.visuals.line.doit) {\n                ctx.beginPath();\n                ctx.rect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i]);\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    HBarView.prototype._hit_point = function (geometry) {\n        var hits, ref, result, vx, vy, x, y;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        hits = this.index.indices({\n            minX: x,\n            minY: y,\n            maxX: x,\n            maxY: y\n        });\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    HBarView.prototype.scx = function (i) {\n        return (this.sleft[i] + this.sright[i]) / 2;\n    };\n    HBarView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return HBarView;\n})(glyph_1.GlyphView);\nexports.HBar = (function (superClass) {\n    extend(HBar, superClass);\n    function HBar() {\n        return HBar.__super__.constructor.apply(this, arguments);\n    }\n    HBar.prototype.default_view = exports.HBarView;\n    HBar.prototype.type = 'HBar';\n    HBar.mixins(['line', 'fill']);\n    HBar.define({\n        y: [p.NumberSpec],\n        height: [p.DistanceSpec],\n        left: [p.NumberSpec, 0],\n        right: [p.NumberSpec]\n    });\n    return HBar;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Greys9, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar linear_color_mapper_1 = require(\"../mappers/linear_color_mapper\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nexports.ImageView = (function (superClass) {\n    extend(ImageView, superClass);\n    function ImageView() {\n        return ImageView.__super__.constructor.apply(this, arguments);\n    }\n    ImageView.prototype.initialize = function (options) {\n        ImageView.__super__.initialize.call(this, options);\n        return this.connect(this.model.color_mapper.change, function () {\n            return this._update_image();\n        });\n    };\n    ImageView.prototype._update_image = function () {\n        if (this.image_data != null) {\n            this._set_data();\n            return this.renderer.plot_view.request_render();\n        }\n    };\n    ImageView.prototype._set_data = function () {\n        var buf, buf8, canvas, cmap, ctx, i, image_data, img, j, ref, results, shape;\n        if ((this.image_data == null) || this.image_data.length !== this._image.length) {\n            this.image_data = new Array(this._image.length);\n        }\n        if ((this._width == null) || this._width.length !== this._image.length) {\n            this._width = new Array(this._image.length);\n        }\n        if ((this._height == null) || this._height.length !== this._image.length) {\n            this._height = new Array(this._image.length);\n        }\n        results = [];\n        for (i = j = 0, ref = this._image.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            shape = [];\n            if (this._image_shape != null) {\n                shape = this._image_shape[i];\n            }\n            if (shape.length > 0) {\n                img = this._image[i];\n                this._height[i] = shape[0];\n                this._width[i] = shape[1];\n            }\n            else {\n                img = array_1.concat(this._image[i]);\n                this._height[i] = this._image[i].length;\n                this._width[i] = this._image[i][0].length;\n            }\n            if ((this.image_data[i] != null) && this.image_data[i].width === this._width[i] && this.image_data[i].height === this._height[i]) {\n                canvas = this.image_data[i];\n            }\n            else {\n                canvas = document.createElement('canvas');\n                canvas.width = this._width[i];\n                canvas.height = this._height[i];\n            }\n            ctx = canvas.getContext('2d');\n            image_data = ctx.getImageData(0, 0, this._width[i], this._height[i]);\n            cmap = this.model.color_mapper;\n            buf = cmap.v_map_screen(img, true);\n            buf8 = new Uint8Array(buf);\n            image_data.data.set(buf8);\n            ctx.putImageData(image_data, 0, 0);\n            this.image_data[i] = canvas;\n            this.max_dw = 0;\n            if (this._dw.units === \"data\") {\n                this.max_dw = array_1.max(this._dw);\n            }\n            this.max_dh = 0;\n            if (this._dh.units === \"data\") {\n                results.push(this.max_dh = array_1.max(this._dh));\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    ImageView.prototype._map_data = function () {\n        switch (this.model.properties.dw.units) {\n            case \"data\":\n                this.sw = this.sdist(this.renderer.xscale, this._x, this._dw, 'edge', this.model.dilate);\n                break;\n            case \"screen\":\n                this.sw = this._dw;\n        }\n        switch (this.model.properties.dh.units) {\n            case \"data\":\n                return this.sh = this.sdist(this.renderer.yscale, this._y, this._dh, 'edge', this.model.dilate);\n            case \"screen\":\n                return this.sh = this._dh;\n        }\n    };\n    ImageView.prototype._render = function (ctx, indices, arg) {\n        var i, image_data, j, len, old_smoothing, sh, sw, sx, sy, y_offset;\n        image_data = arg.image_data, sx = arg.sx, sy = arg.sy, sw = arg.sw, sh = arg.sh;\n        old_smoothing = ctx.getImageSmoothingEnabled();\n        ctx.setImageSmoothingEnabled(false);\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (image_data[i] == null) {\n                continue;\n            }\n            if (isNaN(sx[i] + sy[i] + sw[i] + sh[i])) {\n                continue;\n            }\n            y_offset = sy[i];\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n            ctx.drawImage(image_data[i], sx[i] | 0, sy[i] | 0, sw[i], sh[i]);\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n        }\n        return ctx.setImageSmoothingEnabled(old_smoothing);\n    };\n    ImageView.prototype.bounds = function () {\n        var bbox;\n        bbox = this.index.bbox;\n        bbox.maxX += this.max_dw;\n        bbox.maxY += this.max_dh;\n        return bbox;\n    };\n    return ImageView;\n})(xy_glyph_1.XYGlyphView);\nGreys9 = function () {\n    return [0x000000, 0x252525, 0x525252, 0x737373, 0x969696, 0xbdbdbd, 0xd9d9d9, 0xf0f0f0, 0xffffff];\n};\nexports.Image = (function (superClass) {\n    extend(Image, superClass);\n    function Image() {\n        return Image.__super__.constructor.apply(this, arguments);\n    }\n    Image.prototype.default_view = exports.ImageView;\n    Image.prototype.type = 'Image';\n    Image.define({\n        image: [p.NumberSpec],\n        dw: [p.DistanceSpec],\n        dh: [p.DistanceSpec],\n        dilate: [p.Bool, false],\n        color_mapper: [\n            p.Instance, function () {\n                return new linear_color_mapper_1.LinearColorMapper({\n                    palette: Greys9()\n                });\n            }\n        ]\n    });\n    return Image;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nexports.ImageRGBAView = (function (superClass) {\n    extend(ImageRGBAView, superClass);\n    function ImageRGBAView() {\n        return ImageRGBAView.__super__.constructor.apply(this, arguments);\n    }\n    ImageRGBAView.prototype._set_data = function (source, indices) {\n        var buf, buf8, canvas, color, ctx, flat, i, image_data, j, k, l, m, ref, ref1, ref2, results, shape;\n        if ((this.image_data == null) || this.image_data.length !== this._image.length) {\n            this.image_data = new Array(this._image.length);\n        }\n        if ((this._width == null) || this._width.length !== this._image.length) {\n            this._width = new Array(this._image.length);\n        }\n        if ((this._height == null) || this._height.length !== this._image.length) {\n            this._height = new Array(this._image.length);\n        }\n        results = [];\n        for (i = k = 0, ref = this._image.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            if ((indices != null) && indices.indexOf(i) < 0) {\n                continue;\n            }\n            shape = [];\n            if (this._image_shape != null) {\n                shape = this._image_shape[i];\n            }\n            if (this._rows != null) {\n                this._height[i] = this._rows[i];\n                this._width[i] = this._cols[i];\n                if (shape.length > 0) {\n                    buf = this._image[i].buffer;\n                }\n                else {\n                    flat = this._image[i];\n                    buf = new ArrayBuffer(flat.length * 4);\n                    color = new Uint32Array(buf);\n                    for (j = l = 0, ref1 = flat.length; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {\n                        color[j] = flat[j];\n                    }\n                }\n            }\n            else if (shape.length > 0) {\n                buf = this._image[i].buffer;\n                this._height[i] = shape[0];\n                this._width[i] = shape[1];\n            }\n            else {\n                flat = array_1.concat(this._image[i]);\n                buf = new ArrayBuffer(flat.length * 4);\n                color = new Uint32Array(buf);\n                for (j = m = 0, ref2 = flat.length; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {\n                    color[j] = flat[j];\n                }\n                this._height[i] = this._image[i].length;\n                this._width[i] = this._image[i][0].length;\n            }\n            if ((this.image_data[i] != null) && this.image_data[i].width === this._width[i] && this.image_data[i].height === this._height[i]) {\n                canvas = this.image_data[i];\n            }\n            else {\n                canvas = document.createElement('canvas');\n                canvas.width = this._width[i];\n                canvas.height = this._height[i];\n            }\n            ctx = canvas.getContext('2d');\n            image_data = ctx.getImageData(0, 0, this._width[i], this._height[i]);\n            buf8 = new Uint8Array(buf);\n            image_data.data.set(buf8);\n            ctx.putImageData(image_data, 0, 0);\n            this.image_data[i] = canvas;\n            this.max_dw = 0;\n            if (this._dw.units === \"data\") {\n                this.max_dw = array_1.max(this._dw);\n            }\n            this.max_dh = 0;\n            if (this._dh.units === \"data\") {\n                results.push(this.max_dh = array_1.max(this._dh));\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    ImageRGBAView.prototype._map_data = function () {\n        switch (this.model.properties.dw.units) {\n            case \"data\":\n                this.sw = this.sdist(this.renderer.xscale, this._x, this._dw, 'edge', this.model.dilate);\n                break;\n            case \"screen\":\n                this.sw = this._dw;\n        }\n        switch (this.model.properties.dh.units) {\n            case \"data\":\n                return this.sh = this.sdist(this.renderer.yscale, this._y, this._dh, 'edge', this.model.dilate);\n            case \"screen\":\n                return this.sh = this._dh;\n        }\n    };\n    ImageRGBAView.prototype._render = function (ctx, indices, arg) {\n        var i, image_data, k, len, old_smoothing, sh, sw, sx, sy, y_offset;\n        image_data = arg.image_data, sx = arg.sx, sy = arg.sy, sw = arg.sw, sh = arg.sh;\n        old_smoothing = ctx.getImageSmoothingEnabled();\n        ctx.setImageSmoothingEnabled(false);\n        for (k = 0, len = indices.length; k < len; k++) {\n            i = indices[k];\n            if (isNaN(sx[i] + sy[i] + sw[i] + sh[i])) {\n                continue;\n            }\n            y_offset = sy[i];\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n            ctx.drawImage(image_data[i], sx[i] | 0, sy[i] | 0, sw[i], sh[i]);\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n        }\n        return ctx.setImageSmoothingEnabled(old_smoothing);\n    };\n    ImageRGBAView.prototype.bounds = function () {\n        var bbox;\n        bbox = this.index.bbox;\n        bbox.maxX += this.max_dw;\n        bbox.maxY += this.max_dh;\n        return bbox;\n    };\n    return ImageRGBAView;\n})(xy_glyph_1.XYGlyphView);\nexports.ImageRGBA = (function (superClass) {\n    extend(ImageRGBA, superClass);\n    function ImageRGBA() {\n        return ImageRGBA.__super__.constructor.apply(this, arguments);\n    }\n    ImageRGBA.prototype.default_view = exports.ImageRGBAView;\n    ImageRGBA.prototype.type = 'ImageRGBA';\n    ImageRGBA.define({\n        image: [p.NumberSpec],\n        rows: [p.NumberSpec],\n        cols: [p.NumberSpec],\n        dw: [p.DistanceSpec],\n        dh: [p.DistanceSpec],\n        dilate: [p.Bool, false]\n    });\n    ImageRGBA.prototype.initialize = function (attrs, options) {\n        ImageRGBA.__super__.initialize.call(this, attrs, options);\n        this.properties.rows.optional = true;\n        return this.properties.cols.optional = true;\n    };\n    return ImageRGBA;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar glyph_1 = require(\"./glyph\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nexports.ImageURLView = (function (superClass) {\n    extend(ImageURLView, superClass);\n    function ImageURLView() {\n        return ImageURLView.__super__.constructor.apply(this, arguments);\n    }\n    ImageURLView.prototype.initialize = function (options) {\n        ImageURLView.__super__.initialize.call(this, options);\n        return this.connect(this.model.properties.global_alpha.change, (function (_this) {\n            return function () {\n                return _this.renderer.request_render();\n            };\n        })(this));\n    };\n    ImageURLView.prototype._index_data = function () { };\n    ImageURLView.prototype._set_data = function () {\n        var i, img, j, ref, results, retry_attempts, retry_timeout;\n        if ((this.image == null) || this.image.length !== this._url.length) {\n            this.image = (function () {\n                var j, len, ref, results;\n                ref = this._url;\n                results = [];\n                for (j = 0, len = ref.length; j < len; j++) {\n                    img = ref[j];\n                    results.push(null);\n                }\n                return results;\n            }).call(this);\n        }\n        retry_attempts = this.model.retry_attempts;\n        retry_timeout = this.model.retry_timeout;\n        this.retries = (function () {\n            var j, len, ref, results;\n            ref = this._url;\n            results = [];\n            for (j = 0, len = ref.length; j < len; j++) {\n                img = ref[j];\n                results.push(retry_attempts);\n            }\n            return results;\n        }).call(this);\n        results = [];\n        for (i = j = 0, ref = this._url.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            if (this._url[i] == null) {\n                continue;\n            }\n            img = new Image();\n            img.onerror = (function (_this) {\n                return function (i, img) {\n                    return function () {\n                        if (_this.retries[i] > 0) {\n                            logging_1.logger.trace(\"ImageURL failed to load \" + _this._url[i] + \" image, retrying in \" + retry_timeout + \" ms\");\n                            setTimeout((function () {\n                                return img.src = _this._url[i];\n                            }), retry_timeout);\n                        }\n                        else {\n                            logging_1.logger.warn(\"ImageURL unable to load \" + _this._url[i] + \" image after \" + retry_attempts + \" retries\");\n                        }\n                        return _this.retries[i] -= 1;\n                    };\n                };\n            })(this)(i, img);\n            img.onload = (function (_this) {\n                return function (img, i) {\n                    return function () {\n                        _this.image[i] = img;\n                        return _this.renderer.request_render();\n                    };\n                };\n            })(this)(img, i);\n            results.push(img.src = this._url[i]);\n        }\n        return results;\n    };\n    ImageURLView.prototype.has_finished = function () {\n        return ImageURLView.__super__.has_finished.call(this) && this._images_rendered === true;\n    };\n    ImageURLView.prototype._map_data = function () {\n        var hs, ws, x;\n        ws = ((function () {\n            var j, len, ref, results;\n            if (this.model.w != null) {\n                return this._w;\n            }\n            else {\n                ref = this._x;\n                results = [];\n                for (j = 0, len = ref.length; j < len; j++) {\n                    x = ref[j];\n                    results.push(0 / 0);\n                }\n                return results;\n            }\n        }).call(this));\n        hs = ((function () {\n            var j, len, ref, results;\n            if (this.model.h != null) {\n                return this._h;\n            }\n            else {\n                ref = this._x;\n                results = [];\n                for (j = 0, len = ref.length; j < len; j++) {\n                    x = ref[j];\n                    results.push(0 / 0);\n                }\n                return results;\n            }\n        }).call(this));\n        switch (this.model.properties.w.units) {\n            case \"data\":\n                this.sw = this.sdist(this.renderer.xscale, this._x, ws, 'edge', this.model.dilate);\n                break;\n            case \"screen\":\n                this.sw = ws;\n        }\n        switch (this.model.properties.h.units) {\n            case \"data\":\n                return this.sh = this.sdist(this.renderer.yscale, this._y, hs, 'edge', this.model.dilate);\n            case \"screen\":\n                return this.sh = hs;\n        }\n    };\n    ImageURLView.prototype._render = function (ctx, indices, arg) {\n        var _angle, _url, finished, frame, i, image, j, len, sh, sw, sx, sy;\n        _url = arg._url, image = arg.image, sx = arg.sx, sy = arg.sy, sw = arg.sw, sh = arg.sh, _angle = arg._angle;\n        frame = this.renderer.plot_view.frame;\n        ctx.rect(frame._left.value + 1, frame._bottom.value + 1, frame._width.value - 2, frame._height.value - 2);\n        ctx.clip();\n        finished = true;\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + _angle[i])) {\n                continue;\n            }\n            if (this.retries[i] === -1) {\n                continue;\n            }\n            if (image[i] == null) {\n                finished = false;\n                continue;\n            }\n            this._render_image(ctx, i, image[i], sx, sy, sw, sh, _angle);\n        }\n        if (finished && !this._images_rendered) {\n            this._images_rendered = true;\n            return this.notify_finished();\n        }\n    };\n    ImageURLView.prototype._final_sx_sy = function (anchor, sx, sy, sw, sh) {\n        switch (anchor) {\n            case 'top_left':\n                return [sx, sy];\n            case 'top_center':\n                return [sx - sw / 2, sy];\n            case 'top_right':\n                return [sx - sw, sy];\n            case 'center_right':\n                return [sx - sw, sy - sh / 2];\n            case 'bottom_right':\n                return [sx - sw, sy - sh];\n            case 'bottom_center':\n                return [sx - sw / 2, sy - sh];\n            case 'bottom_left':\n                return [sx, sy - sh];\n            case 'center_left':\n                return [sx, sy - sh / 2];\n            case 'center':\n                return [sx - sw / 2, sy - sh / 2];\n        }\n    };\n    ImageURLView.prototype._render_image = function (ctx, i, image, sx, sy, sw, sh, angle) {\n        var anchor, ref;\n        if (isNaN(sw[i])) {\n            sw[i] = image.width;\n        }\n        if (isNaN(sh[i])) {\n            sh[i] = image.height;\n        }\n        anchor = this.model.anchor;\n        ref = this._final_sx_sy(anchor, sx[i], sy[i], sw[i], sh[i]), sx = ref[0], sy = ref[1];\n        ctx.save();\n        ctx.globalAlpha = this.model.global_alpha;\n        if (angle[i]) {\n            ctx.translate(sx, sy);\n            ctx.rotate(angle[i]);\n            ctx.drawImage(image, 0, 0, sw[i], sh[i]);\n            ctx.rotate(-angle[i]);\n            ctx.translate(-sx, -sy);\n        }\n        else {\n            ctx.drawImage(image, sx, sy, sw[i], sh[i]);\n        }\n        return ctx.restore();\n    };\n    return ImageURLView;\n})(glyph_1.GlyphView);\nexports.ImageURL = (function (superClass) {\n    extend(ImageURL, superClass);\n    function ImageURL() {\n        return ImageURL.__super__.constructor.apply(this, arguments);\n    }\n    ImageURL.prototype.default_view = exports.ImageURLView;\n    ImageURL.prototype.type = 'ImageURL';\n    ImageURL.coords([['x', 'y']]);\n    ImageURL.mixins([]);\n    ImageURL.define({\n        url: [p.StringSpec],\n        anchor: [p.Anchor, 'top_left'],\n        global_alpha: [p.Number, 1.0],\n        angle: [p.AngleSpec, 0],\n        w: [p.DistanceSpec],\n        h: [p.DistanceSpec],\n        dilate: [p.Bool, false],\n        retry_attempts: [p.Number, 0],\n        retry_timeout: [p.Number, 0]\n    });\n    return ImageURL;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar annular_wedge_1 = require(\"./annular_wedge\");\nexports.AnnularWedge = annular_wedge_1.AnnularWedge;\nvar annulus_1 = require(\"./annulus\");\nexports.Annulus = annulus_1.Annulus;\nvar arc_1 = require(\"./arc\");\nexports.Arc = arc_1.Arc;\nvar bezier_1 = require(\"./bezier\");\nexports.Bezier = bezier_1.Bezier;\nvar circle_1 = require(\"./circle\");\nexports.Circle = circle_1.Circle;\nvar ellipse_1 = require(\"./ellipse\");\nexports.Ellipse = ellipse_1.Ellipse;\nvar glyph_1 = require(\"./glyph\");\nexports.Glyph = glyph_1.Glyph;\nvar hbar_1 = require(\"./hbar\");\nexports.HBar = hbar_1.HBar;\nvar image_1 = require(\"./image\");\nexports.Image = image_1.Image;\nvar image_rgba_1 = require(\"./image_rgba\");\nexports.ImageRGBA = image_rgba_1.ImageRGBA;\nvar image_url_1 = require(\"./image_url\");\nexports.ImageURL = image_url_1.ImageURL;\nvar line_1 = require(\"./line\");\nexports.Line = line_1.Line;\nvar multi_line_1 = require(\"./multi_line\");\nexports.MultiLine = multi_line_1.MultiLine;\nvar oval_1 = require(\"./oval\");\nexports.Oval = oval_1.Oval;\nvar patch_1 = require(\"./patch\");\nexports.Patch = patch_1.Patch;\nvar patches_1 = require(\"./patches\");\nexports.Patches = patches_1.Patches;\nvar quad_1 = require(\"./quad\");\nexports.Quad = quad_1.Quad;\nvar quadratic_1 = require(\"./quadratic\");\nexports.Quadratic = quadratic_1.Quadratic;\nvar ray_1 = require(\"./ray\");\nexports.Ray = ray_1.Ray;\nvar rect_1 = require(\"./rect\");\nexports.Rect = rect_1.Rect;\nvar segment_1 = require(\"./segment\");\nexports.Segment = segment_1.Segment;\nvar text_1 = require(\"./text\");\nexports.Text = text_1.Text;\nvar vbar_1 = require(\"./vbar\");\nexports.VBar = vbar_1.VBar;\nvar wedge_1 = require(\"./wedge\");\nexports.Wedge = wedge_1.Wedge;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nexports.XYGlyph = xy_glyph_1.XYGlyph;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar hittest = require(\"core/hittest\");\nexports.LineView = (function (superClass) {\n    extend(LineView, superClass);\n    function LineView() {\n        return LineView.__super__.constructor.apply(this, arguments);\n    }\n    LineView.prototype._render = function (ctx, indices, arg) {\n        var drawing, i, j, len, sx, sy;\n        sx = arg.sx, sy = arg.sy;\n        drawing = false;\n        this.visuals.line.set_value(ctx);\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (!isFinite(sx[i] + sy[i]) && drawing) {\n                ctx.stroke();\n                ctx.beginPath();\n                drawing = false;\n                continue;\n            }\n            if (drawing) {\n                ctx.lineTo(sx[i], sy[i]);\n            }\n            else {\n                ctx.beginPath();\n                ctx.moveTo(sx[i], sy[i]);\n                drawing = true;\n            }\n        }\n        if (drawing) {\n            return ctx.stroke();\n        }\n    };\n    LineView.prototype._hit_point = function (geometry) {\n        /* Check if the point geometry hits this line glyph and return an object\n        that describes the hit result:\n          Args:\n            * geometry (object): object with the following keys\n              * vx (float): view x coordinate of the point\n              * vy (float): view y coordinate of the point\n              * type (str): type of geometry (in this case it's a point)\n          Output:\n            Object with the following keys:\n              * 0d (bool): whether the point hits the glyph or not\n              * 1d (array(int)): array with the indices hit by the point\n         */\n        var dist, i, j, p0, p1, point, ref, ref1, result, shortest, threshold;\n        result = hittest.create_hit_test_result();\n        point = {\n            x: this.renderer.plot_view.canvas.vx_to_sx(geometry.vx),\n            y: this.renderer.plot_view.canvas.vy_to_sy(geometry.vy)\n        };\n        shortest = 9999;\n        threshold = Math.max(2, this.visuals.line.line_width.value() / 2);\n        for (i = j = 0, ref = this.sx.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            ref1 = [\n                {\n                    x: this.sx[i],\n                    y: this.sy[i]\n                }, {\n                    x: this.sx[i + 1],\n                    y: this.sy[i + 1]\n                }\n            ], p0 = ref1[0], p1 = ref1[1];\n            dist = hittest.dist_to_segment(point, p0, p1);\n            if (dist < threshold && dist < shortest) {\n                shortest = dist;\n                result['0d'].glyph = this.model;\n                result['0d'].get_view = (function () {\n                    return this;\n                }).bind(this);\n                result['0d'].flag = true;\n                result['0d'].indices = [i];\n            }\n        }\n        return result;\n    };\n    LineView.prototype._hit_span = function (geometry) {\n        var i, j, ref, ref1, result, val, values, vx, vy;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        result = hittest.create_hit_test_result();\n        if (geometry.direction === 'v') {\n            val = this.renderer.yscale.invert(vy);\n            values = this._y;\n        }\n        else {\n            val = this.renderer.xscale.invert(vx);\n            values = this._x;\n        }\n        for (i = j = 0, ref1 = values.length - 1; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n            if ((values[i] <= val && val <= values[i + 1]) || (values[i + 1] <= val && val <= values[i])) {\n                result['0d'].glyph = this.model;\n                result['0d'].get_view = (function () {\n                    return this;\n                }).bind(this);\n                result['0d'].flag = true;\n                result['0d'].indices.push(i);\n            }\n        }\n        return result;\n    };\n    LineView.prototype.get_interpolation_hit = function (i, geometry) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, res, vx, vy, x0, x1, x2, x3, y0, y1, y2, y3;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        ref1 = [this._x[i], this._y[i], this._x[i + 1], this._y[i + 1]], x2 = ref1[0], y2 = ref1[1], x3 = ref1[2], y3 = ref1[3];\n        if (geometry.type === 'point') {\n            ref2 = this.renderer.yscale.v_invert([vy - 1, vy + 1]), y0 = ref2[0], y1 = ref2[1];\n            ref3 = this.renderer.xscale.v_invert([vx - 1, vx + 1]), x0 = ref3[0], x1 = ref3[1];\n        }\n        else {\n            if (geometry.direction === 'v') {\n                ref4 = this.renderer.yscale.v_invert([vy, vy]), y0 = ref4[0], y1 = ref4[1];\n                ref5 = [x2, x3], x0 = ref5[0], x1 = ref5[1];\n            }\n            else {\n                ref6 = this.renderer.xscale.v_invert([vx, vx]), x0 = ref6[0], x1 = ref6[1];\n                ref7 = [y2, y3], y0 = ref7[0], y1 = ref7[1];\n            }\n        }\n        res = hittest.check_2_segments_intersect(x0, y0, x1, y1, x2, y2, x3, y3);\n        return [res.x, res.y];\n    };\n    LineView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_line_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return LineView;\n})(xy_glyph_1.XYGlyphView);\nexports.Line = (function (superClass) {\n    extend(Line, superClass);\n    function Line() {\n        return Line.__super__.constructor.apply(this, arguments);\n    }\n    Line.prototype.default_view = exports.LineView;\n    Line.prototype.type = 'Line';\n    Line.mixins(['line']);\n    return Line;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar hittest = require(\"core/hittest\");\nvar array_1 = require(\"core/util/array\");\nvar types_1 = require(\"core/util/types\");\nvar glyph_1 = require(\"./glyph\");\nexports.MultiLineView = (function (superClass) {\n    extend(MultiLineView, superClass);\n    function MultiLineView() {\n        return MultiLineView.__super__.constructor.apply(this, arguments);\n    }\n    MultiLineView.prototype._index_data = function () {\n        var i, k, points, ref, x, xs, y, ys;\n        points = [];\n        for (i = k = 0, ref = this._xs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            xs = (function () {\n                var l, len, ref1, results;\n                ref1 = this._xs[i];\n                results = [];\n                for (l = 0, len = ref1.length; l < len; l++) {\n                    x = ref1[l];\n                    if (!types_1.isStrictNaN(x)) {\n                        results.push(x);\n                    }\n                }\n                return results;\n            }).call(this);\n            ys = (function () {\n                var l, len, ref1, results;\n                ref1 = this._ys[i];\n                results = [];\n                for (l = 0, len = ref1.length; l < len; l++) {\n                    y = ref1[l];\n                    if (!types_1.isStrictNaN(y)) {\n                        results.push(y);\n                    }\n                }\n                return results;\n            }).call(this);\n            if (xs.length === 0) {\n                continue;\n            }\n            points.push({\n                minX: array_1.min(xs),\n                minY: array_1.min(ys),\n                maxX: array_1.max(xs),\n                maxY: array_1.max(ys),\n                i: i\n            });\n        }\n        return new spatial_1.RBush(points);\n    };\n    MultiLineView.prototype._render = function (ctx, indices, arg) {\n        var i, j, k, l, len, ref, ref1, results, sx, sxs, sy, sys;\n        sxs = arg.sxs, sys = arg.sys;\n        results = [];\n        for (k = 0, len = indices.length; k < len; k++) {\n            i = indices[k];\n            ref = [sxs[i], sys[i]], sx = ref[0], sy = ref[1];\n            this.visuals.line.set_vectorize(ctx, i);\n            for (j = l = 0, ref1 = sx.length; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {\n                if (j === 0) {\n                    ctx.beginPath();\n                    ctx.moveTo(sx[j], sy[j]);\n                    continue;\n                }\n                else if (isNaN(sx[j]) || isNaN(sy[j])) {\n                    ctx.stroke();\n                    ctx.beginPath();\n                    continue;\n                }\n                else {\n                    ctx.lineTo(sx[j], sy[j]);\n                }\n            }\n            results.push(ctx.stroke());\n        }\n        return results;\n    };\n    MultiLineView.prototype._hit_point = function (geometry) {\n        var dist, hits, i, j, k, l, p0, p1, point, points, ref, ref1, ref2, result, shortest, threshold;\n        result = hittest.create_hit_test_result();\n        point = {\n            x: this.renderer.plot_view.canvas.vx_to_sx(geometry.vx),\n            y: this.renderer.plot_view.canvas.vy_to_sy(geometry.vy)\n        };\n        shortest = 9999;\n        hits = {};\n        for (i = k = 0, ref = this.sxs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            threshold = Math.max(2, this.visuals.line.cache_select('line_width', i) / 2);\n            points = null;\n            for (j = l = 0, ref1 = this.sxs[i].length - 1; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {\n                ref2 = [\n                    {\n                        x: this.sxs[i][j],\n                        y: this.sys[i][j]\n                    }, {\n                        x: this.sxs[i][j + 1],\n                        y: this.sys[i][j + 1]\n                    }\n                ], p0 = ref2[0], p1 = ref2[1];\n                dist = hittest.dist_to_segment(point, p0, p1);\n                if (dist < threshold && dist < shortest) {\n                    shortest = dist;\n                    points = [j];\n                }\n            }\n            if (points) {\n                hits[i] = points;\n            }\n        }\n        result['1d'].indices = Object.keys(hits);\n        result['2d'].indices = hits;\n        return result;\n    };\n    MultiLineView.prototype._hit_span = function (geometry) {\n        var hits, i, j, k, l, points, ref, ref1, ref2, result, val, values, vx, vy;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        result = hittest.create_hit_test_result();\n        if (geometry.direction === 'v') {\n            val = this.renderer.yscale.invert(vy);\n            values = this._ys;\n        }\n        else {\n            val = this.renderer.xscale.invert(vx);\n            values = this._xs;\n        }\n        hits = {};\n        for (i = k = 0, ref1 = values.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n            points = [];\n            for (j = l = 0, ref2 = values[i].length - 1; 0 <= ref2 ? l < ref2 : l > ref2; j = 0 <= ref2 ? ++l : --l) {\n                if ((values[i][j] <= val && val <= values[i][j + 1])) {\n                    points.push(j);\n                }\n            }\n            if (points.length > 0) {\n                hits[i] = points;\n            }\n        }\n        result['1d'].indices = Object.keys(hits);\n        result['2d'].indices = hits;\n        return result;\n    };\n    MultiLineView.prototype.get_interpolation_hit = function (i, point_i, geometry) {\n        var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, res, vx, vy, x0, x1, x2, x3, y0, y1, y2, y3;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        ref1 = [this._xs[i][point_i], this._ys[i][point_i], this._xs[i][point_i + 1], this._ys[i][point_i + 1]], x2 = ref1[0], y2 = ref1[1], x3 = ref1[2], y3 = ref1[3];\n        if (geometry.type === 'point') {\n            ref2 = this.renderer.yscale.v_invert([vy - 1, vy + 1]), y0 = ref2[0], y1 = ref2[1];\n            ref3 = this.renderer.xscale.v_invert([vx - 1, vx + 1]), x0 = ref3[0], x1 = ref3[1];\n        }\n        else {\n            if (geometry.direction === 'v') {\n                ref4 = this.renderer.yscale.v_invert([vy, vy]), y0 = ref4[0], y1 = ref4[1];\n                ref5 = [x2, x3], x0 = ref5[0], x1 = ref5[1];\n            }\n            else {\n                ref6 = this.renderer.xscale.v_invert([vx, vx]), x0 = ref6[0], x1 = ref6[1];\n                ref7 = [y2, y3], y0 = ref7[0], y1 = ref7[1];\n            }\n        }\n        res = hittest.check_2_segments_intersect(x0, y0, x1, y1, x2, y2, x3, y3);\n        return [res.x, res.y];\n    };\n    MultiLineView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_line_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return MultiLineView;\n})(glyph_1.GlyphView);\nexports.MultiLine = (function (superClass) {\n    extend(MultiLine, superClass);\n    function MultiLine() {\n        return MultiLine.__super__.constructor.apply(this, arguments);\n    }\n    MultiLine.prototype.default_view = exports.MultiLineView;\n    MultiLine.prototype.type = 'MultiLine';\n    MultiLine.coords([['xs', 'ys']]);\n    MultiLine.mixins(['line']);\n    return MultiLine;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar p = require(\"core/properties\");\nexports.OvalView = (function (superClass) {\n    extend(OvalView, superClass);\n    function OvalView() {\n        return OvalView.__super__.constructor.apply(this, arguments);\n    }\n    OvalView.prototype._set_data = function () {\n        this.max_w2 = 0;\n        if (this.model.properties.width.units === \"data\") {\n            this.max_w2 = this.max_width / 2;\n        }\n        this.max_h2 = 0;\n        if (this.model.properties.height.units === \"data\") {\n            return this.max_h2 = this.max_height / 2;\n        }\n    };\n    OvalView.prototype._map_data = function () {\n        if (this.model.properties.width.units === \"data\") {\n            this.sw = this.sdist(this.renderer.xscale, this._x, this._width, 'center');\n        }\n        else {\n            this.sw = this._width;\n        }\n        if (this.model.properties.height.units === \"data\") {\n            return this.sh = this.sdist(this.renderer.yscale, this._y, this._height, 'center');\n        }\n        else {\n            return this.sh = this._height;\n        }\n    };\n    OvalView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, sh, sw, sx, sy;\n        sx = arg.sx, sy = arg.sy, sw = arg.sw, sh = arg.sh;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + sw[i] + sh[i] + this._angle[i])) {\n                continue;\n            }\n            ctx.translate(sx[i], sy[i]);\n            ctx.rotate(this._angle[i]);\n            ctx.beginPath();\n            ctx.moveTo(0, -sh[i] / 2);\n            ctx.bezierCurveTo(sw[i] / 2, -sh[i] / 2, sw[i] / 2, sh[i] / 2, 0, sh[i] / 2);\n            ctx.bezierCurveTo(-sw[i] / 2, sh[i] / 2, -sw[i] / 2, -sh[i] / 2, 0, -sh[i] / 2);\n            ctx.closePath();\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.stroke();\n            }\n            ctx.rotate(-this._angle[i]);\n            results.push(ctx.translate(-sx[i], -sy[i]));\n        }\n        return results;\n    };\n    OvalView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        var d, data, indices, scale, sh, sw, sx, sy;\n        indices = [index];\n        sx = {};\n        sx[index] = (x0 + x1) / 2;\n        sy = {};\n        sy[index] = (y0 + y1) / 2;\n        scale = this.sw[index] / this.sh[index];\n        d = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.8;\n        sw = {};\n        sh = {};\n        if (scale > 1) {\n            sw[index] = d;\n            sh[index] = d / scale;\n        }\n        else {\n            sw[index] = d * scale;\n            sh[index] = d;\n        }\n        data = {\n            sx: sx,\n            sy: sy,\n            sw: sw,\n            sh: sh\n        };\n        return this._render(ctx, indices, data);\n    };\n    OvalView.prototype._bounds = function (bds) {\n        return this.max_wh2_bounds(bds);\n    };\n    return OvalView;\n})(xy_glyph_1.XYGlyphView);\nexports.Oval = (function (superClass) {\n    extend(Oval, superClass);\n    function Oval() {\n        return Oval.__super__.constructor.apply(this, arguments);\n    }\n    Oval.prototype.default_view = exports.OvalView;\n    Oval.prototype.type = 'Oval';\n    Oval.mixins(['line', 'fill']);\n    Oval.define({\n        angle: [p.AngleSpec, 0.0],\n        width: [p.DistanceSpec],\n        height: [p.DistanceSpec]\n    });\n    return Oval;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nexports.PatchView = (function (superClass) {\n    extend(PatchView, superClass);\n    function PatchView() {\n        return PatchView.__super__.constructor.apply(this, arguments);\n    }\n    PatchView.prototype._render = function (ctx, indices, arg) {\n        var i, j, k, len, len1, sx, sy;\n        sx = arg.sx, sy = arg.sy;\n        if (this.visuals.fill.doit) {\n            this.visuals.fill.set_value(ctx);\n            for (j = 0, len = indices.length; j < len; j++) {\n                i = indices[j];\n                if (i === 0) {\n                    ctx.beginPath();\n                    ctx.moveTo(sx[i], sy[i]);\n                    continue;\n                }\n                else if (isNaN(sx[i] + sy[i])) {\n                    ctx.closePath();\n                    ctx.fill();\n                    ctx.beginPath();\n                    continue;\n                }\n                else {\n                    ctx.lineTo(sx[i], sy[i]);\n                }\n            }\n            ctx.closePath();\n            ctx.fill();\n        }\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_value(ctx);\n            for (k = 0, len1 = indices.length; k < len1; k++) {\n                i = indices[k];\n                if (i === 0) {\n                    ctx.beginPath();\n                    ctx.moveTo(sx[i], sy[i]);\n                    continue;\n                }\n                else if (isNaN(sx[i] + sy[i])) {\n                    ctx.closePath();\n                    ctx.stroke();\n                    ctx.beginPath();\n                    continue;\n                }\n                else {\n                    ctx.lineTo(sx[i], sy[i]);\n                }\n            }\n            ctx.closePath();\n            return ctx.stroke();\n        }\n    };\n    PatchView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return PatchView;\n})(xy_glyph_1.XYGlyphView);\nexports.Patch = (function (superClass) {\n    extend(Patch, superClass);\n    function Patch() {\n        return Patch.__super__.constructor.apply(this, arguments);\n    }\n    Patch.prototype.default_view = exports.PatchView;\n    Patch.prototype.type = 'Patch';\n    Patch.mixins(['line', 'fill']);\n    return Patch;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\nvar array_1 = require(\"core/util/array\");\nvar types_1 = require(\"core/util/types\");\nvar hittest = require(\"core/hittest\");\nexports.PatchesView = (function (superClass) {\n    extend(PatchesView, superClass);\n    function PatchesView() {\n        return PatchesView.__super__.constructor.apply(this, arguments);\n    }\n    PatchesView.prototype._build_discontinuous_object = function (nanned_qs) {\n        var denanned, ds, i, k, nan_index, q, qs, qs_part, ref;\n        ds = {};\n        for (i = k = 0, ref = nanned_qs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            ds[i] = [];\n            qs = array_1.copy(nanned_qs[i]);\n            while (qs.length > 0) {\n                nan_index = array_1.findLastIndex(qs, function (q) {\n                    return types_1.isStrictNaN(q);\n                });\n                if (nan_index >= 0) {\n                    qs_part = qs.splice(nan_index);\n                }\n                else {\n                    qs_part = qs;\n                    qs = [];\n                }\n                denanned = (function () {\n                    var l, len, results;\n                    results = [];\n                    for (l = 0, len = qs_part.length; l < len; l++) {\n                        q = qs_part[l];\n                        if (!types_1.isStrictNaN(q)) {\n                            results.push(q);\n                        }\n                    }\n                    return results;\n                })();\n                ds[i].push(denanned);\n            }\n        }\n        return ds;\n    };\n    PatchesView.prototype._index_data = function () {\n        var i, j, k, l, points, ref, ref1, xs, xss, ys, yss;\n        xss = this._build_discontinuous_object(this._xs);\n        yss = this._build_discontinuous_object(this._ys);\n        points = [];\n        for (i = k = 0, ref = this._xs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            for (j = l = 0, ref1 = xss[i].length; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {\n                xs = xss[i][j];\n                ys = yss[i][j];\n                if (xs.length === 0) {\n                    continue;\n                }\n                points.push({\n                    minX: array_1.min(xs),\n                    minY: array_1.min(ys),\n                    maxX: array_1.max(xs),\n                    maxY: array_1.max(ys),\n                    i: i\n                });\n            }\n        }\n        return new spatial_1.RBush(points);\n    };\n    PatchesView.prototype._mask_data = function (all_indices) {\n        var bbox, ref, ref1, x0, x1, xr, y0, y1, yr;\n        xr = this.renderer.plot_view.frame.x_ranges[\"default\"];\n        ref = [xr.min, xr.max], x0 = ref[0], x1 = ref[1];\n        yr = this.renderer.plot_view.frame.y_ranges[\"default\"];\n        ref1 = [yr.min, yr.max], y0 = ref1[0], y1 = ref1[1];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        return this.index.indices(bbox);\n    };\n    PatchesView.prototype._render = function (ctx, indices, arg) {\n        var i, j, k, l, len, m, ref, ref1, ref2, results, sx, sxs, sy, sys;\n        sxs = arg.sxs, sys = arg.sys;\n        this.renderer.sxss = this._build_discontinuous_object(sxs);\n        this.renderer.syss = this._build_discontinuous_object(sys);\n        results = [];\n        for (k = 0, len = indices.length; k < len; k++) {\n            i = indices[k];\n            ref = [sxs[i], sys[i]], sx = ref[0], sy = ref[1];\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                for (j = l = 0, ref1 = sx.length; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {\n                    if (j === 0) {\n                        ctx.beginPath();\n                        ctx.moveTo(sx[j], sy[j]);\n                        continue;\n                    }\n                    else if (isNaN(sx[j] + sy[j])) {\n                        ctx.closePath();\n                        ctx.fill();\n                        ctx.beginPath();\n                        continue;\n                    }\n                    else {\n                        ctx.lineTo(sx[j], sy[j]);\n                    }\n                }\n                ctx.closePath();\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                for (j = m = 0, ref2 = sx.length; 0 <= ref2 ? m < ref2 : m > ref2; j = 0 <= ref2 ? ++m : --m) {\n                    if (j === 0) {\n                        ctx.beginPath();\n                        ctx.moveTo(sx[j], sy[j]);\n                        continue;\n                    }\n                    else if (isNaN(sx[j] + sy[j])) {\n                        ctx.closePath();\n                        ctx.stroke();\n                        ctx.beginPath();\n                        continue;\n                    }\n                    else {\n                        ctx.lineTo(sx[j], sy[j]);\n                    }\n                }\n                ctx.closePath();\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    PatchesView.prototype._hit_point = function (geometry) {\n        var candidates, hits, i, idx, j, k, l, ref, ref1, ref2, result, sx, sxs, sy, sys, vx, vy, x, y;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        sx = this.renderer.plot_view.canvas.vx_to_sx(vx);\n        sy = this.renderer.plot_view.canvas.vy_to_sy(vy);\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        candidates = this.index.indices({\n            minX: x,\n            minY: y,\n            maxX: x,\n            maxY: y\n        });\n        hits = [];\n        for (i = k = 0, ref1 = candidates.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n            idx = candidates[i];\n            sxs = this.renderer.sxss[idx];\n            sys = this.renderer.syss[idx];\n            for (j = l = 0, ref2 = sxs.length; 0 <= ref2 ? l < ref2 : l > ref2; j = 0 <= ref2 ? ++l : --l) {\n                if (hittest.point_in_poly(sx, sy, sxs[j], sys[j])) {\n                    hits.push(idx);\n                }\n            }\n        }\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    PatchesView.prototype._get_snap_coord = function (array) {\n        var k, len, s, sum;\n        sum = 0;\n        for (k = 0, len = array.length; k < len; k++) {\n            s = array[k];\n            sum += s;\n        }\n        return sum / array.length;\n    };\n    PatchesView.prototype.scx = function (i, sx, sy) {\n        var j, k, ref, sxs, sys;\n        if (this.renderer.sxss[i].length === 1) {\n            return this._get_snap_coord(this.sxs[i]);\n        }\n        else {\n            sxs = this.renderer.sxss[i];\n            sys = this.renderer.syss[i];\n            for (j = k = 0, ref = sxs.length; 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {\n                if (hittest.point_in_poly(sx, sy, sxs[j], sys[j])) {\n                    return this._get_snap_coord(sxs[j]);\n                }\n            }\n        }\n        return null;\n    };\n    PatchesView.prototype.scy = function (i, sx, sy) {\n        var j, k, ref, sxs, sys;\n        if (this.renderer.syss[i].length === 1) {\n            return this._get_snap_coord(this.sys[i]);\n        }\n        else {\n            sxs = this.renderer.sxss[i];\n            sys = this.renderer.syss[i];\n            for (j = k = 0, ref = sxs.length; 0 <= ref ? k < ref : k > ref; j = 0 <= ref ? ++k : --k) {\n                if (hittest.point_in_poly(sx, sy, sxs[j], sys[j])) {\n                    return this._get_snap_coord(sys[j]);\n                }\n            }\n        }\n    };\n    PatchesView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return PatchesView;\n})(glyph_1.GlyphView);\nexports.Patches = (function (superClass) {\n    extend(Patches, superClass);\n    function Patches() {\n        return Patches.__super__.constructor.apply(this, arguments);\n    }\n    Patches.prototype.default_view = exports.PatchesView;\n    Patches.prototype.type = 'Patches';\n    Patches.coords([['xs', 'ys']]);\n    Patches.mixins(['line', 'fill']);\n    return Patches;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\nvar categorical_scale_1 = require(\"../scales/categorical_scale\");\nvar hittest = require(\"core/hittest\");\nexports.QuadView = (function (superClass) {\n    extend(QuadView, superClass);\n    function QuadView() {\n        return QuadView.__super__.constructor.apply(this, arguments);\n    }\n    QuadView.prototype._index_data = function () {\n        var b, bottom, i, j, l, left, map_to_synthetic, points, r, ref, right, t, top;\n        map_to_synthetic = function (scale, array) {\n            if (scale instanceof categorical_scale_1.CategoricalScale) {\n                return scale.v_compute(array, true);\n            }\n            else {\n                return array;\n            }\n        };\n        left = map_to_synthetic(this.renderer.xscale, this._left);\n        right = map_to_synthetic(this.renderer.xscale, this._right);\n        top = map_to_synthetic(this.renderer.yscale, this._top);\n        bottom = map_to_synthetic(this.renderer.yscale, this._bottom);\n        points = [];\n        for (i = j = 0, ref = left.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            l = left[i];\n            r = right[i];\n            t = top[i];\n            b = bottom[i];\n            if (isNaN(l + r + t + b) || !isFinite(l + r + t + b)) {\n                continue;\n            }\n            points.push({\n                minX: l,\n                minY: b,\n                maxX: r,\n                maxY: t,\n                i: i\n            });\n        }\n        return new spatial_1.RBush(points);\n    };\n    QuadView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, sbottom, sleft, sright, stop;\n        sleft = arg.sleft, sright = arg.sright, stop = arg.stop, sbottom = arg.sbottom;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sleft[i] + stop[i] + sright[i] + sbottom[i])) {\n                continue;\n            }\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fillRect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i]);\n            }\n            if (this.visuals.line.doit) {\n                ctx.beginPath();\n                ctx.rect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i]);\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    QuadView.prototype._hit_point = function (geometry) {\n        var hits, ref, result, vx, vy, x, y;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        hits = this.index.indices({\n            minX: x,\n            minY: y,\n            maxX: x,\n            maxY: y\n        });\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    QuadView.prototype.get_anchor_point = function (anchor, i, spt) {\n        var bottom, left, right, top;\n        left = Math.min(this.sleft[i], this.sright[i]);\n        right = Math.max(this.sright[i], this.sleft[i]);\n        top = Math.min(this.stop[i], this.sbottom[i]);\n        bottom = Math.max(this.sbottom[i], this.stop[i]);\n        switch (anchor) {\n            case 'top_left':\n                return {\n                    x: left,\n                    y: top\n                };\n            case 'top_center':\n                return {\n                    x: (left + right) / 2,\n                    y: top\n                };\n            case 'top_right':\n                return {\n                    x: right,\n                    y: top\n                };\n            case 'center_right':\n                return {\n                    x: right,\n                    y: (top + bottom) / 2\n                };\n            case 'bottom_right':\n                return {\n                    x: right,\n                    y: bottom\n                };\n            case 'bottom_center':\n                return {\n                    x: (left + right) / 2,\n                    y: bottom\n                };\n            case 'bottom_left':\n                return {\n                    x: left,\n                    y: bottom\n                };\n            case 'center_left':\n                return {\n                    x: left,\n                    y: (top + bottom) / 2\n                };\n            case 'center':\n                return {\n                    x: (left + right) / 2,\n                    y: (top + bottom) / 2\n                };\n        }\n    };\n    QuadView.prototype.scx = function (i) {\n        return (this.sleft[i] + this.sright[i]) / 2;\n    };\n    QuadView.prototype.scy = function (i) {\n        return (this.stop[i] + this.sbottom[i]) / 2;\n    };\n    QuadView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return QuadView;\n})(glyph_1.GlyphView);\nexports.Quad = (function (superClass) {\n    extend(Quad, superClass);\n    function Quad() {\n        return Quad.__super__.constructor.apply(this, arguments);\n    }\n    Quad.prototype.default_view = exports.QuadView;\n    Quad.prototype.type = 'Quad';\n    Quad.coords([['right', 'bottom'], ['left', 'top']]);\n    Quad.mixins(['line', 'fill']);\n    return Quad;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _qbb, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\n_qbb = function (u, v, w) {\n    var bd, t;\n    if (v === (u + w) / 2) {\n        return [u, w];\n    }\n    else {\n        t = (u - v) / (u - 2 * v + w);\n        bd = u * Math.pow(1 - t, 2) + 2 * v * (1 - t) * t + w * Math.pow(t, 2);\n        return [Math.min(u, w, bd), Math.max(u, w, bd)];\n    }\n};\nexports.QuadraticView = (function (superClass) {\n    extend(QuadraticView, superClass);\n    function QuadraticView() {\n        return QuadraticView.__super__.constructor.apply(this, arguments);\n    }\n    QuadraticView.prototype._index_data = function () {\n        var i, j, points, ref, ref1, ref2, x0, x1, y0, y1;\n        points = [];\n        for (i = j = 0, ref = this._x0.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            if (isNaN(this._x0[i] + this._x1[i] + this._y0[i] + this._y1[i] + this._cx[i] + this._cy[i])) {\n                continue;\n            }\n            ref1 = _qbb(this._x0[i], this._cx[i], this._x1[i]), x0 = ref1[0], x1 = ref1[1];\n            ref2 = _qbb(this._y0[i], this._cy[i], this._y1[i]), y0 = ref2[0], y1 = ref2[1];\n            points.push({\n                minX: x0,\n                minY: y0,\n                maxX: x1,\n                maxY: y1,\n                i: i\n            });\n        }\n        return new spatial_1.RBush(points);\n    };\n    QuadraticView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, scx, scy, sx0, sx1, sy0, sy1;\n        sx0 = arg.sx0, sy0 = arg.sy0, sx1 = arg.sx1, sy1 = arg.sy1, scx = arg.scx, scy = arg.scy;\n        if (this.visuals.line.doit) {\n            results = [];\n            for (j = 0, len = indices.length; j < len; j++) {\n                i = indices[j];\n                if (isNaN(sx0[i] + sy0[i] + sx1[i] + sy1[i] + scx[i] + scy[i])) {\n                    continue;\n                }\n                ctx.beginPath();\n                ctx.moveTo(sx0[i], sy0[i]);\n                ctx.quadraticCurveTo(scx[i], scy[i], sx1[i], sy1[i]);\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            return results;\n        }\n    };\n    QuadraticView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_line_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return QuadraticView;\n})(glyph_1.GlyphView);\nexports.Quadratic = (function (superClass) {\n    extend(Quadratic, superClass);\n    function Quadratic() {\n        return Quadratic.__super__.constructor.apply(this, arguments);\n    }\n    Quadratic.prototype.default_view = exports.QuadraticView;\n    Quadratic.prototype.type = 'Quadratic';\n    Quadratic.coords([['x0', 'y0'], ['x1', 'y1'], ['cx', 'cy']]);\n    Quadratic.mixins(['line']);\n    return Quadratic;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar p = require(\"core/properties\");\nexports.RayView = (function (superClass) {\n    extend(RayView, superClass);\n    function RayView() {\n        return RayView.__super__.constructor.apply(this, arguments);\n    }\n    RayView.prototype._map_data = function () {\n        return this.slength = this.sdist(this.renderer.xscale, this._x, this._length);\n    };\n    RayView.prototype._render = function (ctx, indices, arg) {\n        var _angle, height, i, inf_len, j, k, len, ref, results, slength, sx, sy, width;\n        sx = arg.sx, sy = arg.sy, slength = arg.slength, _angle = arg._angle;\n        if (this.visuals.line.doit) {\n            width = this.renderer.plot_view.frame._width.value;\n            height = this.renderer.plot_view.frame._height.value;\n            inf_len = 2 * (width + height);\n            for (i = j = 0, ref = slength.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                if (slength[i] === 0) {\n                    slength[i] = inf_len;\n                }\n            }\n            results = [];\n            for (k = 0, len = indices.length; k < len; k++) {\n                i = indices[k];\n                if (isNaN(sx[i] + sy[i] + _angle[i] + slength[i])) {\n                    continue;\n                }\n                ctx.translate(sx[i], sy[i]);\n                ctx.rotate(_angle[i]);\n                ctx.beginPath();\n                ctx.moveTo(0, 0);\n                ctx.lineTo(slength[i], 0);\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.stroke();\n                ctx.rotate(-_angle[i]);\n                results.push(ctx.translate(-sx[i], -sy[i]));\n            }\n            return results;\n        }\n    };\n    RayView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_line_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return RayView;\n})(xy_glyph_1.XYGlyphView);\nexports.Ray = (function (superClass) {\n    extend(Ray, superClass);\n    function Ray() {\n        return Ray.__super__.constructor.apply(this, arguments);\n    }\n    Ray.prototype.default_view = exports.RayView;\n    Ray.prototype.type = 'Ray';\n    Ray.mixins(['line']);\n    Ray.define({\n        length: [p.DistanceSpec],\n        angle: [p.AngleSpec]\n    });\n    return Ray;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nvar types_1 = require(\"core/util/types\");\nvar categorical_scale_1 = require(\"../scales/categorical_scale\");\nexports.RectView = (function (superClass) {\n    extend(RectView, superClass);\n    function RectView() {\n        return RectView.__super__.constructor.apply(this, arguments);\n    }\n    RectView.prototype._set_data = function () {\n        this.max_w2 = 0;\n        if (this.model.properties.width.units === \"data\") {\n            this.max_w2 = this.max_width / 2;\n        }\n        this.max_h2 = 0;\n        if (this.model.properties.height.units === \"data\") {\n            return this.max_h2 = this.max_height / 2;\n        }\n    };\n    RectView.prototype._map_data = function () {\n        var canvas, i, ref, ref1;\n        canvas = this.renderer.plot_view.canvas;\n        if (this.model.properties.width.units === \"data\") {\n            ref = this._map_dist_corner_for_data_side_length(this._x, this._width, this.renderer.xscale, canvas, 0), this.sw = ref[0], this.sx0 = ref[1];\n        }\n        else {\n            this.sw = this._width;\n            this.sx0 = (function () {\n                var j, ref1, results;\n                results = [];\n                for (i = j = 0, ref1 = this.sx.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n                    results.push(this.sx[i] - this.sw[i] / 2);\n                }\n                return results;\n            }).call(this);\n        }\n        if (this.model.properties.height.units === \"data\") {\n            ref1 = this._map_dist_corner_for_data_side_length(this._y, this._height, this.renderer.yscale, canvas, 1), this.sh = ref1[0], this.sy1 = ref1[1];\n        }\n        else {\n            this.sh = this._height;\n            this.sy1 = (function () {\n                var j, ref2, results;\n                results = [];\n                for (i = j = 0, ref2 = this.sy.length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {\n                    results.push(this.sy[i] - this.sh[i] / 2);\n                }\n                return results;\n            }).call(this);\n        }\n        return this.ssemi_diag = (function () {\n            var j, ref2, results;\n            results = [];\n            for (i = j = 0, ref2 = this.sw.length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {\n                results.push(Math.sqrt(this.sw[i] / 2 * this.sw[i] / 2 + this.sh[i] / 2 * this.sh[i] / 2));\n            }\n            return results;\n        }).call(this);\n    };\n    RectView.prototype._render = function (ctx, indices, arg) {\n        var _angle, i, j, k, len, len1, sh, sw, sx, sx0, sy, sy1;\n        sx = arg.sx, sy = arg.sy, sx0 = arg.sx0, sy1 = arg.sy1, sw = arg.sw, sh = arg.sh, _angle = arg._angle;\n        if (this.visuals.fill.doit) {\n            for (j = 0, len = indices.length; j < len; j++) {\n                i = indices[j];\n                if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i])) {\n                    continue;\n                }\n                this.visuals.fill.set_vectorize(ctx, i);\n                if (_angle[i]) {\n                    ctx.translate(sx[i], sy[i]);\n                    ctx.rotate(_angle[i]);\n                    ctx.fillRect(-sw[i] / 2, -sh[i] / 2, sw[i], sh[i]);\n                    ctx.rotate(-_angle[i]);\n                    ctx.translate(-sx[i], -sy[i]);\n                }\n                else {\n                    ctx.fillRect(sx0[i], sy1[i], sw[i], sh[i]);\n                }\n            }\n        }\n        if (this.visuals.line.doit) {\n            ctx.beginPath();\n            for (k = 0, len1 = indices.length; k < len1; k++) {\n                i = indices[k];\n                if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i])) {\n                    continue;\n                }\n                if (sw[i] === 0 || sh[i] === 0) {\n                    continue;\n                }\n                if (_angle[i]) {\n                    ctx.translate(sx[i], sy[i]);\n                    ctx.rotate(_angle[i]);\n                    ctx.rect(-sw[i] / 2, -sh[i] / 2, sw[i], sh[i]);\n                    ctx.rotate(-_angle[i]);\n                    ctx.translate(-sx[i], -sy[i]);\n                }\n                else {\n                    ctx.rect(sx0[i], sy1[i], sw[i], sh[i]);\n                }\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.stroke();\n                ctx.beginPath();\n            }\n            return ctx.stroke();\n        }\n    };\n    RectView.prototype._hit_rect = function (geometry) {\n        var bbox, ref, ref1, result, x0, x1, y0, y1;\n        ref = this.renderer.xscale.v_invert([geometry.vx0, geometry.vx1], true), x0 = ref[0], x1 = ref[1];\n        ref1 = this.renderer.yscale.v_invert([geometry.vy0, geometry.vy1], true), y0 = ref1[0], y1 = ref1[1];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = this.index.indices(bbox);\n        return result;\n    };\n    RectView.prototype._hit_point = function (geometry) {\n        var bbox, c, d, height_in, hits, i, j, len, max_x2_ddist, max_y2_ddist, px, py, ref, ref1, result, s, scenter_x, scenter_y, sx, sy, vx, vy, width_in, x, x0, x1, y, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        scenter_x = (function () {\n            var j, ref1, results;\n            results = [];\n            for (i = j = 0, ref1 = this.sx0.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n                results.push(this.sx0[i] + this.sw[i] / 2);\n            }\n            return results;\n        }).call(this);\n        scenter_y = (function () {\n            var j, ref1, results;\n            results = [];\n            for (i = j = 0, ref1 = this.sy1.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n                results.push(this.sy1[i] + this.sh[i] / 2);\n            }\n            return results;\n        }).call(this);\n        max_x2_ddist = array_1.max(this._ddist(0, scenter_x, this.ssemi_diag));\n        max_y2_ddist = array_1.max(this._ddist(1, scenter_y, this.ssemi_diag));\n        x0 = x - max_x2_ddist;\n        x1 = x + max_x2_ddist;\n        y0 = y - max_y2_ddist;\n        y1 = y + max_y2_ddist;\n        hits = [];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        ref1 = this.index.indices(bbox);\n        for (j = 0, len = ref1.length; j < len; j++) {\n            i = ref1[j];\n            sx = this.renderer.plot_view.canvas.vx_to_sx(vx);\n            sy = this.renderer.plot_view.canvas.vy_to_sy(vy);\n            if (this._angle[i]) {\n                d = Math.sqrt(Math.pow(sx - this.sx[i], 2) + Math.pow(sy - this.sy[i], 2));\n                s = Math.sin(-this._angle[i]);\n                c = Math.cos(-this._angle[i]);\n                px = c * (sx - this.sx[i]) - s * (sy - this.sy[i]) + this.sx[i];\n                py = s * (sx - this.sx[i]) + c * (sy - this.sy[i]) + this.sy[i];\n                sx = px;\n                sy = py;\n                width_in = Math.abs(this.sx[i] - sx) <= this.sw[i] / 2;\n                height_in = Math.abs(this.sy[i] - sy) <= this.sh[i] / 2;\n            }\n            else {\n                width_in = sx - this.sx0[i] <= this.sw[i] && sx - this.sx0[i] >= 0;\n                height_in = sy - this.sy1[i] <= this.sh[i] && sy - this.sy1[i] >= 0;\n            }\n            if (height_in && width_in) {\n                hits.push(i);\n            }\n        }\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    RectView.prototype._map_dist_corner_for_data_side_length = function (coord, side_length, scale, canvas, dim) {\n        var i, pt0, pt1, return_synthetic, sside_length, synthetic_pt, synthetic_pt_corner, vpt0, vpt1, vpt_corner;\n        if (types_1.isString(coord[0]) && scale instanceof categorical_scale_1.CategoricalScale) {\n            return_synthetic = true;\n            synthetic_pt = scale.v_compute(coord, return_synthetic);\n            if (dim === 0) {\n                synthetic_pt_corner = (function () {\n                    var j, ref, results;\n                    results = [];\n                    for (i = j = 0, ref = coord.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                        results.push(synthetic_pt[i] - side_length[i] / 2);\n                    }\n                    return results;\n                })();\n            }\n            else if (dim === 1) {\n                synthetic_pt_corner = (function () {\n                    var j, ref, results;\n                    results = [];\n                    for (i = j = 0, ref = coord.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                        results.push(synthetic_pt[i] + side_length[i] / 2);\n                    }\n                    return results;\n                })();\n            }\n            vpt_corner = scale.v_compute(synthetic_pt_corner);\n            sside_length = this.sdist(scale, coord, side_length, 'center', this.model.dilate);\n        }\n        else {\n            pt0 = (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = coord.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(Number(coord[i]) - side_length[i] / 2);\n                }\n                return results;\n            })();\n            pt1 = (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = coord.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(Number(coord[i]) + side_length[i] / 2);\n                }\n                return results;\n            })();\n            vpt0 = scale.v_compute(pt0);\n            vpt1 = scale.v_compute(pt1);\n            sside_length = this.sdist(scale, pt0, side_length, 'edge', this.model.dilate);\n            if (dim === 0) {\n                vpt_corner = vpt0[0] < vpt1[0] ? vpt0 : vpt1;\n            }\n            else if (dim === 1) {\n                vpt_corner = vpt0[0] < vpt1[0] ? vpt1 : vpt0;\n            }\n        }\n        if (dim === 0) {\n            return [sside_length, canvas.v_vx_to_sx(vpt_corner)];\n        }\n        else if (dim === 1) {\n            return [sside_length, canvas.v_vy_to_sy(vpt_corner)];\n        }\n    };\n    RectView.prototype._ddist = function (dim, spts, spans) {\n        var i, pt0, pt1, scale, vpt0, vpt1, vpts;\n        if (dim === 0) {\n            vpts = this.renderer.plot_view.canvas.v_sx_to_vx(spts);\n            scale = this.renderer.xscale;\n        }\n        else {\n            vpts = this.renderer.plot_view.canvas.v_vy_to_sy(spts);\n            scale = this.renderer.yscale;\n        }\n        vpt0 = vpts;\n        vpt1 = (function () {\n            var j, ref, results;\n            results = [];\n            for (i = j = 0, ref = vpt0.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                results.push(vpt0[i] + spans[i]);\n            }\n            return results;\n        })();\n        pt0 = scale.v_invert(vpt0);\n        pt1 = scale.v_invert(vpt1);\n        return (function () {\n            var j, ref, results;\n            results = [];\n            for (i = j = 0, ref = pt0.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                results.push(Math.abs(pt1[i] - pt0[i]));\n            }\n            return results;\n        })();\n    };\n    RectView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    RectView.prototype._bounds = function (bds) {\n        return this.max_wh2_bounds(bds);\n    };\n    return RectView;\n})(xy_glyph_1.XYGlyphView);\nexports.Rect = (function (superClass) {\n    extend(Rect, superClass);\n    function Rect() {\n        return Rect.__super__.constructor.apply(this, arguments);\n    }\n    Rect.prototype.default_view = exports.RectView;\n    Rect.prototype.type = 'Rect';\n    Rect.mixins(['line', 'fill']);\n    Rect.define({\n        angle: [p.AngleSpec, 0],\n        width: [p.DistanceSpec],\n        height: [p.DistanceSpec],\n        dilate: [p.Bool, false]\n    });\n    return Rect;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar hittest = require(\"core/hittest\");\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\nexports.SegmentView = (function (superClass) {\n    extend(SegmentView, superClass);\n    function SegmentView() {\n        return SegmentView.__super__.constructor.apply(this, arguments);\n    }\n    SegmentView.prototype._index_data = function () {\n        var i, j, points, ref;\n        points = [];\n        for (i = j = 0, ref = this._x0.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            if (!isNaN(this._x0[i] + this._x1[i] + this._y0[i] + this._y1[i])) {\n                points.push({\n                    minX: Math.min(this._x0[i], this._x1[i]),\n                    minY: Math.min(this._y0[i], this._y1[i]),\n                    maxX: Math.max(this._x0[i], this._x1[i]),\n                    maxY: Math.max(this._y0[i], this._y1[i]),\n                    i: i\n                });\n            }\n        }\n        return new spatial_1.RBush(points);\n    };\n    SegmentView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, sx0, sx1, sy0, sy1;\n        sx0 = arg.sx0, sy0 = arg.sy0, sx1 = arg.sx1, sy1 = arg.sy1;\n        if (this.visuals.line.doit) {\n            results = [];\n            for (j = 0, len = indices.length; j < len; j++) {\n                i = indices[j];\n                if (isNaN(sx0[i] + sy0[i] + sx1[i] + sy1[i])) {\n                    continue;\n                }\n                ctx.beginPath();\n                ctx.moveTo(sx0[i], sy0[i]);\n                ctx.lineTo(sx1[i], sy1[i]);\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            return results;\n        }\n    };\n    SegmentView.prototype._hit_point = function (geometry) {\n        var candidates, dist, hits, i, j, len, p0, p1, point, ref, ref1, result, threshold, vx, vy, x, y;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        point = {\n            x: this.renderer.plot_view.canvas.vx_to_sx(vx),\n            y: this.renderer.plot_view.canvas.vy_to_sy(vy)\n        };\n        hits = [];\n        candidates = this.index.indices({\n            minX: x,\n            minY: y,\n            maxX: x,\n            maxY: y\n        });\n        for (j = 0, len = candidates.length; j < len; j++) {\n            i = candidates[j];\n            threshold = Math.max(2, this.visuals.line.cache_select('line_width', i) / 2);\n            ref1 = [\n                {\n                    x: this.sx0[i],\n                    y: this.sy0[i]\n                }, {\n                    x: this.sx1[i],\n                    y: this.sy1[i]\n                }\n            ], p0 = ref1[0], p1 = ref1[1];\n            dist = hittest.dist_to_segment(point, p0, p1);\n            if (dist < threshold) {\n                hits.push(i);\n            }\n        }\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    SegmentView.prototype._hit_span = function (geometry) {\n        var candidates, hits, hr, i, j, len, ref, ref1, ref2, result, v0, v1, val, vr, vx, vy;\n        hr = this.renderer.plot_view.frame.h_range;\n        vr = this.renderer.plot_view.frame.v_range;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        if (geometry.direction === 'v') {\n            val = this.renderer.yscale.invert(vy);\n            ref1 = [this._y0, this._y1], v0 = ref1[0], v1 = ref1[1];\n        }\n        else {\n            val = this.renderer.xscale.invert(vx);\n            ref2 = [this._x0, this._x1], v0 = ref2[0], v1 = ref2[1];\n        }\n        hits = [];\n        candidates = this.index.indices({\n            minX: this.renderer.xscale.invert(hr.min),\n            minY: this.renderer.yscale.invert(vr.min),\n            maxX: this.renderer.xscale.invert(hr.max),\n            maxY: this.renderer.yscale.invert(vr.max)\n        });\n        for (j = 0, len = candidates.length; j < len; j++) {\n            i = candidates[j];\n            if ((v0[i] <= val && val <= v1[i]) || (v1[i] <= val && val <= v0[i])) {\n                hits.push(i);\n            }\n        }\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    SegmentView.prototype.scx = function (i) {\n        return (this.sx0[i] + this.sx1[i]) / 2;\n    };\n    SegmentView.prototype.scy = function (i) {\n        return (this.sy0[i] + this.sy1[i]) / 2;\n    };\n    SegmentView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_line_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return SegmentView;\n})(glyph_1.GlyphView);\nexports.Segment = (function (superClass) {\n    extend(Segment, superClass);\n    function Segment() {\n        return Segment.__super__.constructor.apply(this, arguments);\n    }\n    Segment.prototype.default_view = exports.SegmentView;\n    Segment.prototype.type = 'Segment';\n    Segment.coords([['x0', 'y0'], ['x1', 'y1']]);\n    Segment.mixins(['line']);\n    return Segment;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar p = require(\"core/properties\");\nexports.TextView = (function (superClass) {\n    extend(TextView, superClass);\n    function TextView() {\n        return TextView.__super__.constructor.apply(this, arguments);\n    }\n    TextView.prototype._render = function (ctx, indices, arg) {\n        var _angle, _text, _x_offset, _y_offset, i, j, len, results, sx, sy;\n        sx = arg.sx, sy = arg.sy, _x_offset = arg._x_offset, _y_offset = arg._y_offset, _angle = arg._angle, _text = arg._text;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + _x_offset[i] + _y_offset[i] + _angle[i]) || (_text[i] == null)) {\n                continue;\n            }\n            if (this.visuals.text.doit) {\n                ctx.save();\n                ctx.translate(sx[i] + _x_offset[i], sy[i] + _y_offset[i]);\n                ctx.rotate(_angle[i]);\n                this.visuals.text.set_vectorize(ctx, i);\n                ctx.fillText(_text[i], 0, 0);\n                results.push(ctx.restore());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    TextView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        ctx.save();\n        this.text_props.set_value(ctx);\n        ctx.font = this.text_props.font_value();\n        ctx.font = ctx.font.replace(/\\b[\\d\\.]+[\\w]+\\b/, '10pt');\n        ctx.textAlign = \"right\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"text\", x2, (y1 + y2) / 2);\n        return ctx.restore();\n    };\n    return TextView;\n})(xy_glyph_1.XYGlyphView);\nexports.Text = (function (superClass) {\n    extend(Text, superClass);\n    function Text() {\n        return Text.__super__.constructor.apply(this, arguments);\n    }\n    Text.prototype.default_view = exports.TextView;\n    Text.prototype.type = 'Text';\n    Text.mixins(['text']);\n    Text.define({\n        text: [\n            p.StringSpec, {\n                field: \"text\"\n            }\n        ],\n        angle: [p.AngleSpec, 0],\n        x_offset: [p.NumberSpec, 0],\n        y_offset: [p.NumberSpec, 0]\n    });\n    return Text;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\nvar categorical_scale_1 = require(\"../scales/categorical_scale\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nexports.VBarView = (function (superClass) {\n    extend(VBarView, superClass);\n    function VBarView() {\n        return VBarView.__super__.constructor.apply(this, arguments);\n    }\n    VBarView.prototype._map_data = function () {\n        var i, j, ref, vbottom, vtop;\n        this.sx = this.renderer.xscale.v_compute(this._x);\n        vtop = this.renderer.yscale.v_compute(this._top);\n        vbottom = this.renderer.yscale.v_compute(this._bottom);\n        this.stop = this.renderer.plot_view.canvas.v_vy_to_sy(vtop);\n        this.sbottom = this.renderer.plot_view.canvas.v_vy_to_sy(vbottom);\n        this.sleft = [];\n        this.sright = [];\n        this.sw = this.sdist(this.renderer.xscale, this._x, this._width, 'center');\n        for (i = j = 0, ref = this.sx.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            this.sleft.push(this.sx[i] - this.sw[i] / 2);\n            this.sright.push(this.sx[i] + this.sw[i] / 2);\n        }\n        return null;\n    };\n    VBarView.prototype._index_data = function () {\n        var b, bottom, i, j, l, map_to_synthetic, points, r, ref, t, top, width, x;\n        map_to_synthetic = function (scale, array) {\n            if (scale instanceof categorical_scale_1.CategoricalScale) {\n                return scale.v_compute(array, true);\n            }\n            else {\n                return array;\n            }\n        };\n        x = map_to_synthetic(this.renderer.xscale, this._x);\n        width = map_to_synthetic(this.renderer.xscale, this._width);\n        top = map_to_synthetic(this.renderer.yscale, this._top);\n        bottom = map_to_synthetic(this.renderer.yscale, this._bottom);\n        points = [];\n        for (i = j = 0, ref = x.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            l = x[i] - width[i] / 2;\n            r = x[i] + width[i] / 2;\n            t = top[i];\n            b = bottom[i];\n            if (isNaN(l + r + t + b) || !isFinite(l + r + t + b)) {\n                continue;\n            }\n            points.push({\n                minX: l,\n                minY: b,\n                maxX: r,\n                maxY: t,\n                i: i\n            });\n        }\n        return new spatial_1.RBush(points);\n    };\n    VBarView.prototype._render = function (ctx, indices, arg) {\n        var i, j, len, results, sbottom, sleft, sright, stop;\n        sleft = arg.sleft, sright = arg.sright, stop = arg.stop, sbottom = arg.sbottom;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sleft[i] + stop[i] + sright[i] + sbottom[i])) {\n                continue;\n            }\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fillRect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i]);\n            }\n            if (this.visuals.line.doit) {\n                ctx.beginPath();\n                ctx.rect(sleft[i], stop[i], sright[i] - sleft[i], sbottom[i] - stop[i]);\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    VBarView.prototype._hit_point = function (geometry) {\n        var hits, ref, result, vx, vy, x, y;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        hits = this.index.indices({\n            minX: x,\n            minY: y,\n            maxX: x,\n            maxY: y\n        });\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    VBarView.prototype.scy = function (i) {\n        return (this.stop[i] + this.sbottom[i]) / 2;\n    };\n    VBarView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return VBarView;\n})(glyph_1.GlyphView);\nexports.VBar = (function (superClass) {\n    extend(VBar, superClass);\n    function VBar() {\n        return VBar.__super__.constructor.apply(this, arguments);\n    }\n    VBar.prototype.default_view = exports.VBarView;\n    VBar.prototype.type = 'VBar';\n    VBar.mixins(['line', 'fill']);\n    VBar.define({\n        x: [p.NumberSpec],\n        width: [p.DistanceSpec],\n        top: [p.NumberSpec],\n        bottom: [p.NumberSpec, 0]\n    });\n    return VBar;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"./xy_glyph\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nvar math_1 = require(\"core/util/math\");\nexports.WedgeView = (function (superClass) {\n    extend(WedgeView, superClass);\n    function WedgeView() {\n        return WedgeView.__super__.constructor.apply(this, arguments);\n    }\n    WedgeView.prototype._map_data = function () {\n        if (this.model.properties.radius.units === \"data\") {\n            return this.sradius = this.sdist(this.renderer.xscale, this._x, this._radius);\n        }\n        else {\n            return this.sradius = this._radius;\n        }\n    };\n    WedgeView.prototype._render = function (ctx, indices, arg) {\n        var _end_angle, _start_angle, direction, i, j, len, results, sradius, sx, sy;\n        sx = arg.sx, sy = arg.sy, sradius = arg.sradius, _start_angle = arg._start_angle, _end_angle = arg._end_angle;\n        direction = this.model.properties.direction.value();\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + sradius[i] + _start_angle[i] + _end_angle[i])) {\n                continue;\n            }\n            ctx.beginPath();\n            ctx.arc(sx[i], sy[i], sradius[i], _start_angle[i], _end_angle[i], direction);\n            ctx.lineTo(sx[i], sy[i]);\n            ctx.closePath();\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                results.push(ctx.stroke());\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    WedgeView.prototype._hit_point = function (geometry) {\n        var angle, bbox, candidates, direction, dist, hits, i, j, k, len, len1, r2, ref, ref1, ref2, ref3, ref4, sx, sx0, sx1, sy, sy0, sy1, vx, vx0, vx1, vy, vy0, vy1, x, x0, x1, y, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        x = this.renderer.xscale.invert(vx, true);\n        y = this.renderer.yscale.invert(vy, true);\n        if (this.model.properties.radius.units === \"data\") {\n            x0 = x - this.max_radius;\n            x1 = x + this.max_radius;\n            y0 = y - this.max_radius;\n            y1 = y + this.max_radius;\n        }\n        else {\n            vx0 = vx - this.max_radius;\n            vx1 = vx + this.max_radius;\n            ref1 = this.renderer.xscale.v_invert([vx0, vx1], true), x0 = ref1[0], x1 = ref1[1];\n            vy0 = vy - this.max_radius;\n            vy1 = vy + this.max_radius;\n            ref2 = this.renderer.yscale.v_invert([vy0, vy1], true), y0 = ref2[0], y1 = ref2[1];\n        }\n        candidates = [];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        ref3 = this.index.indices(bbox);\n        for (j = 0, len = ref3.length; j < len; j++) {\n            i = ref3[j];\n            r2 = Math.pow(this.sradius[i], 2);\n            sx0 = this.renderer.xscale.compute(x, true);\n            sx1 = this.renderer.xscale.compute(this._x[i], true);\n            sy0 = this.renderer.yscale.compute(y, true);\n            sy1 = this.renderer.yscale.compute(this._y[i], true);\n            dist = Math.pow(sx0 - sx1, 2) + Math.pow(sy0 - sy1, 2);\n            if (dist <= r2) {\n                candidates.push([i, dist]);\n            }\n        }\n        direction = this.model.properties.direction.value();\n        hits = [];\n        for (k = 0, len1 = candidates.length; k < len1; k++) {\n            ref4 = candidates[k], i = ref4[0], dist = ref4[1];\n            sx = this.renderer.plot_view.canvas.vx_to_sx(vx);\n            sy = this.renderer.plot_view.canvas.vy_to_sy(vy);\n            angle = Math.atan2(sy - this.sy[i], sx - this.sx[i]);\n            if (math_1.angle_between(-angle, -this._start_angle[i], -this._end_angle[i], direction)) {\n                hits.push([i, dist]);\n            }\n        }\n        return hittest.create_1d_hit_test_result(hits);\n    };\n    WedgeView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        return this._generic_area_legend(ctx, x0, x1, y0, y1, index);\n    };\n    return WedgeView;\n})(xy_glyph_1.XYGlyphView);\nexports.Wedge = (function (superClass) {\n    extend(Wedge, superClass);\n    function Wedge() {\n        return Wedge.__super__.constructor.apply(this, arguments);\n    }\n    Wedge.prototype.default_view = exports.WedgeView;\n    Wedge.prototype.type = 'Wedge';\n    Wedge.mixins(['line', 'fill']);\n    Wedge.define({\n        direction: [p.Direction, 'anticlock'],\n        radius: [p.DistanceSpec],\n        start_angle: [p.AngleSpec],\n        end_angle: [p.AngleSpec]\n    });\n    return Wedge;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar spatial_1 = require(\"core/util/spatial\");\nvar glyph_1 = require(\"./glyph\");\nvar categorical_scale_1 = require(\"../scales/categorical_scale\");\nexports.XYGlyphView = (function (superClass) {\n    extend(XYGlyphView, superClass);\n    function XYGlyphView() {\n        return XYGlyphView.__super__.constructor.apply(this, arguments);\n    }\n    XYGlyphView.prototype._index_data = function () {\n        var i, j, points, ref, x, xx, y, yy;\n        if (this.renderer.xscale instanceof categorical_scale_1.CategoricalScale) {\n            xx = this.renderer.xscale.v_compute(this._x, true);\n        }\n        else {\n            xx = this._x;\n        }\n        if (this.renderer.yscale instanceof categorical_scale_1.CategoricalScale) {\n            yy = this.renderer.yscale.v_compute(this._y, true);\n        }\n        else {\n            yy = this._y;\n        }\n        points = [];\n        for (i = j = 0, ref = xx.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            x = xx[i];\n            if (isNaN(x) || !isFinite(x)) {\n                continue;\n            }\n            y = yy[i];\n            if (isNaN(y) || !isFinite(y)) {\n                continue;\n            }\n            points.push({\n                minX: x,\n                minY: y,\n                maxX: x,\n                maxY: y,\n                i: i\n            });\n        }\n        return new spatial_1.RBush(points);\n    };\n    return XYGlyphView;\n})(glyph_1.GlyphView);\nexports.XYGlyph = (function (superClass) {\n    extend(XYGlyph, superClass);\n    function XYGlyph() {\n        return XYGlyph.__super__.constructor.apply(this, arguments);\n    }\n    XYGlyph.prototype.type = \"XYGlyph\";\n    XYGlyph.prototype.default_view = exports.XYGlyphView;\n    XYGlyph.coords([['x', 'y']]);\n    return XYGlyph;\n})(glyph_1.Glyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar guide_renderer_1 = require(\"../renderers/guide_renderer\");\nvar renderer_1 = require(\"../renderers/renderer\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.GridView = (function (superClass) {\n    extend(GridView, superClass);\n    function GridView() {\n        return GridView.__super__.constructor.apply(this, arguments);\n    }\n    GridView.prototype.initialize = function (attrs, options) {\n        GridView.__super__.initialize.call(this, attrs, options);\n        this._x_range_name = this.model.x_range_name;\n        return this._y_range_name = this.model.y_range_name;\n    };\n    GridView.prototype.render = function () {\n        var ctx;\n        if (this.model.visible === false) {\n            return;\n        }\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        this._draw_regions(ctx);\n        this._draw_minor_grids(ctx);\n        this._draw_grids(ctx);\n        return ctx.restore();\n    };\n    GridView.prototype.connect_signals = function () {\n        GridView.__super__.connect_signals.call(this);\n        return this.connect(this.model.change, function () {\n            return this.request_render();\n        });\n    };\n    GridView.prototype._draw_regions = function (ctx) {\n        var i, k, ref, ref1, ref2, ref3, sx0, sx1, sy0, sy1, xs, ys;\n        if (!this.visuals.band_fill.doit) {\n            return;\n        }\n        ref = this.model.grid_coords('major', false), xs = ref[0], ys = ref[1];\n        this.visuals.band_fill.set_value(ctx);\n        for (i = k = 0, ref1 = xs.length - 1; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n            if (i % 2 === 1) {\n                ref2 = this.plot_view.map_to_screen(xs[i], ys[i], this._x_range_name, this._y_range_name), sx0 = ref2[0], sy0 = ref2[1];\n                ref3 = this.plot_view.map_to_screen(xs[i + 1], ys[i + 1], this._x_range_name, this._y_range_name), sx1 = ref3[0], sy1 = ref3[1];\n                ctx.fillRect(sx0[0], sy0[0], sx1[1] - sx0[0], sy1[1] - sy0[0]);\n                ctx.fill();\n            }\n        }\n    };\n    GridView.prototype._draw_grids = function (ctx) {\n        var ref, xs, ys;\n        if (!this.visuals.grid_line.doit) {\n            return;\n        }\n        ref = this.model.grid_coords('major'), xs = ref[0], ys = ref[1];\n        return this._draw_grid_helper(ctx, this.visuals.grid_line, xs, ys);\n    };\n    GridView.prototype._draw_minor_grids = function (ctx) {\n        var ref, xs, ys;\n        if (!this.visuals.minor_grid_line.doit) {\n            return;\n        }\n        ref = this.model.grid_coords('minor'), xs = ref[0], ys = ref[1];\n        return this._draw_grid_helper(ctx, this.visuals.minor_grid_line, xs, ys);\n    };\n    GridView.prototype._draw_grid_helper = function (ctx, props, xs, ys) {\n        var i, k, l, ref, ref1, ref2, sx, sy;\n        props.set_value(ctx);\n        for (i = k = 0, ref = xs.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            ref1 = this.plot_view.map_to_screen(xs[i], ys[i], this._x_range_name, this._y_range_name), sx = ref1[0], sy = ref1[1];\n            ctx.beginPath();\n            ctx.moveTo(Math.round(sx[0]), Math.round(sy[0]));\n            for (i = l = 1, ref2 = sx.length; 1 <= ref2 ? l < ref2 : l > ref2; i = 1 <= ref2 ? ++l : --l) {\n                ctx.lineTo(Math.round(sx[i]), Math.round(sy[i]));\n            }\n            ctx.stroke();\n        }\n    };\n    return GridView;\n})(renderer_1.RendererView);\nexports.Grid = (function (superClass) {\n    extend(Grid, superClass);\n    function Grid() {\n        return Grid.__super__.constructor.apply(this, arguments);\n    }\n    Grid.prototype.default_view = exports.GridView;\n    Grid.prototype.type = 'Grid';\n    Grid.mixins(['line:grid_', 'line:minor_grid_', 'fill:band_']);\n    Grid.define({\n        bounds: [p.Any, 'auto'],\n        dimension: [p.Number, 0],\n        ticker: [p.Instance],\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default']\n    });\n    Grid.override({\n        level: \"underlay\",\n        band_fill_color: null,\n        band_fill_alpha: 0,\n        grid_line_color: '#e5e5e5',\n        minor_grid_line_color: null\n    });\n    Grid.prototype.ranges = function () {\n        var frame, i, j, ranges;\n        i = this.dimension;\n        j = (i + 1) % 2;\n        frame = this.plot.plot_canvas.frame;\n        ranges = [frame.x_ranges[this.x_range_name], frame.y_ranges[this.y_range_name]];\n        return [ranges[i], ranges[j]];\n    };\n    Grid.prototype.computed_bounds = function () {\n        var cross_range, end, range, range_bounds, ref, start, user_bounds;\n        ref = this.ranges(), range = ref[0], cross_range = ref[1];\n        user_bounds = this.bounds;\n        range_bounds = [range.min, range.max];\n        if (types_1.isArray(user_bounds)) {\n            start = Math.min(user_bounds[0], user_bounds[1]);\n            end = Math.max(user_bounds[0], user_bounds[1]);\n            if (start < range_bounds[0]) {\n                start = range_bounds[0];\n            }\n            else if (start > range_bounds[1]) {\n                start = null;\n            }\n            if (end > range_bounds[1]) {\n                end = range_bounds[1];\n            }\n            else if (end < range_bounds[0]) {\n                end = null;\n            }\n        }\n        else {\n            start = range_bounds[0], end = range_bounds[1];\n        }\n        return [start, end];\n    };\n    Grid.prototype.grid_coords = function (location, exclude_ends) {\n        var N, cmax, cmin, coords, cross_range, dim_i, dim_j, end, i, ii, j, k, l, loc, max, min, n, range, ref, ref1, ref2, ref3, start, ticks, tmp;\n        if (exclude_ends == null) {\n            exclude_ends = true;\n        }\n        i = this.dimension;\n        j = (i + 1) % 2;\n        ref = this.ranges(), range = ref[0], cross_range = ref[1];\n        ref1 = this.computed_bounds(), start = ref1[0], end = ref1[1];\n        tmp = Math.min(start, end);\n        end = Math.max(start, end);\n        start = tmp;\n        ticks = this.ticker.get_ticks(start, end, range, cross_range.min, {})[location];\n        min = range.min;\n        max = range.max;\n        cmin = cross_range.min;\n        cmax = cross_range.max;\n        coords = [[], []];\n        for (ii = k = 0, ref2 = ticks.length; 0 <= ref2 ? k < ref2 : k > ref2; ii = 0 <= ref2 ? ++k : --k) {\n            if ((ticks[ii] === min || ticks[ii] === max) && exclude_ends) {\n                continue;\n            }\n            dim_i = [];\n            dim_j = [];\n            N = 2;\n            for (n = l = 0, ref3 = N; 0 <= ref3 ? l < ref3 : l > ref3; n = 0 <= ref3 ? ++l : --l) {\n                loc = cmin + (cmax - cmin) / (N - 1) * n;\n                dim_i.push(ticks[ii]);\n                dim_j.push(loc);\n            }\n            coords[i].push(dim_i);\n            coords[j].push(dim_j);\n        }\n        return coords;\n    };\n    return Grid;\n})(guide_renderer_1.GuideRenderer);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar grid_1 = require(\"./grid\");\nexports.Grid = grid_1.Grid;\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./annotations\"));\n__export(require(\"./axes\"));\n__export(require(\"./callbacks\"));\n__export(require(\"./canvas\"));\n__export(require(\"./formatters\"));\n__export(require(\"./glyphs\"));\n__export(require(\"./grids\"));\n__export(require(\"./layouts\"));\n__export(require(\"./mappers\"));\n__export(require(\"./transforms\"));\n__export(require(\"./markers\"));\n__export(require(\"./plots\"));\n__export(require(\"./ranges\"));\n__export(require(\"./renderers\"));\n__export(require(\"./scales\"));\n__export(require(\"./sources\"));\n__export(require(\"./tickers\"));\n__export(require(\"./tiles\"));\n__export(require(\"./tools\"));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar solver_1 = require(\"core/layout/solver\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nvar object_1 = require(\"core/util/object\");\nvar layout_dom_1 = require(\"./layout_dom\");\nexports.BoxView = (function (superClass) {\n    extend1(BoxView, superClass);\n    function BoxView() {\n        return BoxView.__super__.constructor.apply(this, arguments);\n    }\n    BoxView.prototype.className = \"bk-grid\";\n    BoxView.prototype.connect_signals = function () {\n        BoxView.__super__.connect_signals.call(this);\n        return this.connect(this.model.properties.children.change, (function (_this) {\n            return function () {\n                return _this.rebuild_child_views();\n            };\n        })(this));\n    };\n    BoxView.prototype.get_height = function () {\n        var child_heights, children, height;\n        children = this.model.get_layoutable_children();\n        child_heights = children.map(function (child) {\n            return child._height.value;\n        });\n        if (this.model._horizontal) {\n            height = array_1.max(child_heights);\n        }\n        else {\n            height = array_1.sum(child_heights);\n        }\n        return height;\n    };\n    BoxView.prototype.get_width = function () {\n        var child_widths, children, width;\n        children = this.model.get_layoutable_children();\n        child_widths = children.map(function (child) {\n            return child._width.value;\n        });\n        if (this.model._horizontal) {\n            width = array_1.sum(child_widths);\n        }\n        else {\n            width = array_1.max(child_widths);\n        }\n        return width;\n    };\n    return BoxView;\n})(layout_dom_1.LayoutDOMView);\nexports.Box = (function (superClass) {\n    extend1(Box, superClass);\n    Box.prototype.default_view = exports.BoxView;\n    function Box(attrs, options) {\n        Box.__super__.constructor.call(this, attrs, options);\n        this._child_equal_size_width = new solver_1.Variable();\n        this._child_equal_size_height = new solver_1.Variable();\n        this._box_equal_size_top = new solver_1.Variable();\n        this._box_equal_size_bottom = new solver_1.Variable();\n        this._box_equal_size_left = new solver_1.Variable();\n        this._box_equal_size_right = new solver_1.Variable();\n        this._box_cell_align_top = new solver_1.Variable();\n        this._box_cell_align_bottom = new solver_1.Variable();\n        this._box_cell_align_left = new solver_1.Variable();\n        this._box_cell_align_right = new solver_1.Variable();\n    }\n    Box.define({\n        children: [p.Array, []]\n    });\n    Box.internal({\n        spacing: [p.Number, 6]\n    });\n    Box.prototype.get_layoutable_children = function () {\n        return this.children;\n    };\n    Box.prototype.get_edit_variables = function () {\n        var child, edit_variables, j, len, ref;\n        edit_variables = Box.__super__.get_edit_variables.call(this);\n        ref = this.get_layoutable_children();\n        for (j = 0, len = ref.length; j < len; j++) {\n            child = ref[j];\n            edit_variables = edit_variables.concat(child.get_edit_variables());\n        }\n        return edit_variables;\n    };\n    Box.prototype.get_constrained_variables = function () {\n        return object_1.extend({}, Box.__super__.get_constrained_variables.call(this), {\n            box_equal_size_top: this._box_equal_size_top,\n            box_equal_size_bottom: this._box_equal_size_bottom,\n            box_equal_size_left: this._box_equal_size_left,\n            box_equal_size_right: this._box_equal_size_right,\n            box_cell_align_top: this._box_cell_align_top,\n            box_cell_align_bottom: this._box_cell_align_bottom,\n            box_cell_align_left: this._box_cell_align_left,\n            box_cell_align_right: this._box_cell_align_right\n        });\n    };\n    Box.prototype.get_constraints = function () {\n        var child, children, constraints, i, j, k, last, len, next, rect, ref, vars;\n        constraints = [];\n        children = this.get_layoutable_children();\n        if (children.length === 0) {\n            return constraints;\n        }\n        for (j = 0, len = children.length; j < len; j++) {\n            child = children[j];\n            vars = child.get_constrained_variables();\n            rect = this._child_rect(vars);\n            if (this._horizontal) {\n                if (vars.height != null) {\n                    constraints.push(solver_1.EQ(rect.height, [-1, this._height]));\n                }\n            }\n            else {\n                if (vars.width != null) {\n                    constraints.push(solver_1.EQ(rect.width, [-1, this._width]));\n                }\n            }\n            if (this._horizontal) {\n                if ((vars.box_equal_size_left != null) && (vars.box_equal_size_right != null) && (vars.width != null)) {\n                    constraints.push(solver_1.EQ([-1, vars.box_equal_size_left], [-1, vars.box_equal_size_right], vars.width, this._child_equal_size_width));\n                }\n            }\n            else {\n                if ((vars.box_equal_size_top != null) && (vars.box_equal_size_bottom != null) && (vars.height != null)) {\n                    constraints.push(solver_1.EQ([-1, vars.box_equal_size_top], [-1, vars.box_equal_size_bottom], vars.height, this._child_equal_size_height));\n                }\n            }\n            constraints = constraints.concat(child.get_constraints());\n        }\n        last = this._info(children[0].get_constrained_variables());\n        constraints.push(solver_1.EQ(last.span.start, 0));\n        for (i = k = 1, ref = children.length; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {\n            next = this._info(children[i].get_constrained_variables());\n            if (last.span.size) {\n                constraints.push(solver_1.EQ(last.span.start, last.span.size, [-1, next.span.start]));\n            }\n            constraints.push(solver_1.WEAK_EQ(last.whitespace.after, next.whitespace.before, 0 - this.spacing));\n            constraints.push(solver_1.GE(last.whitespace.after, next.whitespace.before, 0 - this.spacing));\n            last = next;\n        }\n        if (this._horizontal) {\n            if (vars.width != null) {\n                constraints.push(solver_1.EQ(last.span.start, last.span.size, [-1, this._width]));\n            }\n        }\n        else {\n            if (vars.height != null) {\n                constraints.push(solver_1.EQ(last.span.start, last.span.size, [-1, this._height]));\n            }\n        }\n        constraints = constraints.concat(this._align_outer_edges_constraints(true), this._align_outer_edges_constraints(false), this._align_inner_cell_edges_constraints(), this._box_equal_size_bounds(true), this._box_equal_size_bounds(false), this._box_cell_align_bounds(true), this._box_cell_align_bounds(false), this._box_whitespace(true), this._box_whitespace(false));\n        return constraints;\n    };\n    Box.prototype._child_rect = function (vars) {\n        return {\n            x: vars.origin_x,\n            y: vars.origin_y,\n            width: vars.width,\n            height: vars.height\n        };\n    };\n    Box.prototype._span = function (rect) {\n        if (this._horizontal) {\n            return {\n                start: rect.x,\n                size: rect.width\n            };\n        }\n        else {\n            return {\n                start: rect.y,\n                size: rect.height\n            };\n        }\n    };\n    Box.prototype._info = function (vars) {\n        var span, whitespace;\n        if (this._horizontal) {\n            whitespace = {\n                before: vars.whitespace_left,\n                after: vars.whitespace_right\n            };\n        }\n        else {\n            whitespace = {\n                before: vars.whitespace_top,\n                after: vars.whitespace_bottom\n            };\n        }\n        span = this._span(this._child_rect(vars));\n        return {\n            span: span,\n            whitespace: whitespace\n        };\n    };\n    Box.prototype._flatten_cell_edge_variables = function (horizontal) {\n        var add_path, all_vars, arity, cell, cell_vars, child, children, direction, flattened, j, k, key, kind, len, len1, name, new_key, parsed, path, relevant_edges, variables;\n        if (horizontal) {\n            relevant_edges = Box._top_bottom_inner_cell_edge_variables;\n        }\n        else {\n            relevant_edges = Box._left_right_inner_cell_edge_variables;\n        }\n        add_path = horizontal !== this._horizontal;\n        children = this.get_layoutable_children();\n        arity = children.length;\n        flattened = {};\n        cell = 0;\n        for (j = 0, len = children.length; j < len; j++) {\n            child = children[j];\n            if (child instanceof Box) {\n                cell_vars = child._flatten_cell_edge_variables(horizontal);\n            }\n            else {\n                cell_vars = {};\n            }\n            all_vars = child.get_constrained_variables();\n            for (k = 0, len1 = relevant_edges.length; k < len1; k++) {\n                name = relevant_edges[k];\n                if (name in all_vars) {\n                    cell_vars[name] = [all_vars[name]];\n                }\n            }\n            for (key in cell_vars) {\n                variables = cell_vars[key];\n                if (add_path) {\n                    parsed = key.split(\" \");\n                    kind = parsed[0];\n                    if (parsed.length > 1) {\n                        path = parsed[1];\n                    }\n                    else {\n                        path = \"\";\n                    }\n                    if (this._horizontal) {\n                        direction = \"row\";\n                    }\n                    else {\n                        direction = \"col\";\n                    }\n                    new_key = kind + \" \" + direction + \"-\" + arity + \"-\" + cell + \"-\" + path;\n                }\n                else {\n                    new_key = key;\n                }\n                if (new_key in flattened) {\n                    flattened[new_key] = flattened[new_key].concat(variables);\n                }\n                else {\n                    flattened[new_key] = variables;\n                }\n            }\n            cell = cell + 1;\n        }\n        return flattened;\n    };\n    Box.prototype._align_inner_cell_edges_constraints = function () {\n        var constraints, flattened, i, j, key, last, ref, variables;\n        constraints = [];\n        if ((this.document != null) && indexOf.call(this.document.roots(), this) >= 0) {\n            flattened = this._flatten_cell_edge_variables(this._horizontal);\n            for (key in flattened) {\n                variables = flattened[key];\n                if (variables.length > 1) {\n                    last = variables[0];\n                    for (i = j = 1, ref = variables.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {\n                        constraints.push(solver_1.EQ(variables[i], [-1, last]));\n                    }\n                }\n            }\n        }\n        return constraints;\n    };\n    Box.prototype._find_edge_leaves = function (horizontal) {\n        var child, child_leaves, children, end, j, leaves, len, start;\n        children = this.get_layoutable_children();\n        leaves = [[], []];\n        if (children.length > 0) {\n            if (this._horizontal === horizontal) {\n                start = children[0];\n                end = children[children.length - 1];\n                if (start instanceof Box) {\n                    leaves[0] = leaves[0].concat(start._find_edge_leaves(horizontal)[0]);\n                }\n                else {\n                    leaves[0].push(start);\n                }\n                if (end instanceof Box) {\n                    leaves[1] = leaves[1].concat(end._find_edge_leaves(horizontal)[1]);\n                }\n                else {\n                    leaves[1].push(end);\n                }\n            }\n            else {\n                for (j = 0, len = children.length; j < len; j++) {\n                    child = children[j];\n                    if (child instanceof Box) {\n                        child_leaves = child._find_edge_leaves(horizontal);\n                        leaves[0] = leaves[0].concat(child_leaves[0]);\n                        leaves[1] = leaves[1].concat(child_leaves[1]);\n                    }\n                    else {\n                        leaves[0].push(child);\n                        leaves[1].push(child);\n                    }\n                }\n            }\n        }\n        return leaves;\n    };\n    Box.prototype._align_outer_edges_constraints = function (horizontal) {\n        var add_all_equal, collect_vars, end_edges, end_leaves, end_variable, ref, result, start_edges, start_leaves, start_variable;\n        ref = this._find_edge_leaves(horizontal), start_leaves = ref[0], end_leaves = ref[1];\n        if (horizontal) {\n            start_variable = 'on_edge_align_left';\n            end_variable = 'on_edge_align_right';\n        }\n        else {\n            start_variable = 'on_edge_align_top';\n            end_variable = 'on_edge_align_bottom';\n        }\n        collect_vars = function (leaves, name) {\n            var edges, j, leaf, len, vars;\n            edges = [];\n            for (j = 0, len = leaves.length; j < len; j++) {\n                leaf = leaves[j];\n                vars = leaf.get_constrained_variables();\n                if (name in vars) {\n                    edges.push(vars[name]);\n                }\n            }\n            return edges;\n        };\n        start_edges = collect_vars(start_leaves, start_variable);\n        end_edges = collect_vars(end_leaves, end_variable);\n        result = [];\n        add_all_equal = function (edges) {\n            var edge, first, i, j, ref1;\n            if (edges.length > 1) {\n                first = edges[0];\n                for (i = j = 1, ref1 = edges.length; 1 <= ref1 ? j < ref1 : j > ref1; i = 1 <= ref1 ? ++j : --j) {\n                    edge = edges[i];\n                    result.push(solver_1.EQ([-1, first], edge));\n                }\n                return null;\n            }\n        };\n        add_all_equal(start_edges);\n        add_all_equal(end_edges);\n        return result;\n    };\n    Box.prototype._box_insets_from_child_insets = function (horizontal, child_variable_prefix, our_variable_prefix, minimum) {\n        var add_constraints, end_leaves, end_variable, our_end, our_start, ref, result, start_leaves, start_variable;\n        ref = this._find_edge_leaves(horizontal), start_leaves = ref[0], end_leaves = ref[1];\n        if (horizontal) {\n            start_variable = child_variable_prefix + \"_left\";\n            end_variable = child_variable_prefix + \"_right\";\n            our_start = this[our_variable_prefix + \"_left\"];\n            our_end = this[our_variable_prefix + \"_right\"];\n        }\n        else {\n            start_variable = child_variable_prefix + \"_top\";\n            end_variable = child_variable_prefix + \"_bottom\";\n            our_start = this[our_variable_prefix + \"_top\"];\n            our_end = this[our_variable_prefix + \"_bottom\"];\n        }\n        result = [];\n        add_constraints = function (ours, leaves, name) {\n            var edges, j, leaf, len, vars;\n            edges = [];\n            for (j = 0, len = leaves.length; j < len; j++) {\n                leaf = leaves[j];\n                vars = leaf.get_constrained_variables();\n                if (name in vars) {\n                    if (minimum) {\n                        result.push(solver_1.GE([-1, ours], vars[name]));\n                    }\n                    else {\n                        result.push(solver_1.EQ([-1, ours], vars[name]));\n                    }\n                }\n            }\n            return null;\n        };\n        add_constraints(our_start, start_leaves, start_variable);\n        add_constraints(our_end, end_leaves, end_variable);\n        return result;\n    };\n    Box.prototype._box_equal_size_bounds = function (horizontal) {\n        return this._box_insets_from_child_insets(horizontal, 'box_equal_size', '_box_equal_size', false);\n    };\n    Box.prototype._box_cell_align_bounds = function (horizontal) {\n        return this._box_insets_from_child_insets(horizontal, 'box_cell_align', '_box_cell_align', false);\n    };\n    Box.prototype._box_whitespace = function (horizontal) {\n        return this._box_insets_from_child_insets(horizontal, 'whitespace', '_whitespace', true);\n    };\n    Box._left_right_inner_cell_edge_variables = ['box_cell_align_left', 'box_cell_align_right'];\n    Box._top_bottom_inner_cell_edge_variables = ['box_cell_align_top', 'box_cell_align_bottom'];\n    return Box;\n})(layout_dom_1.LayoutDOM);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar box_1 = require(\"./box\");\nexports.ColumnView = (function (superClass) {\n    extend(ColumnView, superClass);\n    function ColumnView() {\n        return ColumnView.__super__.constructor.apply(this, arguments);\n    }\n    ColumnView.prototype.className = \"bk-grid-column\";\n    return ColumnView;\n})(box_1.BoxView);\nexports.Column = (function (superClass) {\n    extend(Column, superClass);\n    Column.prototype.type = 'Column';\n    Column.prototype.default_view = exports.ColumnView;\n    function Column(attrs, options) {\n        Column.__super__.constructor.call(this, attrs, options);\n        this._horizontal = false;\n    }\n    return Column;\n})(box_1.Box);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar box_1 = require(\"./box\");\nexports.Box = box_1.Box;\nvar column_1 = require(\"./column\");\nexports.Column = column_1.Column;\nvar layout_dom_1 = require(\"./layout_dom\");\nexports.LayoutDOM = layout_dom_1.LayoutDOM;\nvar row_1 = require(\"./row\");\nexports.Row = row_1.Row;\nvar spacer_1 = require(\"./spacer\");\nexports.Spacer = spacer_1.Spacer;\nvar widget_box_1 = require(\"./widget_box\");\nexports.WidgetBox = widget_box_1.WidgetBox;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nvar solver_1 = require(\"core/layout/solver\");\nvar build_views_1 = require(\"core/build_views\");\nvar dom_view_1 = require(\"core/dom_view\");\nvar logging_1 = require(\"core/logging\");\nexports.LayoutDOMView = (function (superClass) {\n    extend1(LayoutDOMView, superClass);\n    function LayoutDOMView() {\n        return LayoutDOMView.__super__.constructor.apply(this, arguments);\n    }\n    LayoutDOMView.prototype.initialize = function (options) {\n        LayoutDOMView.__super__.initialize.call(this, options);\n        if (this.is_root) {\n            this._solver = new solver_1.Solver();\n        }\n        this.child_views = {};\n        this.build_child_views();\n        return this.connect_signals();\n    };\n    LayoutDOMView.prototype.remove = function () {\n        var _, ref, view;\n        ref = this.child_views;\n        for (_ in ref) {\n            view = ref[_];\n            view.remove();\n        }\n        this.child_views = {};\n        return LayoutDOMView.__super__.remove.call(this);\n    };\n    LayoutDOMView.prototype.has_finished = function () {\n        var _, child, ref;\n        if (!LayoutDOMView.__super__.has_finished.call(this)) {\n            return false;\n        }\n        ref = this.child_views;\n        for (_ in ref) {\n            child = ref[_];\n            if (!child.has_finished()) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LayoutDOMView.prototype.notify_finished = function () {\n        if (!this.is_root) {\n            return LayoutDOMView.__super__.notify_finished.call(this);\n        }\n        else {\n            if (!this._idle_notified && this.has_finished()) {\n                if (this.model.document != null) {\n                    this._idle_notified = true;\n                    return this.model.document.notify_idle(this.model);\n                }\n            }\n        }\n    };\n    LayoutDOMView.prototype._calc_width_height = function () {\n        var height, measuring, ref, width;\n        measuring = this.el;\n        while (true) {\n            measuring = measuring.parentNode;\n            if (measuring == null) {\n                logging_1.logger.warn(\"detached element\");\n                width = height = null;\n                break;\n            }\n            ref = measuring.getBoundingClientRect(), width = ref.width, height = ref.height;\n            if (height !== 0) {\n                break;\n            }\n        }\n        return [width, height];\n    };\n    LayoutDOMView.prototype._init_solver = function () {\n        var constraint, constraints, edit_variable, editables, i, j, len, len1, ref, strength, variables;\n        this._root_width = new solver_1.Variable(\"root_width\");\n        this._root_height = new solver_1.Variable(\"root_height\");\n        this._solver.add_edit_variable(this._root_width);\n        this._solver.add_edit_variable(this._root_height);\n        editables = this.model.get_edit_variables();\n        constraints = this.model.get_constraints();\n        variables = this.model.get_constrained_variables();\n        for (i = 0, len = editables.length; i < len; i++) {\n            ref = editables[i], edit_variable = ref.edit_variable, strength = ref.strength;\n            this._solver.add_edit_variable(edit_variable, strength);\n        }\n        for (j = 0, len1 = constraints.length; j < len1; j++) {\n            constraint = constraints[j];\n            this._solver.add_constraint(constraint);\n        }\n        if (variables.width != null) {\n            this._solver.add_constraint(solver_1.EQ(variables.width, this._root_width));\n        }\n        if (variables.height != null) {\n            this._solver.add_constraint(solver_1.EQ(variables.height, this._root_height));\n        }\n        return this._solver.update_variables();\n    };\n    LayoutDOMView.prototype._suggest_dims = function (width, height) {\n        var ref, variables;\n        variables = this.model.get_constrained_variables();\n        if ((variables.width != null) || (variables.height != null)) {\n            if (width === null || height === null) {\n                ref = this._calc_width_height(), width = ref[0], height = ref[1];\n            }\n            if ((variables.width != null) && (width != null)) {\n                this._solver.suggest_value(this._root_width, width);\n            }\n            if ((variables.height != null) && (height != null)) {\n                this._solver.suggest_value(this._root_height, height);\n            }\n            return this._solver.update_variables();\n        }\n    };\n    LayoutDOMView.prototype.resize = function (width, height) {\n        if (width == null) {\n            width = null;\n        }\n        if (height == null) {\n            height = null;\n        }\n        if (!this.is_root) {\n            return this.root.resize(width, height);\n        }\n        else {\n            return this._do_layout(false, width, height);\n        }\n    };\n    LayoutDOMView.prototype.layout = function (full) {\n        if (full == null) {\n            full = true;\n        }\n        if (!this.is_root) {\n            return this.root.layout(full);\n        }\n        else {\n            return this._do_layout(full);\n        }\n    };\n    LayoutDOMView.prototype._do_layout = function (full, width, height) {\n        if (width == null) {\n            width = null;\n        }\n        if (height == null) {\n            height = null;\n        }\n        if (full) {\n            this._solver.clear();\n            this._init_solver();\n        }\n        this._suggest_dims(width, height);\n        this._layout();\n        this._layout();\n        this._layout(true);\n        return this.notify_finished();\n    };\n    LayoutDOMView.prototype._layout = function (final) {\n        var child, child_view, i, len, ref;\n        if (final == null) {\n            final = false;\n        }\n        ref = this.model.get_layoutable_children();\n        for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            child_view = this.child_views[child.id];\n            if (child_view._layout != null) {\n                child_view._layout(final);\n            }\n        }\n        this.render();\n        if (final) {\n            return this._has_finished = true;\n        }\n    };\n    LayoutDOMView.prototype.rebuild_child_views = function () {\n        this.solver.clear();\n        this.build_child_views();\n        return this.layout();\n    };\n    LayoutDOMView.prototype.build_child_views = function () {\n        var child, child_view, children, i, len, results;\n        children = this.model.get_layoutable_children();\n        build_views_1.build_views(this.child_views, children, {\n            parent: this\n        });\n        dom_1.empty(this.el);\n        results = [];\n        for (i = 0, len = children.length; i < len; i++) {\n            child = children[i];\n            child_view = this.child_views[child.id];\n            results.push(this.el.appendChild(child_view.el));\n        }\n        return results;\n    };\n    LayoutDOMView.prototype.connect_signals = function () {\n        LayoutDOMView.__super__.connect_signals.call(this);\n        if (this.is_root) {\n            window.addEventListener(\"resize\", (function (_this) {\n                return function () {\n                    return _this.resize();\n                };\n            })(this));\n        }\n        return this.connect(this.model.properties.sizing_mode.change, (function (_this) {\n            return function () {\n                return _this.layout();\n            };\n        })(this));\n    };\n    LayoutDOMView.prototype._render_classes = function () {\n        var cls, i, len, ref, results;\n        this.el.className = \"\";\n        if (this.className != null) {\n            this.el.classList.add(this.className);\n        }\n        if (this.model.sizing_mode != null) {\n            this.el.classList.add(\"bk-layout-\" + this.model.sizing_mode);\n        }\n        if (this.model.css_classes != null) {\n            ref = this.model.css_classes;\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n                cls = ref[i];\n                results.push(this.el.classList.add(cls));\n            }\n            return results;\n        }\n    };\n    LayoutDOMView.prototype.render = function () {\n        var height, width;\n        this._render_classes();\n        switch (this.model.sizing_mode) {\n            case 'fixed':\n                if (this.model.width != null) {\n                    width = this.model.width;\n                }\n                else {\n                    width = this.get_width();\n                    this.model.setv({\n                        width: width\n                    }, {\n                        silent: true\n                    });\n                }\n                if (this.model.height != null) {\n                    height = this.model.height;\n                }\n                else {\n                    height = this.get_height();\n                    this.model.setv({\n                        height: height\n                    }, {\n                        silent: true\n                    });\n                }\n                this.solver.suggest_value(this.model._width, width);\n                this.solver.suggest_value(this.model._height, height);\n                this.solver.update_variables();\n                this.el.style.position = \"relative\";\n                this.el.style.left = \"\";\n                this.el.style.top = \"\";\n                this.el.style.width = width + \"px\";\n                return this.el.style.height = height + \"px\";\n            case 'scale_width':\n                height = this.get_height();\n                this.solver.suggest_value(this.model._height, height);\n                this.solver.update_variables();\n                this.el.style.position = \"relative\";\n                this.el.style.left = \"\";\n                this.el.style.top = \"\";\n                this.el.style.width = this.model._width.value + \"px\";\n                return this.el.style.height = this.model._height.value + \"px\";\n            case 'scale_height':\n                width = this.get_width();\n                this.solver.suggest_value(this.model._width, width);\n                this.solver.update_variables();\n                this.el.style.position = \"relative\";\n                this.el.style.left = \"\";\n                this.el.style.top = \"\";\n                this.el.style.width = this.model._width.value + \"px\";\n                return this.el.style.height = this.model._height.value + \"px\";\n            case 'stretch_both':\n                this.el.style.position = \"absolute\";\n                this.el.style.left = this.model._dom_left.value + \"px\";\n                this.el.style.top = this.model._dom_top.value + \"px\";\n                this.el.style.width = this.model._width.value + \"px\";\n                return this.el.style.height = this.model._height.value + \"px\";\n        }\n    };\n    LayoutDOMView.prototype.get_height = function () {\n        return null;\n    };\n    LayoutDOMView.prototype.get_width = function () {\n        return null;\n    };\n    return LayoutDOMView;\n})(dom_view_1.DOMView);\nexports.LayoutDOM = (function (superClass) {\n    extend1(LayoutDOM, superClass);\n    function LayoutDOM() {\n        return LayoutDOM.__super__.constructor.apply(this, arguments);\n    }\n    LayoutDOM.prototype.type = \"LayoutDOM\";\n    LayoutDOM.prototype.initialize = function (attrs, options) {\n        LayoutDOM.__super__.initialize.call(this, attrs, options);\n        this._width = new solver_1.Variable(\"_width \" + this.id);\n        this._height = new solver_1.Variable(\"_height \" + this.id);\n        this._left = new solver_1.Variable(\"_left \" + this.id);\n        this._right = new solver_1.Variable(\"_right \" + this.id);\n        this._top = new solver_1.Variable(\"_top \" + this.id);\n        this._bottom = new solver_1.Variable(\"_bottom \" + this.id);\n        this._dom_top = new solver_1.Variable(\"_dom_top \" + this.id);\n        this._dom_left = new solver_1.Variable(\"_dom_left \" + this.id);\n        this._width_minus_right = new solver_1.Variable(\"_width_minus_right \" + this.id);\n        this._height_minus_bottom = new solver_1.Variable(\"_height_minus_bottom \" + this.id);\n        this._whitespace_top = new solver_1.Variable();\n        this._whitespace_bottom = new solver_1.Variable();\n        this._whitespace_left = new solver_1.Variable();\n        return this._whitespace_right = new solver_1.Variable();\n    };\n    LayoutDOM.getters({\n        layout_bbox: function () {\n            return {\n                top: this._top.value,\n                left: this._left.value,\n                width: this._width.value,\n                height: this._height.value,\n                right: this._right.value,\n                bottom: this._bottom.value,\n                dom_top: this._dom_top.value,\n                dom_left: this._dom_left.value\n            };\n        }\n    });\n    LayoutDOM.prototype.dump_layout = function () {\n        var child, i, len, ref, results;\n        console.log(this.toString(), this.layout_bbox);\n        ref = this.get_layoutable_children();\n        results = [];\n        for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            results.push(child.dump_layout());\n        }\n        return results;\n    };\n    LayoutDOM.prototype.get_constraints = function () {\n        return [solver_1.GE(this._dom_left), solver_1.GE(this._dom_top), solver_1.GE(this._left), solver_1.GE(this._width, [-1, this._right]), solver_1.GE(this._top), solver_1.GE(this._height, [-1, this._bottom]), solver_1.EQ(this._width_minus_right, [-1, this._width], this._right), solver_1.EQ(this._height_minus_bottom, [-1, this._height], this._bottom)];\n    };\n    LayoutDOM.prototype.get_layoutable_children = function () {\n        return [];\n    };\n    LayoutDOM.prototype.get_edit_variables = function () {\n        var edit_variables;\n        edit_variables = [];\n        if (this.sizing_mode === 'fixed') {\n            edit_variables.push({\n                edit_variable: this._height,\n                strength: solver_1.Strength.strong\n            });\n            edit_variables.push({\n                edit_variable: this._width,\n                strength: solver_1.Strength.strong\n            });\n        }\n        if (this.sizing_mode === 'scale_width') {\n            edit_variables.push({\n                edit_variable: this._height,\n                strength: solver_1.Strength.strong\n            });\n        }\n        if (this.sizing_mode === 'scale_height') {\n            edit_variables.push({\n                edit_variable: this._width,\n                strength: solver_1.Strength.strong\n            });\n        }\n        return edit_variables;\n    };\n    LayoutDOM.prototype.get_constrained_variables = function () {\n        var vars;\n        vars = {\n            origin_x: this._dom_left,\n            origin_y: this._dom_top,\n            whitespace_top: this._whitespace_top,\n            whitespace_bottom: this._whitespace_bottom,\n            whitespace_left: this._whitespace_left,\n            whitespace_right: this._whitespace_right\n        };\n        switch (this.sizing_mode) {\n            case 'stretch_both':\n                vars.width = this._width;\n                vars.height = this._height;\n                break;\n            case 'scale_width':\n                vars.width = this._width;\n                break;\n            case 'scale_height':\n                vars.height = this._height;\n        }\n        return vars;\n    };\n    LayoutDOM.define({\n        height: [p.Number],\n        width: [p.Number],\n        disabled: [p.Bool, false],\n        sizing_mode: [p.SizingMode, \"fixed\"],\n        css_classes: [p.Array]\n    });\n    return LayoutDOM;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar box_1 = require(\"./box\");\nexports.RowView = (function (superClass) {\n    extend(RowView, superClass);\n    function RowView() {\n        return RowView.__super__.constructor.apply(this, arguments);\n    }\n    RowView.prototype.className = \"bk-grid-row\";\n    return RowView;\n})(box_1.BoxView);\nexports.Row = (function (superClass) {\n    extend(Row, superClass);\n    Row.prototype.type = 'Row';\n    Row.prototype.default_view = exports.RowView;\n    function Row(attrs, options) {\n        Row.__super__.constructor.call(this, attrs, options);\n        this._horizontal = true;\n    }\n    return Row;\n})(box_1.Box);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar layout_dom_1 = require(\"./layout_dom\");\nvar object_1 = require(\"core/util/object\");\nexports.SpacerView = (function (superClass) {\n    extend1(SpacerView, superClass);\n    function SpacerView() {\n        return SpacerView.__super__.constructor.apply(this, arguments);\n    }\n    SpacerView.prototype.className = \"bk-spacer-box\";\n    SpacerView.prototype.render = function () {\n        SpacerView.__super__.render.call(this);\n        if (this.sizing_mode === \"fixed\") {\n            this.el.style.width = this.model.width + \"px\";\n            return this.el.style.height = this.model.height + \"px\";\n        }\n    };\n    SpacerView.prototype.get_height = function () {\n        return 1;\n    };\n    return SpacerView;\n})(layout_dom_1.LayoutDOMView);\nexports.Spacer = (function (superClass) {\n    extend1(Spacer, superClass);\n    function Spacer() {\n        return Spacer.__super__.constructor.apply(this, arguments);\n    }\n    Spacer.prototype.type = 'Spacer';\n    Spacer.prototype.default_view = exports.SpacerView;\n    Spacer.prototype.get_constrained_variables = function () {\n        return object_1.extend({}, Spacer.__super__.get_constrained_variables.call(this), {\n            on_edge_align_top: this._top,\n            on_edge_align_bottom: this._height_minus_bottom,\n            on_edge_align_left: this._left,\n            on_edge_align_right: this._width_minus_right,\n            box_cell_align_top: this._top,\n            box_cell_align_bottom: this._height_minus_bottom,\n            box_cell_align_left: this._left,\n            box_cell_align_right: this._width_minus_right,\n            box_equal_size_top: this._top,\n            box_equal_size_bottom: this._height_minus_bottom,\n            box_equal_size_left: this._left,\n            box_equal_size_right: this._width_minus_right\n        });\n    };\n    return Spacer;\n})(layout_dom_1.LayoutDOM);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nvar layout_dom_1 = require(\"../layouts/layout_dom\");\nexports.WidgetBoxView = (function (superClass) {\n    extend1(WidgetBoxView, superClass);\n    function WidgetBoxView() {\n        return WidgetBoxView.__super__.constructor.apply(this, arguments);\n    }\n    WidgetBoxView.prototype.className = \"bk-widget-box\";\n    WidgetBoxView.prototype.connect_signals = function () {\n        WidgetBoxView.__super__.connect_signals.call(this);\n        return this.connect(this.model.properties.children.change, (function (_this) {\n            return function () {\n                return _this.rebuild_child_views();\n            };\n        })(this));\n    };\n    WidgetBoxView.prototype.render = function () {\n        var css_width, height, width;\n        this._render_classes();\n        if (this.model.sizing_mode === 'fixed' || this.model.sizing_mode === 'scale_height') {\n            width = this.get_width();\n            if (this.model._width.value !== width) {\n                this.solver.suggest_value(this.model._width, width);\n            }\n        }\n        if (this.model.sizing_mode === 'fixed' || this.model.sizing_mode === 'scale_width') {\n            height = this.get_height();\n            if (this.model._height.value !== height) {\n                this.solver.suggest_value(this.model._height, height);\n            }\n        }\n        this.solver.update_variables();\n        if (this.model.sizing_mode === 'stretch_both') {\n            this.el.style.position = 'absolute';\n            this.el.style.left = this.model._dom_left.value + \"px\";\n            this.el.style.top = this.model._dom_top.value + \"px\";\n            this.el.style.width = this.model._width.value + \"px\";\n            return this.el.style.height = this.model._height.value + \"px\";\n        }\n        else {\n            if (this.model._width.value - 20 > 0) {\n                css_width = (this.model._width.value - 20) + \"px\";\n            }\n            else {\n                css_width = \"100%\";\n            }\n            return this.el.style.width = css_width;\n        }\n    };\n    WidgetBoxView.prototype.get_height = function () {\n        var child_view, height, key, ref;\n        height = 0;\n        ref = this.child_views;\n        for (key in ref) {\n            if (!hasProp.call(ref, key))\n                continue;\n            child_view = ref[key];\n            height += child_view.el.scrollHeight;\n        }\n        return height + 20;\n    };\n    WidgetBoxView.prototype.get_width = function () {\n        var child_view, child_width, key, ref, width;\n        if (this.model.width != null) {\n            return this.model.width;\n        }\n        else {\n            width = this.el.scrollWidth + 20;\n            ref = this.child_views;\n            for (key in ref) {\n                if (!hasProp.call(ref, key))\n                    continue;\n                child_view = ref[key];\n                child_width = child_view.el.scrollWidth;\n                if (child_width > width) {\n                    width = child_width;\n                }\n            }\n            return width;\n        }\n    };\n    return WidgetBoxView;\n})(layout_dom_1.LayoutDOMView);\nexports.WidgetBox = (function (superClass) {\n    extend1(WidgetBox, superClass);\n    function WidgetBox() {\n        return WidgetBox.__super__.constructor.apply(this, arguments);\n    }\n    WidgetBox.prototype.type = 'WidgetBox';\n    WidgetBox.prototype.default_view = exports.WidgetBoxView;\n    WidgetBox.prototype.initialize = function (options) {\n        WidgetBox.__super__.initialize.call(this, options);\n        if (this.sizing_mode === 'fixed' && this.width === null) {\n            this.width = 300;\n            logging_1.logger.info(\"WidgetBox mode is fixed, but no width specified. Using default of 300.\");\n        }\n        if (this.sizing_mode === 'scale_height') {\n            return logging_1.logger.warn(\"sizing_mode `scale_height` is not experimental for WidgetBox. Please report your results to the bokeh dev team so we can improve.\");\n        }\n    };\n    WidgetBox.prototype.get_edit_variables = function () {\n        var child, edit_variables, i, len, ref;\n        edit_variables = WidgetBox.__super__.get_edit_variables.call(this);\n        ref = this.get_layoutable_children();\n        for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            edit_variables = edit_variables.concat(child.get_edit_variables());\n        }\n        return edit_variables;\n    };\n    WidgetBox.prototype.get_constraints = function () {\n        var child, constraints, i, len, ref;\n        constraints = WidgetBox.__super__.get_constraints.call(this);\n        ref = this.get_layoutable_children();\n        for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            constraints = constraints.concat(child.get_constraints());\n        }\n        return constraints;\n    };\n    WidgetBox.prototype.get_constrained_variables = function () {\n        var vars;\n        vars = object_1.extend({}, WidgetBox.__super__.get_constrained_variables.call(this), {\n            on_edge_align_top: this._top,\n            on_edge_align_bottom: this._height_minus_bottom,\n            on_edge_align_left: this._left,\n            on_edge_align_right: this._width_minus_right,\n            box_cell_align_top: this._top,\n            box_cell_align_bottom: this._height_minus_bottom,\n            box_cell_align_left: this._left,\n            box_cell_align_right: this._width_minus_right,\n            box_equal_size_top: this._top,\n            box_equal_size_bottom: this._height_minus_bottom\n        });\n        if (this.sizing_mode !== 'fixed') {\n            vars.box_equal_size_left = this._left;\n            vars.box_equal_size_right = this._width_minus_right;\n        }\n        return vars;\n    };\n    WidgetBox.prototype.get_layoutable_children = function () {\n        return this.children;\n    };\n    WidgetBox.define({\n        children: [p.Array, []]\n    });\n    return WidgetBox;\n})(layout_dom_1.LayoutDOM);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar color_mapper_1 = require(\"./color_mapper\");\nexports.CategoricalColorMapper = (function (superClass) {\n    extend(CategoricalColorMapper, superClass);\n    function CategoricalColorMapper() {\n        return CategoricalColorMapper.__super__.constructor.apply(this, arguments);\n    }\n    CategoricalColorMapper.prototype.type = \"CategoricalColorMapper\";\n    CategoricalColorMapper.define({\n        factors: [p.Array]\n    });\n    CategoricalColorMapper.prototype._get_values = function (data, palette) {\n        var color, d, i, key, len, values;\n        values = [];\n        for (i = 0, len = data.length; i < len; i++) {\n            d = data[i];\n            key = this.factors.indexOf(d);\n            if (key < 0 || key >= palette.length) {\n                color = this.nan_color;\n            }\n            else {\n                color = palette[key];\n            }\n            values.push(color);\n        }\n        return values;\n    };\n    return CategoricalColorMapper;\n})(color_mapper_1.ColorMapper);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar transform_1 = require(\"../transforms/transform\");\nvar types_1 = require(\"core/util/types\");\nexports.ColorMapper = (function (superClass) {\n    extend(ColorMapper, superClass);\n    function ColorMapper() {\n        return ColorMapper.__super__.constructor.apply(this, arguments);\n    }\n    ColorMapper.prototype.type = \"ColorMapper\";\n    ColorMapper.define({\n        palette: [p.Any],\n        nan_color: [p.Color, \"gray\"]\n    });\n    ColorMapper.prototype.initialize = function (attrs, options) {\n        ColorMapper.__super__.initialize.call(this, attrs, options);\n        this._little_endian = this._is_little_endian();\n        this._palette = this._build_palette(this.palette);\n        return this.connect(this.change, function () {\n            return this._palette = this._build_palette(this.palette);\n        });\n    };\n    ColorMapper.prototype.v_map_screen = function (data, image_glyph) {\n        var buf, color, i, j, k, ref, ref1, value, values;\n        if (image_glyph == null) {\n            image_glyph = false;\n        }\n        values = this._get_values(data, this._palette, image_glyph);\n        buf = new ArrayBuffer(data.length * 4);\n        color = new Uint32Array(buf);\n        if (this._little_endian) {\n            for (i = j = 0, ref = data.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                value = values[i];\n                color[i] = (0xff << 24) | ((value & 0xff0000) >> 16) | (value & 0xff00) | ((value & 0xff) << 16);\n            }\n        }\n        else {\n            for (i = k = 0, ref1 = data.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n                value = values[i];\n                color[i] = (value << 8) | 0xff;\n            }\n        }\n        return buf;\n    };\n    ColorMapper.prototype.compute = function (x) {\n        return null;\n    };\n    ColorMapper.prototype.v_compute = function (xs) {\n        var values;\n        values = this._get_values(xs, this.palette);\n        return values;\n    };\n    ColorMapper.prototype._get_values = function (data, palette, image_glyph) {\n        if (image_glyph == null) {\n            image_glyph = false;\n        }\n        return [];\n    };\n    ColorMapper.prototype._is_little_endian = function () {\n        var buf, buf32, buf8, little_endian;\n        buf = new ArrayBuffer(4);\n        buf8 = new Uint8Array(buf);\n        buf32 = new Uint32Array(buf);\n        buf32[1] = 0x0a0b0c0d;\n        little_endian = true;\n        if (buf8[4] === 0x0a && buf8[5] === 0x0b && buf8[6] === 0x0c && buf8[7] === 0x0d) {\n            little_endian = false;\n        }\n        return little_endian;\n    };\n    ColorMapper.prototype._build_palette = function (palette) {\n        var _convert, i, j, new_palette, ref;\n        new_palette = new Uint32Array(palette.length);\n        _convert = function (value) {\n            if (types_1.isNumber(value)) {\n                return value;\n            }\n            else {\n                return parseInt(value.slice(1), 16);\n            }\n        };\n        for (i = j = 0, ref = palette.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            new_palette[i] = _convert(palette[i]);\n        }\n        return new_palette;\n    };\n    return ColorMapper;\n})(transform_1.Transform);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar categorical_color_mapper_1 = require(\"./categorical_color_mapper\");\nexports.CategoricalColorMapper = categorical_color_mapper_1.CategoricalColorMapper;\nvar color_mapper_1 = require(\"./color_mapper\");\nexports.ColorMapper = color_mapper_1.ColorMapper;\nvar linear_color_mapper_1 = require(\"./linear_color_mapper\");\nexports.LinearColorMapper = linear_color_mapper_1.LinearColorMapper;\nvar log_color_mapper_1 = require(\"./log_color_mapper\");\nexports.LogColorMapper = log_color_mapper_1.LogColorMapper;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar color_1 = require(\"core/util/color\");\nvar array_1 = require(\"core/util/array\");\nvar color_mapper_1 = require(\"./color_mapper\");\nexports.LinearColorMapper = (function (superClass) {\n    extend(LinearColorMapper, superClass);\n    function LinearColorMapper() {\n        return LinearColorMapper.__super__.constructor.apply(this, arguments);\n    }\n    LinearColorMapper.prototype.type = \"LinearColorMapper\";\n    LinearColorMapper.define({\n        high: [p.Number],\n        low: [p.Number],\n        high_color: [p.Color],\n        low_color: [p.Color]\n    });\n    LinearColorMapper.prototype.initialize = function (attrs, options) {\n        LinearColorMapper.__super__.initialize.call(this, attrs, options);\n        this._nan_color = this._build_palette([color_1.color2hex(this.nan_color)])[0];\n        this._high_color = this.high_color != null ? this._build_palette([color_1.color2hex(this.high_color)])[0] : void 0;\n        return this._low_color = this.low_color != null ? this._build_palette([color_1.color2hex(this.low_color)])[0] : void 0;\n    };\n    LinearColorMapper.prototype._get_values = function (data, palette, image_glyph) {\n        var d, high, high_color, i, key, len, low, low_color, max_key, nan_color, norm_factor, normed_d, normed_interval, ref, ref1, values;\n        if (image_glyph == null) {\n            image_glyph = false;\n        }\n        low = (ref = this.low) != null ? ref : array_1.min(data);\n        high = (ref1 = this.high) != null ? ref1 : array_1.max(data);\n        max_key = palette.length - 1;\n        values = [];\n        nan_color = image_glyph ? this._nan_color : this.nan_color;\n        low_color = image_glyph ? this._low_color : this.low_color;\n        high_color = image_glyph ? this._high_color : this.high_color;\n        norm_factor = 1 / (high - low);\n        normed_interval = 1 / palette.length;\n        for (i = 0, len = data.length; i < len; i++) {\n            d = data[i];\n            if (isNaN(d)) {\n                values.push(nan_color);\n                continue;\n            }\n            if (d === high) {\n                values.push(palette[max_key]);\n                continue;\n            }\n            normed_d = (d - low) * norm_factor;\n            key = Math.floor(normed_d / normed_interval);\n            if (key < 0) {\n                if (this.low_color != null) {\n                    values.push(low_color);\n                }\n                else {\n                    values.push(palette[0]);\n                }\n            }\n            else if (key > max_key) {\n                if (this.high_color != null) {\n                    values.push(high_color);\n                }\n                else {\n                    values.push(palette[max_key]);\n                }\n            }\n            else {\n                values.push(palette[key]);\n            }\n        }\n        return values;\n    };\n    return LinearColorMapper;\n})(color_mapper_1.ColorMapper);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar log1p, ref, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar color_1 = require(\"core/util/color\");\nvar array_1 = require(\"core/util/array\");\nvar color_mapper_1 = require(\"./color_mapper\");\nlog1p = (ref = Math.log1p) != null ? ref : function (x) {\n    return Math.log(1 + x);\n};\nexports.LogColorMapper = (function (superClass) {\n    extend(LogColorMapper, superClass);\n    function LogColorMapper() {\n        return LogColorMapper.__super__.constructor.apply(this, arguments);\n    }\n    LogColorMapper.prototype.type = \"LogColorMapper\";\n    LogColorMapper.define({\n        high: [p.Number],\n        low: [p.Number],\n        high_color: [p.Color],\n        low_color: [p.Color]\n    });\n    LogColorMapper.prototype.initialize = function (attrs, options) {\n        LogColorMapper.__super__.initialize.call(this, attrs, options);\n        this._nan_color = this._build_palette([color_1.color2hex(this.nan_color)])[0];\n        this._high_color = this.high_color != null ? this._build_palette([color_1.color2hex(this.high_color)])[0] : void 0;\n        return this._low_color = this.low_color != null ? this._build_palette([color_1.color2hex(this.low_color)])[0] : void 0;\n    };\n    LogColorMapper.prototype._get_values = function (data, palette, image_glyph) {\n        var d, high, high_color, i, key, len, log, low, low_color, max_key, n, nan_color, ref1, ref2, scale, values;\n        if (image_glyph == null) {\n            image_glyph = false;\n        }\n        n = palette.length;\n        low = (ref1 = this.low) != null ? ref1 : array_1.min(data);\n        high = (ref2 = this.high) != null ? ref2 : array_1.max(data);\n        scale = n / (log1p(high) - log1p(low));\n        max_key = palette.length - 1;\n        values = [];\n        nan_color = image_glyph ? this._nan_color : this.nan_color;\n        high_color = image_glyph ? this._high_color : this.high_color;\n        low_color = image_glyph ? this._low_color : this.low_color;\n        for (i = 0, len = data.length; i < len; i++) {\n            d = data[i];\n            if (isNaN(d)) {\n                values.push(nan_color);\n                continue;\n            }\n            if (d > high) {\n                if (this.high_color != null) {\n                    values.push(high_color);\n                }\n                else {\n                    values.push(palette[max_key]);\n                }\n                continue;\n            }\n            if (d === high) {\n                values.push(palette[max_key]);\n                continue;\n            }\n            if (d < low) {\n                if (this.low_color != null) {\n                    values.push(low_color);\n                }\n                else {\n                    values.push(palette[0]);\n                }\n                continue;\n            }\n            log = log1p(d) - log1p(low);\n            key = Math.floor(log * scale);\n            if (key > max_key) {\n                key = max_key;\n            }\n            values.push(palette[key]);\n        }\n        return values;\n    };\n    return LogColorMapper;\n})(color_mapper_1.ColorMapper);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SQ3, _mk_model, _one_cross, _one_diamond, _one_tri, _one_x, asterisk, circle_cross, circle_x, cross, diamond, diamond_cross, inverted_triangle, square, square_cross, square_x, triangle, x, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar marker_1 = require(\"./marker\");\nSQ3 = Math.sqrt(3);\n_one_x = function (ctx, r) {\n    ctx.moveTo(-r, r);\n    ctx.lineTo(r, -r);\n    ctx.moveTo(-r, -r);\n    return ctx.lineTo(r, r);\n};\n_one_cross = function (ctx, r) {\n    ctx.moveTo(0, r);\n    ctx.lineTo(0, -r);\n    ctx.moveTo(-r, 0);\n    return ctx.lineTo(r, 0);\n};\n_one_diamond = function (ctx, r) {\n    ctx.moveTo(0, r);\n    ctx.lineTo(r / 1.5, 0);\n    ctx.lineTo(0, -r);\n    ctx.lineTo(-r / 1.5, 0);\n    return ctx.closePath();\n};\n_one_tri = function (ctx, r) {\n    var a, h;\n    h = r * SQ3;\n    a = h / 3;\n    ctx.moveTo(-r, a);\n    ctx.lineTo(r, a);\n    ctx.lineTo(0, a - h);\n    return ctx.closePath();\n};\nasterisk = function (ctx, i, sx, sy, r, line, fill) {\n    var r2;\n    r2 = r * 0.65;\n    _one_cross(ctx, r);\n    _one_x(ctx, r2);\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n};\ncircle_cross = function (ctx, i, sx, sy, r, line, fill) {\n    ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_cross(ctx, r);\n        ctx.stroke();\n    }\n};\ncircle_x = function (ctx, i, sx, sy, r, line, fill) {\n    ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_x(ctx, r);\n        ctx.stroke();\n    }\n};\ncross = function (ctx, i, sx, sy, r, line, fill) {\n    _one_cross(ctx, r);\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n};\ndiamond = function (ctx, i, sx, sy, r, line, fill) {\n    _one_diamond(ctx, r);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n};\ndiamond_cross = function (ctx, i, sx, sy, r, line, fill) {\n    _one_diamond(ctx, r);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_cross(ctx, r);\n        ctx.stroke();\n    }\n};\ninverted_triangle = function (ctx, i, sx, sy, r, line, fill) {\n    ctx.rotate(Math.PI);\n    _one_tri(ctx, r);\n    ctx.rotate(-Math.PI);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n};\nsquare = function (ctx, i, sx, sy, r, line, fill) {\n    var size;\n    size = 2 * r;\n    ctx.rect(-r, -r, size, size);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n};\nsquare_cross = function (ctx, i, sx, sy, r, line, fill) {\n    var size;\n    size = 2 * r;\n    ctx.rect(-r, -r, size, size);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_cross(ctx, r);\n        ctx.stroke();\n    }\n};\nsquare_x = function (ctx, i, sx, sy, r, line, fill) {\n    var size;\n    size = 2 * r;\n    ctx.rect(-r, -r, size, size);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_x(ctx, r);\n        ctx.stroke();\n    }\n};\ntriangle = function (ctx, i, sx, sy, r, line, fill) {\n    _one_tri(ctx, r);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n};\nx = function (ctx, i, sx, sy, r, line, fill) {\n    _one_x(ctx, r);\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n};\n_mk_model = function (type, f) {\n    var model, view;\n    view = (function (superClass) {\n        extend(view, superClass);\n        function view() {\n            return view.__super__.constructor.apply(this, arguments);\n        }\n        view.prototype._render_one = f;\n        return view;\n    })(marker_1.MarkerView);\n    model = (function (superClass) {\n        extend(model, superClass);\n        function model() {\n            return model.__super__.constructor.apply(this, arguments);\n        }\n        model.prototype.default_view = view;\n        model.prototype.type = type;\n        return model;\n    })(marker_1.Marker);\n    return model;\n};\nexports.Asterisk = _mk_model('Asterisk', asterisk);\nexports.CircleCross = _mk_model('CircleCross', circle_cross);\nexports.CircleX = _mk_model('CircleX', circle_x);\nexports.Cross = _mk_model('Cross', cross);\nexports.Diamond = _mk_model('Diamond', diamond);\nexports.DiamondCross = _mk_model('DiamondCross', diamond_cross);\nexports.InvertedTriangle = _mk_model('InvertedTriangle', inverted_triangle);\nexports.Square = _mk_model('Square', square);\nexports.SquareCross = _mk_model('SquareCross', square_cross);\nexports.SquareX = _mk_model('SquareX', square_x);\nexports.Triangle = _mk_model('Triangle', triangle);\nexports.X = _mk_model('X', x);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar xy_glyph_1 = require(\"../glyphs/xy_glyph\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nexports.MarkerView = (function (superClass) {\n    extend(MarkerView, superClass);\n    function MarkerView() {\n        return MarkerView.__super__.constructor.apply(this, arguments);\n    }\n    MarkerView.prototype.draw_legend_for_index = function (ctx, x0, x1, y0, y1, index) {\n        var angle, data, indices, size, sx, sy;\n        indices = [index];\n        sx = {};\n        sx[index] = (x0 + x1) / 2;\n        sy = {};\n        sy[index] = (y0 + y1) / 2;\n        size = {};\n        size[index] = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.4;\n        angle = {};\n        angle[index] = this._angle[index];\n        data = {\n            sx: sx,\n            sy: sy,\n            _size: size,\n            _angle: angle\n        };\n        return this._render(ctx, indices, data);\n    };\n    MarkerView.prototype._render = function (ctx, indices, arg) {\n        var _angle, _size, i, j, len, r, results, sx, sy;\n        sx = arg.sx, sy = arg.sy, _size = arg._size, _angle = arg._angle;\n        results = [];\n        for (j = 0, len = indices.length; j < len; j++) {\n            i = indices[j];\n            if (isNaN(sx[i] + sy[i] + _size[i] + _angle[i])) {\n                continue;\n            }\n            r = _size[i] / 2;\n            ctx.beginPath();\n            ctx.translate(sx[i], sy[i]);\n            if (_angle[i]) {\n                ctx.rotate(_angle[i]);\n            }\n            this._render_one(ctx, i, sx[i], sy[i], r, this.visuals.line, this.visuals.fill);\n            if (_angle[i]) {\n                ctx.rotate(-_angle[i]);\n            }\n            results.push(ctx.translate(-sx[i], -sy[i]));\n        }\n        return results;\n    };\n    MarkerView.prototype._mask_data = function (all_indices) {\n        var bbox, hr, ref, ref1, vr, vx0, vx1, vy0, vy1, x0, x1, y0, y1;\n        hr = this.renderer.plot_view.frame.h_range;\n        vx0 = hr.start - this.max_size;\n        vx1 = hr.end + this.max_size;\n        ref = this.renderer.xscale.v_invert([vx0, vx1], true), x0 = ref[0], x1 = ref[1];\n        vr = this.renderer.plot_view.frame.v_range;\n        vy0 = vr.start - this.max_size;\n        vy1 = vr.end + this.max_size;\n        ref1 = this.renderer.yscale.v_invert([vy0, vy1], true), y0 = ref1[0], y1 = ref1[1];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        return this.index.indices(bbox);\n    };\n    MarkerView.prototype._hit_point = function (geometry) {\n        var bbox, candidates, dist, hits, i, j, len, ref, ref1, ref2, s2, sx, sy, vx, vx0, vx1, vy, vy0, vy1, x0, x1, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        sx = this.renderer.plot_view.canvas.vx_to_sx(vx);\n        sy = this.renderer.plot_view.canvas.vy_to_sy(vy);\n        vx0 = vx - this.max_size;\n        vx1 = vx + this.max_size;\n        ref1 = this.renderer.xscale.v_invert([vx0, vx1], true), x0 = ref1[0], x1 = ref1[1];\n        vy0 = vy - this.max_size;\n        vy1 = vy + this.max_size;\n        ref2 = this.renderer.yscale.v_invert([vy0, vy1], true), y0 = ref2[0], y1 = ref2[1];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        candidates = this.index.indices(bbox);\n        hits = [];\n        for (j = 0, len = candidates.length; j < len; j++) {\n            i = candidates[j];\n            s2 = this._size[i] / 2;\n            dist = Math.abs(this.sx[i] - sx) + Math.abs(this.sy[i] - sy);\n            if (Math.abs(this.sx[i] - sx) <= s2 && Math.abs(this.sy[i] - sy) <= s2) {\n                hits.push([i, dist]);\n            }\n        }\n        return hittest.create_1d_hit_test_result(hits);\n    };\n    MarkerView.prototype._hit_span = function (geometry) {\n        var bbox, hits, maxX, maxY, minX, minY, ms, ref, ref1, ref2, ref3, result, vx, vx0, vx1, vy, vy0, vy1, x0, x1, y0, y1;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        ref1 = this.bounds(), minX = ref1.minX, minY = ref1.minY, maxX = ref1.maxX, maxY = ref1.maxY;\n        result = hittest.create_hit_test_result();\n        if (geometry.direction === 'h') {\n            y0 = minY;\n            y1 = maxY;\n            ms = this.max_size / 2;\n            vx0 = vx - ms;\n            vx1 = vx + ms;\n            ref2 = this.renderer.xscale.v_invert([vx0, vx1], true), x0 = ref2[0], x1 = ref2[1];\n        }\n        else {\n            x0 = minX;\n            x1 = maxX;\n            ms = this.max_size / 2;\n            vy0 = vy - ms;\n            vy1 = vy + ms;\n            ref3 = this.renderer.yscale.v_invert([vy0, vy1], true), y0 = ref3[0], y1 = ref3[1];\n        }\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        hits = this.index.indices(bbox);\n        result['1d'].indices = hits;\n        return result;\n    };\n    MarkerView.prototype._hit_rect = function (geometry) {\n        var bbox, ref, ref1, result, x0, x1, y0, y1;\n        ref = this.renderer.xscale.v_invert([geometry.vx0, geometry.vx1], true), x0 = ref[0], x1 = ref[1];\n        ref1 = this.renderer.yscale.v_invert([geometry.vy0, geometry.vy1], true), y0 = ref1[0], y1 = ref1[1];\n        bbox = hittest.validate_bbox_coords([x0, x1], [y0, y1]);\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = this.index.indices(bbox);\n        return result;\n    };\n    MarkerView.prototype._hit_poly = function (geometry) {\n        var candidates, hits, i, idx, j, k, ref, ref1, ref2, result, results, sx, sy, vx, vy;\n        ref = [geometry.vx, geometry.vy], vx = ref[0], vy = ref[1];\n        sx = this.renderer.plot_view.canvas.v_vx_to_sx(vx);\n        sy = this.renderer.plot_view.canvas.v_vy_to_sy(vy);\n        candidates = (function () {\n            results = [];\n            for (var j = 0, ref1 = this.sx.length; 0 <= ref1 ? j < ref1 : j > ref1; 0 <= ref1 ? j++ : j--) {\n                results.push(j);\n            }\n            return results;\n        }).apply(this);\n        hits = [];\n        for (i = k = 0, ref2 = candidates.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {\n            idx = candidates[i];\n            if (hittest.point_in_poly(this.sx[i], this.sy[i], sx, sy)) {\n                hits.push(idx);\n            }\n        }\n        result = hittest.create_hit_test_result();\n        result['1d'].indices = hits;\n        return result;\n    };\n    return MarkerView;\n})(xy_glyph_1.XYGlyphView);\nexports.Marker = (function (superClass) {\n    extend(Marker, superClass);\n    function Marker() {\n        return Marker.__super__.constructor.apply(this, arguments);\n    }\n    Marker.mixins(['line', 'fill']);\n    Marker.define({\n        size: [\n            p.DistanceSpec, {\n                units: \"screen\",\n                value: 4\n            }\n        ],\n        angle: [p.AngleSpec, 0]\n    });\n    return Marker;\n})(xy_glyph_1.XYGlyph);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar logging_1 = require(\"core/logging\");\nvar gmap_plot_canvas_1 = require(\"./gmap_plot_canvas\");\nvar plot_1 = require(\"./plot\");\nvar p = require(\"core/properties\");\nvar model_1 = require(\"../../model\");\nexports.MapOptions = (function (superClass) {\n    extend(MapOptions, superClass);\n    function MapOptions() {\n        return MapOptions.__super__.constructor.apply(this, arguments);\n    }\n    MapOptions.prototype.type = 'MapOptions';\n    MapOptions.define({\n        lat: [p.Number],\n        lng: [p.Number],\n        zoom: [p.Number, 12]\n    });\n    return MapOptions;\n})(model_1.Model);\nexports.GMapOptions = (function (superClass) {\n    extend(GMapOptions, superClass);\n    function GMapOptions() {\n        return GMapOptions.__super__.constructor.apply(this, arguments);\n    }\n    GMapOptions.prototype.type = 'GMapOptions';\n    GMapOptions.define({\n        map_type: [p.String, \"roadmap\"],\n        scale_control: [p.Bool, false],\n        styles: [p.String]\n    });\n    return GMapOptions;\n})(exports.MapOptions);\nexports.GMapPlotView = (function (superClass) {\n    extend(GMapPlotView, superClass);\n    function GMapPlotView() {\n        return GMapPlotView.__super__.constructor.apply(this, arguments);\n    }\n    return GMapPlotView;\n})(plot_1.PlotView);\nexports.GMapPlot = (function (superClass) {\n    extend(GMapPlot, superClass);\n    function GMapPlot() {\n        return GMapPlot.__super__.constructor.apply(this, arguments);\n    }\n    GMapPlot.prototype.type = 'GMapPlot';\n    GMapPlot.prototype.default_view = exports.GMapPlotView;\n    GMapPlot.prototype.initialize = function (options) {\n        GMapPlot.__super__.initialize.call(this, options);\n        if (!this.api_key) {\n            return logging_1.logger.error(\"api_key is required. See https://developers.google.com/maps/documentation/javascript/get-api-key for more information on how to obtain your own.\");\n        }\n    };\n    GMapPlot.prototype._init_plot_canvas = function () {\n        return new gmap_plot_canvas_1.GMapPlotCanvas({\n            plot: this\n        });\n    };\n    GMapPlot.define({\n        map_options: [p.Instance],\n        api_key: [p.String]\n    });\n    return GMapPlot;\n})(plot_1.Plot);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gmaps_ready, load_google_api, bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; }, extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar proj4_1 = require(\"core/util/proj4\");\nvar plot_canvas_1 = require(\"./plot_canvas\");\nvar signaling_1 = require(\"core/signaling\");\ngmaps_ready = new signaling_1.Signal(this, \"gmaps_ready\");\nload_google_api = function (api_key) {\n    var script;\n    window._bokeh_gmaps_callback = function () {\n        return gmaps_ready.emit();\n    };\n    script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = \"https://maps.googleapis.com/maps/api/js?key=\" + api_key + \"&callback=_bokeh_gmaps_callback\";\n    return document.body.appendChild(script);\n};\nexports.GMapPlotCanvasView = (function (superClass) {\n    extend1(GMapPlotCanvasView, superClass);\n    function GMapPlotCanvasView() {\n        this._set_bokeh_ranges = bind(this._set_bokeh_ranges, this);\n        this._get_projected_bounds = bind(this._get_projected_bounds, this);\n        this._get_latlon_bounds = bind(this._get_latlon_bounds, this);\n        return GMapPlotCanvasView.__super__.constructor.apply(this, arguments);\n    }\n    GMapPlotCanvasView.prototype.initialize = function (options) {\n        var mo, ref;\n        this.pause();\n        GMapPlotCanvasView.__super__.initialize.call(this, options);\n        this._tiles_loaded = false;\n        this.zoom_count = 0;\n        mo = this.model.plot.map_options;\n        this.initial_zoom = mo.zoom;\n        this.initial_lat = mo.lat;\n        this.initial_lng = mo.lng;\n        this.canvas_view.map_el.style.position = \"absolute\";\n        if (((ref = window.google) != null ? ref.maps : void 0) == null) {\n            if (window._bokeh_gmaps_callback == null) {\n                load_google_api(this.model.plot.api_key);\n            }\n            gmaps_ready.connect((function (_this) {\n                return function () {\n                    return _this.request_render();\n                };\n            })(this));\n        }\n        return this.unpause();\n    };\n    GMapPlotCanvasView.prototype.update_range = function (range_info) {\n        var mo, new_map_zoom, old_map_zoom, proj_xend, proj_xstart, proj_yend, proj_ystart, ref, zoom_change;\n        if (range_info == null) {\n            mo = this.model.plot.map_options;\n            this.map.setCenter({\n                lat: this.initial_lat,\n                lng: this.initial_lng\n            });\n            this.map.setOptions({\n                zoom: this.initial_zoom\n            });\n            GMapPlotCanvasView.__super__.update_range.call(this, null);\n        }\n        else if ((range_info.sdx != null) || (range_info.sdy != null)) {\n            this.map.panBy(range_info.sdx, range_info.sdy);\n            GMapPlotCanvasView.__super__.update_range.call(this, range_info);\n        }\n        else if (range_info.factor != null) {\n            if (this.zoom_count !== 10) {\n                this.zoom_count += 1;\n                return;\n            }\n            this.zoom_count = 0;\n            this.pause();\n            GMapPlotCanvasView.__super__.update_range.call(this, range_info);\n            if (range_info.factor < 0) {\n                zoom_change = -1;\n            }\n            else {\n                zoom_change = 1;\n            }\n            old_map_zoom = this.map.getZoom();\n            new_map_zoom = old_map_zoom + zoom_change;\n            if (new_map_zoom >= 2) {\n                this.map.setZoom(new_map_zoom);\n                ref = this._get_projected_bounds(), proj_xstart = ref[0], proj_xend = ref[1], proj_ystart = ref[2], proj_yend = ref[3];\n                if ((proj_xend - proj_xstart) < 0) {\n                    this.map.setZoom(old_map_zoom);\n                }\n            }\n            this.unpause();\n        }\n        return this._set_bokeh_ranges();\n    };\n    GMapPlotCanvasView.prototype._build_map = function () {\n        var map_options, maps, mo;\n        maps = window.google.maps;\n        this.map_types = {\n            satellite: maps.MapTypeId.SATELLITE,\n            terrain: maps.MapTypeId.TERRAIN,\n            roadmap: maps.MapTypeId.ROADMAP,\n            hybrid: maps.MapTypeId.HYBRID\n        };\n        mo = this.model.plot.map_options;\n        map_options = {\n            center: new maps.LatLng(mo.lat, mo.lng),\n            zoom: mo.zoom,\n            disableDefaultUI: true,\n            mapTypeId: this.map_types[mo.map_type],\n            scaleControl: mo.scale_control\n        };\n        if (mo.styles != null) {\n            map_options.styles = JSON.parse(mo.styles);\n        }\n        this.map = new maps.Map(this.canvas_view.map_el, map_options);\n        maps.event.addListener(this.map, 'idle', (function (_this) {\n            return function () {\n                return _this._set_bokeh_ranges();\n            };\n        })(this));\n        maps.event.addListener(this.map, 'bounds_changed', (function (_this) {\n            return function () {\n                return _this._set_bokeh_ranges();\n            };\n        })(this));\n        maps.event.addListenerOnce(this.map, 'tilesloaded', (function (_this) {\n            return function () {\n                return _this._render_finished();\n            };\n        })(this));\n        this.connect(this.model.plot.properties.map_options.change, (function (_this) {\n            return function () {\n                return _this._update_options();\n            };\n        })(this));\n        this.connect(this.model.plot.map_options.properties.styles.change, (function (_this) {\n            return function () {\n                return _this._update_styles();\n            };\n        })(this));\n        this.connect(this.model.plot.map_options.properties.lat.change, (function (_this) {\n            return function () {\n                return _this._update_center('lat');\n            };\n        })(this));\n        this.connect(this.model.plot.map_options.properties.lng.change, (function (_this) {\n            return function () {\n                return _this._update_center('lng');\n            };\n        })(this));\n        this.connect(this.model.plot.map_options.properties.zoom.change, (function (_this) {\n            return function () {\n                return _this._update_zoom();\n            };\n        })(this));\n        this.connect(this.model.plot.map_options.properties.map_type.change, (function (_this) {\n            return function () {\n                return _this._update_map_type();\n            };\n        })(this));\n        return this.connect(this.model.plot.map_options.properties.scale_control.change, (function (_this) {\n            return function () {\n                return _this._update_scale_control();\n            };\n        })(this));\n    };\n    GMapPlotCanvasView.prototype._render_finished = function () {\n        this._tiles_loaded = true;\n        return this.notify_finished();\n    };\n    GMapPlotCanvasView.prototype.has_finished = function () {\n        return GMapPlotCanvasView.__super__.has_finished.call(this) && this._tiles_loaded === true;\n    };\n    GMapPlotCanvasView.prototype._get_latlon_bounds = function () {\n        var bottom_left, bounds, top_right, xend, xstart, yend, ystart;\n        bounds = this.map.getBounds();\n        top_right = bounds.getNorthEast();\n        bottom_left = bounds.getSouthWest();\n        xstart = bottom_left.lng();\n        xend = top_right.lng();\n        ystart = bottom_left.lat();\n        yend = top_right.lat();\n        return [xstart, xend, ystart, yend];\n    };\n    GMapPlotCanvasView.prototype._get_projected_bounds = function () {\n        var proj_xend, proj_xstart, proj_yend, proj_ystart, ref, ref1, ref2, xend, xstart, yend, ystart;\n        ref = this._get_latlon_bounds(), xstart = ref[0], xend = ref[1], ystart = ref[2], yend = ref[3];\n        ref1 = proj4_1.proj4(proj4_1.mercator, [xstart, ystart]), proj_xstart = ref1[0], proj_ystart = ref1[1];\n        ref2 = proj4_1.proj4(proj4_1.mercator, [xend, yend]), proj_xend = ref2[0], proj_yend = ref2[1];\n        return [proj_xstart, proj_xend, proj_ystart, proj_yend];\n    };\n    GMapPlotCanvasView.prototype._set_bokeh_ranges = function () {\n        var proj_xend, proj_xstart, proj_yend, proj_ystart, ref;\n        ref = this._get_projected_bounds(), proj_xstart = ref[0], proj_xend = ref[1], proj_ystart = ref[2], proj_yend = ref[3];\n        this.frame.x_range.setv({\n            start: proj_xstart,\n            end: proj_xend\n        });\n        return this.frame.y_range.setv({\n            start: proj_ystart,\n            end: proj_yend\n        });\n    };\n    GMapPlotCanvasView.prototype._update_center = function (fld) {\n        var c;\n        c = this.map.getCenter().toJSON();\n        c[fld] = this.model.plot.map_options[fld];\n        this.map.setCenter(c);\n        return this._set_bokeh_ranges();\n    };\n    GMapPlotCanvasView.prototype._update_map_type = function () {\n        var maps;\n        maps = window.google.maps;\n        return this.map.setOptions({\n            mapTypeId: this.map_types[this.model.plot.map_options.map_type]\n        });\n    };\n    GMapPlotCanvasView.prototype._update_scale_control = function () {\n        var maps;\n        maps = window.google.maps;\n        return this.map.setOptions({\n            scaleControl: this.model.plot.map_options.scale_control\n        });\n    };\n    GMapPlotCanvasView.prototype._update_options = function () {\n        this._update_styles();\n        this._update_center('lat');\n        this._update_center('lng');\n        this._update_zoom();\n        return this._update_map_type();\n    };\n    GMapPlotCanvasView.prototype._update_styles = function () {\n        return this.map.setOptions({\n            styles: JSON.parse(this.model.plot.map_options.styles)\n        });\n    };\n    GMapPlotCanvasView.prototype._update_zoom = function () {\n        this.map.setOptions({\n            zoom: this.model.plot.map_options.zoom\n        });\n        return this._set_bokeh_ranges();\n    };\n    GMapPlotCanvasView.prototype._map_hook = function (ctx, frame_box) {\n        var height, left, ref, top, width;\n        left = frame_box[0], top = frame_box[1], width = frame_box[2], height = frame_box[3];\n        this.canvas_view.map_el.style.top = top + \"px\";\n        this.canvas_view.map_el.style.left = left + \"px\";\n        this.canvas_view.map_el.style.width = width + \"px\";\n        this.canvas_view.map_el.style.height = height + \"px\";\n        if ((this.map == null) && (((ref = window.google) != null ? ref.maps : void 0) != null)) {\n            return this._build_map();\n        }\n    };\n    GMapPlotCanvasView.prototype._paint_empty = function (ctx, frame_box) {\n        var ih, iw, left, oh, ow, top;\n        ow = this.canvas._width.value;\n        oh = this.canvas._height.value;\n        left = frame_box[0], top = frame_box[1], iw = frame_box[2], ih = frame_box[3];\n        ctx.clearRect(0, 0, ow, oh);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(0, oh);\n        ctx.lineTo(ow, oh);\n        ctx.lineTo(ow, 0);\n        ctx.lineTo(0, 0);\n        ctx.moveTo(left, top);\n        ctx.lineTo(left + iw, top);\n        ctx.lineTo(left + iw, top + ih);\n        ctx.lineTo(left, top + ih);\n        ctx.lineTo(left, top);\n        ctx.closePath();\n        ctx.fillStyle = this.model.plot.border_fill_color;\n        return ctx.fill();\n    };\n    return GMapPlotCanvasView;\n})(plot_canvas_1.PlotCanvasView);\nexports.GMapPlotCanvas = (function (superClass) {\n    extend1(GMapPlotCanvas, superClass);\n    function GMapPlotCanvas() {\n        return GMapPlotCanvas.__super__.constructor.apply(this, arguments);\n    }\n    GMapPlotCanvas.prototype.type = 'GMapPlotCanvas';\n    GMapPlotCanvas.prototype.default_view = exports.GMapPlotCanvasView;\n    GMapPlotCanvas.prototype.initialize = function (attrs, options) {\n        this.use_map = true;\n        return GMapPlotCanvas.__super__.initialize.call(this, attrs, options);\n    };\n    return GMapPlotCanvas;\n})(plot_canvas_1.PlotCanvas);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar gmap_plot_1 = require(\"./gmap_plot\");\nexports.MapOptions = gmap_plot_1.MapOptions;\nvar gmap_plot_2 = require(\"./gmap_plot\");\nexports.GMapOptions = gmap_plot_2.GMapOptions;\nvar gmap_plot_3 = require(\"./gmap_plot\");\nexports.GMapPlot = gmap_plot_3.GMapPlot;\nvar gmap_plot_canvas_1 = require(\"./gmap_plot_canvas\");\nexports.GMapPlotCanvas = gmap_plot_canvas_1.GMapPlotCanvas;\nvar plot_1 = require(\"./plot\");\nexports.Plot = plot_1.Plot;\nvar plot_canvas_1 = require(\"./plot_canvas\");\nexports.PlotCanvas = plot_canvas_1.PlotCanvas;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, slice = [].slice;\nvar solver_1 = require(\"core/layout/solver\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nvar types_1 = require(\"core/util/types\");\nvar layout_dom_1 = require(\"../layouts/layout_dom\");\nvar title_1 = require(\"../annotations/title\");\nvar linear_scale_1 = require(\"../scales/linear_scale\");\nvar toolbar_1 = require(\"../tools/toolbar\");\nvar tool_events_1 = require(\"../tools/tool_events\");\nvar plot_canvas_1 = require(\"./plot_canvas\");\nvar column_data_source_1 = require(\"../sources/column_data_source\");\nvar glyph_renderer_1 = require(\"../renderers/glyph_renderer\");\nvar bokeh_events_1 = require(\"core/bokeh_events\");\nexports.PlotView = (function (superClass) {\n    extend1(PlotView, superClass);\n    function PlotView() {\n        return PlotView.__super__.constructor.apply(this, arguments);\n    }\n    PlotView.prototype.className = \"bk-plot-layout\";\n    PlotView.prototype.connect_signals = function () {\n        var title_msg;\n        PlotView.__super__.connect_signals.call(this);\n        title_msg = \"Title object cannot be replaced. Try changing properties on title to update it after initialization.\";\n        return this.connect(this.model.properties.title.change, (function (_this) {\n            return function () {\n                return logging_1.logger.warn(title_msg);\n            };\n        })(this));\n    };\n    PlotView.prototype.render = function () {\n        var height, ref, width;\n        PlotView.__super__.render.call(this);\n        if (this.model.sizing_mode === 'scale_both') {\n            ref = this.get_width_height(), width = ref[0], height = ref[1];\n            this.solver.suggest_value(this.model._width, width);\n            this.solver.suggest_value(this.model._height, height);\n            this.solver.update_variables();\n            this.el.style.position = 'absolute';\n            this.el.style.left = this.model._dom_left.value + \"px\";\n            this.el.style.top = this.model._dom_top.value + \"px\";\n            this.el.style.width = this.model._width.value + \"px\";\n            return this.el.style.height = this.model._height.value + \"px\";\n        }\n    };\n    PlotView.prototype.get_width_height = function () {\n        var ar, height, new_height_1, new_height_2, new_width_1, new_width_2, parent_height, parent_width, width;\n        parent_height = this.el.parentNode.clientHeight;\n        parent_width = this.el.parentNode.clientWidth;\n        ar = this.model.get_aspect_ratio();\n        new_width_1 = parent_width;\n        new_height_1 = parent_width / ar;\n        new_width_2 = parent_height * ar;\n        new_height_2 = parent_height;\n        if (new_width_1 < new_width_2) {\n            width = new_width_1;\n            height = new_height_1;\n        }\n        else {\n            width = new_width_2;\n            height = new_height_2;\n        }\n        return [width, height];\n    };\n    PlotView.prototype.get_height = function () {\n        return this.model._width.value / this.model.get_aspect_ratio();\n    };\n    PlotView.prototype.get_width = function () {\n        return this.model._height.value * this.model.get_aspect_ratio();\n    };\n    PlotView.prototype.save = function (name) {\n        return this.plot_canvas_view.save(name);\n    };\n    PlotView.getters({\n        plot_canvas_view: function () {\n            var view;\n            return ((function () {\n                var i, len, ref, results;\n                ref = object_1.values(this.child_views);\n                results = [];\n                for (i = 0, len = ref.length; i < len; i++) {\n                    view = ref[i];\n                    if (view instanceof plot_canvas_1.PlotCanvasView) {\n                        results.push(view);\n                    }\n                }\n                return results;\n            }).call(this))[0];\n        }\n    });\n    return PlotView;\n})(layout_dom_1.LayoutDOMView);\nexports.Plot = (function (superClass) {\n    extend1(Plot, superClass);\n    function Plot() {\n        return Plot.__super__.constructor.apply(this, arguments);\n    }\n    Plot.prototype.type = 'Plot';\n    Plot.prototype.default_view = exports.PlotView;\n    Plot.prototype.initialize = function (options) {\n        var _set_sizeable, i, j, k, l, layout_renderers, len, len1, len2, len3, plots, ref, ref1, ref2, ref3, renderer, side, title, xr, yr;\n        Plot.__super__.initialize.call(this, options);\n        ref = object_1.values(this.extra_x_ranges).concat(this.x_range);\n        for (i = 0, len = ref.length; i < len; i++) {\n            xr = ref[i];\n            plots = xr.plots;\n            if (types_1.isArray(plots)) {\n                plots = plots.concat(this);\n                xr.setv('plots', plots, {\n                    silent: true\n                });\n            }\n        }\n        ref1 = object_1.values(this.extra_y_ranges).concat(this.y_range);\n        for (j = 0, len1 = ref1.length; j < len1; j++) {\n            yr = ref1[j];\n            plots = yr.plots;\n            if (types_1.isArray(plots)) {\n                plots = plots.concat(this);\n                yr.setv('plots', plots, {\n                    silent: true\n                });\n            }\n        }\n        this._horizontal = (ref2 = this.toolbar_location) === 'left' || ref2 === 'right';\n        if (this.min_border != null) {\n            if (this.min_border_top == null) {\n                this.min_border_top = this.min_border;\n            }\n            if (this.min_border_bottom == null) {\n                this.min_border_bottom = this.min_border;\n            }\n            if (this.min_border_left == null) {\n                this.min_border_left = this.min_border;\n            }\n            if (this.min_border_right == null) {\n                this.min_border_right = this.min_border;\n            }\n        }\n        if (this.title != null) {\n            title = types_1.isString(this.title) ? new title_1.Title({\n                text: this.title\n            }) : this.title;\n            this.add_layout(title, this.title_location);\n        }\n        this._plot_canvas = this._init_plot_canvas();\n        this.toolbar.toolbar_location = this.toolbar_location;\n        this.toolbar.toolbar_sticky = this.toolbar_sticky;\n        this.plot_canvas.toolbar = this.toolbar;\n        if (this.width == null) {\n            this.width = this.plot_width;\n        }\n        if (this.height == null) {\n            this.height = this.plot_height;\n        }\n        ref3 = ['above', 'below', 'left', 'right'];\n        for (k = 0, len2 = ref3.length; k < len2; k++) {\n            side = ref3[k];\n            layout_renderers = this.getv(side);\n            for (l = 0, len3 = layout_renderers.length; l < len3; l++) {\n                renderer = layout_renderers[l];\n                renderer.add_panel(side);\n            }\n        }\n        _set_sizeable = (function (_this) {\n            return function (model) {\n                return model._sizeable = !_this._horizontal ? model._height : model._width;\n            };\n        })(this);\n        _set_sizeable(this);\n        return _set_sizeable(this.plot_canvas);\n    };\n    Plot.prototype._init_plot_canvas = function () {\n        return new plot_canvas_1.PlotCanvas({\n            plot: this\n        });\n    };\n    Plot.getters({\n        plot_canvas: function () {\n            return this._plot_canvas;\n        }\n    });\n    Plot.prototype._doc_attached = function () {\n        this.plot_canvas.attach_document(this.document);\n        return Plot.__super__._doc_attached.call(this);\n    };\n    Plot.prototype.add_renderers = function () {\n        var new_renderers, renderers;\n        new_renderers = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        renderers = this.renderers;\n        renderers = renderers.concat(new_renderers);\n        return this.renderers = renderers;\n    };\n    Plot.prototype.add_layout = function (renderer, side) {\n        var side_renderers;\n        if (side == null) {\n            side = \"center\";\n        }\n        if (renderer.props.plot != null) {\n            renderer.plot = this;\n        }\n        if (side !== 'center') {\n            side_renderers = this.getv(side);\n            side_renderers.push(renderer);\n            renderer.add_panel(side);\n        }\n        return this.add_renderers(renderer);\n    };\n    Plot.prototype.add_glyph = function (glyph, source, attrs) {\n        var renderer;\n        if (attrs == null) {\n            attrs = {};\n        }\n        if (source == null) {\n            source = new column_data_source_1.ColumnDataSource();\n        }\n        attrs = object_1.extend({}, attrs, {\n            data_source: source,\n            glyph: glyph\n        });\n        renderer = new glyph_renderer_1.GlyphRenderer(attrs);\n        this.add_renderers(renderer);\n        return renderer;\n    };\n    Plot.prototype.add_tools = function () {\n        var attrs, new_tools, tool, tools;\n        tools = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        new_tools = (function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = tools.length; i < len; i++) {\n                tool = tools[i];\n                if (tool.overlay != null) {\n                    this.add_renderers(tool.overlay);\n                }\n                if (tool.plot != null) {\n                    results.push(tool);\n                }\n                else {\n                    attrs = object_1.clone(tool.attributes);\n                    attrs.plot = this;\n                    results.push(new tool.constructor(attrs));\n                }\n            }\n            return results;\n        }).call(this);\n        return this.toolbar.tools = this.toolbar.tools.concat(new_tools);\n    };\n    Plot.prototype.get_aspect_ratio = function () {\n        return this.width / this.height;\n    };\n    Plot.prototype.get_layoutable_children = function () {\n        var children;\n        children = [this.plot_canvas];\n        if (this.toolbar_location != null) {\n            children = [this.toolbar, this.plot_canvas];\n        }\n        return children;\n    };\n    Plot.prototype.get_edit_variables = function () {\n        var child, edit_variables, i, len, ref;\n        edit_variables = Plot.__super__.get_edit_variables.call(this);\n        if (this.sizing_mode === 'scale_both') {\n            edit_variables.push({\n                edit_variable: this._width,\n                strength: solver_1.Strength.strong\n            });\n            edit_variables.push({\n                edit_variable: this._height,\n                strength: solver_1.Strength.strong\n            });\n        }\n        ref = this.get_layoutable_children();\n        for (i = 0, len = ref.length; i < len; i++) {\n            child = ref[i];\n            edit_variables = edit_variables.concat(child.get_edit_variables());\n        }\n        return edit_variables;\n    };\n    Plot.prototype.get_constraints = function () {\n        var child, constraints, i, len, ref, ref1, ref2, sticky_edge;\n        constraints = Plot.__super__.get_constraints.call(this);\n        if (this.toolbar_location != null) {\n            if (this.toolbar_sticky === true) {\n                constraints.push(solver_1.EQ(this._sizeable, [-1, this.plot_canvas._sizeable]));\n            }\n            else {\n                constraints.push(solver_1.EQ(this._sizeable, [-1, this.plot_canvas._sizeable], [-1, this.toolbar._sizeable]));\n            }\n            if (!this._horizontal) {\n                constraints.push(solver_1.EQ(this._width, [-1, this.plot_canvas._width]));\n            }\n            else {\n                constraints.push(solver_1.EQ(this._height, [-1, this.plot_canvas._height]));\n            }\n            if (this.toolbar_location === 'above') {\n                sticky_edge = this.toolbar_sticky === true ? this.plot_canvas._top : this.plot_canvas._dom_top;\n                constraints.push(solver_1.EQ(sticky_edge, [-1, this.toolbar._dom_top], [-1, this.toolbar._height]));\n            }\n            if (this.toolbar_location === 'below') {\n                if (this.toolbar_sticky === false) {\n                    constraints.push(solver_1.EQ(this.toolbar._dom_top, [-1, this.plot_canvas._height], this.toolbar._bottom, [-1, this.toolbar._height]));\n                }\n                if (this.toolbar_sticky === true) {\n                    constraints.push(solver_1.GE(this.plot_canvas.below_panel._height, [-1, this.toolbar._height]));\n                    constraints.push(solver_1.WEAK_EQ(this.toolbar._dom_top, [-1, this.plot_canvas._height], this.plot_canvas.below_panel._height));\n                }\n            }\n            if (this.toolbar_location === 'left') {\n                sticky_edge = this.toolbar_sticky === true ? this.plot_canvas._left : this.plot_canvas._dom_left;\n                constraints.push(solver_1.EQ(sticky_edge, [-1, this.toolbar._dom_left], [-1, this.toolbar._width]));\n            }\n            if (this.toolbar_location === 'right') {\n                if (this.toolbar_sticky === false) {\n                    constraints.push(solver_1.EQ(this.toolbar._dom_left, [-1, this.plot_canvas._width], this.toolbar._right, [-1, this.toolbar._width]));\n                }\n                if (this.toolbar_sticky === true) {\n                    constraints.push(solver_1.GE(this.plot_canvas.right_panel._width, [-1, this.toolbar._width]));\n                    constraints.push(solver_1.WEAK_EQ(this.toolbar._dom_left, [-1, this.plot_canvas._width], this.plot_canvas.right_panel._width));\n                }\n            }\n            if ((ref = this.toolbar_location) === 'above' || ref === 'below') {\n                constraints.push(solver_1.EQ(this._width, [-1, this.toolbar._width], [-1, this.plot_canvas._width_minus_right]));\n            }\n            if ((ref1 = this.toolbar_location) === 'left' || ref1 === 'right') {\n                constraints.push(solver_1.EQ(this._height, [-1, this.toolbar._height], [-1, this.plot_canvas.above_panel._height]));\n                constraints.push(solver_1.EQ(this.toolbar._dom_top, [-1, this.plot_canvas.above_panel._height]));\n            }\n        }\n        if (this.toolbar_location == null) {\n            constraints.push(solver_1.EQ(this._width, [-1, this.plot_canvas._width]));\n            constraints.push(solver_1.EQ(this._height, [-1, this.plot_canvas._height]));\n        }\n        ref2 = this.get_layoutable_children();\n        for (i = 0, len = ref2.length; i < len; i++) {\n            child = ref2[i];\n            constraints = constraints.concat(child.get_constraints());\n        }\n        return constraints;\n    };\n    Plot.prototype.get_constrained_variables = function () {\n        var vars;\n        vars = object_1.extend({}, Plot.__super__.get_constrained_variables.call(this), {\n            on_edge_align_top: this.plot_canvas._top,\n            on_edge_align_bottom: this.plot_canvas._height_minus_bottom,\n            on_edge_align_left: this.plot_canvas._left,\n            on_edge_align_right: this.plot_canvas._width_minus_right,\n            box_cell_align_top: this.plot_canvas._top,\n            box_cell_align_bottom: this.plot_canvas._height_minus_bottom,\n            box_cell_align_left: this.plot_canvas._left,\n            box_cell_align_right: this.plot_canvas._width_minus_right,\n            box_equal_size_top: this.plot_canvas._top,\n            box_equal_size_bottom: this.plot_canvas._height_minus_bottom\n        });\n        if (this.sizing_mode !== 'fixed') {\n            vars.box_equal_size_left = this.plot_canvas._left;\n            vars.box_equal_size_right = this.plot_canvas._width_minus_right;\n        }\n        return vars;\n    };\n    Plot.mixins(['line:outline_', 'fill:background_', 'fill:border_']);\n    Plot.define({\n        toolbar: [\n            p.Instance, function () {\n                return new toolbar_1.Toolbar();\n            }\n        ],\n        toolbar_location: [p.Location, 'right'],\n        toolbar_sticky: [p.Bool, true],\n        plot_width: [p.Number, 600],\n        plot_height: [p.Number, 600],\n        title: [\n            p.Any, function () {\n                return new title_1.Title({\n                    text: \"\"\n                });\n            }\n        ],\n        title_location: [p.Location, 'above'],\n        h_symmetry: [p.Bool, true],\n        v_symmetry: [p.Bool, false],\n        above: [p.Array, []],\n        below: [p.Array, []],\n        left: [p.Array, []],\n        right: [p.Array, []],\n        renderers: [p.Array, []],\n        x_range: [p.Instance],\n        extra_x_ranges: [p.Any, {}],\n        y_range: [p.Instance],\n        extra_y_ranges: [p.Any, {}],\n        x_scale: [\n            p.Instance, function () {\n                return new linear_scale_1.LinearScale();\n            }\n        ],\n        y_scale: [\n            p.Instance, function () {\n                return new linear_scale_1.LinearScale();\n            }\n        ],\n        tool_events: [\n            p.Instance, function () {\n                return new tool_events_1.ToolEvents();\n            }\n        ],\n        lod_factor: [p.Number, 10],\n        lod_interval: [p.Number, 300],\n        lod_threshold: [p.Number, 2000],\n        lod_timeout: [p.Number, 500],\n        hidpi: [p.Bool, true],\n        output_backend: [p.OutputBackend, \"canvas\"],\n        min_border: [p.Number, 5],\n        min_border_top: [p.Number, null],\n        min_border_left: [p.Number, null],\n        min_border_bottom: [p.Number, null],\n        min_border_right: [p.Number, null],\n        inner_width: [p.Number],\n        inner_height: [p.Number],\n        layout_width: [p.Number],\n        layout_height: [p.Number]\n    });\n    Plot.override({\n        outline_line_color: '#e5e5e5',\n        border_fill_color: \"#ffffff\",\n        background_fill_color: \"#ffffff\"\n    });\n    Plot.getters({\n        all_renderers: function () {\n            var i, len, ref, renderers, tool;\n            renderers = this.renderers;\n            ref = this.toolbar.tools;\n            for (i = 0, len = ref.length; i < len; i++) {\n                tool = ref[i];\n                renderers = renderers.concat(tool.synthetic_renderers);\n            }\n            return renderers;\n        },\n        x_mapper_type: function () {\n            log.warning(\"x_mapper_type attr is deprecated, use x_scale\");\n            return this.x_scale;\n        },\n        y_mapper_type: function () {\n            log.warning(\"y_mapper_type attr is deprecated, use y_scale\");\n            return this.y_scale;\n        },\n        webgl: function () {\n            log.warning(\"webgl attr is deprecated, use output_backend\");\n            return this.output_backend === \"webgl\";\n        }\n    });\n    return Plot;\n})(layout_dom_1.LayoutDOM);\nbokeh_events_1.register_with_event(bokeh_events_1.UIEvent, exports.Plot);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar global_glcanvas, extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar canvas_1 = require(\"../canvas/canvas\");\nvar cartesian_frame_1 = require(\"../canvas/cartesian_frame\");\nvar data_range1d_1 = require(\"../ranges/data_range1d\");\nvar glyph_renderer_1 = require(\"../renderers/glyph_renderer\");\nvar layout_dom_1 = require(\"../layouts/layout_dom\");\nvar signaling_1 = require(\"core/signaling\");\nvar build_views_1 = require(\"core/build_views\");\nvar ui_events_1 = require(\"core/ui_events\");\nvar bokeh_events_1 = require(\"core/bokeh_events\");\nvar layout_canvas_1 = require(\"core/layout/layout_canvas\");\nvar visuals_1 = require(\"core/visuals\");\nvar dom_view_1 = require(\"core/dom_view\");\nvar solver_1 = require(\"core/layout/solver\");\nvar logging_1 = require(\"core/logging\");\nvar enums = require(\"core/enums\");\nvar p = require(\"core/properties\");\nvar throttle_1 = require(\"core/util/throttle\");\nvar types_1 = require(\"core/util/types\");\nvar array_1 = require(\"core/util/array\");\nvar object_1 = require(\"core/util/object\");\nvar side_panel_1 = require(\"core/layout/side_panel\");\nglobal_glcanvas = null;\nexports.PlotCanvasView = (function (superClass) {\n    extend1(PlotCanvasView, superClass);\n    function PlotCanvasView() {\n        return PlotCanvasView.__super__.constructor.apply(this, arguments);\n    }\n    PlotCanvasView.prototype.className = \"bk-plot-wrapper\";\n    PlotCanvasView.prototype.state = {\n        history: [],\n        index: -1\n    };\n    PlotCanvasView.prototype.view_options = function () {\n        return object_1.extend({\n            plot_view: this,\n            parent: this\n        }, this.options);\n    };\n    PlotCanvasView.prototype.pause = function () {\n        if (this._is_paused == null) {\n            return this._is_paused = 1;\n        }\n        else {\n            return this._is_paused += 1;\n        }\n    };\n    PlotCanvasView.prototype.unpause = function (no_render) {\n        if (no_render == null) {\n            no_render = false;\n        }\n        this._is_paused -= 1;\n        if (this._is_paused === 0 && !no_render) {\n            return this.request_render();\n        }\n    };\n    PlotCanvasView.prototype.request_render = function () {\n        return this.request_paint();\n    };\n    PlotCanvasView.prototype.request_paint = function () {\n        if (!this.is_paused) {\n            this.throttled_paint();\n        }\n    };\n    PlotCanvasView.prototype.remove = function () {\n        build_views_1.remove_views(this.renderer_views);\n        build_views_1.remove_views(this.tool_views);\n        this.canvas_view.remove();\n        this.canvas_view = null;\n        return PlotCanvasView.__super__.remove.call(this);\n    };\n    PlotCanvasView.prototype.initialize = function (options) {\n        var j, len, level, ref;\n        this.pause();\n        PlotCanvasView.__super__.initialize.call(this, options);\n        this.force_paint = new signaling_1.Signal(this, \"force_paint\");\n        this.state_changed = new signaling_1.Signal(this, \"state_changed\");\n        this.lod_started = false;\n        this.visuals = new visuals_1.Visuals(this.model.plot);\n        this._initial_state_info = {\n            range: null,\n            selection: {},\n            dimensions: {\n                width: this.model.canvas._width.value,\n                height: this.model.canvas._height.value\n            }\n        };\n        this.frame = this.model.frame;\n        this.canvas = this.model.canvas;\n        this.canvas_view = new this.canvas.default_view({\n            model: this.canvas,\n            parent: this\n        });\n        this.el.appendChild(this.canvas_view.el);\n        this.canvas_view.render();\n        if (this.model.plot.output_backend === \"webgl\") {\n            this.init_webgl();\n        }\n        this.throttled_paint = throttle_1.throttle(((function (_this) {\n            return function () {\n                return _this.force_paint.emit();\n            };\n        })(this)), 15);\n        this.ui_event_bus = new ui_events_1.UIEvents(this, this.model.toolbar, this.canvas_view.el, this.model.plot);\n        this.levels = {};\n        ref = enums.RenderLevel;\n        for (j = 0, len = ref.length; j < len; j++) {\n            level = ref[j];\n            this.levels[level] = {};\n        }\n        this.renderer_views = {};\n        this.tool_views = {};\n        this.build_levels();\n        this.build_tools();\n        this.connect_signals();\n        this.update_dataranges();\n        this.unpause(true);\n        logging_1.logger.debug(\"PlotView initialized\");\n        return this;\n    };\n    PlotCanvasView.prototype.set_cursor = function (cursor) {\n        if (cursor == null) {\n            cursor = \"default\";\n        }\n        return this.canvas_view.el.style.cursor = cursor;\n    };\n    PlotCanvasView.getters({\n        canvas_overlays: function () {\n            return this.canvas_view.overlays_el;\n        },\n        is_paused: function () {\n            return (this._is_paused != null) && this._is_paused !== 0;\n        }\n    });\n    PlotCanvasView.prototype.init_webgl = function () {\n        var ctx, glcanvas, opts;\n        ctx = this.canvas_view.ctx;\n        glcanvas = global_glcanvas;\n        if (glcanvas == null) {\n            global_glcanvas = glcanvas = document.createElement('canvas');\n            opts = {\n                'premultipliedAlpha': true\n            };\n            glcanvas.gl = glcanvas.getContext(\"webgl\", opts) || glcanvas.getContext(\"experimental-webgl\", opts);\n        }\n        if (glcanvas.gl != null) {\n            return ctx.glcanvas = glcanvas;\n        }\n        else {\n            return logging_1.logger.warn('WebGL is not supported, falling back to 2D canvas.');\n        }\n    };\n    PlotCanvasView.prototype.prepare_webgl = function (ratio, frame_box) {\n        var canvas, ctx, flipped_top, gl;\n        ctx = this.canvas_view.ctx;\n        canvas = this.canvas_view.get_canvas_element();\n        if (ctx.glcanvas) {\n            ctx.glcanvas.width = canvas.width;\n            ctx.glcanvas.height = canvas.height;\n            gl = ctx.glcanvas.gl;\n            gl.viewport(0, 0, ctx.glcanvas.width, ctx.glcanvas.height);\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT || gl.DEPTH_BUFFER_BIT);\n            gl.enable(gl.SCISSOR_TEST);\n            flipped_top = ctx.glcanvas.height - ratio * (frame_box[1] + frame_box[3]);\n            gl.scissor(ratio * frame_box[0], flipped_top, ratio * frame_box[2], ratio * frame_box[3]);\n            gl.enable(gl.BLEND);\n            return gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE_MINUS_DST_ALPHA, gl.ONE);\n        }\n    };\n    PlotCanvasView.prototype.blit_webgl = function (ratio) {\n        var ctx;\n        ctx = this.canvas_view.ctx;\n        if (ctx.glcanvas) {\n            logging_1.logger.debug('drawing with WebGL');\n            ctx.restore();\n            ctx.drawImage(ctx.glcanvas, 0, 0);\n            ctx.save();\n            ctx.scale(ratio, ratio);\n            return ctx.translate(0.5, 0.5);\n        }\n    };\n    PlotCanvasView.prototype.update_dataranges = function () {\n        var bds, bounds, bounds_to_use, calculate_log_bounds, follow_enabled, frame, has_bounds, j, k, l, len, len1, len2, len3, len4, log_bds, log_bounds, m, n, o, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, v, xr, yr;\n        frame = this.model.frame;\n        bounds = {};\n        log_bounds = {};\n        calculate_log_bounds = false;\n        ref = object_1.values(frame.x_ranges).concat(object_1.values(frame.y_ranges));\n        for (j = 0, len = ref.length; j < len; j++) {\n            r = ref[j];\n            if (r instanceof data_range1d_1.DataRange1d) {\n                if (r.scale_hint === \"log\") {\n                    calculate_log_bounds = true;\n                }\n            }\n        }\n        ref1 = this.renderer_views;\n        for (k in ref1) {\n            v = ref1[k];\n            bds = (ref2 = v.glyph) != null ? typeof ref2.bounds === \"function\" ? ref2.bounds() : void 0 : void 0;\n            if (bds != null) {\n                bounds[k] = bds;\n            }\n            if (calculate_log_bounds) {\n                log_bds = (ref3 = v.glyph) != null ? typeof ref3.log_bounds === \"function\" ? ref3.log_bounds() : void 0 : void 0;\n                if (log_bds != null) {\n                    log_bounds[k] = log_bds;\n                }\n            }\n        }\n        follow_enabled = false;\n        has_bounds = false;\n        ref4 = object_1.values(frame.x_ranges);\n        for (l = 0, len1 = ref4.length; l < len1; l++) {\n            xr = ref4[l];\n            if (xr instanceof data_range1d_1.DataRange1d) {\n                bounds_to_use = xr.scale_hint === \"log\" ? log_bounds : bounds;\n                xr.update(bounds_to_use, 0, this.model.id);\n                if (xr.follow) {\n                    follow_enabled = true;\n                }\n            }\n            if (xr.bounds != null) {\n                has_bounds = true;\n            }\n        }\n        ref5 = object_1.values(frame.y_ranges);\n        for (m = 0, len2 = ref5.length; m < len2; m++) {\n            yr = ref5[m];\n            if (yr instanceof data_range1d_1.DataRange1d) {\n                bounds_to_use = yr.scale_hint === \"log\" ? log_bounds : bounds;\n                yr.update(bounds_to_use, 1, this.model.id);\n                if (yr.follow) {\n                    follow_enabled = true;\n                }\n            }\n            if (yr.bounds != null) {\n                has_bounds = true;\n            }\n        }\n        if (follow_enabled && has_bounds) {\n            logging_1.logger.warn('Follow enabled so bounds are unset.');\n            ref6 = object_1.values(frame.x_ranges);\n            for (n = 0, len3 = ref6.length; n < len3; n++) {\n                xr = ref6[n];\n                xr.bounds = null;\n            }\n            ref7 = object_1.values(frame.y_ranges);\n            for (o = 0, len4 = ref7.length; o < len4; o++) {\n                yr = ref7[o];\n                yr.bounds = null;\n            }\n        }\n        return this.range_update_timestamp = Date.now();\n    };\n    PlotCanvasView.prototype.map_to_screen = function (x, y, x_name, y_name) {\n        if (x_name == null) {\n            x_name = 'default';\n        }\n        if (y_name == null) {\n            y_name = 'default';\n        }\n        return this.frame.map_to_screen(x, y, this.canvas, x_name, y_name);\n    };\n    PlotCanvasView.prototype.push_state = function (type, info) {\n        var prev_info, ref;\n        prev_info = ((ref = this.state.history[this.state.index]) != null ? ref.info : void 0) || {};\n        info = object_1.extend({}, this._initial_state_info, prev_info, info);\n        this.state.history.slice(0, this.state.index + 1);\n        this.state.history.push({\n            type: type,\n            info: info\n        });\n        this.state.index = this.state.history.length - 1;\n        return this.state_changed.emit();\n    };\n    PlotCanvasView.prototype.clear_state = function () {\n        this.state = {\n            history: [],\n            index: -1\n        };\n        return this.state_changed.emit();\n    };\n    PlotCanvasView.prototype.can_undo = function () {\n        return this.state.index >= 0;\n    };\n    PlotCanvasView.prototype.can_redo = function () {\n        return this.state.index < this.state.history.length - 1;\n    };\n    PlotCanvasView.prototype.undo = function () {\n        if (this.can_undo()) {\n            this.state.index -= 1;\n            this._do_state_change(this.state.index);\n            return this.state_changed.emit();\n        }\n    };\n    PlotCanvasView.prototype.redo = function () {\n        if (this.can_redo()) {\n            this.state.index += 1;\n            this._do_state_change(this.state.index);\n            return this.state_changed.emit();\n        }\n    };\n    PlotCanvasView.prototype._do_state_change = function (index) {\n        var info, ref;\n        info = ((ref = this.state.history[index]) != null ? ref.info : void 0) || this._initial_state_info;\n        if (info.range != null) {\n            this.update_range(info.range);\n        }\n        if (info.selection != null) {\n            this.update_selection(info.selection);\n        }\n        if (info.dimensions != null) {\n            return this.canvas_view.set_dims([info.dimensions.width, info.dimensions.height]);\n        }\n    };\n    PlotCanvasView.prototype.reset_dimensions = function () {\n        return this.update_dimensions(this.canvas.initial_width, this.canvas.initial_height);\n    };\n    PlotCanvasView.prototype.update_dimensions = function (width, height) {\n        this.pause();\n        this.model.plot.width = width;\n        this.model.plot.height = height;\n        this.parent.layout();\n        return this.unpause();\n    };\n    PlotCanvasView.prototype.get_selection = function () {\n        var j, len, ref, renderer, selected, selection;\n        selection = [];\n        ref = this.model.plot.renderers;\n        for (j = 0, len = ref.length; j < len; j++) {\n            renderer = ref[j];\n            if (renderer instanceof glyph_renderer_1.GlyphRenderer) {\n                selected = renderer.data_source.selected;\n                selection[renderer.id] = selected;\n            }\n        }\n        return selection;\n    };\n    PlotCanvasView.prototype.update_selection = function (selection) {\n        var ds, j, len, ref, ref1, renderer, results;\n        ref = this.model.plot.renderers;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n            renderer = ref[j];\n            if (!(renderer instanceof glyph_renderer_1.GlyphRenderer)) {\n                continue;\n            }\n            ds = renderer.data_source;\n            if (selection != null) {\n                if (ref1 = renderer.id, indexOf.call(selection, ref1) >= 0) {\n                    results.push(ds.selected = selection[renderer.id]);\n                }\n                else {\n                    results.push(void 0);\n                }\n            }\n            else {\n                results.push(ds.selection_manager.clear());\n            }\n        }\n        return results;\n    };\n    PlotCanvasView.prototype.reset_selection = function () {\n        return this.update_selection(null);\n    };\n    PlotCanvasView.prototype._update_ranges_together = function (range_info_iter) {\n        var j, l, len, len1, range_info, ref, ref1, results, rng, weight;\n        weight = 1.0;\n        for (j = 0, len = range_info_iter.length; j < len; j++) {\n            ref = range_info_iter[j], rng = ref[0], range_info = ref[1];\n            weight = Math.min(weight, this._get_weight_to_constrain_interval(rng, range_info));\n        }\n        if (weight < 1) {\n            results = [];\n            for (l = 0, len1 = range_info_iter.length; l < len1; l++) {\n                ref1 = range_info_iter[l], rng = ref1[0], range_info = ref1[1];\n                range_info['start'] = weight * range_info['start'] + (1 - weight) * rng.start;\n                results.push(range_info['end'] = weight * range_info['end'] + (1 - weight) * rng.end);\n            }\n            return results;\n        }\n    };\n    PlotCanvasView.prototype._update_ranges_individually = function (range_info_iter, is_panning, is_scrolling) {\n        var hit_bound, j, l, len, len1, max, min, new_interval, range_info, ref, ref1, results, reversed, rng, weight;\n        hit_bound = false;\n        for (j = 0, len = range_info_iter.length; j < len; j++) {\n            ref = range_info_iter[j], rng = ref[0], range_info = ref[1];\n            reversed = rng.start > rng.end;\n            if (!is_scrolling) {\n                weight = this._get_weight_to_constrain_interval(rng, range_info);\n                if (weight < 1) {\n                    range_info['start'] = weight * range_info['start'] + (1 - weight) * rng.start;\n                    range_info['end'] = weight * range_info['end'] + (1 - weight) * rng.end;\n                }\n            }\n            if (rng.bounds != null) {\n                min = rng.bounds[0];\n                max = rng.bounds[1];\n                new_interval = Math.abs(range_info['end'] - range_info['start']);\n                if (reversed) {\n                    if (min != null) {\n                        if (min >= range_info['end']) {\n                            hit_bound = true;\n                            range_info['end'] = min;\n                            if ((is_panning != null) || (is_scrolling != null)) {\n                                range_info['start'] = min + new_interval;\n                            }\n                        }\n                    }\n                    if (max != null) {\n                        if (max <= range_info['start']) {\n                            hit_bound = true;\n                            range_info['start'] = max;\n                            if ((is_panning != null) || (is_scrolling != null)) {\n                                range_info['end'] = max - new_interval;\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (min != null) {\n                        if (min >= range_info['start']) {\n                            hit_bound = true;\n                            range_info['start'] = min;\n                            if ((is_panning != null) || (is_scrolling != null)) {\n                                range_info['end'] = min + new_interval;\n                            }\n                        }\n                    }\n                    if (max != null) {\n                        if (max <= range_info['end']) {\n                            hit_bound = true;\n                            range_info['end'] = max;\n                            if ((is_panning != null) || (is_scrolling != null)) {\n                                range_info['start'] = max - new_interval;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (is_scrolling && hit_bound) {\n            return;\n        }\n        results = [];\n        for (l = 0, len1 = range_info_iter.length; l < len1; l++) {\n            ref1 = range_info_iter[l], rng = ref1[0], range_info = ref1[1];\n            rng.have_updated_interactively = true;\n            if (rng.start !== range_info['start'] || rng.end !== range_info['end']) {\n                results.push(rng.setv(range_info));\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    PlotCanvasView.prototype._get_weight_to_constrain_interval = function (rng, range_info) {\n        var max, max_interval, max_interval2, min, min_interval, new_interval, old_interval, ref, weight;\n        min_interval = rng.min_interval;\n        max_interval = rng.max_interval;\n        weight = 1.0;\n        if (rng.bounds != null) {\n            ref = rng.bounds, min = ref[0], max = ref[1];\n            if ((min != null) && (max != null)) {\n                max_interval2 = Math.abs(max - min);\n                max_interval = max_interval != null ? Math.min(max_interval, max_interval2) : max_interval2;\n            }\n        }\n        if ((min_interval != null) || (max_interval != null)) {\n            old_interval = Math.abs(rng.end - rng.start);\n            new_interval = Math.abs(range_info['end'] - range_info['start']);\n            if (min_interval > 0 && new_interval < min_interval) {\n                weight = (old_interval - min_interval) / (old_interval - new_interval);\n            }\n            if (max_interval > 0 && new_interval > max_interval) {\n                weight = (max_interval - old_interval) / (new_interval - old_interval);\n            }\n            weight = Math.max(0.0, Math.min(1.0, weight));\n        }\n        return weight;\n    };\n    PlotCanvasView.prototype.update_range = function (range_info, is_panning, is_scrolling) {\n        var name, range_info_iter, ref, ref1, ref2, ref3, rng;\n        this.pause();\n        if (range_info == null) {\n            ref = this.frame.x_ranges;\n            for (name in ref) {\n                rng = ref[name];\n                rng.reset();\n            }\n            ref1 = this.frame.y_ranges;\n            for (name in ref1) {\n                rng = ref1[name];\n                rng.reset();\n            }\n            this.update_dataranges();\n        }\n        else {\n            range_info_iter = [];\n            ref2 = this.frame.x_ranges;\n            for (name in ref2) {\n                rng = ref2[name];\n                range_info_iter.push([rng, range_info.xrs[name]]);\n            }\n            ref3 = this.frame.y_ranges;\n            for (name in ref3) {\n                rng = ref3[name];\n                range_info_iter.push([rng, range_info.yrs[name]]);\n            }\n            if (is_scrolling) {\n                this._update_ranges_together(range_info_iter);\n            }\n            this._update_ranges_individually(range_info_iter, is_panning, is_scrolling);\n        }\n        return this.unpause();\n    };\n    PlotCanvasView.prototype.reset_range = function () {\n        return this.update_range(null);\n    };\n    PlotCanvasView.prototype.build_levels = function () {\n        var id_, j, l, len, len1, model, new_renderer_views, old_renderers, renderer_models, renderers_to_remove, view;\n        renderer_models = this.model.plot.all_renderers;\n        old_renderers = Object.keys(this.renderer_views);\n        new_renderer_views = build_views_1.build_views(this.renderer_views, renderer_models, this.view_options());\n        renderers_to_remove = array_1.difference(old_renderers, (function () {\n            var j, len, results;\n            results = [];\n            for (j = 0, len = renderer_models.length; j < len; j++) {\n                model = renderer_models[j];\n                results.push(model.id);\n            }\n            return results;\n        })());\n        for (j = 0, len = renderers_to_remove.length; j < len; j++) {\n            id_ = renderers_to_remove[j];\n            delete this.levels.glyph[id_];\n        }\n        for (l = 0, len1 = new_renderer_views.length; l < len1; l++) {\n            view = new_renderer_views[l];\n            this.levels[view.model.level][view.model.id] = view;\n            view.connect_signals();\n        }\n        return this;\n    };\n    PlotCanvasView.prototype.get_renderer_views = function () {\n        var j, len, r, ref, results;\n        ref = this.model.plot.renderers;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n            r = ref[j];\n            results.push(this.levels[r.level][r.id]);\n        }\n        return results;\n    };\n    PlotCanvasView.prototype.build_tools = function () {\n        var j, len, new_tool_views, results, tool_models, tool_view;\n        tool_models = this.model.plot.toolbar.tools;\n        new_tool_views = build_views_1.build_views(this.tool_views, tool_models, this.view_options());\n        results = [];\n        for (j = 0, len = new_tool_views.length; j < len; j++) {\n            tool_view = new_tool_views[j];\n            tool_view.connect_signals();\n            results.push(this.ui_event_bus.register_tool(tool_view));\n        }\n        return results;\n    };\n    PlotCanvasView.prototype.connect_signals = function () {\n        var name, ref, ref1, rng;\n        PlotCanvasView.__super__.connect_signals.call(this);\n        this.connect(this.force_paint, (function (_this) {\n            return function () {\n                return _this.paint();\n            };\n        })(this));\n        ref = this.model.frame.x_ranges;\n        for (name in ref) {\n            rng = ref[name];\n            this.connect(rng.change, function () {\n                return this.request_render();\n            });\n        }\n        ref1 = this.model.frame.y_ranges;\n        for (name in ref1) {\n            rng = ref1[name];\n            this.connect(rng.change, function () {\n                return this.request_render();\n            });\n        }\n        this.connect(this.model.plot.properties.renderers.change, (function (_this) {\n            return function () {\n                return _this.build_levels();\n            };\n        })(this));\n        this.connect(this.model.plot.toolbar.properties.tools.change, (function (_this) {\n            return function () {\n                _this.build_levels();\n                return _this.build_tools();\n            };\n        })(this));\n        return this.connect(this.model.plot.change, function () {\n            return this.request_render();\n        });\n    };\n    PlotCanvasView.prototype.set_initial_range = function () {\n        var good_vals, name, ref, ref1, rng, xrs, yrs;\n        good_vals = true;\n        xrs = {};\n        ref = this.frame.x_ranges;\n        for (name in ref) {\n            rng = ref[name];\n            if ((rng.start == null) || (rng.end == null) || types_1.isStrictNaN(rng.start + rng.end)) {\n                good_vals = false;\n                break;\n            }\n            xrs[name] = {\n                start: rng.start,\n                end: rng.end\n            };\n        }\n        if (good_vals) {\n            yrs = {};\n            ref1 = this.frame.y_ranges;\n            for (name in ref1) {\n                rng = ref1[name];\n                if ((rng.start == null) || (rng.end == null) || types_1.isStrictNaN(rng.start + rng.end)) {\n                    good_vals = false;\n                    break;\n                }\n                yrs[name] = {\n                    start: rng.start,\n                    end: rng.end\n                };\n            }\n        }\n        if (good_vals) {\n            this._initial_state_info.range = this.initial_range_info = {\n                xrs: xrs,\n                yrs: yrs\n            };\n            return logging_1.logger.debug(\"initial ranges set\");\n        }\n        else {\n            return logging_1.logger.warn('could not set initial ranges');\n        }\n    };\n    PlotCanvasView.prototype.update_constraints = function () {\n        var _, ref, view;\n        this.solver.suggest_value(this.frame._width, this.canvas._width.value - 1);\n        this.solver.suggest_value(this.frame._height, this.canvas._height.value - 1);\n        ref = this.renderer_views;\n        for (_ in ref) {\n            view = ref[_];\n            if (view.model.panel != null) {\n                side_panel_1.update_panel_constraints(view);\n            }\n        }\n        return this.solver.update_variables();\n    };\n    PlotCanvasView.prototype._layout = function (final) {\n        if (final == null) {\n            final = false;\n        }\n        this.render();\n        if (final) {\n            this.model.plot.setv({\n                inner_width: Math.round(this.frame._width.value),\n                inner_height: Math.round(this.frame._height.value),\n                layout_width: Math.round(this.canvas._width.value),\n                layout_height: Math.round(this.canvas._height.value)\n            }, {\n                no_change: true\n            });\n            return this.request_paint();\n        }\n    };\n    PlotCanvasView.prototype.has_finished = function () {\n        var _, ref, renderer_views, view;\n        if (!PlotCanvasView.__super__.has_finished.call(this)) {\n            return false;\n        }\n        ref = this.levels;\n        for (_ in ref) {\n            renderer_views = ref[_];\n            for (_ in renderer_views) {\n                view = renderer_views[_];\n                if (!view.has_finished()) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    PlotCanvasView.prototype.render = function () {\n        var height, width;\n        width = this.model._width.value;\n        height = this.model._height.value;\n        this.canvas_view.set_dims([width, height]);\n        this.update_constraints();\n        this.el.style.position = 'absolute';\n        this.el.style.left = this.model._dom_left.value + \"px\";\n        this.el.style.top = this.model._dom_top.value + \"px\";\n        this.el.style.width = this.model._width.value + \"px\";\n        return this.el.style.height = this.model._height.value + \"px\";\n    };\n    PlotCanvasView.prototype.paint = function () {\n        var ctx, frame_box, k, lod_timeout, ratio, ref, v;\n        if (this.is_paused) {\n            return;\n        }\n        logging_1.logger.trace(\"PlotCanvas.render() for \" + this.model.id);\n        this.canvas_view.prepare_canvas();\n        if (Date.now() - this.interactive_timestamp < this.model.plot.lod_interval) {\n            if (!this.lod_started) {\n                this.model.plot.trigger_event(new bokeh_events_1.LODStart({}));\n                this.lod_started = true;\n            }\n            this.interactive = true;\n            lod_timeout = this.model.plot.lod_timeout;\n            setTimeout((function (_this) {\n                return function () {\n                    if (_this.interactive && (Date.now() - _this.interactive_timestamp) > lod_timeout) {\n                        _this.interactive = false;\n                    }\n                    return _this.request_render();\n                };\n            })(this), lod_timeout);\n        }\n        else {\n            this.interactive = false;\n            if (this.lod_started) {\n                this.model.plot.trigger_event(new bokeh_events_1.LODEnd({}));\n                this.lod_started = false;\n            }\n        }\n        ref = this.renderer_views;\n        for (k in ref) {\n            v = ref[k];\n            if ((this.range_update_timestamp == null) || v.set_data_timestamp > this.range_update_timestamp) {\n                this.update_dataranges();\n                break;\n            }\n        }\n        this.model.frame._update_scales();\n        ctx = this.canvas_view.ctx;\n        ctx.pixel_ratio = ratio = this.canvas.pixel_ratio;\n        ctx.save();\n        ctx.scale(ratio, ratio);\n        ctx.translate(0.5, 0.5);\n        frame_box = [this.canvas.vx_to_sx(this.frame._left.value), this.canvas.vy_to_sy(this.frame._top.value), this.frame._width.value, this.frame._height.value];\n        this._map_hook(ctx, frame_box);\n        this._paint_empty(ctx, frame_box);\n        this.prepare_webgl(ratio, frame_box);\n        ctx.save();\n        if (this.visuals.outline_line.doit) {\n            this.visuals.outline_line.set_value(ctx);\n            ctx.strokeRect.apply(ctx, frame_box);\n        }\n        ctx.restore();\n        this._paint_levels(ctx, ['image', 'underlay', 'glyph'], frame_box);\n        this.blit_webgl(ratio);\n        this._paint_levels(ctx, ['annotation'], frame_box);\n        this._paint_levels(ctx, ['overlay']);\n        if (this.initial_range_info == null) {\n            this.set_initial_range();\n        }\n        ctx.restore();\n        if (!this._has_finished) {\n            this._has_finished = true;\n            return this.notify_finished();\n        }\n    };\n    PlotCanvasView.prototype._paint_levels = function (ctx, levels, clip_region) {\n        var i, indices, j, l, len, len1, len2, level, m, ref, renderer, renderer_view, renderer_views, sortKey;\n        ctx.save();\n        if ((clip_region != null) && this.model.plot.output_backend === \"canvas\") {\n            ctx.beginPath();\n            ctx.rect.apply(ctx, clip_region);\n            ctx.clip();\n        }\n        indices = {};\n        ref = this.model.plot.renderers;\n        for (i = j = 0, len = ref.length; j < len; i = ++j) {\n            renderer = ref[i];\n            indices[renderer.id] = i;\n        }\n        sortKey = function (renderer_view) {\n            return indices[renderer_view.model.id];\n        };\n        for (l = 0, len1 = levels.length; l < len1; l++) {\n            level = levels[l];\n            renderer_views = array_1.sortBy(object_1.values(this.levels[level]), sortKey);\n            for (m = 0, len2 = renderer_views.length; m < len2; m++) {\n                renderer_view = renderer_views[m];\n                renderer_view.render();\n            }\n        }\n        return ctx.restore();\n    };\n    PlotCanvasView.prototype._map_hook = function (ctx, frame_box) { };\n    PlotCanvasView.prototype._paint_empty = function (ctx, frame_box) {\n        ctx.clearRect(0, 0, this.canvas_view.model._width.value, this.canvas_view.model._height.value);\n        if (this.visuals.border_fill.doit) {\n            this.visuals.border_fill.set_value(ctx);\n            ctx.fillRect(0, 0, this.canvas_view.model._width.value, this.canvas_view.model._height.value);\n            ctx.clearRect.apply(ctx, frame_box);\n        }\n        if (this.visuals.background_fill.doit) {\n            this.visuals.background_fill.set_value(ctx);\n            return ctx.fillRect.apply(ctx, frame_box);\n        }\n    };\n    PlotCanvasView.prototype.save = function (name) {\n        var blob, canvas, downloadLink, link, svg, svgblob;\n        if (this.model.plot.output_backend === \"canvas\") {\n            canvas = this.canvas_view.get_canvas_element();\n            if (canvas.msToBlob != null) {\n                blob = canvas.msToBlob();\n                return window.navigator.msSaveBlob(blob, name);\n            }\n            else {\n                link = document.createElement('a');\n                link.href = canvas.toDataURL('image/png');\n                link.download = name + \".png\";\n                link.target = \"_blank\";\n                return link.dispatchEvent(new MouseEvent('click'));\n            }\n        }\n        else if (this.model.plot.output_backend === \"svg\") {\n            svg = this.canvas_view.ctx.getSerializedSvg(true);\n            svgblob = new Blob([svg], {\n                type: 'text/plain'\n            });\n            downloadLink = document.createElement(\"a\");\n            downloadLink.download = name + \".svg\";\n            downloadLink.innerHTML = \"Download svg\";\n            downloadLink.href = window.URL.createObjectURL(svgblob);\n            downloadLink.onclick = function (event) {\n                return document.body.removeChild(event.target);\n            };\n            downloadLink.style.display = \"none\";\n            document.body.appendChild(downloadLink);\n            return downloadLink.click();\n        }\n    };\n    return PlotCanvasView;\n})(dom_view_1.DOMView);\nexports.PlotCanvas = (function (superClass) {\n    extend1(PlotCanvas, superClass);\n    function PlotCanvas() {\n        return PlotCanvas.__super__.constructor.apply(this, arguments);\n    }\n    PlotCanvas.prototype.type = 'PlotCanvas';\n    PlotCanvas.prototype.default_view = exports.PlotCanvasView;\n    PlotCanvas.prototype.initialize = function (attrs, options) {\n        var ref;\n        PlotCanvas.__super__.initialize.call(this, attrs, options);\n        this.canvas = new canvas_1.Canvas({\n            map: (ref = this.use_map) != null ? ref : false,\n            initial_width: this.plot.plot_width,\n            initial_height: this.plot.plot_height,\n            use_hidpi: this.plot.hidpi,\n            output_backend: this.plot.output_backend\n        });\n        this.frame = new cartesian_frame_1.CartesianFrame({\n            x_range: this.plot.x_range,\n            extra_x_ranges: this.plot.extra_x_ranges,\n            x_scale: this.plot.x_scale,\n            y_range: this.plot.y_range,\n            extra_y_ranges: this.plot.extra_y_ranges,\n            y_scale: this.plot.y_scale\n        });\n        this.above_panel = new layout_canvas_1.LayoutCanvas();\n        this.below_panel = new layout_canvas_1.LayoutCanvas();\n        this.left_panel = new layout_canvas_1.LayoutCanvas();\n        this.right_panel = new layout_canvas_1.LayoutCanvas();\n        return logging_1.logger.debug(\"PlotCanvas initialized\");\n    };\n    PlotCanvas.prototype._doc_attached = function () {\n        this.canvas.attach_document(this.document);\n        this.frame.attach_document(this.document);\n        this.above_panel.attach_document(this.document);\n        this.below_panel.attach_document(this.document);\n        this.left_panel.attach_document(this.document);\n        this.right_panel.attach_document(this.document);\n        PlotCanvas.__super__._doc_attached.call(this);\n        return logging_1.logger.debug(\"PlotCanvas attached to document\");\n    };\n    PlotCanvas.override({\n        sizing_mode: 'stretch_both'\n    });\n    PlotCanvas.internal({\n        plot: [p.Instance],\n        toolbar: [p.Instance],\n        canvas: [p.Instance],\n        frame: [p.Instance]\n    });\n    PlotCanvas.prototype.get_layoutable_children = function () {\n        var children, collect_panels;\n        children = [this.above_panel, this.below_panel, this.left_panel, this.right_panel, this.canvas, this.frame];\n        collect_panels = function (layout_renderers) {\n            var j, len, r, results;\n            results = [];\n            for (j = 0, len = layout_renderers.length; j < len; j++) {\n                r = layout_renderers[j];\n                if (r.panel != null) {\n                    results.push(children.push(r.panel));\n                }\n                else {\n                    results.push(void 0);\n                }\n            }\n            return results;\n        };\n        collect_panels(this.plot.above);\n        collect_panels(this.plot.below);\n        collect_panels(this.plot.left);\n        collect_panels(this.plot.right);\n        return children;\n    };\n    PlotCanvas.prototype.get_edit_variables = function () {\n        var child, edit_variables, j, len, ref;\n        edit_variables = [];\n        ref = this.get_layoutable_children();\n        for (j = 0, len = ref.length; j < len; j++) {\n            child = ref[j];\n            edit_variables = edit_variables.concat(child.get_edit_variables());\n        }\n        return edit_variables;\n    };\n    PlotCanvas.prototype.get_constraints = function () {\n        var child, constraints, j, len, ref;\n        constraints = PlotCanvas.__super__.get_constraints.call(this);\n        constraints = constraints.concat(this._get_constant_constraints());\n        constraints = constraints.concat(this._get_side_constraints());\n        ref = this.get_layoutable_children();\n        for (j = 0, len = ref.length; j < len; j++) {\n            child = ref[j];\n            constraints = constraints.concat(child.get_constraints());\n        }\n        return constraints;\n    };\n    PlotCanvas.prototype._get_constant_constraints = function () {\n        return [solver_1.GE(this.above_panel._height, -this.plot.min_border_top), solver_1.GE(this.below_panel._height, -this.plot.min_border_bottom), solver_1.GE(this.left_panel._width, -this.plot.min_border_left), solver_1.GE(this.right_panel._width, -this.plot.min_border_right), solver_1.EQ(this.above_panel._top, [-1, this.canvas._top]), solver_1.EQ(this.above_panel._bottom, [-1, this.frame._top]), solver_1.EQ(this.below_panel._bottom, [-1, this.canvas._bottom]), solver_1.EQ(this.below_panel._top, [-1, this.frame._bottom]), solver_1.EQ(this.left_panel._left, [-1, this.canvas._left]), solver_1.EQ(this.left_panel._right, [-1, this.frame._left]), solver_1.EQ(this.right_panel._right, [-1, this.canvas._right]), solver_1.EQ(this.right_panel._left, [-1, this.frame._right]), solver_1.EQ(this.above_panel._height, [-1, this._top]), solver_1.EQ(this.above_panel._height, [-1, this.canvas._top], this.frame._top), solver_1.EQ(this.below_panel._height, [-1, this._height], this._bottom), solver_1.EQ(this.below_panel._height, [-1, this.frame._bottom]), solver_1.EQ(this.left_panel._width, [-1, this._left]), solver_1.EQ(this.left_panel._width, [-1, this.frame._left]), solver_1.EQ(this.right_panel._width, [-1, this._width], this._right), solver_1.EQ(this.right_panel._width, [-1, this.canvas._right], this.frame._right)];\n    };\n    PlotCanvas.prototype._get_side_constraints = function () {\n        var constraint, constraints, j, l, last, layout_renderers, len, len1, r, ref, side, sides;\n        constraints = [];\n        sides = [['above', this.plot.above], ['below', this.plot.below], ['left', this.plot.left], ['right', this.plot.right]];\n        for (j = 0, len = sides.length; j < len; j++) {\n            ref = sides[j], side = ref[0], layout_renderers = ref[1];\n            last = this.frame;\n            for (l = 0, len1 = layout_renderers.length; l < len1; l++) {\n                r = layout_renderers[l];\n                constraint = (function () {\n                    switch (side) {\n                        case \"above\":\n                            return solver_1.EQ(last.panel._top, [-1, r.panel._bottom]);\n                        case \"below\":\n                            return solver_1.EQ(last.panel._bottom, [-1, r.panel._top]);\n                        case \"left\":\n                            return solver_1.EQ(last.panel._left, [-1, r.panel._right]);\n                        case \"right\":\n                            return solver_1.EQ(last.panel._right, [-1, r.panel._left]);\n                    }\n                })();\n                constraints.push(constraint);\n                last = r;\n            }\n            if (layout_renderers.length !== 0) {\n                constraint = (function () {\n                    switch (side) {\n                        case \"above\":\n                            return solver_1.EQ(last.panel._top, [-1, this.above_panel._top]);\n                        case \"below\":\n                            return solver_1.EQ(last.panel._bottom, [-1, this.below_panel._bottom]);\n                        case \"left\":\n                            return solver_1.EQ(last.panel._left, [-1, this.left_panel._left]);\n                        case \"right\":\n                            return solver_1.EQ(last.panel._right, [-1, this.right_panel._right]);\n                    }\n                }).call(this);\n                constraints.push(constraint);\n            }\n        }\n        return constraints;\n    };\n    return PlotCanvas;\n})(layout_dom_1.LayoutDOM);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar range_1 = require(\"./range\");\nvar p = require(\"core/properties\");\nexports.DataRange = (function (superClass) {\n    extend(DataRange, superClass);\n    function DataRange() {\n        return DataRange.__super__.constructor.apply(this, arguments);\n    }\n    DataRange.prototype.type = 'DataRange';\n    DataRange.define({\n        names: [p.Array, []],\n        renderers: [p.Array, []]\n    });\n    return DataRange;\n})(range_1.Range);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar data_range_1 = require(\"./data_range\");\nvar glyph_renderer_1 = require(\"../renderers/glyph_renderer\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar bbox = require(\"core/util/bbox\");\nexports.DataRange1d = (function (superClass) {\n    extend(DataRange1d, superClass);\n    function DataRange1d() {\n        return DataRange1d.__super__.constructor.apply(this, arguments);\n    }\n    DataRange1d.prototype.type = 'DataRange1d';\n    DataRange1d.define({\n        start: [p.Number],\n        end: [p.Number],\n        range_padding: [p.Number, 0.1],\n        range_padding_units: [p.PaddingUnits, \"percent\"],\n        flipped: [p.Bool, false],\n        follow: [p.StartEnd],\n        follow_interval: [p.Number],\n        default_span: [p.Number, 2],\n        bounds: [p.Any],\n        min_interval: [p.Any],\n        max_interval: [p.Any]\n    });\n    DataRange1d.internal({\n        scale_hint: [p.String, 'auto']\n    });\n    DataRange1d.prototype.initialize = function (attrs, options) {\n        DataRange1d.__super__.initialize.call(this, attrs, options);\n        this.plot_bounds = {};\n        this.have_updated_interactively = false;\n        this._initial_start = this.start;\n        this._initial_end = this.end;\n        this._initial_range_padding = this.range_padding;\n        this._initial_range_padding_units = this.range_padding_units;\n        this._initial_follow = this.follow;\n        this._initial_follow_interval = this.follow_interval;\n        return this._initial_default_span = this.default_span;\n    };\n    DataRange1d.getters({\n        min: function () {\n            return Math.min(this.start, this.end);\n        },\n        max: function () {\n            return Math.max(this.start, this.end);\n        }\n    });\n    DataRange1d.prototype.computed_renderers = function () {\n        var all_renderers, i, j, len, len1, names, plot, r, ref, renderers, rs;\n        names = this.names;\n        renderers = this.renderers;\n        if (renderers.length === 0) {\n            ref = this.plots;\n            for (i = 0, len = ref.length; i < len; i++) {\n                plot = ref[i];\n                all_renderers = plot.renderers;\n                rs = (function () {\n                    var j, len1, results;\n                    results = [];\n                    for (j = 0, len1 = all_renderers.length; j < len1; j++) {\n                        r = all_renderers[j];\n                        if (r instanceof glyph_renderer_1.GlyphRenderer) {\n                            results.push(r);\n                        }\n                    }\n                    return results;\n                })();\n                renderers = renderers.concat(rs);\n            }\n        }\n        if (names.length > 0) {\n            renderers = (function () {\n                var j, len1, results;\n                results = [];\n                for (j = 0, len1 = renderers.length; j < len1; j++) {\n                    r = renderers[j];\n                    if (names.indexOf(r.name) >= 0) {\n                        results.push(r);\n                    }\n                }\n                return results;\n            })();\n        }\n        logging_1.logger.debug(\"computed \" + renderers.length + \" renderers for DataRange1d \" + this.id);\n        for (j = 0, len1 = renderers.length; j < len1; j++) {\n            r = renderers[j];\n            logging_1.logger.trace(\" - \" + r.type + \" \" + r.id);\n        }\n        return renderers;\n    };\n    DataRange1d.prototype._compute_plot_bounds = function (renderers, bounds) {\n        var i, len, r, result;\n        result = bbox.empty();\n        for (i = 0, len = renderers.length; i < len; i++) {\n            r = renderers[i];\n            if (bounds[r.id] != null) {\n                result = bbox.union(result, bounds[r.id]);\n            }\n        }\n        return result;\n    };\n    DataRange1d.prototype._compute_min_max = function (plot_bounds, dimension) {\n        var k, max, min, overall, ref, ref1, v;\n        overall = bbox.empty();\n        for (k in plot_bounds) {\n            v = plot_bounds[k];\n            overall = bbox.union(overall, v);\n        }\n        if (dimension === 0) {\n            ref = [overall.minX, overall.maxX], min = ref[0], max = ref[1];\n        }\n        else {\n            ref1 = [overall.minY, overall.maxY], min = ref1[0], max = ref1[1];\n        }\n        return [min, max];\n    };\n    DataRange1d.prototype._compute_range = function (min, max) {\n        var center, end, follow_interval, follow_sign, log_max, log_min, range_padding, ref, ref1, ref2, ref3, span, start;\n        range_padding = this.range_padding;\n        if ((range_padding != null) && range_padding > 0) {\n            if (this.scale_hint === \"log\") {\n                if (isNaN(min) || !isFinite(min) || min <= 0) {\n                    if (isNaN(max) || !isFinite(max) || max <= 0) {\n                        min = 0.1;\n                    }\n                    else {\n                        min = max / 100;\n                    }\n                    logging_1.logger.warn(\"could not determine minimum data value for log axis, DataRange1d using value \" + min);\n                }\n                if (isNaN(max) || !isFinite(max) || max <= 0) {\n                    if (isNaN(min) || !isFinite(min) || min <= 0) {\n                        max = 10;\n                    }\n                    else {\n                        max = min * 100;\n                    }\n                    logging_1.logger.warn(\"could not determine maximum data value for log axis, DataRange1d using value \" + max);\n                }\n                if (max === min) {\n                    span = this.default_span + 0.001;\n                    center = Math.log(min) / Math.log(10);\n                }\n                else {\n                    if (this.range_padding_units === \"percent\") {\n                        log_min = Math.log(min) / Math.log(10);\n                        log_max = Math.log(max) / Math.log(10);\n                        span = (log_max - log_min) * (1 + range_padding);\n                    }\n                    else {\n                        log_min = Math.log(min - range_padding) / Math.log(10);\n                        log_max = Math.log(max + range_padding) / Math.log(10);\n                        span = log_max - log_min;\n                    }\n                    center = (log_min + log_max) / 2.0;\n                }\n                ref = [Math.pow(10, center - span / 2.0), Math.pow(10, center + span / 2.0)], start = ref[0], end = ref[1];\n            }\n            else {\n                if (max === min) {\n                    span = this.default_span;\n                }\n                else {\n                    if (this.range_padding_units === \"percent\") {\n                        span = (max - min) * (1 + range_padding);\n                    }\n                    else {\n                        span = (max - min) + 2 * range_padding;\n                    }\n                }\n                center = (max + min) / 2.0;\n                ref1 = [center - span / 2.0, center + span / 2.0], start = ref1[0], end = ref1[1];\n            }\n        }\n        else {\n            ref2 = [min, max], start = ref2[0], end = ref2[1];\n        }\n        follow_sign = +1;\n        if (this.flipped) {\n            ref3 = [end, start], start = ref3[0], end = ref3[1];\n            follow_sign = -1;\n        }\n        follow_interval = this.follow_interval;\n        if ((follow_interval != null) && Math.abs(start - end) > follow_interval) {\n            if (this.follow === 'start') {\n                end = start + follow_sign * follow_interval;\n            }\n            else if (this.follow === 'end') {\n                start = end - follow_sign * follow_interval;\n            }\n        }\n        return [start, end];\n    };\n    DataRange1d.prototype.update = function (bounds, dimension, bounds_id) {\n        var _end, _start, end, max, min, new_range, ref, ref1, ref2, renderers, start;\n        if (this.have_updated_interactively) {\n            return;\n        }\n        renderers = this.computed_renderers();\n        this.plot_bounds[bounds_id] = this._compute_plot_bounds(renderers, bounds);\n        ref = this._compute_min_max(this.plot_bounds, dimension), min = ref[0], max = ref[1];\n        ref1 = this._compute_range(min, max), start = ref1[0], end = ref1[1];\n        if (this._initial_start != null) {\n            if (this.scale_hint === \"log\") {\n                if (this._initial_start > 0) {\n                    start = this._initial_start;\n                }\n            }\n            else {\n                start = this._initial_start;\n            }\n        }\n        if (this._initial_end != null) {\n            if (this.scale_hint === \"log\") {\n                if (this._initial_end > 0) {\n                    end = this._initial_end;\n                }\n            }\n            else {\n                end = this._initial_end;\n            }\n        }\n        ref2 = [this.start, this.end], _start = ref2[0], _end = ref2[1];\n        if (start !== _start || end !== _end) {\n            new_range = {};\n            if (start !== _start) {\n                new_range.start = start;\n            }\n            if (end !== _end) {\n                new_range.end = end;\n            }\n            this.setv(new_range);\n        }\n        if (this.bounds === 'auto') {\n            this.setv({\n                bounds: [start, end]\n            }, {\n                silent: true\n            });\n        }\n        return this.change.emit();\n    };\n    DataRange1d.prototype.reset = function () {\n        this.have_updated_interactively = false;\n        this.setv({\n            range_padding: this._initial_range_padding,\n            range_padding_units: this._initial_range_padding_units,\n            follow: this._initial_follow,\n            follow_interval: this._initial_follow_interval,\n            default_span: this._initial_default_span\n        }, {\n            silent: true\n        });\n        return this.change.emit();\n    };\n    return DataRange1d;\n})(data_range_1.DataRange);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar range_1 = require(\"./range\");\nvar p = require(\"core/properties\");\nexports.FactorRange = (function (superClass) {\n    extend(FactorRange, superClass);\n    function FactorRange() {\n        return FactorRange.__super__.constructor.apply(this, arguments);\n    }\n    FactorRange.prototype.type = 'FactorRange';\n    FactorRange.define({\n        offset: [p.Number, 0],\n        factors: [p.Array, []],\n        bounds: [p.Any],\n        min_interval: [p.Any],\n        max_interval: [p.Any]\n    });\n    FactorRange.internal({\n        _bounds_as_factors: [p.Any],\n        start: [p.Number],\n        end: [p.Number]\n    });\n    FactorRange.prototype.initialize = function (attrs, options) {\n        FactorRange.__super__.initialize.call(this, attrs, options);\n        if ((this.bounds != null) && this.bounds !== 'auto') {\n            this.setv({\n                _bounds_as_factors: this.bounds\n            }, {\n                silent: true\n            });\n        }\n        else {\n            this.setv({\n                _bounds_as_factors: this.factors\n            }, {\n                silent: true\n            });\n        }\n        this._init();\n        this.connect(this.properties.factors.change, function () {\n            return this._update_factors();\n        });\n        return this.connect(this.properties.offset.change, function () {\n            return this._init();\n        });\n    };\n    FactorRange.getters({\n        min: function () {\n            return this.start;\n        },\n        max: function () {\n            return this.end;\n        }\n    });\n    FactorRange.prototype.reset = function () {\n        this._init();\n        return this.change.emit();\n    };\n    FactorRange.prototype._update_factors = function () {\n        this.setv('_bounds_as_factors', this.factors, {\n            silent: true\n        });\n        return this._init();\n    };\n    FactorRange.prototype._init = function () {\n        var end, factors, start;\n        factors = this.factors;\n        if ((this.bounds != null) && this.bounds !== 'auto') {\n            factors = this._bounds_as_factors;\n            this.setv({\n                factors: factors\n            }, {\n                silent: true\n            });\n        }\n        start = 0.5 + this.offset;\n        end = factors.length + start;\n        this.setv({\n            start: start,\n            end: end\n        }, {\n            silent: true\n        });\n        if (this.bounds != null) {\n            return this.setv({\n                bounds: [start, end]\n            }, {\n                silent: true\n            });\n        }\n    };\n    return FactorRange;\n})(range_1.Range);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar data_range_1 = require(\"./data_range\");\nexports.DataRange = data_range_1.DataRange;\nvar data_range1d_1 = require(\"./data_range1d\");\nexports.DataRange1d = data_range1d_1.DataRange1d;\nvar factor_range_1 = require(\"./factor_range\");\nexports.FactorRange = factor_range_1.FactorRange;\nvar range_1 = require(\"./range\");\nexports.Range = range_1.Range;\nvar range1d_1 = require(\"./range1d\");\nexports.Range1d = range1d_1.Range1d;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nvar p = require(\"core/properties\");\nexports.Range = (function (superClass) {\n    extend(Range, superClass);\n    function Range() {\n        return Range.__super__.constructor.apply(this, arguments);\n    }\n    Range.prototype.type = 'Range';\n    Range.prototype.initialize = function (options) {\n        Range.__super__.initialize.call(this, options);\n        return this.connect(this.change, function () {\n            var ref;\n            return (ref = this.callback) != null ? ref.execute(this) : void 0;\n        });\n    };\n    Range.define({\n        callback: [p.Instance]\n    });\n    Range.internal({\n        plots: [p.Array, []]\n    });\n    Range.prototype.reset = function () {\n        \"This method should be reimplemented by subclasses and ensure that\\nthe callback, if exists, is executed at completion.\";\n        return this.change.emit();\n    };\n    return Range;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar range_1 = require(\"./range\");\nvar p = require(\"core/properties\");\nexports.Range1d = (function (superClass) {\n    extend(Range1d, superClass);\n    Range1d.prototype.type = 'Range1d';\n    Range1d.define({\n        start: [p.Number, 0],\n        end: [p.Number, 1],\n        bounds: [p.Any],\n        min_interval: [p.Any],\n        max_interval: [p.Any]\n    });\n    Range1d.prototype._set_auto_bounds = function () {\n        var max, min;\n        if (this.bounds === 'auto') {\n            min = Math.min(this._initial_start, this._initial_end);\n            max = Math.max(this._initial_start, this._initial_end);\n            return this.setv({\n                bounds: [min, max]\n            }, {\n                silent: true\n            });\n        }\n    };\n    function Range1d() {\n        var end, start;\n        if (this instanceof Range1d) {\n            return Range1d.__super__.constructor.apply(this, arguments);\n        }\n        else {\n            start = arguments[0], end = arguments[1];\n            return new Range1d({\n                start: start,\n                end: end\n            });\n        }\n    }\n    Range1d.prototype.initialize = function (attrs, options) {\n        Range1d.__super__.initialize.call(this, attrs, options);\n        this._initial_start = this.start;\n        this._initial_end = this.end;\n        return this._set_auto_bounds();\n    };\n    Range1d.getters({\n        min: function () {\n            return Math.min(this.start, this.end);\n        },\n        max: function () {\n            return Math.max(this.start, this.end);\n        }\n    });\n    Range1d.prototype.reset = function () {\n        this._set_auto_bounds();\n        if (this.start !== this._initial_start || this.end !== this._initial_end) {\n            return this.setv({\n                start: this._initial_start,\n                end: this._initial_end\n            });\n        }\n        else {\n            return this.change.emit();\n        }\n    };\n    return Range1d;\n})(range_1.Range);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar renderer_1 = require(\"./renderer\");\nvar remote_data_source_1 = require(\"../sources/remote_data_source\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nvar object_1 = require(\"core/util/object\");\nexports.GlyphRendererView = (function (superClass) {\n    extend1(GlyphRendererView, superClass);\n    function GlyphRendererView() {\n        return GlyphRendererView.__super__.constructor.apply(this, arguments);\n    }\n    GlyphRendererView.prototype.initialize = function (options) {\n        var base_glyph, decimated_glyph, glyph_attrs, has_fill, has_line, hover_glyph, mk_glyph, muted_glyph, nonselection_glyph, selection_glyph;\n        GlyphRendererView.__super__.initialize.call(this, options);\n        base_glyph = this.model.glyph;\n        has_fill = indexOf.call(base_glyph.mixins, \"fill\") >= 0;\n        has_line = indexOf.call(base_glyph.mixins, \"line\") >= 0;\n        glyph_attrs = object_1.clone(base_glyph.attributes);\n        delete glyph_attrs.id;\n        mk_glyph = function (defaults) {\n            var attrs;\n            attrs = object_1.clone(glyph_attrs);\n            if (has_fill) {\n                object_1.extend(attrs, defaults.fill);\n            }\n            if (has_line) {\n                object_1.extend(attrs, defaults.line);\n            }\n            return new base_glyph.constructor(attrs);\n        };\n        this.glyph = this.build_glyph_view(base_glyph);\n        selection_glyph = this.model.selection_glyph;\n        if (selection_glyph == null) {\n            selection_glyph = mk_glyph({\n                fill: {},\n                line: {}\n            });\n        }\n        else if (selection_glyph === \"auto\") {\n            selection_glyph = mk_glyph(this.model.selection_defaults);\n        }\n        this.selection_glyph = this.build_glyph_view(selection_glyph);\n        nonselection_glyph = this.model.nonselection_glyph;\n        if (nonselection_glyph == null) {\n            nonselection_glyph = mk_glyph({\n                fill: {},\n                line: {}\n            });\n        }\n        else if (nonselection_glyph === \"auto\") {\n            nonselection_glyph = mk_glyph(this.model.nonselection_defaults);\n        }\n        this.nonselection_glyph = this.build_glyph_view(nonselection_glyph);\n        hover_glyph = this.model.hover_glyph;\n        if (hover_glyph != null) {\n            this.hover_glyph = this.build_glyph_view(hover_glyph);\n        }\n        muted_glyph = this.model.muted_glyph;\n        if (muted_glyph != null) {\n            this.muted_glyph = this.build_glyph_view(muted_glyph);\n        }\n        decimated_glyph = mk_glyph(this.model.decimated_defaults);\n        this.decimated_glyph = this.build_glyph_view(decimated_glyph);\n        this.xscale = this.plot_view.frame.xscales[this.model.x_range_name];\n        this.yscale = this.plot_view.frame.yscales[this.model.y_range_name];\n        this.set_data(false);\n        if (this.model.data_source instanceof remote_data_source_1.RemoteDataSource) {\n            return this.model.data_source.setup(this.plot_view, this.glyph);\n        }\n    };\n    GlyphRendererView.getters({\n        xmapper: function () {\n            log.warning(\"xmapper attr is deprecated, use xscale\");\n            return this.xscale;\n        },\n        ymapper: function () {\n            log.warning(\"ymapper attr is deprecated, use yscale\");\n            return this.yscale;\n        }\n    });\n    GlyphRendererView.prototype.build_glyph_view = function (model) {\n        return new model.default_view({\n            model: model,\n            renderer: this,\n            plot_view: this.plot_view,\n            parent: this\n        });\n    };\n    GlyphRendererView.prototype.connect_signals = function () {\n        GlyphRendererView.__super__.connect_signals.call(this);\n        this.connect(this.model.change, function () {\n            return this.request_render();\n        });\n        this.connect(this.model.data_source.change, function () {\n            return this.set_data();\n        });\n        this.connect(this.model.data_source.streaming, function () {\n            return this.set_data();\n        });\n        this.connect(this.model.data_source.patching, function (indices) {\n            return this.set_data(true, indices);\n        });\n        this.connect(this.model.data_source.select, function () {\n            return this.request_render();\n        });\n        if (this.hover_glyph != null) {\n            this.connect(this.model.data_source.inspect, function () {\n                return this.request_render();\n            });\n        }\n        this.connect(this.model.glyph.transformchange, function () {\n            return this.set_data();\n        });\n        return this.connect(this.model.glyph.propchange, function () {\n            this.glyph.set_visuals(this.model.data_source);\n            return this.request_render();\n        });\n    };\n    GlyphRendererView.prototype.have_selection_glyphs = function () {\n        return (this.selection_glyph != null) && (this.nonselection_glyph != null);\n    };\n    GlyphRendererView.prototype.set_data = function (request_render, indices) {\n        var dt, i, j, k, length, lod_factor, ref, results, source, t0;\n        if (request_render == null) {\n            request_render = true;\n        }\n        t0 = Date.now();\n        source = this.model.data_source;\n        this.glyph.model.setv({\n            x_range_name: this.model.x_range_name,\n            y_range_name: this.model.y_range_name\n        }, {\n            silent: true\n        });\n        this.glyph.set_data(source, indices);\n        this.glyph.set_visuals(source);\n        this.decimated_glyph.set_visuals(source);\n        if (this.have_selection_glyphs()) {\n            this.selection_glyph.set_visuals(source);\n            this.nonselection_glyph.set_visuals(source);\n        }\n        if (this.hover_glyph != null) {\n            this.hover_glyph.set_visuals(source);\n        }\n        if (this.muted_glyph != null) {\n            this.muted_glyph.set_visuals(source);\n        }\n        length = source.get_length();\n        if (length == null) {\n            length = 1;\n        }\n        this.all_indices = (function () {\n            results = [];\n            for (var j = 0; 0 <= length ? j < length : j > length; 0 <= length ? j++ : j--) {\n                results.push(j);\n            }\n            return results;\n        }).apply(this);\n        lod_factor = this.plot_model.plot.lod_factor;\n        this.decimated = [];\n        for (i = k = 0, ref = Math.floor(this.all_indices.length / lod_factor); 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            this.decimated.push(this.all_indices[i * lod_factor]);\n        }\n        dt = Date.now() - t0;\n        logging_1.logger.debug(this.glyph.model.type + \" GlyphRenderer (\" + this.model.id + \"): set_data finished in \" + dt + \"ms\");\n        this.set_data_timestamp = Date.now();\n        if (request_render) {\n            return this.request_render();\n        }\n    };\n    GlyphRendererView.prototype.render = function () {\n        var ctx, dtmap, dtmask, dtrender, dtselect, dttot, glsupport, glyph, i, indices, inspected, j, k, len, len1, lod_threshold, nonselected, nonselection_glyph, selected, selected_mask, selection_glyph, t0, tmap, tmask, trender, tselect;\n        if (!this.model.visible) {\n            return;\n        }\n        t0 = Date.now();\n        glsupport = this.glyph.glglyph;\n        tmap = Date.now();\n        this.glyph.map_data();\n        dtmap = Date.now() - t0;\n        tmask = Date.now();\n        indices = this.glyph.mask_data(this.all_indices);\n        dtmask = Date.now() - tmask;\n        ctx = this.plot_view.canvas_view.ctx;\n        ctx.save();\n        selected = this.model.data_source.selected;\n        if (!selected || selected.length === 0) {\n            selected = [];\n        }\n        else {\n            if (selected['0d'].glyph) {\n                selected = indices;\n            }\n            else if (selected['1d'].indices.length > 0) {\n                selected = selected['1d'].indices;\n            }\n            else {\n                selected = [];\n            }\n        }\n        inspected = this.model.data_source.inspected;\n        if (!inspected || inspected.length === 0) {\n            inspected = [];\n        }\n        else {\n            if (inspected['0d'].glyph) {\n                inspected = indices;\n            }\n            else if (inspected['1d'].indices.length > 0) {\n                inspected = inspected['1d'].indices;\n            }\n            else {\n                inspected = [];\n            }\n        }\n        lod_threshold = this.plot_model.plot.lod_threshold;\n        if (this.plot_view.interactive && !glsupport && (lod_threshold != null) && this.all_indices.length > lod_threshold) {\n            indices = this.decimated;\n            glyph = this.decimated_glyph;\n            nonselection_glyph = this.decimated_glyph;\n            selection_glyph = this.selection_glyph;\n        }\n        else {\n            glyph = this.model.muted && (this.muted_glyph != null) ? this.muted_glyph : this.glyph;\n            nonselection_glyph = this.nonselection_glyph;\n            selection_glyph = this.selection_glyph;\n        }\n        if ((this.hover_glyph != null) && inspected.length) {\n            indices = array_1.difference(indices, inspected);\n        }\n        if (!(selected.length && this.have_selection_glyphs())) {\n            trender = Date.now();\n            glyph.render(ctx, indices, this.glyph);\n            if (this.hover_glyph && inspected.length) {\n                this.hover_glyph.render(ctx, inspected, this.glyph);\n            }\n            dtrender = Date.now() - trender;\n        }\n        else {\n            tselect = Date.now();\n            selected_mask = {};\n            for (j = 0, len = selected.length; j < len; j++) {\n                i = selected[j];\n                selected_mask[i] = true;\n            }\n            selected = new Array();\n            nonselected = new Array();\n            for (k = 0, len1 = indices.length; k < len1; k++) {\n                i = indices[k];\n                if (selected_mask[i] != null) {\n                    selected.push(i);\n                }\n                else {\n                    nonselected.push(i);\n                }\n            }\n            dtselect = Date.now() - tselect;\n            trender = Date.now();\n            nonselection_glyph.render(ctx, nonselected, this.glyph);\n            selection_glyph.render(ctx, selected, this.glyph);\n            if (this.hover_glyph != null) {\n                this.hover_glyph.render(ctx, inspected, this.glyph);\n            }\n            dtrender = Date.now() - trender;\n        }\n        this.last_dtrender = dtrender;\n        dttot = Date.now() - t0;\n        logging_1.logger.debug(this.glyph.model.type + \" GlyphRenderer (\" + this.model.id + \"): render finished in \" + dttot + \"ms\");\n        logging_1.logger.trace(\" - map_data finished in       : \" + dtmap + \"ms\");\n        if (dtmask != null) {\n            logging_1.logger.trace(\" - mask_data finished in      : \" + dtmask + \"ms\");\n        }\n        if (dtselect != null) {\n            logging_1.logger.trace(\" - selection mask finished in : \" + dtselect + \"ms\");\n        }\n        logging_1.logger.trace(\" - glyph renders finished in  : \" + dtrender + \"ms\");\n        return ctx.restore();\n    };\n    GlyphRendererView.prototype.map_to_screen = function (x, y) {\n        return this.plot_view.map_to_screen(x, y, this.model.x_range_name, this.model.y_range_name);\n    };\n    GlyphRendererView.prototype.draw_legend = function (ctx, x0, x1, y0, y1, field, label) {\n        var index;\n        index = this.model.get_reference_point(field, label);\n        return this.glyph.draw_legend_for_index(ctx, x0, x1, y0, y1, index);\n    };\n    GlyphRendererView.prototype.hit_test = function (geometry) {\n        return this.model.hit_test_helper(geometry, this.glyph);\n    };\n    return GlyphRendererView;\n})(renderer_1.RendererView);\nexports.GlyphRenderer = (function (superClass) {\n    extend1(GlyphRenderer, superClass);\n    function GlyphRenderer() {\n        return GlyphRenderer.__super__.constructor.apply(this, arguments);\n    }\n    GlyphRenderer.prototype.default_view = exports.GlyphRendererView;\n    GlyphRenderer.prototype.type = 'GlyphRenderer';\n    GlyphRenderer.prototype.get_reference_point = function (field, value) {\n        var data, i, index;\n        index = 0;\n        if ((field != null) && (this.data_source.get_column != null)) {\n            data = this.data_source.get_column(field);\n            if (data) {\n                i = data.indexOf(value);\n                if (i > 0) {\n                    index = i;\n                }\n            }\n        }\n        return index;\n    };\n    GlyphRenderer.prototype.hit_test_helper = function (geometry, glyph) {\n        if (this.visible) {\n            return glyph.hit_test(geometry);\n        }\n        else {\n            return null;\n        }\n    };\n    GlyphRenderer.define({\n        x_range_name: [p.String, 'default'],\n        y_range_name: [p.String, 'default'],\n        data_source: [p.Instance],\n        glyph: [p.Instance],\n        hover_glyph: [p.Instance],\n        nonselection_glyph: [p.Any, 'auto'],\n        selection_glyph: [p.Any, 'auto'],\n        muted_glyph: [p.Instance],\n        muted: [p.Bool, false]\n    });\n    GlyphRenderer.override({\n        level: 'glyph'\n    });\n    GlyphRenderer.prototype.selection_defaults = {\n        fill: {},\n        line: {}\n    };\n    GlyphRenderer.prototype.decimated_defaults = {\n        fill: {\n            fill_alpha: 0.3,\n            fill_color: \"grey\"\n        },\n        line: {\n            line_alpha: 0.3,\n            line_color: \"grey\"\n        }\n    };\n    GlyphRenderer.prototype.nonselection_defaults = {\n        fill: {\n            fill_alpha: 0.2,\n            line_alpha: 0.2\n        },\n        line: {}\n    };\n    return GlyphRenderer;\n})(renderer_1.Renderer);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar renderer_1 = require(\"./renderer\");\nvar p = require(\"core/properties\");\nexports.GuideRenderer = (function (superClass) {\n    extend(GuideRenderer, superClass);\n    function GuideRenderer() {\n        return GuideRenderer.__super__.constructor.apply(this, arguments);\n    }\n    GuideRenderer.prototype.type = 'GuideRenderer';\n    GuideRenderer.define({\n        plot: [p.Instance]\n    });\n    GuideRenderer.override({\n        level: 'overlay'\n    });\n    return GuideRenderer;\n})(renderer_1.Renderer);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar glyph_renderer_1 = require(\"./glyph_renderer\");\nexports.GlyphRenderer = glyph_renderer_1.GlyphRenderer;\nvar guide_renderer_1 = require(\"./guide_renderer\");\nexports.GuideRenderer = guide_renderer_1.GuideRenderer;\nvar renderer_1 = require(\"./renderer\");\nexports.Renderer = renderer_1.Renderer;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend1 = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar dom_view_1 = require(\"core/dom_view\");\nvar visuals_1 = require(\"core/visuals\");\nvar p = require(\"core/properties\");\nvar proj = require(\"core/util/projections\");\nvar object_1 = require(\"core/util/object\");\nvar model_1 = require(\"../../model\");\nexports.RendererView = (function (superClass) {\n    extend1(RendererView, superClass);\n    function RendererView() {\n        return RendererView.__super__.constructor.apply(this, arguments);\n    }\n    RendererView.prototype.initialize = function (options) {\n        RendererView.__super__.initialize.call(this, options);\n        this.plot_view = options.plot_view;\n        this.visuals = new visuals_1.Visuals(this.model);\n        return this._has_finished = true;\n    };\n    RendererView.getters({\n        plot_model: function () {\n            return this.plot_view.model;\n        }\n    });\n    RendererView.prototype.request_render = function () {\n        return this.plot_view.request_render();\n    };\n    RendererView.prototype.set_data = function (source) {\n        var data, ref, ref1;\n        data = this.model.materialize_dataspecs(source);\n        object_1.extend(this, data);\n        if (this.plot_model.use_map) {\n            if (this._x != null) {\n                ref = proj.project_xy(this._x, this._y), this._x = ref[0], this._y = ref[1];\n            }\n            if (this._xs != null) {\n                return ref1 = proj.project_xsys(this._xs, this._ys), this._xs = ref1[0], this._ys = ref1[1], ref1;\n            }\n        }\n    };\n    RendererView.prototype.map_to_screen = function (x, y) {\n        return this.plot_view.map_to_screen(x, y, this.model.x_range_name, this.model.y_range_name);\n    };\n    return RendererView;\n})(dom_view_1.DOMView);\nexports.Renderer = (function (superClass) {\n    extend1(Renderer, superClass);\n    function Renderer() {\n        return Renderer.__super__.constructor.apply(this, arguments);\n    }\n    Renderer.prototype.type = \"Renderer\";\n    Renderer.define({\n        level: [p.RenderLevel, null],\n        visible: [p.Bool, true]\n    });\n    return Renderer;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar linear_scale_1 = require(\"./linear_scale\");\nvar types_1 = require(\"core/util/types\");\nexports.CategoricalScale = (function (superClass) {\n    extend(CategoricalScale, superClass);\n    function CategoricalScale() {\n        return CategoricalScale.__super__.constructor.apply(this, arguments);\n    }\n    CategoricalScale.prototype.type = \"CategoricalScale\";\n    CategoricalScale.prototype.compute = function (x, return_synthetic) {\n        var factor, factors, percent, range, ref, result;\n        if (return_synthetic == null) {\n            return_synthetic = false;\n        }\n        if (types_1.isNumber(x)) {\n            if (return_synthetic) {\n                return x;\n            }\n            else {\n                return CategoricalScale.__super__.compute.call(this, x);\n            }\n        }\n        range = this.source_range;\n        factors = range.factors;\n        if (x.indexOf(':') >= 0) {\n            ref = x.split(':'), factor = ref[0], percent = ref[1];\n            percent = parseFloat(percent);\n            result = factors.indexOf(factor) + 0.5 + range.offset + percent;\n        }\n        else {\n            result = factors.indexOf(x) + 1 + range.offset;\n        }\n        if (return_synthetic) {\n            return result;\n        }\n        else {\n            return CategoricalScale.__super__.compute.call(this, result);\n        }\n    };\n    CategoricalScale.prototype.v_compute = function (xs, return_synthetic) {\n        var factor, factors, i, j, percent, range, ref, ref1, results, x;\n        if (return_synthetic == null) {\n            return_synthetic = false;\n        }\n        if (types_1.isNumber(xs[0])) {\n            if (return_synthetic) {\n                return xs;\n            }\n            else {\n                return CategoricalScale.__super__.v_compute.call(this, xs);\n            }\n        }\n        range = this.source_range;\n        factors = range.factors;\n        results = Array(xs.length);\n        for (i = j = 0, ref = xs.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            x = xs[i];\n            if (x.indexOf(':') >= 0) {\n                ref1 = x.split(':'), factor = ref1[0], percent = ref1[1];\n                percent = parseFloat(percent);\n                results[i] = factors.indexOf(factor) + 0.5 + range.offset + percent;\n            }\n            else {\n                results[i] = factors.indexOf(x) + 1 + range.offset;\n            }\n        }\n        if (return_synthetic) {\n            return results;\n        }\n        else {\n            return CategoricalScale.__super__.v_compute.call(this, results);\n        }\n    };\n    CategoricalScale.prototype.invert = function (xprime, skip_cat) {\n        var factors, range;\n        if (skip_cat == null) {\n            skip_cat = false;\n        }\n        xprime = CategoricalScale.__super__.invert.call(this, xprime);\n        if (skip_cat) {\n            return xprime;\n        }\n        range = this.source_range;\n        factors = range.factors;\n        return factors[Math.floor(xprime - 0.5 - range.offset)];\n    };\n    CategoricalScale.prototype.v_invert = function (xprimes, skip_cat) {\n        var factors, i, j, k, range, ref, ref1, result, x;\n        if (skip_cat == null) {\n            skip_cat = false;\n        }\n        x = CategoricalScale.__super__.v_invert.call(this, xprimes);\n        for (i = j = 0, ref = x.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            x[i] = x[i];\n        }\n        if (skip_cat) {\n            return x;\n        }\n        result = Array(x);\n        range = this.source_range;\n        factors = range.factors;\n        for (i = k = 0, ref1 = xprimes.length; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {\n            result[i] = factors[Math.floor(x[i] - 0.5 - range.offset)];\n        }\n        return result;\n    };\n    return CategoricalScale;\n})(linear_scale_1.LinearScale);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar categorical_scale_1 = require(\"./categorical_scale\");\nexports.CategoricalScale = categorical_scale_1.CategoricalScale;\nvar linear_scale_1 = require(\"./linear_scale\");\nexports.LinearScale = linear_scale_1.LinearScale;\nvar log_scale_1 = require(\"./log_scale\");\nexports.LogScale = log_scale_1.LogScale;\nvar scale_1 = require(\"./scale\");\nexports.Scale = scale_1.Scale;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar scale_1 = require(\"./scale\");\nvar p = require(\"core/properties\");\nexports.LinearScale = (function (superClass) {\n    extend(LinearScale, superClass);\n    function LinearScale() {\n        return LinearScale.__super__.constructor.apply(this, arguments);\n    }\n    LinearScale.prototype.type = \"LinearScale\";\n    LinearScale.prototype.compute = function (x) {\n        var factor, offset, ref;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1];\n        return factor * x + offset;\n    };\n    LinearScale.prototype.v_compute = function (xs) {\n        var factor, i, idx, len, offset, ref, result, x;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1];\n        result = new Float64Array(xs.length);\n        for (idx = i = 0, len = xs.length; i < len; idx = ++i) {\n            x = xs[idx];\n            result[idx] = factor * x + offset;\n        }\n        return result;\n    };\n    LinearScale.prototype.invert = function (xprime) {\n        var factor, offset, ref;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1];\n        return (xprime - offset) / factor;\n    };\n    LinearScale.prototype.v_invert = function (xprimes) {\n        var factor, i, idx, len, offset, ref, result, xprime;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1];\n        result = new Float64Array(xprimes.length);\n        for (idx = i = 0, len = xprimes.length; i < len; idx = ++i) {\n            xprime = xprimes[idx];\n            result[idx] = (xprime - offset) / factor;\n        }\n        return result;\n    };\n    LinearScale.prototype._compute_state = function () {\n        var factor, offset, source_end, source_start, target_end, target_start;\n        source_start = this.source_range.start;\n        source_end = this.source_range.end;\n        target_start = this.target_range.start;\n        target_end = this.target_range.end;\n        factor = (target_end - target_start) / (source_end - source_start);\n        offset = -(factor * source_start) + target_start;\n        return [factor, offset];\n    };\n    LinearScale.internal({\n        source_range: [p.Any],\n        target_range: [p.Any]\n    });\n    return LinearScale;\n})(scale_1.Scale);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar scale_1 = require(\"./scale\");\nvar p = require(\"core/properties\");\nexports.LogScale = (function (superClass) {\n    extend(LogScale, superClass);\n    function LogScale() {\n        return LogScale.__super__.constructor.apply(this, arguments);\n    }\n    LogScale.prototype.type = \"LogScale\";\n    LogScale.prototype.compute = function (x) {\n        var _x, factor, inter_factor, inter_offset, offset, ref, value;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1], inter_factor = ref[2], inter_offset = ref[3];\n        if (inter_factor === 0) {\n            value = 0;\n        }\n        else {\n            _x = (Math.log(x) - inter_offset) / inter_factor;\n            if (isFinite(_x)) {\n                value = _x * factor + offset;\n            }\n            else {\n                value = 0 / 0;\n            }\n        }\n        return value;\n    };\n    LogScale.prototype.v_compute = function (xs) {\n        var _x, factor, i, inter_factor, inter_offset, j, k, offset, ref, ref1, ref2, result, value;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1], inter_factor = ref[2], inter_offset = ref[3];\n        result = new Float64Array(xs.length);\n        if (inter_factor === 0) {\n            for (i = j = 0, ref1 = xs.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n                result[i] = 0;\n            }\n        }\n        else {\n            for (i = k = 0, ref2 = xs.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {\n                _x = (Math.log(xs[i]) - inter_offset) / inter_factor;\n                if (isFinite(_x)) {\n                    value = _x * factor + offset;\n                }\n                else {\n                    value = 0 / 0;\n                }\n                result[i] = value;\n            }\n        }\n        return result;\n    };\n    LogScale.prototype.invert = function (xprime) {\n        var factor, inter_factor, inter_offset, offset, ref, value;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1], inter_factor = ref[2], inter_offset = ref[3];\n        value = (xprime - offset) / factor;\n        return Math.exp(inter_factor * value + inter_offset);\n    };\n    LogScale.prototype.v_invert = function (xprimes) {\n        var factor, i, inter_factor, inter_offset, j, offset, ref, ref1, result, value;\n        ref = this._compute_state(), factor = ref[0], offset = ref[1], inter_factor = ref[2], inter_offset = ref[3];\n        result = new Float64Array(xprimes.length);\n        for (i = j = 0, ref1 = xprimes.length; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {\n            value = (xprimes[i] - offset) / factor;\n            result[i] = Math.exp(inter_factor * value + inter_offset);\n        }\n        return result;\n    };\n    LogScale.prototype._get_safe_factor = function (orig_start, orig_end) {\n        var end, log_val, ref, start;\n        if (orig_start < 0) {\n            start = 0;\n        }\n        else {\n            start = orig_start;\n        }\n        if (orig_end < 0) {\n            end = 0;\n        }\n        else {\n            end = orig_end;\n        }\n        if (start === end) {\n            if (start === 0) {\n                ref = [1, 10], start = ref[0], end = ref[1];\n            }\n            else {\n                log_val = Math.log(start) / Math.log(10);\n                start = Math.pow(10, Math.floor(log_val));\n                if (Math.ceil(log_val) !== Math.floor(log_val)) {\n                    end = Math.pow(10, Math.ceil(log_val));\n                }\n                else {\n                    end = Math.pow(10, Math.ceil(log_val) + 1);\n                }\n            }\n        }\n        return [start, end];\n    };\n    LogScale.prototype._compute_state = function () {\n        var end, factor, inter_factor, inter_offset, offset, ref, screen_range, source_end, source_start, start, target_end, target_start;\n        source_start = this.source_range.start;\n        source_end = this.source_range.end;\n        target_start = this.target_range.start;\n        target_end = this.target_range.end;\n        screen_range = target_end - target_start;\n        ref = this._get_safe_factor(source_start, source_end), start = ref[0], end = ref[1];\n        if (start === 0) {\n            inter_factor = Math.log(end);\n            inter_offset = 0;\n        }\n        else {\n            inter_factor = Math.log(end) - Math.log(start);\n            inter_offset = Math.log(start);\n        }\n        factor = screen_range;\n        offset = target_start;\n        return [factor, offset, inter_factor, inter_offset];\n    };\n    LogScale.internal({\n        source_range: [p.Any],\n        target_range: [p.Any]\n    });\n    return LogScale;\n})(scale_1.Scale);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, slice = [].slice;\nvar transforms_1 = require(\"../transforms\");\nexports.Scale = (function (superClass) {\n    extend(Scale, superClass);\n    function Scale() {\n        return Scale.__super__.constructor.apply(this, arguments);\n    }\n    Scale.prototype.map_to_target = function () {\n        var rest, x;\n        x = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n        return this.compute.apply(this, [x].concat(slice.call(rest)));\n    };\n    Scale.prototype.v_map_to_target = function () {\n        var rest, xs;\n        xs = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n        return this.v_compute.apply(this, [xs].concat(slice.call(rest)));\n    };\n    Scale.prototype.map_from_target = function (xprime) {\n        return this.invert(xprime);\n    };\n    Scale.prototype.v_map_from_target = function (xprimes) {\n        return this.v_invert(xprimes);\n    };\n    return Scale;\n})(transforms_1.Transform);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; }, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar remote_data_source_1 = require(\"./remote_data_source\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nexports.AjaxDataSource = (function (superClass) {\n    extend(AjaxDataSource, superClass);\n    function AjaxDataSource() {\n        this.get_data = bind(this.get_data, this);\n        this.setup = bind(this.setup, this);\n        this.destroy = bind(this.destroy, this);\n        return AjaxDataSource.__super__.constructor.apply(this, arguments);\n    }\n    AjaxDataSource.prototype.type = 'AjaxDataSource';\n    AjaxDataSource.define({\n        mode: [p.String, 'replace'],\n        content_type: [p.String, 'application/json'],\n        http_headers: [p.Any, {}],\n        max_size: [p.Number],\n        method: [p.String, 'POST'],\n        if_modified: [p.Bool, false]\n    });\n    AjaxDataSource.prototype.destroy = function () {\n        if (this.interval != null) {\n            return clearInterval(this.interval);\n        }\n    };\n    AjaxDataSource.prototype.setup = function (plot_view, glyph) {\n        this.pv = plot_view;\n        this.get_data(this.mode);\n        if (this.polling_interval) {\n            return this.interval = setInterval(this.get_data, this.polling_interval, this.mode, this.max_size, this.if_modified);\n        }\n    };\n    AjaxDataSource.prototype.get_data = function (mode, max_size, if_modified) {\n        var name, ref, value, xhr;\n        if (max_size == null) {\n            max_size = 0;\n        }\n        if (if_modified == null) {\n            if_modified = false;\n        }\n        xhr = new XMLHttpRequest();\n        xhr.open(this.method, this.data_url, true);\n        xhr.withCredentials = false;\n        xhr.setRequestHeader(\"Content-Type\", this.content_type);\n        ref = this.http_headers;\n        for (name in ref) {\n            value = ref[name];\n            xhr.setRequestHeader(name, value);\n        }\n        xhr.addEventListener(\"load\", (function (_this) {\n            return function () {\n                var column, data, i, len, original_data, ref1;\n                if (xhr.status === 200) {\n                    data = JSON.parse(xhr.responseText);\n                    switch (mode) {\n                        case 'replace':\n                            return _this.data = data;\n                        case 'append':\n                            original_data = _this.data;\n                            ref1 = _this.columns();\n                            for (i = 0, len = ref1.length; i < len; i++) {\n                                column = ref1[i];\n                                data[column] = original_data[column].concat(data[column]).slice(-max_size);\n                            }\n                            return _this.data = data;\n                    }\n                }\n            };\n        })(this));\n        xhr.addEventListener(\"error\", (function (_this) {\n            return function () {\n                return logging_1.logger.error(\"Failed to fetch JSON from \" + _this.data_url + \" with code \" + xhr.status);\n            };\n        })(this));\n        xhr.send();\n        return null;\n    };\n    return AjaxDataSource;\n})(remote_data_source_1.RemoteDataSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar columnar_data_source_1 = require(\"./columnar_data_source\");\nvar has_props_1 = require(\"core/has_props\");\nvar p = require(\"core/properties\");\nvar data_structures_1 = require(\"core/util/data_structures\");\nvar serialization = require(\"core/util/serialization\");\nvar types_1 = require(\"core/util/types\");\nexports.concat_typed_arrays = function (a, b) {\n    var c;\n    c = new a.constructor(a.length + b.length);\n    c.set(a, 0);\n    c.set(b, a.length);\n    return c;\n};\nexports.stream_to_column = function (col, new_col, rollover) {\n    var end, i, l, m, ref, ref1, ref2, start, tmp, total_len;\n    if (col.concat != null) {\n        col = col.concat(new_col);\n        if (col.length > rollover) {\n            col = col.slice(-rollover);\n        }\n        return col;\n    }\n    total_len = col.length + new_col.length;\n    if ((rollover != null) && total_len > rollover) {\n        start = total_len - rollover;\n        end = col.length;\n        if (col.length < rollover) {\n            tmp = new col.constructor(rollover);\n            tmp.set(col, 0);\n            col = tmp;\n        }\n        for (i = l = ref = start, ref1 = end; ref <= ref1 ? l < ref1 : l > ref1; i = ref <= ref1 ? ++l : --l) {\n            col[i - start] = col[i];\n        }\n        for (i = m = 0, ref2 = new_col.length; 0 <= ref2 ? m < ref2 : m > ref2; i = 0 <= ref2 ? ++m : --m) {\n            col[i + (end - start)] = new_col[i];\n        }\n        return col;\n    }\n    tmp = new col.constructor(new_col);\n    return exports.concat_typed_arrays(col, tmp);\n};\nexports.slice = function (ind, length) {\n    var ref, ref1, ref2, ref3, start, step, stop;\n    if (types_1.isObject(ind)) {\n        return [(ref = ind.start) != null ? ref : 0, (ref1 = ind.stop) != null ? ref1 : length, (ref2 = ind.step) != null ? ref2 : 1];\n    }\n    return ref3 = [ind, ind + 1, 1], start = ref3[0], stop = ref3[1], step = ref3[2], ref3;\n};\nexports.patch_to_column = function (col, patch, shapes) {\n    var flat_index, i, ind, istart, istep, istop, item, j, jstart, jstep, jstop, l, len, m, n, patched, patched_range, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, shape, value;\n    patched = new data_structures_1.Set();\n    patched_range = false;\n    for (l = 0, len = patch.length; l < len; l++) {\n        ref = patch[l], ind = ref[0], value = ref[1];\n        if (!types_1.isArray(ind)) {\n            if (types_1.isNumber(ind)) {\n                value = [value];\n                patched.push(ind);\n            }\n            else {\n                patched_range = true;\n            }\n            ind = [0, 0, ind];\n            shape = [1, col.length];\n            item = col;\n        }\n        else {\n            patched.push(ind[0]);\n            shape = shapes[ind[0]];\n            item = col[ind[0]];\n        }\n        if (ind.length === 2) {\n            shape = [1, shape[0]];\n            ind = [ind[0], 0, ind[1]];\n        }\n        flat_index = 0;\n        ref1 = exports.slice(ind[1], shape[0]), istart = ref1[0], istop = ref1[1], istep = ref1[2];\n        ref2 = exports.slice(ind[2], shape[1]), jstart = ref2[0], jstop = ref2[1], jstep = ref2[2];\n        for (i = m = ref3 = istart, ref4 = istop, ref5 = istep; ref5 > 0 ? m < ref4 : m > ref4; i = m += ref5) {\n            for (j = n = ref6 = jstart, ref7 = jstop, ref8 = jstep; ref8 > 0 ? n < ref7 : n > ref7; j = n += ref8) {\n                if (patched_range) {\n                    patched.push(j);\n                }\n                item[i * shape[1] + j] = value[flat_index];\n                flat_index++;\n            }\n        }\n    }\n    return patched;\n};\nexports.ColumnDataSource = (function (superClass) {\n    extend(ColumnDataSource, superClass);\n    function ColumnDataSource() {\n        return ColumnDataSource.__super__.constructor.apply(this, arguments);\n    }\n    ColumnDataSource.prototype.type = 'ColumnDataSource';\n    ColumnDataSource.prototype.initialize = function (options) {\n        var ref;\n        ColumnDataSource.__super__.initialize.call(this, options);\n        return ref = serialization.decode_column_data(this.data), this.data = ref[0], this._shapes = ref[1], ref;\n    };\n    ColumnDataSource.define({\n        data: [p.Any, {}]\n    });\n    ColumnDataSource.prototype.attributes_as_json = function (include_defaults, value_to_json) {\n        var attrs, key, ref, value;\n        if (include_defaults == null) {\n            include_defaults = true;\n        }\n        if (value_to_json == null) {\n            value_to_json = ColumnDataSource._value_to_json;\n        }\n        attrs = {};\n        ref = this.serializable_attributes();\n        for (key in ref) {\n            if (!hasProp.call(ref, key))\n                continue;\n            value = ref[key];\n            if (key === 'data') {\n                value = serialization.encode_column_data(value, this._shapes);\n            }\n            if (include_defaults) {\n                attrs[key] = value;\n            }\n            else if (key in this._set_after_defaults) {\n                attrs[key] = value;\n            }\n        }\n        return value_to_json(\"attributes\", attrs, this);\n    };\n    ColumnDataSource._value_to_json = function (key, value, optional_parent_object) {\n        if (types_1.isObject(value) && key === 'data') {\n            return serialization.encode_column_data(value, optional_parent_object._shapes);\n        }\n        else {\n            return has_props_1.HasProps._value_to_json(key, value, optional_parent_object);\n        }\n    };\n    ColumnDataSource.prototype.stream = function (new_data, rollover) {\n        var data, k, v;\n        data = this.data;\n        for (k in new_data) {\n            v = new_data[k];\n            data[k] = exports.stream_to_column(data[k], new_data[k], rollover);\n        }\n        this.setv('data', data, {\n            silent: true\n        });\n        return this.streaming.emit();\n    };\n    ColumnDataSource.prototype.patch = function (patches) {\n        var data, k, patch, patched;\n        data = this.data;\n        patched = new data_structures_1.Set();\n        for (k in patches) {\n            patch = patches[k];\n            patched = patched.union(exports.patch_to_column(data[k], patch, this._shapes[k]));\n        }\n        this.setv('data', data, {\n            silent: true\n        });\n        return this.patching.emit(patched.values);\n    };\n    return ColumnDataSource;\n})(columnar_data_source_1.ColumnarDataSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar data_source_1 = require(\"./data_source\");\nvar signaling_1 = require(\"core/signaling\");\nvar logging_1 = require(\"core/logging\");\nvar selection_manager_1 = require(\"core/selection_manager\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nexports.ColumnarDataSource = (function (superClass) {\n    extend(ColumnarDataSource, superClass);\n    function ColumnarDataSource() {\n        return ColumnarDataSource.__super__.constructor.apply(this, arguments);\n    }\n    ColumnarDataSource.prototype.type = 'ColumnarDataSource';\n    ColumnarDataSource.define({\n        column_names: [p.Array, []]\n    });\n    ColumnarDataSource.internal({\n        selection_manager: [\n            p.Instance, function (self) {\n                return new selection_manager_1.SelectionManager({\n                    source: self\n                });\n            }\n        ],\n        inspected: [p.Any],\n        _shapes: [p.Any, {}]\n    });\n    ColumnarDataSource.prototype.initialize = function (options) {\n        ColumnarDataSource.__super__.initialize.call(this, options);\n        this.select = new signaling_1.Signal(this, \"select\");\n        this.inspect = new signaling_1.Signal(this, \"inspect\");\n        this.streaming = new signaling_1.Signal(this, \"streaming\");\n        return this.patching = new signaling_1.Signal(this, \"patching\");\n    };\n    ColumnarDataSource.prototype.get_column = function (colname) {\n        var ref;\n        return (ref = this.data[colname]) != null ? ref : null;\n    };\n    ColumnarDataSource.prototype.columns = function () {\n        return Object.keys(this.data);\n    };\n    ColumnarDataSource.prototype.get_length = function (soft) {\n        var _key, lengths, msg, val;\n        if (soft == null) {\n            soft = true;\n        }\n        lengths = array_1.uniq((function () {\n            var ref, results;\n            ref = this.data;\n            results = [];\n            for (_key in ref) {\n                val = ref[_key];\n                results.push(val.length);\n            }\n            return results;\n        }).call(this));\n        switch (lengths.length) {\n            case 0:\n                return null;\n            case 1:\n                return lengths[0];\n            default:\n                msg = \"data source has columns of inconsistent lengths\";\n                if (soft) {\n                    logging_1.logger.warn(msg);\n                    return lengths.sort()[0];\n                }\n                else {\n                    throw new Error(msg);\n                }\n        }\n    };\n    return ColumnarDataSource;\n})(data_source_1.DataSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nvar hittest = require(\"core/hittest\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.DataSource = (function (superClass) {\n    extend(DataSource, superClass);\n    function DataSource() {\n        return DataSource.__super__.constructor.apply(this, arguments);\n    }\n    DataSource.prototype.type = 'DataSource';\n    DataSource.define({\n        selected: [p.Any, hittest.create_hit_test_result()],\n        callback: [p.Any]\n    });\n    DataSource.prototype.initialize = function (options) {\n        DataSource.__super__.initialize.call(this, options);\n        return this.connect(this.properties.selected.change, (function (_this) {\n            return function () {\n                var callback;\n                callback = _this.callback;\n                if (callback != null) {\n                    if (types_1.isFunction(callback)) {\n                        return callback(_this);\n                    }\n                    else {\n                        return callback.execute(_this);\n                    }\n                }\n            };\n        })(this));\n    };\n    return DataSource;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar columnar_data_source_1 = require(\"./columnar_data_source\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nexports.GeoJSONDataSource = (function (superClass) {\n    extend(GeoJSONDataSource, superClass);\n    function GeoJSONDataSource() {\n        return GeoJSONDataSource.__super__.constructor.apply(this, arguments);\n    }\n    GeoJSONDataSource.prototype.type = 'GeoJSONDataSource';\n    GeoJSONDataSource.define({\n        geojson: [p.Any]\n    });\n    GeoJSONDataSource.internal({\n        data: [p.Any, {}]\n    });\n    GeoJSONDataSource.prototype.initialize = function (options) {\n        GeoJSONDataSource.__super__.initialize.call(this, options);\n        this._update_data();\n        return this.connect(this.properties.geojson.change, (function (_this) {\n            return function () {\n                return _this._update_data();\n            };\n        })(this));\n    };\n    GeoJSONDataSource.prototype._update_data = function () {\n        return this.data = this.geojson_to_column_data();\n    };\n    GeoJSONDataSource.prototype._get_new_list_array = function (length) {\n        var i, k, ref, results;\n        results = [];\n        for (i = k = 0, ref = length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            results.push([]);\n        }\n        return results;\n    };\n    GeoJSONDataSource.prototype._get_new_nan_array = function (length) {\n        var i, k, ref, results;\n        results = [];\n        for (i = k = 0, ref = length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n            results.push(0 / 0);\n        }\n        return results;\n    };\n    GeoJSONDataSource.prototype._flatten_function = function (accumulator, currentItem) {\n        return accumulator.concat([[0 / 0, 0 / 0, 0 / 0]]).concat(currentItem);\n    };\n    GeoJSONDataSource.prototype._add_properties = function (item, data, i, item_count) {\n        var property, results;\n        results = [];\n        for (property in item.properties) {\n            if (!data.hasOwnProperty(property)) {\n                data[property] = this._get_new_nan_array(item_count);\n            }\n            results.push(data[property][i] = item.properties[property]);\n        }\n        return results;\n    };\n    GeoJSONDataSource.prototype._add_geometry = function (geometry, data, i) {\n        var coord_list, coords, exterior_ring, exterior_rings, flattened_coord_list, j, k, l, len, len1, len2, len3, len4, m, n, o, polygon, ref, ref1, ref2, ref3, ref4, ref5, results, results1, results2, results3;\n        switch (geometry.type) {\n            case \"Point\":\n                coords = geometry.coordinates;\n                data.x[i] = coords[0];\n                data.y[i] = coords[1];\n                return data.z[i] = (ref = coords[2]) != null ? ref : 0 / 0;\n            case \"LineString\":\n                coord_list = geometry.coordinates;\n                results = [];\n                for (j = k = 0, len = coord_list.length; k < len; j = ++k) {\n                    coords = coord_list[j];\n                    data.xs[i][j] = coords[0];\n                    data.ys[i][j] = coords[1];\n                    results.push(data.zs[i][j] = (ref1 = coords[2]) != null ? ref1 : 0 / 0);\n                }\n                return results;\n                break;\n            case \"Polygon\":\n                if (geometry.coordinates.length > 1) {\n                    logging_1.logger.warn('Bokeh does not support Polygons with holes in, only exterior ring used.');\n                }\n                exterior_ring = geometry.coordinates[0];\n                results1 = [];\n                for (j = l = 0, len1 = exterior_ring.length; l < len1; j = ++l) {\n                    coords = exterior_ring[j];\n                    data.xs[i][j] = coords[0];\n                    data.ys[i][j] = coords[1];\n                    results1.push(data.zs[i][j] = (ref2 = coords[2]) != null ? ref2 : 0 / 0);\n                }\n                return results1;\n                break;\n            case \"MultiPoint\":\n                return logging_1.logger.warn('MultiPoint not supported in Bokeh');\n            case \"MultiLineString\":\n                flattened_coord_list = geometry.coordinates.reduce(this._flatten_function);\n                results2 = [];\n                for (j = m = 0, len2 = flattened_coord_list.length; m < len2; j = ++m) {\n                    coords = flattened_coord_list[j];\n                    data.xs[i][j] = coords[0];\n                    data.ys[i][j] = coords[1];\n                    results2.push(data.zs[i][j] = (ref3 = coords[2]) != null ? ref3 : 0 / 0);\n                }\n                return results2;\n                break;\n            case \"MultiPolygon\":\n                exterior_rings = [];\n                ref4 = geometry.coordinates;\n                for (n = 0, len3 = ref4.length; n < len3; n++) {\n                    polygon = ref4[n];\n                    if (polygon.length > 1) {\n                        logging_1.logger.warn('Bokeh does not support Polygons with holes in, only exterior ring used.');\n                    }\n                    exterior_rings.push(polygon[0]);\n                }\n                flattened_coord_list = exterior_rings.reduce(this._flatten_function);\n                results3 = [];\n                for (j = o = 0, len4 = flattened_coord_list.length; o < len4; j = ++o) {\n                    coords = flattened_coord_list[j];\n                    data.xs[i][j] = coords[0];\n                    data.ys[i][j] = coords[1];\n                    results3.push(data.zs[i][j] = (ref5 = coords[2]) != null ? ref5 : 0 / 0);\n                }\n                return results3;\n                break;\n            default:\n                throw new Error('Invalid type ' + geometry.type);\n        }\n    };\n    GeoJSONDataSource.prototype._get_items_length = function (items) {\n        var count, g, geometry, i, item, j, k, l, len, len1, ref;\n        count = 0;\n        for (i = k = 0, len = items.length; k < len; i = ++k) {\n            item = items[i];\n            geometry = item.type === 'Feature' ? item.geometry : item;\n            if (geometry.type === 'GeometryCollection') {\n                ref = geometry.geometries;\n                for (j = l = 0, len1 = ref.length; l < len1; j = ++l) {\n                    g = ref[j];\n                    count += 1;\n                }\n            }\n            else {\n                count += 1;\n            }\n        }\n        return count;\n    };\n    GeoJSONDataSource.prototype.geojson_to_column_data = function () {\n        var arr_index, data, g, geojson, geometry, i, item, item_count, items, j, k, l, len, len1, ref, ref1;\n        geojson = JSON.parse(this.geojson);\n        if ((ref = geojson.type) !== 'GeometryCollection' && ref !== 'FeatureCollection') {\n            throw new Error('Bokeh only supports type GeometryCollection and FeatureCollection at top level');\n        }\n        if (geojson.type === 'GeometryCollection') {\n            if (geojson.geometries == null) {\n                throw new Error('No geometries found in GeometryCollection');\n            }\n            if (geojson.geometries.length === 0) {\n                throw new Error('geojson.geometries must have one or more items');\n            }\n            items = geojson.geometries;\n        }\n        if (geojson.type === 'FeatureCollection') {\n            if (geojson.features == null) {\n                throw new Error('No features found in FeaturesCollection');\n            }\n            if (geojson.features.length === 0) {\n                throw new Error('geojson.features must have one or more items');\n            }\n            items = geojson.features;\n        }\n        item_count = this._get_items_length(items);\n        data = {\n            'x': this._get_new_nan_array(item_count),\n            'y': this._get_new_nan_array(item_count),\n            'z': this._get_new_nan_array(item_count),\n            'xs': this._get_new_list_array(item_count),\n            'ys': this._get_new_list_array(item_count),\n            'zs': this._get_new_list_array(item_count)\n        };\n        arr_index = 0;\n        for (i = k = 0, len = items.length; k < len; i = ++k) {\n            item = items[i];\n            geometry = item.type === 'Feature' ? item.geometry : item;\n            if (geometry.type === 'GeometryCollection') {\n                ref1 = geometry.geometries;\n                for (j = l = 0, len1 = ref1.length; l < len1; j = ++l) {\n                    g = ref1[j];\n                    this._add_geometry(g, data, arr_index);\n                    if (item.type === 'Feature') {\n                        this._add_properties(item, data, arr_index, item_count);\n                    }\n                    arr_index += 1;\n                }\n            }\n            else {\n                this._add_geometry(geometry, data, arr_index);\n                if (item.type === 'Feature') {\n                    this._add_properties(item, data, arr_index, item_count);\n                }\n                arr_index += 1;\n            }\n        }\n        return data;\n    };\n    return GeoJSONDataSource;\n})(columnar_data_source_1.ColumnarDataSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ajax_data_source_1 = require(\"./ajax_data_source\");\nexports.AjaxDataSource = ajax_data_source_1.AjaxDataSource;\nvar column_data_source_1 = require(\"./column_data_source\");\nexports.ColumnDataSource = column_data_source_1.ColumnDataSource;\nvar columnar_data_source_1 = require(\"./columnar_data_source\");\nexports.ColumnarDataSource = columnar_data_source_1.ColumnarDataSource;\nvar data_source_1 = require(\"./data_source\");\nexports.DataSource = data_source_1.DataSource;\nvar geojson_data_source_1 = require(\"./geojson_data_source\");\nexports.GeoJSONDataSource = geojson_data_source_1.GeoJSONDataSource;\nvar remote_data_source_1 = require(\"./remote_data_source\");\nexports.RemoteDataSource = remote_data_source_1.RemoteDataSource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar column_data_source_1 = require(\"./column_data_source\");\nvar p = require(\"core/properties\");\nexports.RemoteDataSource = (function (superClass) {\n    extend(RemoteDataSource, superClass);\n    function RemoteDataSource() {\n        return RemoteDataSource.__super__.constructor.apply(this, arguments);\n    }\n    RemoteDataSource.prototype.type = 'RemoteDataSource';\n    RemoteDataSource.define({\n        data_url: [p.String],\n        polling_interval: [p.Number]\n    });\n    return RemoteDataSource;\n})(column_data_source_1.ColumnDataSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar clamp, log, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, slice = [].slice;\nvar continuous_ticker_1 = require(\"./continuous_ticker\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nclamp = function (x, min_val, max_val) {\n    return Math.max(min_val, Math.min(max_val, x));\n};\nlog = function (x, base) {\n    if (base == null) {\n        base = Math.E;\n    }\n    return Math.log(x) / Math.log(base);\n};\nexports.AdaptiveTicker = (function (superClass) {\n    extend(AdaptiveTicker, superClass);\n    function AdaptiveTicker() {\n        return AdaptiveTicker.__super__.constructor.apply(this, arguments);\n    }\n    AdaptiveTicker.prototype.type = 'AdaptiveTicker';\n    AdaptiveTicker.define({\n        base: [p.Number, 10.0],\n        mantissas: [p.Array, [1, 2, 5]],\n        min_interval: [p.Number, 0.0],\n        max_interval: [p.Number]\n    });\n    AdaptiveTicker.prototype.initialize = function (attrs, options) {\n        var prefix_mantissa, suffix_mantissa;\n        AdaptiveTicker.__super__.initialize.call(this, attrs, options);\n        prefix_mantissa = array_1.nth(this.mantissas, -1) / this.base;\n        suffix_mantissa = array_1.nth(this.mantissas, 0) * this.base;\n        this.extended_mantissas = [prefix_mantissa].concat(slice.call(this.mantissas), [suffix_mantissa]);\n        return this.base_factor = this.get_min_interval() === 0.0 ? 1.0 : this.get_min_interval();\n    };\n    AdaptiveTicker.prototype.get_interval = function (data_low, data_high, desired_n_ticks) {\n        var best_mantissa, candidate_mantissas, data_range, errors, ideal_interval, ideal_magnitude, ideal_mantissa, interval, interval_exponent;\n        data_range = data_high - data_low;\n        ideal_interval = this.get_ideal_interval(data_low, data_high, desired_n_ticks);\n        interval_exponent = Math.floor(log(ideal_interval / this.base_factor, this.base));\n        ideal_magnitude = Math.pow(this.base, interval_exponent) * this.base_factor;\n        ideal_mantissa = ideal_interval / ideal_magnitude;\n        candidate_mantissas = this.extended_mantissas;\n        errors = candidate_mantissas.map(function (mantissa) {\n            return Math.abs(desired_n_ticks - (data_range / (mantissa * ideal_magnitude)));\n        });\n        best_mantissa = candidate_mantissas[array_1.argmin(errors)];\n        interval = best_mantissa * ideal_magnitude;\n        return clamp(interval, this.get_min_interval(), this.get_max_interval());\n    };\n    return AdaptiveTicker;\n})(continuous_ticker_1.ContinuousTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar adaptive_ticker_1 = require(\"./adaptive_ticker\");\nexports.BasicTicker = (function (superClass) {\n    extend(BasicTicker, superClass);\n    function BasicTicker() {\n        return BasicTicker.__super__.constructor.apply(this, arguments);\n    }\n    BasicTicker.prototype.type = 'BasicTicker';\n    return BasicTicker;\n})(adaptive_ticker_1.AdaptiveTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar ticker_1 = require(\"./ticker\");\nexports.CategoricalTicker = (function (superClass) {\n    extend(CategoricalTicker, superClass);\n    function CategoricalTicker() {\n        return CategoricalTicker.__super__.constructor.apply(this, arguments);\n    }\n    CategoricalTicker.prototype.type = 'CategoricalTicker';\n    CategoricalTicker.prototype.get_ticks = function (start, end, range, cross_loc, arg) {\n        var desired_n_ticks, factors, i, ii, j, majors, ref;\n        desired_n_ticks = arg.desired_n_ticks;\n        majors = [];\n        factors = range.factors;\n        for (i = j = 0, ref = factors.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n            ii = i + range.offset;\n            if ((ii + 1) > start && (ii + 1) < end) {\n                majors.push(factors[i]);\n            }\n        }\n        return {\n            \"major\": majors,\n            \"minor\": []\n        };\n    };\n    return CategoricalTicker;\n})(ticker_1.Ticker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar continuous_ticker_1 = require(\"./continuous_ticker\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nvar object_1 = require(\"core/util/object\");\nexports.CompositeTicker = (function (superClass) {\n    extend(CompositeTicker, superClass);\n    function CompositeTicker() {\n        return CompositeTicker.__super__.constructor.apply(this, arguments);\n    }\n    CompositeTicker.prototype.type = 'CompositeTicker';\n    CompositeTicker.define({\n        tickers: [p.Array, []]\n    });\n    CompositeTicker.getters({\n        min_intervals: function () {\n            var i, len, ref, results, ticker;\n            ref = this.tickers;\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n                ticker = ref[i];\n                results.push(ticker.get_min_interval());\n            }\n            return results;\n        },\n        max_intervals: function () {\n            var i, len, ref, results, ticker;\n            ref = this.tickers;\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n                ticker = ref[i];\n                results.push(ticker.get_max_interval());\n            }\n            return results;\n        },\n        min_interval: function () {\n            return this.min_intervals[0];\n        },\n        max_interval: function () {\n            return this.max_intervals[0];\n        }\n    });\n    CompositeTicker.prototype.get_best_ticker = function (data_low, data_high, desired_n_ticks) {\n        var best_index, best_ticker, best_ticker_ndx, data_range, errors, ideal_interval, intervals, ticker_ndxs;\n        data_range = data_high - data_low;\n        ideal_interval = this.get_ideal_interval(data_low, data_high, desired_n_ticks);\n        ticker_ndxs = [array_1.sortedIndex(this.min_intervals, ideal_interval) - 1, array_1.sortedIndex(this.max_intervals, ideal_interval)];\n        intervals = [this.min_intervals[ticker_ndxs[0]], this.max_intervals[ticker_ndxs[1]]];\n        errors = intervals.map(function (interval) {\n            return Math.abs(desired_n_ticks - (data_range / interval));\n        });\n        if (object_1.isEmpty(errors.filter(function (e) {\n            return !isNaN(e);\n        }))) {\n            best_ticker = this.tickers[0];\n        }\n        else {\n            best_index = array_1.argmin(errors);\n            best_ticker_ndx = ticker_ndxs[best_index];\n            best_ticker = this.tickers[best_ticker_ndx];\n        }\n        return best_ticker;\n    };\n    CompositeTicker.prototype.get_interval = function (data_low, data_high, desired_n_ticks) {\n        var best_ticker;\n        best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks);\n        return best_ticker.get_interval(data_low, data_high, desired_n_ticks);\n    };\n    CompositeTicker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        var best_ticker, ticks;\n        best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks);\n        ticks = best_ticker.get_ticks_no_defaults(data_low, data_high, cross_loc, desired_n_ticks);\n        return ticks;\n    };\n    return CompositeTicker;\n})(continuous_ticker_1.ContinuousTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar ticker_1 = require(\"./ticker\");\nvar p = require(\"core/properties\");\nexports.ContinuousTicker = (function (superClass) {\n    extend(ContinuousTicker, superClass);\n    function ContinuousTicker() {\n        return ContinuousTicker.__super__.constructor.apply(this, arguments);\n    }\n    ContinuousTicker.prototype.type = 'ContinuousTicker';\n    ContinuousTicker.define({\n        num_minor_ticks: [p.Number, 5],\n        desired_num_ticks: [p.Number, 6]\n    });\n    ContinuousTicker.prototype.get_interval = void 0;\n    ContinuousTicker.prototype.get_min_interval = function () {\n        return this.min_interval;\n    };\n    ContinuousTicker.prototype.get_max_interval = function () {\n        var ref;\n        return (ref = this.max_interval) != null ? ref : 2e308;\n    };\n    ContinuousTicker.prototype.get_ideal_interval = function (data_low, data_high, desired_n_ticks) {\n        var data_range;\n        data_range = data_high - data_low;\n        return data_range / desired_n_ticks;\n    };\n    return ContinuousTicker;\n})(ticker_1.Ticker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ONE_HOUR, ONE_MILLI, ONE_MINUTE, ONE_MONTH, ONE_SECOND, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar array_1 = require(\"core/util/array\");\nvar adaptive_ticker_1 = require(\"./adaptive_ticker\");\nvar composite_ticker_1 = require(\"./composite_ticker\");\nvar days_ticker_1 = require(\"./days_ticker\");\nvar months_ticker_1 = require(\"./months_ticker\");\nvar years_ticker_1 = require(\"./years_ticker\");\nvar util = require(\"./util\");\nONE_MILLI = util.ONE_MILLI;\nONE_SECOND = util.ONE_SECOND;\nONE_MINUTE = util.ONE_MINUTE;\nONE_HOUR = util.ONE_HOUR;\nONE_MONTH = util.ONE_MONTH;\nexports.DatetimeTicker = (function (superClass) {\n    extend(DatetimeTicker, superClass);\n    function DatetimeTicker() {\n        return DatetimeTicker.__super__.constructor.apply(this, arguments);\n    }\n    DatetimeTicker.prototype.type = 'DatetimeTicker';\n    DatetimeTicker.override({\n        num_minor_ticks: 0,\n        tickers: function () {\n            return [\n                new adaptive_ticker_1.AdaptiveTicker({\n                    mantissas: [1, 2, 5],\n                    base: 10,\n                    min_interval: 0,\n                    max_interval: 500 * ONE_MILLI,\n                    num_minor_ticks: 0\n                }), new adaptive_ticker_1.AdaptiveTicker({\n                    mantissas: [1, 2, 5, 10, 15, 20, 30],\n                    base: 60,\n                    min_interval: ONE_SECOND,\n                    max_interval: 30 * ONE_MINUTE,\n                    num_minor_ticks: 0\n                }), new adaptive_ticker_1.AdaptiveTicker({\n                    mantissas: [1, 2, 4, 6, 8, 12],\n                    base: 24.0,\n                    min_interval: ONE_HOUR,\n                    max_interval: 12 * ONE_HOUR,\n                    num_minor_ticks: 0\n                }), new days_ticker_1.DaysTicker({\n                    days: array_1.range(1, 32)\n                }), new days_ticker_1.DaysTicker({\n                    days: array_1.range(1, 31, 3)\n                }), new days_ticker_1.DaysTicker({\n                    days: [1, 8, 15, 22]\n                }), new days_ticker_1.DaysTicker({\n                    days: [1, 15]\n                }), new months_ticker_1.MonthsTicker({\n                    months: array_1.range(0, 12, 1)\n                }), new months_ticker_1.MonthsTicker({\n                    months: array_1.range(0, 12, 2)\n                }), new months_ticker_1.MonthsTicker({\n                    months: array_1.range(0, 12, 4)\n                }), new months_ticker_1.MonthsTicker({\n                    months: array_1.range(0, 12, 6)\n                }), new years_ticker_1.YearsTicker({})\n            ];\n        }\n    });\n    return DatetimeTicker;\n})(composite_ticker_1.CompositeTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ONE_DAY, copy_date, date_range_by_month, last_month_no_later_than, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar single_interval_ticker_1 = require(\"./single_interval_ticker\");\nvar util = require(\"./util\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\ncopy_date = util.copy_date;\nlast_month_no_later_than = util.last_month_no_later_than;\nONE_DAY = util.ONE_DAY;\ndate_range_by_month = function (start_time, end_time) {\n    var date, dates, end_date, prev_end_date, start_date;\n    start_date = last_month_no_later_than(new Date(start_time));\n    end_date = last_month_no_later_than(new Date(end_time));\n    prev_end_date = copy_date(end_date);\n    end_date.setUTCMonth(end_date.getUTCMonth() + 1);\n    dates = [];\n    date = start_date;\n    while (true) {\n        dates.push(copy_date(date));\n        date.setUTCMonth(date.getUTCMonth() + 1);\n        if (date > end_date) {\n            break;\n        }\n    }\n    return dates;\n};\nexports.DaysTicker = (function (superClass) {\n    extend(DaysTicker, superClass);\n    function DaysTicker() {\n        return DaysTicker.__super__.constructor.apply(this, arguments);\n    }\n    DaysTicker.prototype.type = 'DaysTicker';\n    DaysTicker.define({\n        days: [p.Array, []]\n    });\n    DaysTicker.prototype.initialize = function (attrs, options) {\n        var days, interval;\n        attrs.num_minor_ticks = 0;\n        DaysTicker.__super__.initialize.call(this, attrs, options);\n        days = this.days;\n        interval = days.length > 1 ? (days[1] - days[0]) * ONE_DAY : 31 * ONE_DAY;\n        return this.interval = interval;\n    };\n    DaysTicker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        var all_ticks, date, day_date, day_dates, days, days_of_month, interval, month_dates, ticks_in_range;\n        month_dates = date_range_by_month(data_low, data_high);\n        days = this.days;\n        days_of_month = (function (_this) {\n            return function (month_date, interval) {\n                var dates, day, day_date, future_date, i, len;\n                dates = [];\n                for (i = 0, len = days.length; i < len; i++) {\n                    day = days[i];\n                    day_date = copy_date(month_date);\n                    day_date.setUTCDate(day);\n                    future_date = new Date(day_date.getTime() + (interval / 2));\n                    if (future_date.getUTCMonth() === month_date.getUTCMonth()) {\n                        dates.push(day_date);\n                    }\n                }\n                return dates;\n            };\n        })(this);\n        interval = this.interval;\n        day_dates = array_1.concat((function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = month_dates.length; i < len; i++) {\n                date = month_dates[i];\n                results.push(days_of_month(date, interval));\n            }\n            return results;\n        })());\n        all_ticks = (function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = day_dates.length; i < len; i++) {\n                day_date = day_dates[i];\n                results.push(day_date.getTime());\n            }\n            return results;\n        })();\n        ticks_in_range = all_ticks.filter(function (tick) {\n            return (data_low <= tick && tick <= data_high);\n        });\n        return {\n            \"major\": ticks_in_range,\n            \"minor\": []\n        };\n    };\n    return DaysTicker;\n})(single_interval_ticker_1.SingleIntervalTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar continuous_ticker_1 = require(\"./continuous_ticker\");\nvar p = require(\"core/properties\");\nexports.FixedTicker = (function (superClass) {\n    extend(FixedTicker, superClass);\n    function FixedTicker() {\n        return FixedTicker.__super__.constructor.apply(this, arguments);\n    }\n    FixedTicker.prototype.type = 'FixedTicker';\n    FixedTicker.define({\n        ticks: [p.Array, []]\n    });\n    FixedTicker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        return {\n            major: this.ticks,\n            minor: []\n        };\n    };\n    return FixedTicker;\n})(continuous_ticker_1.ContinuousTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar adaptive_ticker_1 = require(\"./adaptive_ticker\");\nexports.AdaptiveTicker = adaptive_ticker_1.AdaptiveTicker;\nvar basic_ticker_1 = require(\"./basic_ticker\");\nexports.BasicTicker = basic_ticker_1.BasicTicker;\nvar categorical_ticker_1 = require(\"./categorical_ticker\");\nexports.CategoricalTicker = categorical_ticker_1.CategoricalTicker;\nvar composite_ticker_1 = require(\"./composite_ticker\");\nexports.CompositeTicker = composite_ticker_1.CompositeTicker;\nvar continuous_ticker_1 = require(\"./continuous_ticker\");\nexports.ContinuousTicker = continuous_ticker_1.ContinuousTicker;\nvar datetime_ticker_1 = require(\"./datetime_ticker\");\nexports.DatetimeTicker = datetime_ticker_1.DatetimeTicker;\nvar days_ticker_1 = require(\"./days_ticker\");\nexports.DaysTicker = days_ticker_1.DaysTicker;\nvar fixed_ticker_1 = require(\"./fixed_ticker\");\nexports.FixedTicker = fixed_ticker_1.FixedTicker;\nvar log_ticker_1 = require(\"./log_ticker\");\nexports.LogTicker = log_ticker_1.LogTicker;\nvar mercator_ticker_1 = require(\"./mercator_ticker\");\nexports.MercatorTicker = mercator_ticker_1.MercatorTicker;\nvar months_ticker_1 = require(\"./months_ticker\");\nexports.MonthsTicker = months_ticker_1.MonthsTicker;\nvar single_interval_ticker_1 = require(\"./single_interval_ticker\");\nexports.SingleIntervalTicker = single_interval_ticker_1.SingleIntervalTicker;\nvar ticker_1 = require(\"./ticker\");\nexports.Ticker = ticker_1.Ticker;\nvar years_ticker_1 = require(\"./years_ticker\");\nexports.YearsTicker = years_ticker_1.YearsTicker;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar array_1 = require(\"core/util/array\");\nvar adaptive_ticker_1 = require(\"./adaptive_ticker\");\nexports.LogTicker = (function (superClass) {\n    extend(LogTicker, superClass);\n    function LogTicker() {\n        return LogTicker.__super__.constructor.apply(this, arguments);\n    }\n    LogTicker.prototype.type = 'LogTicker';\n    LogTicker.override({\n        mantissas: [1, 5]\n    });\n    LogTicker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        var base, end_factor, endlog, factor, factors, i, interval, j, k, l, len, len1, len2, len3, len4, len5, log_high, log_interval, log_low, m, minor_interval, minor_offsets, minor_ticks, n, num_minor_ticks, o, ref, start_factor, startlog, tick, ticks, x;\n        num_minor_ticks = this.num_minor_ticks;\n        minor_ticks = [];\n        base = this.base;\n        log_low = Math.log(data_low) / Math.log(base);\n        log_high = Math.log(data_high) / Math.log(base);\n        log_interval = log_high - log_low;\n        if (!isFinite(log_interval)) {\n            ticks = [];\n        }\n        else if (log_interval < 2) {\n            interval = this.get_interval(data_low, data_high, desired_n_ticks);\n            start_factor = Math.floor(data_low / interval);\n            end_factor = Math.ceil(data_high / interval);\n            factors = array_1.range(start_factor, end_factor + 1);\n            ticks = (function () {\n                var j, len, results;\n                results = [];\n                for (j = 0, len = factors.length; j < len; j++) {\n                    factor = factors[j];\n                    if (factor !== 0) {\n                        results.push(factor * interval);\n                    }\n                }\n                return results;\n            })();\n            ticks = ticks.filter(function (tick) {\n                return (data_low <= tick && tick <= data_high);\n            });\n            if (num_minor_ticks > 0 && ticks.length > 0) {\n                minor_interval = interval / num_minor_ticks;\n                minor_offsets = (function () {\n                    var j, ref, results;\n                    results = [];\n                    for (i = j = 0, ref = num_minor_ticks; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                        results.push(i * minor_interval);\n                    }\n                    return results;\n                })();\n                ref = minor_offsets.slice(1, +minor_offsets.length + 1 || 9e9);\n                for (j = 0, len = ref.length; j < len; j++) {\n                    x = ref[j];\n                    minor_ticks.push(ticks[0] - x);\n                }\n                for (k = 0, len1 = ticks.length; k < len1; k++) {\n                    tick = ticks[k];\n                    for (l = 0, len2 = minor_offsets.length; l < len2; l++) {\n                        x = minor_offsets[l];\n                        minor_ticks.push(tick + x);\n                    }\n                }\n            }\n        }\n        else {\n            startlog = Math.ceil(log_low * 0.999999);\n            endlog = Math.floor(log_high * 1.000001);\n            interval = Math.ceil((endlog - startlog) / 9.0);\n            ticks = array_1.range(startlog, endlog + 1, interval);\n            ticks = ticks.map(function (i) {\n                return Math.pow(base, i);\n            });\n            ticks = ticks.filter(function (tick) {\n                return (data_low <= tick && tick <= data_high);\n            });\n            if (num_minor_ticks > 0 && ticks.length > 0) {\n                minor_interval = Math.pow(base, interval) / num_minor_ticks;\n                minor_offsets = (function () {\n                    var m, ref1, results;\n                    results = [];\n                    for (i = m = 1, ref1 = num_minor_ticks; 1 <= ref1 ? m <= ref1 : m >= ref1; i = 1 <= ref1 ? ++m : --m) {\n                        results.push(i * minor_interval);\n                    }\n                    return results;\n                })();\n                for (m = 0, len3 = minor_offsets.length; m < len3; m++) {\n                    x = minor_offsets[m];\n                    minor_ticks.push(ticks[0] / x);\n                }\n                minor_ticks.push(ticks[0]);\n                for (n = 0, len4 = ticks.length; n < len4; n++) {\n                    tick = ticks[n];\n                    for (o = 0, len5 = minor_offsets.length; o < len5; o++) {\n                        x = minor_offsets[o];\n                        minor_ticks.push(tick * x);\n                    }\n                }\n            }\n        }\n        return {\n            major: ticks,\n            minor: minor_ticks\n        };\n    };\n    return LogTicker;\n})(adaptive_ticker_1.AdaptiveTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar basic_ticker_1 = require(\"./basic_ticker\");\nvar p = require(\"core/properties\");\nvar proj4_1 = require(\"core/util/proj4\");\nexports.MercatorTicker = (function (superClass) {\n    extend(MercatorTicker, superClass);\n    function MercatorTicker() {\n        return MercatorTicker.__super__.constructor.apply(this, arguments);\n    }\n    MercatorTicker.prototype.type = 'MercatorTicker';\n    MercatorTicker.define({\n        dimension: [p.LatLon]\n    });\n    MercatorTicker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        var _, i, j, k, l, lat, len, len1, len2, len3, lon, proj_cross_loc, proj_high, proj_low, proj_ticks, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, tick, ticks;\n        if (this.dimension == null) {\n            throw new Error(\"MercatorTicker.dimension not configured\");\n        }\n        if (this.dimension === \"lon\") {\n            ref = proj4_1.proj4(proj4_1.mercator).inverse([data_low, cross_loc]), proj_low = ref[0], proj_cross_loc = ref[1];\n            ref1 = proj4_1.proj4(proj4_1.mercator).inverse([data_high, cross_loc]), proj_high = ref1[0], proj_cross_loc = ref1[1];\n        }\n        else {\n            ref2 = proj4_1.proj4(proj4_1.mercator).inverse([cross_loc, data_low]), proj_cross_loc = ref2[0], proj_low = ref2[1];\n            ref3 = proj4_1.proj4(proj4_1.mercator).inverse([cross_loc, data_high]), proj_cross_loc = ref3[0], proj_high = ref3[1];\n        }\n        proj_ticks = MercatorTicker.__super__.get_ticks_no_defaults.call(this, proj_low, proj_high, cross_loc, desired_n_ticks);\n        ticks = {\n            major: [],\n            minor: []\n        };\n        if (this.dimension === \"lon\") {\n            ref4 = proj_ticks.major;\n            for (i = 0, len = ref4.length; i < len; i++) {\n                tick = ref4[i];\n                ref5 = proj4_1.proj4(proj4_1.mercator).forward([tick, proj_cross_loc]), lon = ref5[0], _ = ref5[1];\n                ticks.major.push(lon);\n            }\n            ref6 = proj_ticks.minor;\n            for (j = 0, len1 = ref6.length; j < len1; j++) {\n                tick = ref6[j];\n                ref7 = proj4_1.proj4(proj4_1.mercator).forward([tick, proj_cross_loc]), lon = ref7[0], _ = ref7[1];\n                ticks.minor.push(lon);\n            }\n        }\n        else {\n            ref8 = proj_ticks.major;\n            for (k = 0, len2 = ref8.length; k < len2; k++) {\n                tick = ref8[k];\n                ref9 = proj4_1.proj4(proj4_1.mercator).forward([proj_cross_loc, tick]), _ = ref9[0], lat = ref9[1];\n                ticks.major.push(lat);\n            }\n            ref10 = proj_ticks.minor;\n            for (l = 0, len3 = ref10.length; l < len3; l++) {\n                tick = ref10[l];\n                ref11 = proj4_1.proj4(proj4_1.mercator).forward([proj_cross_loc, tick]), _ = ref11[0], lat = ref11[1];\n                ticks.minor.push(lat);\n            }\n        }\n        return ticks;\n    };\n    return MercatorTicker;\n})(basic_ticker_1.BasicTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ONE_MONTH, copy_date, date_range_by_year, last_year_no_later_than, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar single_interval_ticker_1 = require(\"./single_interval_ticker\");\nvar util = require(\"./util\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\ncopy_date = util.copy_date;\nlast_year_no_later_than = util.last_year_no_later_than;\nONE_MONTH = util.ONE_MONTH;\ndate_range_by_year = function (start_time, end_time) {\n    var date, dates, end_date, start_date;\n    start_date = last_year_no_later_than(new Date(start_time));\n    end_date = last_year_no_later_than(new Date(end_time));\n    end_date.setUTCFullYear(end_date.getUTCFullYear() + 1);\n    dates = [];\n    date = start_date;\n    while (true) {\n        dates.push(copy_date(date));\n        date.setUTCFullYear(date.getUTCFullYear() + 1);\n        if (date > end_date) {\n            break;\n        }\n    }\n    return dates;\n};\nexports.MonthsTicker = (function (superClass) {\n    extend(MonthsTicker, superClass);\n    function MonthsTicker() {\n        return MonthsTicker.__super__.constructor.apply(this, arguments);\n    }\n    MonthsTicker.prototype.type = 'MonthsTicker';\n    MonthsTicker.define({\n        months: [p.Array, []]\n    });\n    MonthsTicker.prototype.initialize = function (attrs, options) {\n        var interval, months;\n        MonthsTicker.__super__.initialize.call(this, attrs, options);\n        months = this.months;\n        interval = months.length > 1 ? (months[1] - months[0]) * ONE_MONTH : 12 * ONE_MONTH;\n        return this.interval = interval;\n    };\n    MonthsTicker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        var all_ticks, date, month_date, month_dates, months, months_of_year, ticks_in_range, year_dates;\n        year_dates = date_range_by_year(data_low, data_high);\n        months = this.months;\n        months_of_year = function (year_date) {\n            return months.map(function (month) {\n                var month_date;\n                month_date = copy_date(year_date);\n                month_date.setUTCMonth(month);\n                return month_date;\n            });\n        };\n        month_dates = array_1.concat((function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = year_dates.length; i < len; i++) {\n                date = year_dates[i];\n                results.push(months_of_year(date));\n            }\n            return results;\n        })());\n        all_ticks = (function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = month_dates.length; i < len; i++) {\n                month_date = month_dates[i];\n                results.push(month_date.getTime());\n            }\n            return results;\n        })();\n        ticks_in_range = all_ticks.filter(function (tick) {\n            return (data_low <= tick && tick <= data_high);\n        });\n        return {\n            \"major\": ticks_in_range,\n            \"minor\": []\n        };\n    };\n    return MonthsTicker;\n})(single_interval_ticker_1.SingleIntervalTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar continuous_ticker_1 = require(\"./continuous_ticker\");\nvar p = require(\"core/properties\");\nexports.SingleIntervalTicker = (function (superClass) {\n    extend(SingleIntervalTicker, superClass);\n    function SingleIntervalTicker() {\n        return SingleIntervalTicker.__super__.constructor.apply(this, arguments);\n    }\n    SingleIntervalTicker.prototype.type = 'SingleIntervalTicker';\n    SingleIntervalTicker.define({\n        interval: [p.Number]\n    });\n    SingleIntervalTicker.getters({\n        min_interval: function () {\n            return this.interval;\n        },\n        max_interval: function () {\n            return this.interval;\n        }\n    });\n    SingleIntervalTicker.prototype.get_interval = function (data_low, data_high, n_desired_ticks) {\n        return this.interval;\n    };\n    return SingleIntervalTicker;\n})(continuous_ticker_1.ContinuousTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nvar array_1 = require(\"core/util/array\");\nvar types_1 = require(\"core/util/types\");\nexports.Ticker = (function (superClass) {\n    extend(Ticker, superClass);\n    function Ticker() {\n        return Ticker.__super__.constructor.apply(this, arguments);\n    }\n    Ticker.prototype.type = 'Ticker';\n    Ticker.prototype.get_ticks = function (data_low, data_high, range, cross_loc, arg) {\n        var desired_n_ticks;\n        desired_n_ticks = arg.desired_n_ticks;\n        return this.get_ticks_no_defaults(data_low, data_high, cross_loc, this.desired_num_ticks);\n    };\n    Ticker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        var end_factor, factor, factors, i, interval, j, k, l, len, len1, len2, minor_interval, minor_offsets, minor_ticks, num_minor_ticks, ref, start_factor, tick, ticks, x;\n        interval = this.get_interval(data_low, data_high, desired_n_ticks);\n        start_factor = Math.floor(data_low / interval);\n        end_factor = Math.ceil(data_high / interval);\n        if (types_1.isStrictNaN(start_factor) || types_1.isStrictNaN(end_factor)) {\n            factors = [];\n        }\n        else {\n            factors = array_1.range(start_factor, end_factor + 1);\n        }\n        ticks = (function () {\n            var j, len, results;\n            results = [];\n            for (j = 0, len = factors.length; j < len; j++) {\n                factor = factors[j];\n                results.push(factor * interval);\n            }\n            return results;\n        })();\n        ticks = ticks.filter(function (tick) {\n            return (data_low <= tick && tick <= data_high);\n        });\n        num_minor_ticks = this.num_minor_ticks;\n        minor_ticks = [];\n        if (num_minor_ticks > 0 && ticks.length > 0) {\n            minor_interval = interval / num_minor_ticks;\n            minor_offsets = (function () {\n                var j, ref, results;\n                results = [];\n                for (i = j = 0, ref = num_minor_ticks; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    results.push(i * minor_interval);\n                }\n                return results;\n            })();\n            ref = minor_offsets.slice(1, +minor_offsets.length + 1 || 9e9);\n            for (j = 0, len = ref.length; j < len; j++) {\n                x = ref[j];\n                minor_ticks.push(ticks[0] - x);\n            }\n            for (k = 0, len1 = ticks.length; k < len1; k++) {\n                tick = ticks[k];\n                for (l = 0, len2 = minor_offsets.length; l < len2; l++) {\n                    x = minor_offsets[l];\n                    minor_ticks.push(tick + x);\n                }\n            }\n        }\n        return {\n            \"major\": ticks,\n            \"minor\": minor_ticks\n        };\n    };\n    return Ticker;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ONE_MILLI = 1.0;\nexports.ONE_SECOND = 1000.0;\nexports.ONE_MINUTE = 60.0 * exports.ONE_SECOND;\nexports.ONE_HOUR = 60 * exports.ONE_MINUTE;\nexports.ONE_DAY = 24 * exports.ONE_HOUR;\nexports.ONE_MONTH = 30 * exports.ONE_DAY;\nexports.ONE_YEAR = 365 * exports.ONE_DAY;\nexports.copy_date = function (date) {\n    return new Date(date.getTime());\n};\nexports.last_month_no_later_than = function (date) {\n    date = exports.copy_date(date);\n    date.setUTCDate(1);\n    date.setUTCHours(0);\n    date.setUTCMinutes(0);\n    date.setUTCSeconds(0);\n    date.setUTCMilliseconds(0);\n    return date;\n};\nexports.last_year_no_later_than = function (date) {\n    date = exports.last_month_no_later_than(date);\n    date.setUTCMonth(0);\n    return date;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ONE_YEAR, last_year_no_later_than, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar basic_ticker_1 = require(\"./basic_ticker\");\nvar single_interval_ticker_1 = require(\"./single_interval_ticker\");\nvar util = require(\"./util\");\nlast_year_no_later_than = util.last_year_no_later_than;\nONE_YEAR = util.ONE_YEAR;\nexports.YearsTicker = (function (superClass) {\n    extend(YearsTicker, superClass);\n    function YearsTicker() {\n        return YearsTicker.__super__.constructor.apply(this, arguments);\n    }\n    YearsTicker.prototype.type = 'YearsTicker';\n    YearsTicker.prototype.initialize = function (attrs, options) {\n        YearsTicker.__super__.initialize.call(this, attrs, options);\n        this.interval = ONE_YEAR;\n        return this.basic_ticker = new basic_ticker_1.BasicTicker({\n            num_minor_ticks: 0\n        });\n    };\n    YearsTicker.prototype.get_ticks_no_defaults = function (data_low, data_high, cross_loc, desired_n_ticks) {\n        var all_ticks, end_year, start_year, ticks_in_range, year, years;\n        start_year = last_year_no_later_than(new Date(data_low)).getUTCFullYear();\n        end_year = last_year_no_later_than(new Date(data_high)).getUTCFullYear();\n        years = this.basic_ticker.get_ticks_no_defaults(start_year, end_year, cross_loc, desired_n_ticks).major;\n        all_ticks = (function () {\n            var i, len, results;\n            results = [];\n            for (i = 0, len = years.length; i < len; i++) {\n                year = years[i];\n                results.push(Date.UTC(year, 0, 1));\n            }\n            return results;\n        })();\n        ticks_in_range = all_ticks.filter(function (tick) {\n            return (data_low <= tick && tick <= data_high);\n        });\n        return {\n            major: ticks_in_range,\n            minor: []\n        };\n    };\n    return YearsTicker;\n})(single_interval_ticker_1.SingleIntervalTicker);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar mercator_tile_source_1 = require(\"./mercator_tile_source\");\nvar p = require(\"core/properties\");\nexports.BBoxTileSource = (function (superClass) {\n    extend(BBoxTileSource, superClass);\n    function BBoxTileSource() {\n        return BBoxTileSource.__super__.constructor.apply(this, arguments);\n    }\n    BBoxTileSource.prototype.type = 'BBoxTileSource';\n    BBoxTileSource.define({\n        use_latlon: [p.Bool, false]\n    });\n    BBoxTileSource.prototype.get_image_url = function (x, y, z) {\n        var image_url, ref, ref1, xmax, xmin, ymax, ymin;\n        image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n        if (this.use_latlon) {\n            ref = this.get_tile_geographic_bounds(x, y, z), xmin = ref[0], ymin = ref[1], xmax = ref[2], ymax = ref[3];\n        }\n        else {\n            ref1 = this.get_tile_meter_bounds(x, y, z), xmin = ref1[0], ymin = ref1[1], xmax = ref1[2], ymax = ref1[3];\n        }\n        return image_url.replace(\"{XMIN}\", xmin).replace(\"{YMIN}\", ymin).replace(\"{XMAX}\", xmax).replace(\"{YMAX}\", ymax);\n    };\n    return BBoxTileSource;\n})(mercator_tile_source_1.MercatorTileSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; }, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar renderer_1 = require(\"../renderers/renderer\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nexports.DynamicImageView = (function (superClass) {\n    extend(DynamicImageView, superClass);\n    function DynamicImageView() {\n        this._on_image_error = bind(this._on_image_error, this);\n        this._on_image_load = bind(this._on_image_load, this);\n        return DynamicImageView.__super__.constructor.apply(this, arguments);\n    }\n    DynamicImageView.prototype.connect_signals = function () {\n        DynamicImageView.__super__.connect_signals.call(this);\n        return this.connect(this.model.change, function () {\n            return this.request_render();\n        });\n    };\n    DynamicImageView.prototype.get_extent = function () {\n        return [this.x_range.start, this.y_range.start, this.x_range.end, this.y_range.end];\n    };\n    DynamicImageView.prototype._set_data = function () {\n        this.map_plot = this.plot_view.model.plot;\n        this.map_canvas = this.plot_view.canvas_view.ctx;\n        this.map_frame = this.plot_view.frame;\n        this.x_range = this.map_plot.x_range;\n        this.y_range = this.map_plot.y_range;\n        this.lastImage = void 0;\n        return this.extent = this.get_extent();\n    };\n    DynamicImageView.prototype._map_data = function () {\n        return this.initial_extent = this.get_extent();\n    };\n    DynamicImageView.prototype._on_image_load = function (e) {\n        var image_data;\n        image_data = e.target.image_data;\n        image_data.img = e.target;\n        image_data.loaded = true;\n        this.lastImage = image_data;\n        if (this.get_extent().join(':') === image_data.cache_key) {\n            return this.request_render();\n        }\n    };\n    DynamicImageView.prototype._on_image_error = function (e) {\n        var image_data;\n        logging_1.logger.error(\"Error loading image: \" + e.target.src);\n        image_data = e.target.image_data;\n        return this.model.image_source.remove_image(image_data);\n    };\n    DynamicImageView.prototype._create_image = function (bounds) {\n        var image;\n        image = new Image();\n        image.onload = this._on_image_load;\n        image.onerror = this._on_image_error;\n        image.alt = '';\n        image.image_data = {\n            bounds: bounds,\n            loaded: false,\n            cache_key: bounds.join(':')\n        };\n        this.model.image_source.add_image(image.image_data);\n        image.src = this.model.image_source.get_image_url(bounds[0], bounds[1], bounds[2], bounds[3], Math.ceil(this.map_frame._height.value), Math.ceil(this.map_frame._width.value));\n        return image;\n    };\n    DynamicImageView.prototype.render = function (ctx, indices, args) {\n        var extent, image_obj;\n        if (this.map_initialized == null) {\n            this._set_data();\n            this._map_data();\n            this.map_initialized = true;\n        }\n        extent = this.get_extent();\n        if (this.render_timer) {\n            clearTimeout(this.render_timer);\n        }\n        image_obj = this.model.image_source.images[extent.join(':')];\n        if ((image_obj != null) && image_obj.loaded) {\n            this._draw_image(extent.join(':'));\n            return;\n        }\n        if (this.lastImage != null) {\n            this._draw_image(this.lastImage.cache_key);\n        }\n        if (image_obj == null) {\n            return this.render_timer = setTimeout(((function (_this) {\n                return function () {\n                    return _this._create_image(extent);\n                };\n            })(this)), 125);\n        }\n    };\n    DynamicImageView.prototype._draw_image = function (image_key) {\n        var image_obj, ref, ref1, sh, sw, sx, sxmax, sxmin, sy, symax, symin;\n        image_obj = this.model.image_source.images[image_key];\n        if (image_obj != null) {\n            this.map_canvas.save();\n            this._set_rect();\n            this.map_canvas.globalAlpha = this.model.alpha;\n            ref = this.plot_view.frame.map_to_screen([image_obj.bounds[0]], [image_obj.bounds[3]], this.plot_view.canvas), sxmin = ref[0], symin = ref[1];\n            ref1 = this.plot_view.frame.map_to_screen([image_obj.bounds[2]], [image_obj.bounds[1]], this.plot_view.canvas), sxmax = ref1[0], symax = ref1[1];\n            sxmin = sxmin[0];\n            symin = symin[0];\n            sxmax = sxmax[0];\n            symax = symax[0];\n            sw = sxmax - sxmin;\n            sh = symax - symin;\n            sx = sxmin;\n            sy = symin;\n            this.map_canvas.drawImage(image_obj.img, sx, sy, sw, sh);\n            return this.map_canvas.restore();\n        }\n    };\n    DynamicImageView.prototype._set_rect = function () {\n        var h, l, outline_width, t, w;\n        outline_width = this.plot_model.plot.properties.outline_line_width.value();\n        l = this.plot_view.canvas.vx_to_sx(this.map_frame._left.value) + (outline_width / 2);\n        t = this.plot_view.canvas.vy_to_sy(this.map_frame._top.value) + (outline_width / 2);\n        w = this.map_frame._width.value - outline_width;\n        h = this.map_frame._height.value - outline_width;\n        this.map_canvas.rect(l, t, w, h);\n        return this.map_canvas.clip();\n    };\n    return DynamicImageView;\n})(renderer_1.RendererView);\nexports.DynamicImageRenderer = (function (superClass) {\n    extend(DynamicImageRenderer, superClass);\n    function DynamicImageRenderer() {\n        return DynamicImageRenderer.__super__.constructor.apply(this, arguments);\n    }\n    DynamicImageRenderer.prototype.default_view = exports.DynamicImageView;\n    DynamicImageRenderer.prototype.type = 'DynamicImageRenderer';\n    DynamicImageRenderer.define({\n        alpha: [p.Number, 1.0],\n        image_source: [p.Instance],\n        render_parents: [p.Bool, true]\n    });\n    DynamicImageRenderer.override({\n        level: 'underlay'\n    });\n    return DynamicImageRenderer;\n})(renderer_1.Renderer);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImagePool = (function () {\n    function ImagePool() {\n        this.images = [];\n    }\n    ImagePool.prototype.pop = function () {\n        var img;\n        img = this.images.pop();\n        if (img != null) {\n            return img;\n        }\n        else {\n            return new Image();\n        }\n    };\n    ImagePool.prototype.push = function (img) {\n        if (this.images.length > 50) {\n            return;\n        }\n        if (img.constructor === Array) {\n            return Array.prototype.push.apply(this.images, img);\n        }\n        else {\n            return this.images.push(img);\n        }\n    };\n    return ImagePool;\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar model_1 = require(\"../../model\");\nexports.ImageSource = (function (superClass) {\n    extend(ImageSource, superClass);\n    ImageSource.prototype.type = 'ImageSource';\n    ImageSource.define({\n        url: [p.String, ''],\n        extra_url_vars: [p.Any, {}]\n    });\n    function ImageSource(options) {\n        if (options == null) {\n            options = {};\n        }\n        ImageSource.__super__.constructor.apply(this, arguments);\n        this.images = {};\n        this.normalize_case();\n    }\n    ImageSource.prototype.normalize_case = function () {\n        'Note: should probably be refactored into subclasses.';\n        var url;\n        url = this.url;\n        url = url.replace('{xmin}', '{XMIN}');\n        url = url.replace('{ymin}', '{YMIN}');\n        url = url.replace('{xmax}', '{XMAX}');\n        url = url.replace('{ymax}', '{YMAX}');\n        url = url.replace('{height}', '{HEIGHT}');\n        url = url.replace('{width}', '{WIDTH}');\n        return this.url = url;\n    };\n    ImageSource.prototype.string_lookup_replace = function (str, lookup) {\n        var key, result_str, value;\n        result_str = str;\n        for (key in lookup) {\n            value = lookup[key];\n            result_str = result_str.replace('{' + key + '}', value.toString());\n        }\n        return result_str;\n    };\n    ImageSource.prototype.add_image = function (image_obj) {\n        return this.images[image_obj.cache_key] = image_obj;\n    };\n    ImageSource.prototype.remove_image = function (image_obj) {\n        return delete this.images[image_obj.cache_key];\n    };\n    ImageSource.prototype.get_image_url = function (xmin, ymin, xmax, ymax, height, width) {\n        var image_url;\n        image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n        return image_url.replace(\"{XMIN}\", xmin).replace(\"{YMIN}\", ymin).replace(\"{XMAX}\", xmax).replace(\"{YMAX}\", ymax).replace(\"{WIDTH}\", width).replace(\"{HEIGHT}\", height);\n    };\n    return ImageSource;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bbox_tile_source_1 = require(\"./bbox_tile_source\");\nexports.BBoxTileSource = bbox_tile_source_1.BBoxTileSource;\nvar dynamic_image_renderer_1 = require(\"./dynamic_image_renderer\");\nexports.DynamicImageRenderer = dynamic_image_renderer_1.DynamicImageRenderer;\nvar image_source_1 = require(\"./image_source\");\nexports.ImageSource = image_source_1.ImageSource;\nvar mercator_tile_source_1 = require(\"./mercator_tile_source\");\nexports.MercatorTileSource = mercator_tile_source_1.MercatorTileSource;\nvar quadkey_tile_source_1 = require(\"./quadkey_tile_source\");\nexports.QUADKEYTileSource = quadkey_tile_source_1.QUADKEYTileSource;\nvar tile_renderer_1 = require(\"./tile_renderer\");\nexports.TileRenderer = tile_renderer_1.TileRenderer;\nvar tile_source_1 = require(\"./tile_source\");\nexports.TileSource = tile_source_1.TileSource;\nvar tms_tile_source_1 = require(\"./tms_tile_source\");\nexports.TMSTileSource = tms_tile_source_1.TMSTileSource;\nvar wmts_tile_source_1 = require(\"./wmts_tile_source\");\nexports.WMTSTileSource = wmts_tile_source_1.WMTSTileSource;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar tile_source_1 = require(\"./tile_source\");\nvar p = require(\"core/properties\");\nexports.MercatorTileSource = (function (superClass) {\n    extend(MercatorTileSource, superClass);\n    function MercatorTileSource() {\n        return MercatorTileSource.__super__.constructor.apply(this, arguments);\n    }\n    MercatorTileSource.prototype.type = 'MercatorTileSource';\n    MercatorTileSource.define({\n        wrap_around: [p.Bool, true]\n    });\n    MercatorTileSource.override({\n        x_origin_offset: 20037508.34,\n        y_origin_offset: 20037508.34,\n        initial_resolution: 156543.03392804097\n    });\n    MercatorTileSource.prototype.initialize = function (options) {\n        var z;\n        MercatorTileSource.__super__.initialize.call(this, options);\n        return this._resolutions = (function () {\n            var j, results;\n            results = [];\n            for (z = j = 0; j <= 30; z = ++j) {\n                results.push(this.get_resolution(z));\n            }\n            return results;\n        }).call(this);\n    };\n    MercatorTileSource.prototype._computed_initial_resolution = function () {\n        if (this.initial_resolution != null) {\n            return this.initial_resolution;\n        }\n        else {\n            return 2 * Math.PI * 6378137 / this.tile_size;\n        }\n    };\n    MercatorTileSource.prototype.is_valid_tile = function (x, y, z) {\n        if (!this.wrap_around) {\n            if (x < 0 || x >= Math.pow(2, z)) {\n                return false;\n            }\n        }\n        if (y < 0 || y >= Math.pow(2, z)) {\n            return false;\n        }\n        return true;\n    };\n    MercatorTileSource.prototype.retain_children = function (reference_tile) {\n        var key, max_zoom, min_zoom, quadkey, ref, results, tile;\n        quadkey = reference_tile.quadkey;\n        min_zoom = quadkey.length;\n        max_zoom = min_zoom + 3;\n        ref = this.tiles;\n        results = [];\n        for (key in ref) {\n            tile = ref[key];\n            if (tile.quadkey.indexOf(quadkey) === 0 && tile.quadkey.length > min_zoom && tile.quadkey.length <= max_zoom) {\n                results.push(tile.retain = true);\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    MercatorTileSource.prototype.retain_neighbors = function (reference_tile) {\n        var key, neighbor_radius, neighbor_x, neighbor_y, ref, ref1, ref2, ref3, results, tile, tx, ty, tz, x, y;\n        neighbor_radius = 4;\n        ref = reference_tile.tile_coords, tx = ref[0], ty = ref[1], tz = ref[2];\n        neighbor_x = (function () {\n            var j, ref1, ref2, results;\n            results = [];\n            for (x = j = ref1 = tx - neighbor_radius, ref2 = tx + neighbor_radius; ref1 <= ref2 ? j <= ref2 : j >= ref2; x = ref1 <= ref2 ? ++j : --j) {\n                results.push(x);\n            }\n            return results;\n        })();\n        neighbor_y = (function () {\n            var j, ref1, ref2, results;\n            results = [];\n            for (y = j = ref1 = ty - neighbor_radius, ref2 = ty + neighbor_radius; ref1 <= ref2 ? j <= ref2 : j >= ref2; y = ref1 <= ref2 ? ++j : --j) {\n                results.push(y);\n            }\n            return results;\n        })();\n        ref1 = this.tiles;\n        results = [];\n        for (key in ref1) {\n            tile = ref1[key];\n            if (tile.tile_coords[2] === tz && (ref2 = tile.tile_coords[0], indexOf.call(neighbor_x, ref2) >= 0) && (ref3 = tile.tile_coords[1], indexOf.call(neighbor_y, ref3) >= 0)) {\n                results.push(tile.retain = true);\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    MercatorTileSource.prototype.retain_parents = function (reference_tile) {\n        var key, quadkey, ref, results, tile;\n        quadkey = reference_tile.quadkey;\n        ref = this.tiles;\n        results = [];\n        for (key in ref) {\n            tile = ref[key];\n            results.push(tile.retain = quadkey.indexOf(tile.quadkey) === 0);\n        }\n        return results;\n    };\n    MercatorTileSource.prototype.children_by_tile_xyz = function (x, y, z) {\n        var b, child_tile_xyz, i, j, quad_key, ref, ref1, ref2, world_x;\n        world_x = this.calculate_world_x_by_tile_xyz(x, y, z);\n        if (world_x !== 0) {\n            ref = this.normalize_xyz(x, y, z), x = ref[0], y = ref[1], z = ref[2];\n        }\n        quad_key = this.tile_xyz_to_quadkey(x, y, z);\n        child_tile_xyz = [];\n        for (i = j = 0; j <= 3; i = j += 1) {\n            ref1 = this.quadkey_to_tile_xyz(quad_key + i.toString()), x = ref1[0], y = ref1[1], z = ref1[2];\n            if (world_x !== 0) {\n                ref2 = this.denormalize_xyz(x, y, z, world_x), x = ref2[0], y = ref2[1], z = ref2[2];\n            }\n            b = this.get_tile_meter_bounds(x, y, z);\n            if (b != null) {\n                child_tile_xyz.push([x, y, z, b]);\n            }\n        }\n        return child_tile_xyz;\n    };\n    MercatorTileSource.prototype.parent_by_tile_xyz = function (x, y, z) {\n        var parent_quad_key, quad_key;\n        quad_key = this.tile_xyz_to_quadkey(x, y, z);\n        parent_quad_key = quad_key.substring(0, quad_key.length - 1);\n        return this.quadkey_to_tile_xyz(parent_quad_key);\n    };\n    MercatorTileSource.prototype.get_resolution = function (level) {\n        return this._computed_initial_resolution() / Math.pow(2, level);\n    };\n    MercatorTileSource.prototype.get_resolution_by_extent = function (extent, height, width) {\n        var x_rs, y_rs;\n        x_rs = (extent[2] - extent[0]) / width;\n        y_rs = (extent[3] - extent[1]) / height;\n        return [x_rs, y_rs];\n    };\n    MercatorTileSource.prototype.get_level_by_extent = function (extent, height, width) {\n        var i, j, len, r, ref, resolution, x_rs, y_rs;\n        x_rs = (extent[2] - extent[0]) / width;\n        y_rs = (extent[3] - extent[1]) / height;\n        resolution = Math.max(x_rs, y_rs);\n        i = 0;\n        ref = this._resolutions;\n        for (j = 0, len = ref.length; j < len; j++) {\n            r = ref[j];\n            if (resolution > r) {\n                if (i === 0) {\n                    return 0;\n                }\n                if (i > 0) {\n                    return i - 1;\n                }\n            }\n            i += 1;\n        }\n    };\n    MercatorTileSource.prototype.get_closest_level_by_extent = function (extent, height, width) {\n        var closest, resolution, ress, x_rs, y_rs;\n        x_rs = (extent[2] - extent[0]) / width;\n        y_rs = (extent[3] - extent[1]) / height;\n        resolution = Math.max(x_rs, y_rs);\n        ress = this._resolutions;\n        closest = this._resolutions.reduce(function (previous, current) {\n            if (Math.abs(current - resolution) < Math.abs(previous - resolution)) {\n                return current;\n            }\n            return previous;\n        });\n        return this._resolutions.indexOf(closest);\n    };\n    MercatorTileSource.prototype.snap_to_zoom = function (extent, height, width, level) {\n        var desired_res, desired_x_delta, desired_y_delta, x_adjust, xmax, xmin, y_adjust, ymax, ymin;\n        desired_res = this._resolutions[level];\n        desired_x_delta = width * desired_res;\n        desired_y_delta = height * desired_res;\n        xmin = extent[0], ymin = extent[1], xmax = extent[2], ymax = extent[3];\n        x_adjust = (desired_x_delta - (xmax - xmin)) / 2;\n        y_adjust = (desired_y_delta - (ymax - ymin)) / 2;\n        return [xmin - x_adjust, ymin - y_adjust, xmax + x_adjust, ymax + y_adjust];\n    };\n    MercatorTileSource.prototype.tms_to_wmts = function (x, y, z) {\n        'Note this works both ways';\n        return [x, Math.pow(2, z) - 1 - y, z];\n    };\n    MercatorTileSource.prototype.wmts_to_tms = function (x, y, z) {\n        'Note this works both ways';\n        return [x, Math.pow(2, z) - 1 - y, z];\n    };\n    MercatorTileSource.prototype.pixels_to_meters = function (px, py, level) {\n        var mx, my, res;\n        res = this.get_resolution(level);\n        mx = px * res - this.x_origin_offset;\n        my = py * res - this.y_origin_offset;\n        return [mx, my];\n    };\n    MercatorTileSource.prototype.meters_to_pixels = function (mx, my, level) {\n        var px, py, res;\n        res = this.get_resolution(level);\n        px = (mx + this.x_origin_offset) / res;\n        py = (my + this.y_origin_offset) / res;\n        return [px, py];\n    };\n    MercatorTileSource.prototype.pixels_to_tile = function (px, py) {\n        var tx, ty;\n        tx = Math.ceil(px / parseFloat(this.tile_size));\n        tx = tx === 0 ? tx : tx - 1;\n        ty = Math.max(Math.ceil(py / parseFloat(this.tile_size)) - 1, 0);\n        return [tx, ty];\n    };\n    MercatorTileSource.prototype.pixels_to_raster = function (px, py, level) {\n        var mapSize;\n        mapSize = this.tile_size << level;\n        return [px, mapSize - py];\n    };\n    MercatorTileSource.prototype.meters_to_tile = function (mx, my, level) {\n        var px, py, ref;\n        ref = this.meters_to_pixels(mx, my, level), px = ref[0], py = ref[1];\n        return this.pixels_to_tile(px, py);\n    };\n    MercatorTileSource.prototype.get_tile_meter_bounds = function (tx, ty, level) {\n        var ref, ref1, xmax, xmin, ymax, ymin;\n        ref = this.pixels_to_meters(tx * this.tile_size, ty * this.tile_size, level), xmin = ref[0], ymin = ref[1];\n        ref1 = this.pixels_to_meters((tx + 1) * this.tile_size, (ty + 1) * this.tile_size, level), xmax = ref1[0], ymax = ref1[1];\n        if ((xmin != null) && (ymin != null) && (xmax != null) && (ymax != null)) {\n            return [xmin, ymin, xmax, ymax];\n        }\n        else {\n            return void 0;\n        }\n    };\n    MercatorTileSource.prototype.get_tile_geographic_bounds = function (tx, ty, level) {\n        var bounds, maxLat, maxLon, minLat, minLon, ref;\n        bounds = this.get_tile_meter_bounds(tx, ty, level);\n        ref = this.utils.meters_extent_to_geographic(bounds), minLon = ref[0], minLat = ref[1], maxLon = ref[2], maxLat = ref[3];\n        return [minLon, minLat, maxLon, maxLat];\n    };\n    MercatorTileSource.prototype.get_tiles_by_extent = function (extent, level, tile_border) {\n        var j, k, ref, ref1, ref2, ref3, ref4, ref5, tiles, tx, txmax, txmin, ty, tymax, tymin, xmax, xmin, ymax, ymin;\n        if (tile_border == null) {\n            tile_border = 1;\n        }\n        xmin = extent[0], ymin = extent[1], xmax = extent[2], ymax = extent[3];\n        ref = this.meters_to_tile(xmin, ymin, level), txmin = ref[0], tymin = ref[1];\n        ref1 = this.meters_to_tile(xmax, ymax, level), txmax = ref1[0], tymax = ref1[1];\n        txmin -= tile_border;\n        tymin -= tile_border;\n        txmax += tile_border;\n        tymax += tile_border;\n        tiles = [];\n        for (ty = j = ref2 = tymax, ref3 = tymin; j >= ref3; ty = j += -1) {\n            for (tx = k = ref4 = txmin, ref5 = txmax; k <= ref5; tx = k += 1) {\n                if (this.is_valid_tile(tx, ty, level)) {\n                    tiles.push([tx, ty, level, this.get_tile_meter_bounds(tx, ty, level)]);\n                }\n            }\n        }\n        tiles = this.sort_tiles_from_center(tiles, [txmin, tymin, txmax, tymax]);\n        return tiles;\n    };\n    MercatorTileSource.prototype.quadkey_to_tile_xyz = function (quadKey) {\n        'Computes tile x, y and z values based on quadKey.';\n        var i, j, mask, ref, tileX, tileY, tileZ, value;\n        tileX = 0;\n        tileY = 0;\n        tileZ = quadKey.length;\n        for (i = j = ref = tileZ; j > 0; i = j += -1) {\n            value = quadKey.charAt(tileZ - i);\n            mask = 1 << (i - 1);\n            switch (value) {\n                case '0':\n                    continue;\n                case '1':\n                    tileX |= mask;\n                    break;\n                case '2':\n                    tileY |= mask;\n                    break;\n                case '3':\n                    tileX |= mask;\n                    tileY |= mask;\n                    break;\n                default:\n                    throw new TypeError(\"Invalid Quadkey: \" + quadKey);\n            }\n        }\n        return [tileX, tileY, tileZ];\n    };\n    MercatorTileSource.prototype.tile_xyz_to_quadkey = function (x, y, z) {\n        'Computes quadkey value based on tile x, y and z values.';\n        var digit, i, j, mask, quadKey, ref;\n        quadKey = '';\n        for (i = j = ref = z; j > 0; i = j += -1) {\n            digit = 0;\n            mask = 1 << (i - 1);\n            if ((x & mask) !== 0) {\n                digit += 1;\n            }\n            if ((y & mask) !== 0) {\n                digit += 2;\n            }\n            quadKey += digit.toString();\n        }\n        return quadKey;\n    };\n    MercatorTileSource.prototype.children_by_tile_xyz = function (x, y, z) {\n        var b, child_tile_xyz, i, j, quad_key, ref;\n        quad_key = this.tile_xyz_to_quadkey(x, y, z);\n        child_tile_xyz = [];\n        for (i = j = 0; j <= 3; i = j += 1) {\n            ref = this.quadkey_to_tile_xyz(quad_key + i.toString()), x = ref[0], y = ref[1], z = ref[2];\n            b = this.get_tile_meter_bounds(x, y, z);\n            if (b != null) {\n                child_tile_xyz.push([x, y, z, b]);\n            }\n        }\n        return child_tile_xyz;\n    };\n    MercatorTileSource.prototype.parent_by_tile_xyz = function (x, y, z) {\n        var parent_quad_key, quad_key;\n        quad_key = this.tile_xyz_to_quadkey(x, y, z);\n        parent_quad_key = quad_key.substring(0, quad_key.length - 1);\n        return this.quadkey_to_tile_xyz(parent_quad_key);\n    };\n    MercatorTileSource.prototype.get_closest_parent_by_tile_xyz = function (x, y, z) {\n        var quad_key, ref, ref1, ref2, world_x;\n        world_x = this.calculate_world_x_by_tile_xyz(x, y, z);\n        ref = this.normalize_xyz(x, y, z), x = ref[0], y = ref[1], z = ref[2];\n        quad_key = this.tile_xyz_to_quadkey(x, y, z);\n        while (quad_key.length > 0) {\n            quad_key = quad_key.substring(0, quad_key.length - 1);\n            ref1 = this.quadkey_to_tile_xyz(quad_key), x = ref1[0], y = ref1[1], z = ref1[2];\n            ref2 = this.denormalize_xyz(x, y, z, world_x), x = ref2[0], y = ref2[1], z = ref2[2];\n            if (this.tile_xyz_to_key(x, y, z) in this.tiles) {\n                return [x, y, z];\n            }\n        }\n        return [0, 0, 0];\n    };\n    MercatorTileSource.prototype.normalize_xyz = function (x, y, z) {\n        var tile_count;\n        if (this.wrap_around) {\n            tile_count = Math.pow(2, z);\n            return [((x % tile_count) + tile_count) % tile_count, y, z];\n        }\n        else {\n            return [x, y, z];\n        }\n    };\n    MercatorTileSource.prototype.denormalize_xyz = function (x, y, z, world_x) {\n        return [x + world_x * Math.pow(2, z), y, z];\n    };\n    MercatorTileSource.prototype.denormalize_meters = function (meters_x, meters_y, level, world_x) {\n        return [meters_x + world_x * 2 * Math.PI * 6378137, meters_y];\n    };\n    MercatorTileSource.prototype.calculate_world_x_by_tile_xyz = function (x, y, z) {\n        return Math.floor(x / Math.pow(2, z));\n    };\n    return MercatorTileSource;\n})(tile_source_1.TileSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar mercator_tile_source_1 = require(\"./mercator_tile_source\");\nexports.QUADKEYTileSource = (function (superClass) {\n    extend(QUADKEYTileSource, superClass);\n    function QUADKEYTileSource() {\n        return QUADKEYTileSource.__super__.constructor.apply(this, arguments);\n    }\n    QUADKEYTileSource.prototype.type = 'QUADKEYTileSource';\n    QUADKEYTileSource.prototype.get_image_url = function (x, y, z) {\n        var image_url, quadKey, ref;\n        image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n        ref = this.tms_to_wmts(x, y, z), x = ref[0], y = ref[1], z = ref[2];\n        quadKey = this.tile_xyz_to_quadkey(x, y, z);\n        return image_url.replace(\"{Q}\", quadKey);\n    };\n    return QUADKEYTileSource;\n})(mercator_tile_source_1.MercatorTileSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; }, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar image_pool_1 = require(\"./image_pool\");\nvar wmts_tile_source_1 = require(\"./wmts_tile_source\");\nvar renderer_1 = require(\"../renderers/renderer\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.TileRendererView = (function (superClass) {\n    extend(TileRendererView, superClass);\n    function TileRendererView() {\n        this._update = bind(this._update, this);\n        this._prefetch_tiles = bind(this._prefetch_tiles, this);\n        this._on_tile_error = bind(this._on_tile_error, this);\n        this._on_tile_cache_load = bind(this._on_tile_cache_load, this);\n        this._on_tile_load = bind(this._on_tile_load, this);\n        this._add_attribution = bind(this._add_attribution, this);\n        return TileRendererView.__super__.constructor.apply(this, arguments);\n    }\n    TileRendererView.prototype.initialize = function (options) {\n        this.attributionEl = null;\n        this._tiles = [];\n        return TileRendererView.__super__.initialize.apply(this, arguments);\n    };\n    TileRendererView.prototype.connect_signals = function () {\n        TileRendererView.__super__.connect_signals.call(this);\n        return this.connect(this.model.change, function () {\n            return this.request_render();\n        });\n    };\n    TileRendererView.prototype.get_extent = function () {\n        return [this.x_range.start, this.y_range.start, this.x_range.end, this.y_range.end];\n    };\n    TileRendererView.prototype._set_data = function () {\n        this.pool = new image_pool_1.ImagePool();\n        this.map_plot = this.plot_model.plot;\n        this.map_canvas = this.plot_view.canvas_view.ctx;\n        this.map_frame = this.plot_model.frame;\n        this.x_range = this.map_plot.x_range;\n        this.y_range = this.map_plot.y_range;\n        this.extent = this.get_extent();\n        this._last_height = void 0;\n        return this._last_width = void 0;\n    };\n    TileRendererView.prototype._add_attribution = function () {\n        var attribution, border_width, bottom_offset, max_width, overlays, right_offset;\n        attribution = this.model.tile_source.attribution;\n        if (types_1.isString(attribution) && attribution.length > 0) {\n            if (this.attributionEl == null) {\n                border_width = this.map_plot.outline_line_width;\n                bottom_offset = this.map_plot.min_border_bottom + border_width;\n                right_offset = this.map_frame._right.value - this.map_frame._width.value;\n                max_width = this.map_frame._width.value - border_width;\n                this.attributionEl = dom_1.div({\n                    \"class\": 'bk-tile-attribution',\n                    style: {\n                        position: 'absolute',\n                        bottom: bottom_offset + \"px\",\n                        right: right_offset + \"px\",\n                        'max-width': max_width + \"px\",\n                        'background-color': 'rgba(255,255,255,0.8)',\n                        'font-size': '9pt',\n                        'font-family': 'sans-serif'\n                    }\n                });\n                overlays = this.plot_view.canvas_view.events_el;\n                overlays.appendChild(this.attributionEl);\n            }\n            return this.attributionEl.innerHTML = attribution;\n        }\n    };\n    TileRendererView.prototype._map_data = function () {\n        var new_extent, zoom_level;\n        this.initial_extent = this.get_extent();\n        zoom_level = this.model.tile_source.get_level_by_extent(this.initial_extent, this.map_frame._height.value, this.map_frame._width.value);\n        new_extent = this.model.tile_source.snap_to_zoom(this.initial_extent, this.map_frame._height.value, this.map_frame._width.value, zoom_level);\n        this.x_range.start = new_extent[0];\n        this.y_range.start = new_extent[1];\n        this.x_range.end = new_extent[2];\n        this.y_range.end = new_extent[3];\n        return this._add_attribution();\n    };\n    TileRendererView.prototype._on_tile_load = function (e) {\n        var tile_data;\n        tile_data = e.target.tile_data;\n        tile_data.img = e.target;\n        tile_data.current = true;\n        tile_data.loaded = true;\n        return this.request_render();\n    };\n    TileRendererView.prototype._on_tile_cache_load = function (e) {\n        var tile_data;\n        tile_data = e.target.tile_data;\n        tile_data.img = e.target;\n        tile_data.loaded = true;\n        tile_data.finished = true;\n        return this.notify_finished();\n    };\n    TileRendererView.prototype._on_tile_error = function (e) {\n        var tile_data;\n        tile_data = e.target.tile_data;\n        return tile_data.finished = true;\n    };\n    TileRendererView.prototype._create_tile = function (x, y, z, bounds, cache_only) {\n        var normalized_coords, ref, tile;\n        if (cache_only == null) {\n            cache_only = false;\n        }\n        normalized_coords = this.model.tile_source.normalize_xyz(x, y, z);\n        tile = this.pool.pop();\n        if (cache_only) {\n            tile.onload = this._on_tile_cache_load;\n        }\n        else {\n            tile.onload = this._on_tile_load;\n        }\n        tile.onerror = this._on_tile_error;\n        tile.alt = '';\n        tile.tile_data = {\n            tile_coords: [x, y, z],\n            normalized_coords: normalized_coords,\n            quadkey: this.model.tile_source.tile_xyz_to_quadkey(x, y, z),\n            cache_key: this.model.tile_source.tile_xyz_to_key(x, y, z),\n            bounds: bounds,\n            loaded: false,\n            finished: false,\n            x_coord: bounds[0],\n            y_coord: bounds[3]\n        };\n        this.model.tile_source.tiles[tile.tile_data.cache_key] = tile.tile_data;\n        tile.src = (ref = this.model.tile_source).get_image_url.apply(ref, normalized_coords);\n        this._tiles.push(tile);\n        return tile;\n    };\n    TileRendererView.prototype._enforce_aspect_ratio = function () {\n        var extent, new_extent, zoom_level;\n        if (this._last_height !== this.map_frame._height.value || this._last_width !== this.map_frame._width.value) {\n            extent = this.get_extent();\n            zoom_level = this.model.tile_source.get_level_by_extent(extent, this.map_frame._height.value, this.map_frame._width.value);\n            new_extent = this.model.tile_source.snap_to_zoom(extent, this.map_frame._height.value, this.map_frame._width.value, zoom_level);\n            this.x_range.setv({\n                start: new_extent[0],\n                end: new_extent[2]\n            });\n            this.y_range.setv({\n                start: new_extent[1],\n                end: new_extent[3]\n            });\n            this.extent = new_extent;\n            this._last_height = this.map_frame._height.value;\n            this._last_width = this.map_frame._width.value;\n            return true;\n        }\n        return false;\n    };\n    TileRendererView.prototype.has_finished = function () {\n        var i, len, ref, tile;\n        if (!TileRendererView.__super__.has_finished.call(this)) {\n            return false;\n        }\n        if (this._tiles.length === 0) {\n            return false;\n        }\n        ref = this._tiles;\n        for (i = 0, len = ref.length; i < len; i++) {\n            tile = ref[i];\n            if (!tile.tile_data.finished) {\n                return false;\n            }\n        }\n        return true;\n    };\n    TileRendererView.prototype.render = function (ctx, indices, args) {\n        if (this.map_initialized == null) {\n            this._set_data();\n            this._map_data();\n            this.map_initialized = true;\n        }\n        if (this._enforce_aspect_ratio()) {\n            return;\n        }\n        this._update();\n        if (this.prefetch_timer != null) {\n            clearTimeout(this.prefetch_timer);\n        }\n        this.prefetch_timer = setTimeout(this._prefetch_tiles, 500);\n        if (this.has_finished()) {\n            return this.notify_finished();\n        }\n    };\n    TileRendererView.prototype._draw_tile = function (tile_key) {\n        var ref, ref1, sh, sw, sx, sxmax, sxmin, sy, symax, symin, tile_obj;\n        tile_obj = this.model.tile_source.tiles[tile_key];\n        if (tile_obj != null) {\n            ref = this.plot_view.frame.map_to_screen([tile_obj.bounds[0]], [tile_obj.bounds[3]], this.plot_view.canvas), sxmin = ref[0], symin = ref[1];\n            ref1 = this.plot_view.frame.map_to_screen([tile_obj.bounds[2]], [tile_obj.bounds[1]], this.plot_view.canvas), sxmax = ref1[0], symax = ref1[1];\n            sxmin = sxmin[0];\n            symin = symin[0];\n            sxmax = sxmax[0];\n            symax = symax[0];\n            sw = sxmax - sxmin;\n            sh = symax - symin;\n            sx = sxmin;\n            sy = symin;\n            return this.map_canvas.drawImage(tile_obj.img, sx, sy, sw, sh);\n        }\n    };\n    TileRendererView.prototype._set_rect = function () {\n        var h, l, outline_width, t, w;\n        outline_width = this.plot_model.plot.properties.outline_line_width.value();\n        l = this.plot_view.canvas.vx_to_sx(this.map_frame._left.value) + (outline_width / 2);\n        t = this.plot_view.canvas.vy_to_sy(this.map_frame._top.value) + (outline_width / 2);\n        w = this.map_frame._width.value - outline_width;\n        h = this.map_frame._height.value - outline_width;\n        this.map_canvas.rect(l, t, w, h);\n        return this.map_canvas.clip();\n    };\n    TileRendererView.prototype._render_tiles = function (tile_keys) {\n        var i, len, tile_key;\n        this.map_canvas.save();\n        this._set_rect();\n        this.map_canvas.globalAlpha = this.model.alpha;\n        for (i = 0, len = tile_keys.length; i < len; i++) {\n            tile_key = tile_keys[i];\n            this._draw_tile(tile_key);\n        }\n        return this.map_canvas.restore();\n    };\n    TileRendererView.prototype._prefetch_tiles = function () {\n        var bounds, c, cbounds, children, cx, cy, cz, extent, h, i, ref, results, t, tile_source, tiles, w, x, y, z, zoom_level;\n        tile_source = this.model.tile_source;\n        extent = this.get_extent();\n        h = this.map_frame._height.value;\n        w = this.map_frame._width.value;\n        zoom_level = this.model.tile_source.get_level_by_extent(extent, h, w);\n        tiles = this.model.tile_source.get_tiles_by_extent(extent, zoom_level);\n        results = [];\n        for (t = i = 0, ref = Math.min(10, tiles.length); i <= ref; t = i += 1) {\n            x = t[0], y = t[1], z = t[2], bounds = t[3];\n            children = this.model.tile_source.children_by_tile_xyz(x, y, z);\n            results.push((function () {\n                var j, len, results1;\n                results1 = [];\n                for (j = 0, len = children.length; j < len; j++) {\n                    c = children[j];\n                    cx = c[0], cy = c[1], cz = c[2], cbounds = c[3];\n                    if (tile_source.tile_xyz_to_key(cx, cy, cz) in tile_source.tiles) {\n                        continue;\n                    }\n                    else {\n                        results1.push(this._create_tile(cx, cy, cz, cbounds, true));\n                    }\n                }\n                return results1;\n            }).call(this));\n        }\n        return results;\n    };\n    TileRendererView.prototype._fetch_tiles = function (tiles) {\n        var bounds, i, len, results, t, x, y, z;\n        results = [];\n        for (i = 0, len = tiles.length; i < len; i++) {\n            t = tiles[i];\n            x = t[0], y = t[1], z = t[2], bounds = t[3];\n            results.push(this._create_tile(x, y, z, bounds));\n        }\n        return results;\n    };\n    TileRendererView.prototype._update = function () {\n        var bounds, c, cached, cbounds, child_key, children, cx, cy, cz, extent, h, i, j, k, key, len, len1, len2, max_zoom, min_zoom, need_load, parent_key, parent_tile, parents, px, py, pz, ref, snap_back, t, tile, tile_source, tiles, w, x, y, z, zoom_level, zooming_out;\n        tile_source = this.model.tile_source;\n        min_zoom = tile_source.min_zoom;\n        max_zoom = tile_source.max_zoom;\n        tile_source.update();\n        extent = this.get_extent();\n        zooming_out = this.extent[2] - this.extent[0] < extent[2] - extent[0];\n        h = this.map_frame._height.value;\n        w = this.map_frame._width.value;\n        zoom_level = tile_source.get_level_by_extent(extent, h, w);\n        snap_back = false;\n        if (zoom_level < min_zoom) {\n            extent = this.extent;\n            zoom_level = min_zoom;\n            snap_back = true;\n        }\n        else if (zoom_level > max_zoom) {\n            extent = this.extent;\n            zoom_level = max_zoom;\n            snap_back = true;\n        }\n        if (snap_back) {\n            this.x_range.setv({\n                x_range: {\n                    start: extent[0],\n                    end: extent[2]\n                }\n            });\n            this.y_range.setv({\n                start: extent[1],\n                end: extent[3]\n            });\n            this.extent = extent;\n        }\n        this.extent = extent;\n        tiles = tile_source.get_tiles_by_extent(extent, zoom_level);\n        parents = [];\n        need_load = [];\n        cached = [];\n        children = [];\n        for (i = 0, len = tiles.length; i < len; i++) {\n            t = tiles[i];\n            x = t[0], y = t[1], z = t[2], bounds = t[3];\n            key = tile_source.tile_xyz_to_key(x, y, z);\n            tile = tile_source.tiles[key];\n            if ((tile != null) && tile.loaded === true) {\n                cached.push(key);\n            }\n            else {\n                if (this.model.render_parents) {\n                    ref = tile_source.get_closest_parent_by_tile_xyz(x, y, z), px = ref[0], py = ref[1], pz = ref[2];\n                    parent_key = tile_source.tile_xyz_to_key(px, py, pz);\n                    parent_tile = tile_source.tiles[parent_key];\n                    if ((parent_tile != null) && parent_tile.loaded && indexOf.call(parents, parent_key) < 0) {\n                        parents.push(parent_key);\n                    }\n                    if (zooming_out) {\n                        children = tile_source.children_by_tile_xyz(x, y, z);\n                        for (j = 0, len1 = children.length; j < len1; j++) {\n                            c = children[j];\n                            cx = c[0], cy = c[1], cz = c[2], cbounds = c[3];\n                            child_key = tile_source.tile_xyz_to_key(cx, cy, cz);\n                            if (child_key in tile_source.tiles) {\n                                children.push(child_key);\n                            }\n                        }\n                    }\n                }\n            }\n            if (tile == null) {\n                need_load.push(t);\n            }\n        }\n        this._render_tiles(parents);\n        this._render_tiles(children);\n        this._render_tiles(cached);\n        for (k = 0, len2 = cached.length; k < len2; k++) {\n            t = cached[k];\n            tile_source.tiles[t].current = true;\n        }\n        if (this.render_timer != null) {\n            clearTimeout(this.render_timer);\n        }\n        return this.render_timer = setTimeout(((function (_this) {\n            return function () {\n                return _this._fetch_tiles(need_load);\n            };\n        })(this)), 65);\n    };\n    return TileRendererView;\n})(renderer_1.RendererView);\nexports.TileRenderer = (function (superClass) {\n    extend(TileRenderer, superClass);\n    function TileRenderer() {\n        return TileRenderer.__super__.constructor.apply(this, arguments);\n    }\n    TileRenderer.prototype.default_view = exports.TileRendererView;\n    TileRenderer.prototype.type = 'TileRenderer';\n    TileRenderer.define({\n        alpha: [p.Number, 1.0],\n        x_range_name: [p.String, \"default\"],\n        y_range_name: [p.String, \"default\"],\n        tile_source: [\n            p.Instance, function () {\n                return new wmts_tile_source_1.WMTSTileSource();\n            }\n        ],\n        render_parents: [p.Bool, true]\n    });\n    TileRenderer.override({\n        level: 'underlay'\n    });\n    return TileRenderer;\n})(renderer_1.Renderer);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar image_pool_1 = require(\"./image_pool\");\nvar tile_utils_1 = require(\"./tile_utils\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar model_1 = require(\"../../model\");\nexports.TileSource = (function (superClass) {\n    extend(TileSource, superClass);\n    TileSource.prototype.type = 'TileSource';\n    TileSource.define({\n        url: [p.String, ''],\n        tile_size: [p.Number, 256],\n        max_zoom: [p.Number, 30],\n        min_zoom: [p.Number, 0],\n        extra_url_vars: [p.Any, {}],\n        attribution: [p.String, ''],\n        x_origin_offset: [p.Number],\n        y_origin_offset: [p.Number],\n        initial_resolution: [p.Number]\n    });\n    TileSource.prototype.initialize = function (options) {\n        TileSource.__super__.initialize.call(this, options);\n        return this.normalize_case();\n    };\n    function TileSource(options) {\n        if (options == null) {\n            options = {};\n        }\n        TileSource.__super__.constructor.apply(this, arguments);\n        this.utils = new tile_utils_1.ProjectionUtils();\n        this.pool = new image_pool_1.ImagePool();\n        this.tiles = {};\n        this.normalize_case();\n    }\n    TileSource.prototype.string_lookup_replace = function (str, lookup) {\n        var key, result_str, value;\n        result_str = str;\n        for (key in lookup) {\n            value = lookup[key];\n            result_str = result_str.replace('{' + key + '}', value.toString());\n        }\n        return result_str;\n    };\n    TileSource.prototype.normalize_case = function () {\n        'Note: should probably be refactored into subclasses.';\n        var url;\n        url = this.url;\n        url = url.replace('{x}', '{X}');\n        url = url.replace('{y}', '{Y}');\n        url = url.replace('{z}', '{Z}');\n        url = url.replace('{q}', '{Q}');\n        url = url.replace('{xmin}', '{XMIN}');\n        url = url.replace('{ymin}', '{YMIN}');\n        url = url.replace('{xmax}', '{XMAX}');\n        url = url.replace('{ymax}', '{YMAX}');\n        return this.url = url;\n    };\n    TileSource.prototype.update = function () {\n        var key, ref, results, tile;\n        logging_1.logger.debug(\"TileSource: tile cache count: \" + (Object.keys(this.tiles).length));\n        ref = this.tiles;\n        results = [];\n        for (key in ref) {\n            tile = ref[key];\n            tile.current = false;\n            results.push(tile.retain = false);\n        }\n        return results;\n    };\n    TileSource.prototype.tile_xyz_to_key = function (x, y, z) {\n        var key;\n        key = x + \":\" + y + \":\" + z;\n        return key;\n    };\n    TileSource.prototype.key_to_tile_xyz = function (key) {\n        var c;\n        return (function () {\n            var i, len, ref, results;\n            ref = key.split(':');\n            results = [];\n            for (i = 0, len = ref.length; i < len; i++) {\n                c = ref[i];\n                results.push(parseInt(c));\n            }\n            return results;\n        })();\n    };\n    TileSource.prototype.sort_tiles_from_center = function (tiles, tile_extent) {\n        var center_x, center_y, txmax, txmin, tymax, tymin;\n        txmin = tile_extent[0], tymin = tile_extent[1], txmax = tile_extent[2], tymax = tile_extent[3];\n        center_x = (txmax - txmin) / 2 + txmin;\n        center_y = (tymax - tymin) / 2 + tymin;\n        tiles.sort(function (a, b) {\n            var a_distance, b_distance;\n            a_distance = Math.sqrt(Math.pow(center_x - a[0], 2) + Math.pow(center_y - a[1], 2));\n            b_distance = Math.sqrt(Math.pow(center_x - b[0], 2) + Math.pow(center_y - b[1], 2));\n            return a_distance - b_distance;\n        });\n        return tiles;\n    };\n    TileSource.prototype.prune_tiles = function () {\n        var key, ref, ref1, results, tile;\n        ref = this.tiles;\n        for (key in ref) {\n            tile = ref[key];\n            tile.retain = tile.current || tile.tile_coords[2] < 3;\n            if (tile.current) {\n                this.retain_neighbors(tile);\n                this.retain_children(tile);\n                this.retain_parents(tile);\n            }\n        }\n        ref1 = this.tiles;\n        results = [];\n        for (key in ref1) {\n            tile = ref1[key];\n            if (!tile.retain) {\n                results.push(this.remove_tile(key));\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    TileSource.prototype.remove_tile = function (key) {\n        var tile;\n        tile = this.tiles[key];\n        if (tile != null) {\n            this.pool.push(tile.img);\n            return delete this.tiles[key];\n        }\n    };\n    TileSource.prototype.get_image_url = function (x, y, z) {\n        var image_url;\n        image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n        return image_url.replace(\"{X}\", x).replace('{Y}', y).replace(\"{Z}\", z);\n    };\n    TileSource.prototype.retain_neighbors = function (reference_tile) {\n        throw new Error(\"Not Implemented\");\n    };\n    TileSource.prototype.retain_parents = function (reference_tile) {\n        throw new Error(\"Not Implemented\");\n    };\n    TileSource.prototype.retain_children = function (reference_tile) {\n        throw new Error(\"Not Implemented\");\n    };\n    TileSource.prototype.tile_xyz_to_quadkey = function (x, y, z) {\n        throw new Error(\"Not Implemented\");\n    };\n    TileSource.prototype.quadkey_to_tile_xyz = function (quadkey) {\n        throw new Error(\"Not Implemented\");\n    };\n    return TileSource;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar proj4_1 = require(\"core/util/proj4\");\nexports.ProjectionUtils = (function () {\n    function ProjectionUtils() {\n        this.origin_shift = 2 * Math.PI * 6378137 / 2.0;\n    }\n    ProjectionUtils.prototype.geographic_to_meters = function (xLon, yLat) {\n        return proj4_1.proj4(proj4_1.wgs84, proj4_1.mercator, [xLon, yLat]);\n    };\n    ProjectionUtils.prototype.meters_to_geographic = function (mx, my) {\n        return proj4_1.proj4(proj4_1.mercator, proj4_1.wgs84, [mx, my]);\n    };\n    ProjectionUtils.prototype.geographic_extent_to_meters = function (extent) {\n        var ref, ref1, xmax, xmin, ymax, ymin;\n        xmin = extent[0], ymin = extent[1], xmax = extent[2], ymax = extent[3];\n        ref = this.geographic_to_meters(xmin, ymin), xmin = ref[0], ymin = ref[1];\n        ref1 = this.geographic_to_meters(xmax, ymax), xmax = ref1[0], ymax = ref1[1];\n        return [xmin, ymin, xmax, ymax];\n    };\n    ProjectionUtils.prototype.meters_extent_to_geographic = function (extent) {\n        var ref, ref1, xmax, xmin, ymax, ymin;\n        xmin = extent[0], ymin = extent[1], xmax = extent[2], ymax = extent[3];\n        ref = this.meters_to_geographic(xmin, ymin), xmin = ref[0], ymin = ref[1];\n        ref1 = this.meters_to_geographic(xmax, ymax), xmax = ref1[0], ymax = ref1[1];\n        return [xmin, ymin, xmax, ymax];\n    };\n    return ProjectionUtils;\n})();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar mercator_tile_source_1 = require(\"./mercator_tile_source\");\nexports.TMSTileSource = (function (superClass) {\n    extend(TMSTileSource, superClass);\n    function TMSTileSource() {\n        return TMSTileSource.__super__.constructor.apply(this, arguments);\n    }\n    TMSTileSource.prototype.type = 'TMSTileSource';\n    TMSTileSource.prototype.get_image_url = function (x, y, z) {\n        var image_url;\n        image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n        return image_url.replace(\"{X}\", x).replace('{Y}', y).replace(\"{Z}\", z);\n    };\n    return TMSTileSource;\n})(mercator_tile_source_1.MercatorTileSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar mercator_tile_source_1 = require(\"./mercator_tile_source\");\nexports.WMTSTileSource = (function (superClass) {\n    extend(WMTSTileSource, superClass);\n    function WMTSTileSource() {\n        return WMTSTileSource.__super__.constructor.apply(this, arguments);\n    }\n    WMTSTileSource.prototype.type = 'WMTSTileSource';\n    WMTSTileSource.prototype.get_image_url = function (x, y, z) {\n        var image_url, ref;\n        image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n        ref = this.tms_to_wmts(x, y, z), x = ref[0], y = ref[1], z = ref[2];\n        return image_url.replace(\"{X}\", x).replace('{Y}', y).replace(\"{Z}\", z);\n    };\n    return WMTSTileSource;\n})(mercator_tile_source_1.MercatorTileSource);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar button_tool_1 = require(\"../button_tool\");\nvar signaling_1 = require(\"core/signaling\");\nexports.ActionToolButtonView = (function (superClass) {\n    extend(ActionToolButtonView, superClass);\n    function ActionToolButtonView() {\n        return ActionToolButtonView.__super__.constructor.apply(this, arguments);\n    }\n    ActionToolButtonView.prototype._clicked = function () {\n        return this.model[\"do\"].emit();\n    };\n    return ActionToolButtonView;\n})(button_tool_1.ButtonToolButtonView);\nexports.ActionToolView = (function (superClass) {\n    extend(ActionToolView, superClass);\n    function ActionToolView() {\n        return ActionToolView.__super__.constructor.apply(this, arguments);\n    }\n    ActionToolView.prototype.initialize = function (options) {\n        ActionToolView.__super__.initialize.call(this, options);\n        return this.connect(this.model[\"do\"], function () {\n            return this.doit();\n        });\n    };\n    return ActionToolView;\n})(button_tool_1.ButtonToolView);\nexports.ActionTool = (function (superClass) {\n    extend(ActionTool, superClass);\n    function ActionTool() {\n        return ActionTool.__super__.constructor.apply(this, arguments);\n    }\n    ActionTool.prototype.initialize = function (attrs, options) {\n        ActionTool.__super__.initialize.call(this, attrs, options);\n        return this[\"do\"] = new signaling_1.Signal(this, \"do\");\n    };\n    return ActionTool;\n})(button_tool_1.ButtonTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar action_tool_1 = require(\"./action_tool\");\nvar p = require(\"core/properties\");\nexports.HelpToolView = (function (superClass) {\n    extend(HelpToolView, superClass);\n    function HelpToolView() {\n        return HelpToolView.__super__.constructor.apply(this, arguments);\n    }\n    HelpToolView.prototype.doit = function () {\n        return window.open(this.model.redirect);\n    };\n    return HelpToolView;\n})(action_tool_1.ActionToolView);\nexports.HelpTool = (function (superClass) {\n    extend(HelpTool, superClass);\n    function HelpTool() {\n        return HelpTool.__super__.constructor.apply(this, arguments);\n    }\n    HelpTool.prototype.default_view = exports.HelpToolView;\n    HelpTool.prototype.type = \"HelpTool\";\n    HelpTool.prototype.tool_name = \"Help\";\n    HelpTool.prototype.icon = \"bk-tool-icon-help\";\n    HelpTool.define({\n        help_tooltip: [p.String, 'Click the question mark to learn more about Bokeh plot tools.'],\n        redirect: [p.String, 'http://bokeh.pydata.org/en/latest/docs/user_guide/tools.html#built-in-tools']\n    });\n    HelpTool.getters({\n        tooltip: function () {\n            return this.help_tooltip;\n        }\n    });\n    return HelpTool;\n})(action_tool_1.ActionTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar action_tool_1 = require(\"./action_tool\");\nexports.RedoToolView = (function (superClass) {\n    extend(RedoToolView, superClass);\n    function RedoToolView() {\n        return RedoToolView.__super__.constructor.apply(this, arguments);\n    }\n    RedoToolView.prototype.initialize = function (options) {\n        RedoToolView.__super__.initialize.call(this, options);\n        return this.connect(this.plot_view.state_changed, (function (_this) {\n            return function () {\n                return _this.model.disabled = !_this.plot_view.can_redo();\n            };\n        })(this));\n    };\n    RedoToolView.prototype.doit = function () {\n        return this.plot_view.redo();\n    };\n    return RedoToolView;\n})(action_tool_1.ActionToolView);\nexports.RedoTool = (function (superClass) {\n    extend(RedoTool, superClass);\n    function RedoTool() {\n        return RedoTool.__super__.constructor.apply(this, arguments);\n    }\n    RedoTool.prototype.default_view = exports.RedoToolView;\n    RedoTool.prototype.type = \"RedoTool\";\n    RedoTool.prototype.tool_name = \"Redo\";\n    RedoTool.prototype.icon = \"bk-tool-icon-redo\";\n    RedoTool.override({\n        disabled: true\n    });\n    return RedoTool;\n})(action_tool_1.ActionTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar action_tool_1 = require(\"./action_tool\");\nvar p = require(\"core/properties\");\nexports.ResetToolView = (function (superClass) {\n    extend(ResetToolView, superClass);\n    function ResetToolView() {\n        return ResetToolView.__super__.constructor.apply(this, arguments);\n    }\n    ResetToolView.prototype.doit = function () {\n        this.plot_view.clear_state();\n        this.plot_view.reset_range();\n        this.plot_view.reset_selection();\n        if (this.model.reset_size) {\n            return this.plot_view.reset_dimensions();\n        }\n    };\n    return ResetToolView;\n})(action_tool_1.ActionToolView);\nexports.ResetTool = (function (superClass) {\n    extend(ResetTool, superClass);\n    function ResetTool() {\n        return ResetTool.__super__.constructor.apply(this, arguments);\n    }\n    ResetTool.prototype.default_view = exports.ResetToolView;\n    ResetTool.prototype.type = \"ResetTool\";\n    ResetTool.prototype.tool_name = \"Reset\";\n    ResetTool.prototype.icon = \"bk-tool-icon-reset\";\n    ResetTool.define({\n        reset_size: [p.Bool, true]\n    });\n    return ResetTool;\n})(action_tool_1.ActionTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar action_tool_1 = require(\"./action_tool\");\nexports.SaveToolView = (function (superClass) {\n    extend(SaveToolView, superClass);\n    function SaveToolView() {\n        return SaveToolView.__super__.constructor.apply(this, arguments);\n    }\n    SaveToolView.prototype.doit = function () {\n        return this.plot_view.save(\"bokeh_plot\");\n    };\n    return SaveToolView;\n})(action_tool_1.ActionToolView);\nexports.SaveTool = (function (superClass) {\n    extend(SaveTool, superClass);\n    function SaveTool() {\n        return SaveTool.__super__.constructor.apply(this, arguments);\n    }\n    SaveTool.prototype.default_view = exports.SaveToolView;\n    SaveTool.prototype.type = \"SaveTool\";\n    SaveTool.prototype.tool_name = \"Save\";\n    SaveTool.prototype.icon = \"bk-tool-icon-save\";\n    return SaveTool;\n})(action_tool_1.ActionTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar action_tool_1 = require(\"./action_tool\");\nexports.UndoToolView = (function (superClass) {\n    extend(UndoToolView, superClass);\n    function UndoToolView() {\n        return UndoToolView.__super__.constructor.apply(this, arguments);\n    }\n    UndoToolView.prototype.initialize = function (options) {\n        UndoToolView.__super__.initialize.call(this, options);\n        return this.connect(this.plot_view.state_changed, (function (_this) {\n            return function () {\n                return _this.model.disabled = !_this.plot_view.can_undo();\n            };\n        })(this));\n    };\n    UndoToolView.prototype.doit = function () {\n        return this.plot_view.undo();\n    };\n    return UndoToolView;\n})(action_tool_1.ActionToolView);\nexports.UndoTool = (function (superClass) {\n    extend(UndoTool, superClass);\n    function UndoTool() {\n        return UndoTool.__super__.constructor.apply(this, arguments);\n    }\n    UndoTool.prototype.default_view = exports.UndoToolView;\n    UndoTool.prototype.type = \"UndoTool\";\n    UndoTool.prototype.tool_name = \"Undo\";\n    UndoTool.prototype.icon = \"bk-tool-icon-undo\";\n    UndoTool.override({\n        disabled: true\n    });\n    return UndoTool;\n})(action_tool_1.ActionTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar action_tool_1 = require(\"./action_tool\");\nvar zoom_1 = require(\"core/util/zoom\");\nvar p = require(\"core/properties\");\nexports.ZoomInToolView = (function (superClass) {\n    extend(ZoomInToolView, superClass);\n    function ZoomInToolView() {\n        return ZoomInToolView.__super__.constructor.apply(this, arguments);\n    }\n    ZoomInToolView.prototype.doit = function () {\n        var dims, frame, h_axis, v_axis, zoom_info;\n        frame = this.plot_model.frame;\n        dims = this.model.dimensions;\n        h_axis = dims === 'width' || dims === 'both';\n        v_axis = dims === 'height' || dims === 'both';\n        zoom_info = zoom_1.scale_range(frame, this.model.factor, h_axis, v_axis);\n        this.plot_view.push_state('zoom_out', {\n            range: zoom_info\n        });\n        this.plot_view.update_range(zoom_info, false, true);\n        this.plot_view.interactive_timestamp = Date.now();\n        return null;\n    };\n    return ZoomInToolView;\n})(action_tool_1.ActionToolView);\nexports.ZoomInTool = (function (superClass) {\n    extend(ZoomInTool, superClass);\n    function ZoomInTool() {\n        return ZoomInTool.__super__.constructor.apply(this, arguments);\n    }\n    ZoomInTool.prototype.default_view = exports.ZoomInToolView;\n    ZoomInTool.prototype.type = \"ZoomInTool\";\n    ZoomInTool.prototype.tool_name = \"Zoom In\";\n    ZoomInTool.prototype.icon = \"bk-tool-icon-zoom-in\";\n    ZoomInTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(this.tool_name, this.dimensions);\n        }\n    });\n    ZoomInTool.define({\n        factor: [p.Percent, 0.1],\n        dimensions: [p.Dimensions, \"both\"]\n    });\n    return ZoomInTool;\n})(action_tool_1.ActionTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar action_tool_1 = require(\"./action_tool\");\nvar zoom_1 = require(\"core/util/zoom\");\nvar p = require(\"core/properties\");\nexports.ZoomOutToolView = (function (superClass) {\n    extend(ZoomOutToolView, superClass);\n    function ZoomOutToolView() {\n        return ZoomOutToolView.__super__.constructor.apply(this, arguments);\n    }\n    ZoomOutToolView.prototype.doit = function () {\n        var dims, frame, h_axis, v_axis, zoom_info;\n        frame = this.plot_model.frame;\n        dims = this.model.dimensions;\n        h_axis = dims === 'width' || dims === 'both';\n        v_axis = dims === 'height' || dims === 'both';\n        zoom_info = zoom_1.scale_range(frame, -this.model.factor, h_axis, v_axis);\n        this.plot_view.push_state('zoom_out', {\n            range: zoom_info\n        });\n        this.plot_view.update_range(zoom_info, false, true);\n        this.plot_view.interactive_timestamp = Date.now();\n        return null;\n    };\n    return ZoomOutToolView;\n})(action_tool_1.ActionToolView);\nexports.ZoomOutTool = (function (superClass) {\n    extend(ZoomOutTool, superClass);\n    function ZoomOutTool() {\n        return ZoomOutTool.__super__.constructor.apply(this, arguments);\n    }\n    ZoomOutTool.prototype.default_view = exports.ZoomOutToolView;\n    ZoomOutTool.prototype.type = \"ZoomOutTool\";\n    ZoomOutTool.prototype.tool_name = \"Zoom Out\";\n    ZoomOutTool.prototype.icon = \"bk-tool-icon-zoom-out\";\n    ZoomOutTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(this.tool_name, this.dimensions);\n        }\n    });\n    ZoomOutTool.define({\n        factor: [p.Percent, 0.1],\n        dimensions: [p.Dimensions, \"both\"]\n    });\n    return ZoomOutTool;\n})(action_tool_1.ActionTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar dom_view_1 = require(\"core/dom_view\");\nvar tool_1 = require(\"./tool\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nexports.ButtonToolButtonView = (function (superClass) {\n    extend(ButtonToolButtonView, superClass);\n    function ButtonToolButtonView() {\n        return ButtonToolButtonView.__super__.constructor.apply(this, arguments);\n    }\n    ButtonToolButtonView.prototype.className = \"bk-toolbar-button\";\n    ButtonToolButtonView.prototype.initialize = function (options) {\n        ButtonToolButtonView.__super__.initialize.call(this, options);\n        this.connect(this.model.change, (function (_this) {\n            return function () {\n                return _this.render();\n            };\n        })(this));\n        this.el.addEventListener(\"click\", (function (_this) {\n            return function (e) {\n                return _this._clicked(e);\n            };\n        })(this));\n        return this.render();\n    };\n    ButtonToolButtonView.prototype.render = function () {\n        var icon, tip;\n        dom_1.empty(this.el);\n        this.el.disabled = this.model.disabled;\n        icon = dom_1.div({\n            \"class\": ['bk-btn-icon', this.model.icon]\n        });\n        tip = dom_1.span({\n            \"class\": 'bk-tip'\n        }, this.model.tooltip);\n        this.el.appendChild(icon);\n        return this.el.appendChild(tip);\n    };\n    ButtonToolButtonView.prototype._clicked = function (e) { };\n    return ButtonToolButtonView;\n})(dom_view_1.DOMView);\nexports.ButtonToolView = (function (superClass) {\n    extend(ButtonToolView, superClass);\n    function ButtonToolView() {\n        return ButtonToolView.__super__.constructor.apply(this, arguments);\n    }\n    return ButtonToolView;\n})(tool_1.ToolView);\nexports.ButtonTool = (function (superClass) {\n    extend(ButtonTool, superClass);\n    function ButtonTool() {\n        return ButtonTool.__super__.constructor.apply(this, arguments);\n    }\n    ButtonTool.prototype.icon = null;\n    ButtonTool.getters({\n        tooltip: function () {\n            return this.tool_name;\n        }\n    });\n    ButtonTool.internal({\n        disabled: [p.Boolean, false]\n    });\n    return ButtonTool;\n})(tool_1.Tool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_BOX_OVERLAY, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar select_tool_1 = require(\"./select_tool\");\nvar box_annotation_1 = require(\"../../annotations/box_annotation\");\nvar p = require(\"core/properties\");\nexports.BoxSelectToolView = (function (superClass) {\n    extend(BoxSelectToolView, superClass);\n    function BoxSelectToolView() {\n        return BoxSelectToolView.__super__.constructor.apply(this, arguments);\n    }\n    BoxSelectToolView.prototype._pan_start = function (e) {\n        var canvas;\n        canvas = this.plot_view.canvas;\n        this._baseboint = [canvas.sx_to_vx(e.bokeh.sx), canvas.sy_to_vy(e.bokeh.sy)];\n        return null;\n    };\n    BoxSelectToolView.prototype._pan = function (e) {\n        var append, canvas, curpoint, dims, frame, ref, ref1, vxlim, vylim;\n        canvas = this.plot_view.canvas;\n        curpoint = [canvas.sx_to_vx(e.bokeh.sx), canvas.sy_to_vy(e.bokeh.sy)];\n        frame = this.plot_model.frame;\n        dims = this.model.dimensions;\n        ref = this.model._get_dim_limits(this._baseboint, curpoint, frame, dims), vxlim = ref[0], vylim = ref[1];\n        this.model.overlay.update({\n            left: vxlim[0],\n            right: vxlim[1],\n            top: vylim[1],\n            bottom: vylim[0]\n        });\n        if (this.model.select_every_mousemove) {\n            append = (ref1 = e.srcEvent.shiftKey) != null ? ref1 : false;\n            this._select(vxlim, vylim, false, append);\n        }\n        return null;\n    };\n    BoxSelectToolView.prototype._pan_end = function (e) {\n        var append, canvas, curpoint, dims, frame, ref, ref1, vxlim, vylim;\n        canvas = this.plot_view.canvas;\n        curpoint = [canvas.sx_to_vx(e.bokeh.sx), canvas.sy_to_vy(e.bokeh.sy)];\n        frame = this.plot_model.frame;\n        dims = this.model.dimensions;\n        ref = this.model._get_dim_limits(this._baseboint, curpoint, frame, dims), vxlim = ref[0], vylim = ref[1];\n        append = (ref1 = e.srcEvent.shiftKey) != null ? ref1 : false;\n        this._select(vxlim, vylim, true, append);\n        this.model.overlay.update({\n            left: null,\n            right: null,\n            top: null,\n            bottom: null\n        });\n        this._baseboint = null;\n        this.plot_view.push_state('box_select', {\n            selection: this.plot_view.get_selection()\n        });\n        return null;\n    };\n    BoxSelectToolView.prototype._select = function (arg, arg1, final, append) {\n        var ds, geometry, r, renderers, renderers_by_source, sm, vx0, vx1, vy0, vy1;\n        vx0 = arg[0], vx1 = arg[1];\n        vy0 = arg1[0], vy1 = arg1[1];\n        if (append == null) {\n            append = false;\n        }\n        geometry = {\n            type: 'rect',\n            vx0: vx0,\n            vx1: vx1,\n            vy0: vy0,\n            vy1: vy1\n        };\n        renderers_by_source = this.model._computed_renderers_by_data_source();\n        for (ds in renderers_by_source) {\n            renderers = renderers_by_source[ds];\n            sm = renderers[0].data_source.selection_manager;\n            sm.select(this, (function () {\n                var i, len, results;\n                results = [];\n                for (i = 0, len = renderers.length; i < len; i++) {\n                    r = renderers[i];\n                    results.push(this.plot_view.renderer_views[r.id]);\n                }\n                return results;\n            }).call(this), geometry, final, append);\n        }\n        if (this.model.callback != null) {\n            this._emit_callback(geometry);\n        }\n        this._save_geometry(geometry, final, append);\n        return null;\n    };\n    BoxSelectToolView.prototype._emit_callback = function (geometry) {\n        var canvas, frame, r, xscale, yscale;\n        r = this.model.computed_renderers[0];\n        canvas = this.plot_model.canvas;\n        frame = this.plot_model.frame;\n        geometry['sx0'] = canvas.vx_to_sx(geometry.vx0);\n        geometry['sx1'] = canvas.vx_to_sx(geometry.vx1);\n        geometry['sy0'] = canvas.vy_to_sy(geometry.vy0);\n        geometry['sy1'] = canvas.vy_to_sy(geometry.vy1);\n        xscale = frame.xscales[r.x_range_name];\n        yscale = frame.yscales[r.y_range_name];\n        geometry['x0'] = xscale.invert(geometry.vx0);\n        geometry['x1'] = xscale.invert(geometry.vx1);\n        geometry['y0'] = yscale.invert(geometry.vy0);\n        geometry['y1'] = yscale.invert(geometry.vy1);\n        this.model.callback.execute(this.model, {\n            geometry: geometry\n        });\n    };\n    return BoxSelectToolView;\n})(select_tool_1.SelectToolView);\nDEFAULT_BOX_OVERLAY = function () {\n    return new box_annotation_1.BoxAnnotation({\n        level: \"overlay\",\n        render_mode: \"css\",\n        top_units: \"screen\",\n        left_units: \"screen\",\n        bottom_units: \"screen\",\n        right_units: \"screen\",\n        fill_color: {\n            value: \"lightgrey\"\n        },\n        fill_alpha: {\n            value: 0.5\n        },\n        line_color: {\n            value: \"black\"\n        },\n        line_alpha: {\n            value: 1.0\n        },\n        line_width: {\n            value: 2\n        },\n        line_dash: {\n            value: [4, 4]\n        }\n    });\n};\nexports.BoxSelectTool = (function (superClass) {\n    extend(BoxSelectTool, superClass);\n    function BoxSelectTool() {\n        return BoxSelectTool.__super__.constructor.apply(this, arguments);\n    }\n    BoxSelectTool.prototype.default_view = exports.BoxSelectToolView;\n    BoxSelectTool.prototype.type = \"BoxSelectTool\";\n    BoxSelectTool.prototype.tool_name = \"Box Select\";\n    BoxSelectTool.prototype.icon = \"bk-tool-icon-box-select\";\n    BoxSelectTool.prototype.event_type = \"pan\";\n    BoxSelectTool.prototype.default_order = 30;\n    BoxSelectTool.define({\n        dimensions: [p.Dimensions, \"both\"],\n        select_every_mousemove: [p.Bool, false],\n        callback: [p.Instance],\n        overlay: [p.Instance, DEFAULT_BOX_OVERLAY]\n    });\n    BoxSelectTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(this.tool_name, this.dimensions);\n        }\n    });\n    return BoxSelectTool;\n})(select_tool_1.SelectTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_BOX_OVERLAY, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar gesture_tool_1 = require(\"./gesture_tool\");\nvar box_annotation_1 = require(\"../../annotations/box_annotation\");\nvar p = require(\"core/properties\");\nexports.BoxZoomToolView = (function (superClass) {\n    extend(BoxZoomToolView, superClass);\n    function BoxZoomToolView() {\n        return BoxZoomToolView.__super__.constructor.apply(this, arguments);\n    }\n    BoxZoomToolView.prototype._match_aspect = function (basepoint, curpoint, frame) {\n        var a, bottom, h, hend, hstart, left, ref, ref1, right, top, va, vend, vh, vstart, vw, w, xmod, ymod;\n        hend = frame.h_range.end;\n        hstart = frame.h_range.start;\n        vend = frame.v_range.end;\n        vstart = frame.v_range.start;\n        w = hend - hstart;\n        h = vend - vstart;\n        a = w / h;\n        vw = Math.abs(basepoint[0] - curpoint[0]);\n        vh = Math.abs(basepoint[1] - curpoint[1]);\n        if (vh === 0) {\n            va = 0;\n        }\n        else {\n            va = vw / vh;\n        }\n        if (va >= a) {\n            ref = [1, va / a], xmod = ref[0], ymod = ref[1];\n        }\n        else {\n            ref1 = [a / va, 1], xmod = ref1[0], ymod = ref1[1];\n        }\n        if (basepoint[0] <= curpoint[0]) {\n            left = basepoint[0];\n            right = basepoint[0] + vw * xmod;\n            if (right > hend) {\n                right = hend;\n            }\n        }\n        else {\n            right = basepoint[0];\n            left = basepoint[0] - vw * xmod;\n            if (left < hstart) {\n                left = hstart;\n            }\n        }\n        vw = Math.abs(right - left);\n        if (basepoint[1] <= curpoint[1]) {\n            bottom = basepoint[1];\n            top = basepoint[1] + vw / a;\n            if (top > vend) {\n                top = vend;\n            }\n        }\n        else {\n            top = basepoint[1];\n            bottom = basepoint[1] - vw / a;\n            if (bottom < vstart) {\n                bottom = vstart;\n            }\n        }\n        vh = Math.abs(top - bottom);\n        if (basepoint[0] <= curpoint[0]) {\n            right = basepoint[0] + a * vh;\n        }\n        else {\n            left = basepoint[0] - a * vh;\n        }\n        return [[left, right], [bottom, top]];\n    };\n    BoxZoomToolView.prototype._pan_start = function (e) {\n        var canvas;\n        canvas = this.plot_view.canvas;\n        this._baseboint = [canvas.sx_to_vx(e.bokeh.sx), canvas.sy_to_vy(e.bokeh.sy)];\n        return null;\n    };\n    BoxZoomToolView.prototype._pan = function (e) {\n        var canvas, curpoint, dims, frame, ref, ref1, vx, vy;\n        canvas = this.plot_view.canvas;\n        curpoint = [canvas.sx_to_vx(e.bokeh.sx), canvas.sy_to_vy(e.bokeh.sy)];\n        frame = this.plot_model.frame;\n        dims = this.model.dimensions;\n        if (this.model.match_aspect && dims === 'both') {\n            ref = this._match_aspect(this._baseboint, curpoint, frame), vx = ref[0], vy = ref[1];\n        }\n        else {\n            ref1 = this.model._get_dim_limits(this._baseboint, curpoint, frame, dims), vx = ref1[0], vy = ref1[1];\n        }\n        this.model.overlay.update({\n            left: vx[0],\n            right: vx[1],\n            top: vy[1],\n            bottom: vy[0]\n        });\n        return null;\n    };\n    BoxZoomToolView.prototype._pan_end = function (e) {\n        var canvas, curpoint, dims, frame, ref, ref1, vx, vy;\n        canvas = this.plot_view.canvas;\n        curpoint = [canvas.sx_to_vx(e.bokeh.sx), canvas.sy_to_vy(e.bokeh.sy)];\n        frame = this.plot_model.frame;\n        dims = this.model.dimensions;\n        if (this.model.match_aspect && dims === 'both') {\n            ref = this._match_aspect(this._baseboint, curpoint, frame), vx = ref[0], vy = ref[1];\n        }\n        else {\n            ref1 = this.model._get_dim_limits(this._baseboint, curpoint, frame, dims), vx = ref1[0], vy = ref1[1];\n        }\n        this._update(vx, vy);\n        this.model.overlay.update({\n            left: null,\n            right: null,\n            top: null,\n            bottom: null\n        });\n        this._baseboint = null;\n        return null;\n    };\n    BoxZoomToolView.prototype._update = function (vx, vy) {\n        var end, name, ref, ref1, ref2, ref3, scale, start, xrs, yrs, zoom_info;\n        if (Math.abs(vx[1] - vx[0]) <= 5 || Math.abs(vy[1] - vy[0]) <= 5) {\n            return;\n        }\n        xrs = {};\n        ref = this.plot_view.frame.xscales;\n        for (name in ref) {\n            scale = ref[name];\n            ref1 = scale.v_invert(vx, true), start = ref1[0], end = ref1[1];\n            xrs[name] = {\n                start: start,\n                end: end\n            };\n        }\n        yrs = {};\n        ref2 = this.plot_view.frame.yscales;\n        for (name in ref2) {\n            scale = ref2[name];\n            ref3 = scale.v_invert(vy, true), start = ref3[0], end = ref3[1];\n            yrs[name] = {\n                start: start,\n                end: end\n            };\n        }\n        zoom_info = {\n            xrs: xrs,\n            yrs: yrs\n        };\n        this.plot_view.push_state('box_zoom', {\n            range: zoom_info\n        });\n        return this.plot_view.update_range(zoom_info);\n    };\n    return BoxZoomToolView;\n})(gesture_tool_1.GestureToolView);\nDEFAULT_BOX_OVERLAY = function () {\n    return new box_annotation_1.BoxAnnotation({\n        level: \"overlay\",\n        render_mode: \"css\",\n        top_units: \"screen\",\n        left_units: \"screen\",\n        bottom_units: \"screen\",\n        right_units: \"screen\",\n        fill_color: {\n            value: \"lightgrey\"\n        },\n        fill_alpha: {\n            value: 0.5\n        },\n        line_color: {\n            value: \"black\"\n        },\n        line_alpha: {\n            value: 1.0\n        },\n        line_width: {\n            value: 2\n        },\n        line_dash: {\n            value: [4, 4]\n        }\n    });\n};\nexports.BoxZoomTool = (function (superClass) {\n    extend(BoxZoomTool, superClass);\n    function BoxZoomTool() {\n        return BoxZoomTool.__super__.constructor.apply(this, arguments);\n    }\n    BoxZoomTool.prototype.default_view = exports.BoxZoomToolView;\n    BoxZoomTool.prototype.type = \"BoxZoomTool\";\n    BoxZoomTool.prototype.tool_name = \"Box Zoom\";\n    BoxZoomTool.prototype.icon = \"bk-tool-icon-box-zoom\";\n    BoxZoomTool.prototype.event_type = \"pan\";\n    BoxZoomTool.prototype.default_order = 20;\n    BoxZoomTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(this.tool_name, this.dimensions);\n        }\n    });\n    BoxZoomTool.define({\n        dimensions: [p.Dimensions, \"both\"],\n        overlay: [p.Instance, DEFAULT_BOX_OVERLAY],\n        match_aspect: [p.Bool, false]\n    });\n    return BoxZoomTool;\n})(gesture_tool_1.GestureTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar button_tool_1 = require(\"../button_tool\");\nexports.GestureToolView = (function (superClass) {\n    extend(GestureToolView, superClass);\n    function GestureToolView() {\n        return GestureToolView.__super__.constructor.apply(this, arguments);\n    }\n    return GestureToolView;\n})(button_tool_1.ButtonToolView);\nexports.GestureTool = (function (superClass) {\n    extend(GestureTool, superClass);\n    function GestureTool() {\n        return GestureTool.__super__.constructor.apply(this, arguments);\n    }\n    GestureTool.prototype.event_type = null;\n    GestureTool.prototype.default_order = null;\n    return GestureTool;\n})(button_tool_1.ButtonTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_POLY_OVERLAY, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar select_tool_1 = require(\"./select_tool\");\nvar poly_annotation_1 = require(\"../../annotations/poly_annotation\");\nvar p = require(\"core/properties\");\nexports.LassoSelectToolView = (function (superClass) {\n    extend(LassoSelectToolView, superClass);\n    function LassoSelectToolView() {\n        return LassoSelectToolView.__super__.constructor.apply(this, arguments);\n    }\n    LassoSelectToolView.prototype.initialize = function (options) {\n        LassoSelectToolView.__super__.initialize.call(this, options);\n        this.connect(this.model.properties.active.change, function () {\n            return this._active_change();\n        });\n        return this.data = null;\n    };\n    LassoSelectToolView.prototype._active_change = function () {\n        if (!this.model.active) {\n            return this._clear_overlay();\n        }\n    };\n    LassoSelectToolView.prototype._keyup = function (e) {\n        if (e.keyCode === 13) {\n            return this._clear_overlay();\n        }\n    };\n    LassoSelectToolView.prototype._pan_start = function (e) {\n        var canvas, vx, vy;\n        canvas = this.plot_view.canvas;\n        vx = canvas.sx_to_vx(e.bokeh.sx);\n        vy = canvas.sy_to_vy(e.bokeh.sy);\n        this.data = {\n            vx: [vx],\n            vy: [vy]\n        };\n        return null;\n    };\n    LassoSelectToolView.prototype._pan = function (e) {\n        var append, canvas, h_range, overlay, ref, v_range, vx, vy;\n        canvas = this.plot_view.canvas;\n        vx = canvas.sx_to_vx(e.bokeh.sx);\n        vy = canvas.sy_to_vy(e.bokeh.sy);\n        h_range = this.plot_model.frame.h_range;\n        v_range = this.plot_model.frame.v_range;\n        if (vx > h_range.end) {\n            vx = h_range.end;\n        }\n        if (vx < h_range.start) {\n            vx = h_range.start;\n        }\n        if (vy > v_range.end) {\n            vy = v_range.end;\n        }\n        if (vy < v_range.start) {\n            vy = v_range.start;\n        }\n        this.data.vx.push(vx);\n        this.data.vy.push(vy);\n        overlay = this.model.overlay;\n        overlay.update({\n            xs: this.data.vx,\n            ys: this.data.vy\n        });\n        if (this.model.select_every_mousemove) {\n            append = (ref = e.srcEvent.shiftKey) != null ? ref : false;\n            return this._select(this.data.vx, this.data.vy, false, append);\n        }\n    };\n    LassoSelectToolView.prototype._pan_end = function (e) {\n        var append, ref;\n        this._clear_overlay();\n        append = (ref = e.srcEvent.shiftKey) != null ? ref : false;\n        this._select(this.data.vx, this.data.vy, true, append);\n        return this.plot_view.push_state('lasso_select', {\n            selection: this.plot_view.get_selection()\n        });\n    };\n    LassoSelectToolView.prototype._clear_overlay = function () {\n        return this.model.overlay.update({\n            xs: [],\n            ys: []\n        });\n    };\n    LassoSelectToolView.prototype._select = function (vx, vy, final, append) {\n        var ds, geometry, r, renderers, renderers_by_source, sm;\n        geometry = {\n            type: 'poly',\n            vx: vx,\n            vy: vy\n        };\n        renderers_by_source = this.model._computed_renderers_by_data_source();\n        for (ds in renderers_by_source) {\n            renderers = renderers_by_source[ds];\n            sm = renderers[0].data_source.selection_manager;\n            sm.select(this, (function () {\n                var i, len, results;\n                results = [];\n                for (i = 0, len = renderers.length; i < len; i++) {\n                    r = renderers[i];\n                    results.push(this.plot_view.renderer_views[r.id]);\n                }\n                return results;\n            }).call(this), geometry, final, append);\n        }\n        if (this.model.callback != null) {\n            this._emit_callback(geometry);\n        }\n        this._save_geometry(geometry, final, append);\n        return null;\n    };\n    LassoSelectToolView.prototype._emit_callback = function (geometry) {\n        var canvas, frame, r, xscale, yscale;\n        r = this.model.computed_renderers[0];\n        canvas = this.plot_model.canvas;\n        frame = this.plot_model.frame;\n        geometry['sx'] = canvas.v_vx_to_sx(geometry.vx);\n        geometry['sy'] = canvas.v_vy_to_sy(geometry.vy);\n        xscale = frame.xscales[r.x_range_name];\n        yscale = frame.yscales[r.y_range_name];\n        geometry['x'] = xscale.v_invert(geometry.vx);\n        geometry['y'] = yscale.v_invert(geometry.vy);\n        this.model.callback.execute(this.model, {\n            geometry: geometry\n        });\n    };\n    return LassoSelectToolView;\n})(select_tool_1.SelectToolView);\nDEFAULT_POLY_OVERLAY = function () {\n    return new poly_annotation_1.PolyAnnotation({\n        level: \"overlay\",\n        xs_units: \"screen\",\n        ys_units: \"screen\",\n        fill_color: {\n            value: \"lightgrey\"\n        },\n        fill_alpha: {\n            value: 0.5\n        },\n        line_color: {\n            value: \"black\"\n        },\n        line_alpha: {\n            value: 1.0\n        },\n        line_width: {\n            value: 2\n        },\n        line_dash: {\n            value: [4, 4]\n        }\n    });\n};\nexports.LassoSelectTool = (function (superClass) {\n    extend(LassoSelectTool, superClass);\n    function LassoSelectTool() {\n        return LassoSelectTool.__super__.constructor.apply(this, arguments);\n    }\n    LassoSelectTool.prototype.default_view = exports.LassoSelectToolView;\n    LassoSelectTool.prototype.type = \"LassoSelectTool\";\n    LassoSelectTool.prototype.tool_name = \"Lasso Select\";\n    LassoSelectTool.prototype.icon = \"bk-tool-icon-lasso-select\";\n    LassoSelectTool.prototype.event_type = \"pan\";\n    LassoSelectTool.prototype.default_order = 12;\n    LassoSelectTool.define({\n        select_every_mousemove: [p.Bool, true],\n        callback: [p.Instance],\n        overlay: [p.Instance, DEFAULT_POLY_OVERLAY]\n    });\n    return LassoSelectTool;\n})(select_tool_1.SelectTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar gesture_tool_1 = require(\"./gesture_tool\");\nvar p = require(\"core/properties\");\nexports.PanToolView = (function (superClass) {\n    extend(PanToolView, superClass);\n    function PanToolView() {\n        return PanToolView.__super__.constructor.apply(this, arguments);\n    }\n    PanToolView.prototype._pan_start = function (e) {\n        var canvas, frame, hr, vr, vx, vy;\n        this.last_dx = 0;\n        this.last_dy = 0;\n        canvas = this.plot_view.canvas;\n        frame = this.plot_view.frame;\n        vx = canvas.sx_to_vx(e.bokeh.sx);\n        vy = canvas.sy_to_vy(e.bokeh.sy);\n        if (!frame.contains(vx, vy)) {\n            hr = frame.h_range;\n            vr = frame.v_range;\n            if (vx < hr.start || vx > hr.end) {\n                this.v_axis_only = true;\n            }\n            if (vy < vr.start || vy > vr.end) {\n                this.h_axis_only = true;\n            }\n        }\n        return this.plot_view.interactive_timestamp = Date.now();\n    };\n    PanToolView.prototype._pan = function (e) {\n        this._update(e.deltaX, -e.deltaY);\n        return this.plot_view.interactive_timestamp = Date.now();\n    };\n    PanToolView.prototype._pan_end = function (e) {\n        this.h_axis_only = false;\n        this.v_axis_only = false;\n        if (this.pan_info != null) {\n            return this.plot_view.push_state('pan', {\n                range: this.pan_info\n            });\n        }\n    };\n    PanToolView.prototype._update = function (dx, dy) {\n        var dims, end, frame, hr, is_panning, name, new_dx, new_dy, ref, ref1, ref2, ref3, scale, sdx, sdy, start, sx0, sx1, sx_high, sx_low, sy0, sy1, sy_high, sy_low, vr, xrs, yrs;\n        frame = this.plot_view.frame;\n        new_dx = dx - this.last_dx;\n        new_dy = dy - this.last_dy;\n        hr = frame.h_range;\n        sx_low = hr.start - new_dx;\n        sx_high = hr.end - new_dx;\n        vr = frame.v_range;\n        sy_low = vr.start - new_dy;\n        sy_high = vr.end - new_dy;\n        dims = this.model.dimensions;\n        if ((dims === 'width' || dims === 'both') && !this.v_axis_only) {\n            sx0 = sx_low;\n            sx1 = sx_high;\n            sdx = -new_dx;\n        }\n        else {\n            sx0 = hr.start;\n            sx1 = hr.end;\n            sdx = 0;\n        }\n        if ((dims === 'height' || dims === 'both') && !this.h_axis_only) {\n            sy0 = sy_low;\n            sy1 = sy_high;\n            sdy = new_dy;\n        }\n        else {\n            sy0 = vr.start;\n            sy1 = vr.end;\n            sdy = 0;\n        }\n        this.last_dx = dx;\n        this.last_dy = dy;\n        xrs = {};\n        ref = frame.xscales;\n        for (name in ref) {\n            scale = ref[name];\n            ref1 = scale.v_invert([sx0, sx1], true), start = ref1[0], end = ref1[1];\n            xrs[name] = {\n                start: start,\n                end: end\n            };\n        }\n        yrs = {};\n        ref2 = frame.yscales;\n        for (name in ref2) {\n            scale = ref2[name];\n            ref3 = scale.v_invert([sy0, sy1], true), start = ref3[0], end = ref3[1];\n            yrs[name] = {\n                start: start,\n                end: end\n            };\n        }\n        this.pan_info = {\n            xrs: xrs,\n            yrs: yrs,\n            sdx: sdx,\n            sdy: sdy\n        };\n        this.plot_view.update_range(this.pan_info, is_panning = true);\n        return null;\n    };\n    return PanToolView;\n})(gesture_tool_1.GestureToolView);\nexports.PanTool = (function (superClass) {\n    extend(PanTool, superClass);\n    function PanTool() {\n        return PanTool.__super__.constructor.apply(this, arguments);\n    }\n    PanTool.prototype.default_view = exports.PanToolView;\n    PanTool.prototype.type = \"PanTool\";\n    PanTool.prototype.tool_name = \"Pan\";\n    PanTool.prototype.event_type = \"pan\";\n    PanTool.prototype.default_order = 10;\n    PanTool.define({\n        dimensions: [p.Dimensions, \"both\"]\n    });\n    PanTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(\"Pan\", this.dimensions);\n        },\n        icon: function () {\n            var suffix;\n            suffix = (function () {\n                switch (this.dimensions) {\n                    case \"both\":\n                        return \"pan\";\n                    case \"width\":\n                        return \"xpan\";\n                    case \"height\":\n                        return \"ypan\";\n                }\n            }).call(this);\n            return \"bk-tool-icon-\" + suffix;\n        }\n    });\n    return PanTool;\n})(gesture_tool_1.GestureTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DEFAULT_POLY_OVERLAY, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar select_tool_1 = require(\"./select_tool\");\nvar poly_annotation_1 = require(\"../../annotations/poly_annotation\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nexports.PolySelectToolView = (function (superClass) {\n    extend(PolySelectToolView, superClass);\n    function PolySelectToolView() {\n        return PolySelectToolView.__super__.constructor.apply(this, arguments);\n    }\n    PolySelectToolView.prototype.initialize = function (options) {\n        PolySelectToolView.__super__.initialize.call(this, options);\n        this.connect(this.model.properties.active.change, function () {\n            return this._active_change();\n        });\n        return this.data = {\n            vx: [],\n            vy: []\n        };\n    };\n    PolySelectToolView.prototype._active_change = function () {\n        if (!this.model.active) {\n            return this._clear_data();\n        }\n    };\n    PolySelectToolView.prototype._keyup = function (e) {\n        if (e.keyCode === 13) {\n            return this._clear_data();\n        }\n    };\n    PolySelectToolView.prototype._doubletap = function (e) {\n        var append, ref;\n        append = (ref = e.srcEvent.shiftKey) != null ? ref : false;\n        this._select(this.data.vx, this.data.vy, true, append);\n        return this._clear_data();\n    };\n    PolySelectToolView.prototype._clear_data = function () {\n        this.data = {\n            vx: [],\n            vy: []\n        };\n        return this.model.overlay.update({\n            xs: [],\n            ys: []\n        });\n    };\n    PolySelectToolView.prototype._tap = function (e) {\n        var canvas, vx, vy;\n        canvas = this.plot_view.canvas;\n        vx = canvas.sx_to_vx(e.bokeh.sx);\n        vy = canvas.sy_to_vy(e.bokeh.sy);\n        this.data.vx.push(vx);\n        this.data.vy.push(vy);\n        return this.model.overlay.update({\n            xs: array_1.copy(this.data.vx),\n            ys: array_1.copy(this.data.vy)\n        });\n    };\n    PolySelectToolView.prototype._select = function (vx, vy, final, append) {\n        var ds, geometry, r, renderers, renderers_by_source, sm;\n        geometry = {\n            type: 'poly',\n            vx: vx,\n            vy: vy\n        };\n        renderers_by_source = this.model._computed_renderers_by_data_source();\n        for (ds in renderers_by_source) {\n            renderers = renderers_by_source[ds];\n            sm = renderers[0].data_source.selection_manager;\n            sm.select(this, (function () {\n                var i, len, results;\n                results = [];\n                for (i = 0, len = renderers.length; i < len; i++) {\n                    r = renderers[i];\n                    results.push(this.plot_view.renderer_views[r.id]);\n                }\n                return results;\n            }).call(this), geometry, final, append);\n        }\n        this._save_geometry(geometry, final, append);\n        this.plot_view.push_state('poly_select', {\n            selection: this.plot_view.get_selection()\n        });\n        return null;\n    };\n    return PolySelectToolView;\n})(select_tool_1.SelectToolView);\nDEFAULT_POLY_OVERLAY = function () {\n    return new poly_annotation_1.PolyAnnotation({\n        level: \"overlay\",\n        xs_units: \"screen\",\n        ys_units: \"screen\",\n        fill_color: {\n            value: \"lightgrey\"\n        },\n        fill_alpha: {\n            value: 0.5\n        },\n        line_color: {\n            value: \"black\"\n        },\n        line_alpha: {\n            value: 1.0\n        },\n        line_width: {\n            value: 2\n        },\n        line_dash: {\n            value: [4, 4]\n        }\n    });\n};\nexports.PolySelectTool = (function (superClass) {\n    extend(PolySelectTool, superClass);\n    function PolySelectTool() {\n        return PolySelectTool.__super__.constructor.apply(this, arguments);\n    }\n    PolySelectTool.prototype.default_view = exports.PolySelectToolView;\n    PolySelectTool.prototype.type = \"PolySelectTool\";\n    PolySelectTool.prototype.tool_name = \"Poly Select\";\n    PolySelectTool.prototype.icon = \"bk-tool-icon-polygon-select\";\n    PolySelectTool.prototype.event_type = \"tap\";\n    PolySelectTool.prototype.default_order = 11;\n    PolySelectTool.define({\n        overlay: [p.Instance, DEFAULT_POLY_OVERLAY]\n    });\n    return PolySelectTool;\n})(select_tool_1.SelectTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar gesture_tool_1 = require(\"./gesture_tool\");\nvar dom_1 = require(\"core/dom\");\nexports.ResizeToolView = (function (superClass) {\n    extend(ResizeToolView, superClass);\n    function ResizeToolView() {\n        return ResizeToolView.__super__.constructor.apply(this, arguments);\n    }\n    ResizeToolView.prototype.className = \"bk-resize-popup\";\n    ResizeToolView.prototype.initialize = function (options) {\n        var wrapper;\n        ResizeToolView.__super__.initialize.call(this, options);\n        this.overlay = dom_1.div();\n        wrapper = this.plot_view.canvas_view.el;\n        wrapper.appendChild(this.overlay);\n        dom_1.hide(this.overlay);\n        this.active = false;\n        return null;\n    };\n    ResizeToolView.prototype.activate = function () {\n        this.active = true;\n        this.render();\n        return null;\n    };\n    ResizeToolView.prototype.deactivate = function () {\n        this.active = false;\n        this.render();\n        return null;\n    };\n    ResizeToolView.prototype.render = function (ctx) {\n        var canvas, frame, left, top;\n        if (this.active) {\n            canvas = this.plot_view.canvas;\n            frame = this.plot_view.frame;\n            left = canvas.vx_to_sx(frame.h_range.end - 40);\n            top = canvas.vy_to_sy(frame.v_range.start + 40);\n            this.overlay.style.position = \"absolute\";\n            this.overlay.style.top = top + \"px\";\n            this.overlay.style.left = left + \"px\";\n            dom_1.show(this.overlay);\n        }\n        else {\n            dom_1.hide(this.overlay);\n        }\n        return this;\n    };\n    ResizeToolView.prototype._pan_start = function (e) {\n        var canvas;\n        canvas = this.plot_view.canvas;\n        this.ch = canvas._height.value;\n        this.cw = canvas._width.value;\n        this.plot_view.interactive_timestamp = Date.now();\n        return null;\n    };\n    ResizeToolView.prototype._pan = function (e) {\n        this._update(e.deltaX, e.deltaY);\n        this.plot_view.interactive_timestamp = Date.now();\n        return null;\n    };\n    ResizeToolView.prototype._pan_end = function (e) {\n        return this.plot_view.push_state(\"resize\", {\n            dimensions: {\n                width: this.plot_view.canvas._width.value,\n                height: this.plot_view.canvas._height.value\n            }\n        });\n    };\n    ResizeToolView.prototype._update = function (dx, dy) {\n        var new_height, new_width;\n        new_width = this.cw + dx;\n        new_height = this.ch + dy;\n        if (new_width < 100 || new_height < 100) {\n            return;\n        }\n        this.plot_view.update_dimensions(new_width, new_height);\n    };\n    return ResizeToolView;\n})(gesture_tool_1.GestureToolView);\nexports.ResizeTool = (function (superClass) {\n    extend(ResizeTool, superClass);\n    function ResizeTool() {\n        return ResizeTool.__super__.constructor.apply(this, arguments);\n    }\n    ResizeTool.prototype.default_view = exports.ResizeToolView;\n    ResizeTool.prototype.type = \"ResizeTool\";\n    ResizeTool.prototype.tool_name = \"Resize\";\n    ResizeTool.prototype.icon = \"bk-tool-icon-resize\";\n    ResizeTool.prototype.event_type = \"pan\";\n    ResizeTool.prototype.default_order = 40;\n    return ResizeTool;\n})(gesture_tool_1.GestureTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar gesture_tool_1 = require(\"./gesture_tool\");\nvar glyph_renderer_1 = require(\"../../renderers/glyph_renderer\");\nvar logging_1 = require(\"core/logging\");\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nexports.SelectToolView = (function (superClass) {\n    extend(SelectToolView, superClass);\n    function SelectToolView() {\n        return SelectToolView.__super__.constructor.apply(this, arguments);\n    }\n    SelectToolView.prototype._keyup = function (e) {\n        var ds, j, len, r, ref, results, sm;\n        if (e.keyCode === 27) {\n            ref = this.model.computed_renderers;\n            results = [];\n            for (j = 0, len = ref.length; j < len; j++) {\n                r = ref[j];\n                ds = r.data_source;\n                sm = ds.selection_manager;\n                results.push(sm.clear());\n            }\n            return results;\n        }\n    };\n    SelectToolView.prototype._save_geometry = function (geometry, final, append) {\n        var g, geoms, i, j, ref, tool_events, xm, ym;\n        g = object_1.clone(geometry);\n        xm = this.plot_view.frame.xscales['default'];\n        ym = this.plot_view.frame.yscales['default'];\n        switch (g.type) {\n            case 'point':\n                g.x = xm.invert(g.vx);\n                g.y = ym.invert(g.vy);\n                break;\n            case 'rect':\n                g.x0 = xm.invert(g.vx0);\n                g.y0 = ym.invert(g.vy0);\n                g.x1 = xm.invert(g.vx1);\n                g.y1 = ym.invert(g.vy1);\n                break;\n            case 'poly':\n                g.x = new Array(g.vx.length);\n                g.y = new Array(g.vy.length);\n                for (i = j = 0, ref = g.vx.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n                    g.x[i] = xm.invert(g.vx[i]);\n                    g.y[i] = ym.invert(g.vy[i]);\n                }\n                break;\n            default:\n                logging_1.logger.debug(\"Unrecognized selection geometry type: '\" + g.type + \"'\");\n        }\n        if (final) {\n            tool_events = this.plot_model.plot.tool_events;\n            if (append) {\n                geoms = tool_events.geometries;\n                geoms.push(g);\n            }\n            else {\n                geoms = [g];\n            }\n            tool_events.geometries = geoms;\n        }\n        return null;\n    };\n    return SelectToolView;\n})(gesture_tool_1.GestureToolView);\nexports.SelectTool = (function (superClass) {\n    extend(SelectTool, superClass);\n    function SelectTool() {\n        return SelectTool.__super__.constructor.apply(this, arguments);\n    }\n    SelectTool.define({\n        renderers: [p.Array, []],\n        names: [p.Array, []]\n    });\n    SelectTool.internal({\n        multi_select_modifier: [p.String, \"shift\"]\n    });\n    SelectTool.prototype.connect_signals = function () {\n        SelectTool.__super__.connect_signals.call(this);\n        this.connect(this.properties.renderers.change, function () {\n            return this._computed_renderers = null;\n        });\n        this.connect(this.properties.names.change, function () {\n            return this._computed_renderers = null;\n        });\n        return this.connect(this.properties.plot.change, function () {\n            return this._computed_renderers = null;\n        });\n    };\n    SelectTool.prototype._compute_renderers = function () {\n        var all_renderers, names, r, renderers;\n        renderers = this.renderers;\n        names = this.names;\n        if (renderers.length === 0) {\n            all_renderers = this.plot.renderers;\n            renderers = (function () {\n                var j, len, results;\n                results = [];\n                for (j = 0, len = all_renderers.length; j < len; j++) {\n                    r = all_renderers[j];\n                    if (r instanceof glyph_renderer_1.GlyphRenderer) {\n                        results.push(r);\n                    }\n                }\n                return results;\n            })();\n        }\n        if (names.length > 0) {\n            renderers = (function () {\n                var j, len, results;\n                results = [];\n                for (j = 0, len = renderers.length; j < len; j++) {\n                    r = renderers[j];\n                    if (names.indexOf(r.name) >= 0) {\n                        results.push(r);\n                    }\n                }\n                return results;\n            })();\n        }\n        return renderers;\n    };\n    SelectTool.getters({\n        computed_renderers: function () {\n            if (this._computed_renderers == null) {\n                this._computed_renderers = this._compute_renderers();\n            }\n            return this._computed_renderers;\n        }\n    });\n    SelectTool.prototype._computed_renderers_by_data_source = function () {\n        var j, len, r, ref, renderers_by_source;\n        renderers_by_source = {};\n        ref = this.computed_renderers;\n        for (j = 0, len = ref.length; j < len; j++) {\n            r = ref[j];\n            if (!(r.data_source.id in renderers_by_source)) {\n                renderers_by_source[r.data_source.id] = [r];\n            }\n            else {\n                renderers_by_source[r.data_source.id] = renderers_by_source[r.data_source.id].concat([r]);\n            }\n        }\n        return renderers_by_source;\n    };\n    return SelectTool;\n})(gesture_tool_1.GestureTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar select_tool_1 = require(\"./select_tool\");\nvar p = require(\"core/properties\");\nvar types_1 = require(\"core/util/types\");\nexports.TapToolView = (function (superClass) {\n    extend(TapToolView, superClass);\n    function TapToolView() {\n        return TapToolView.__super__.constructor.apply(this, arguments);\n    }\n    TapToolView.prototype._tap = function (e) {\n        var append, canvas, ref, vx, vy;\n        canvas = this.plot_view.canvas;\n        vx = canvas.sx_to_vx(e.bokeh.sx);\n        vy = canvas.sy_to_vy(e.bokeh.sy);\n        append = (ref = e.srcEvent.shiftKey) != null ? ref : false;\n        return this._select(vx, vy, true, append);\n    };\n    TapToolView.prototype._select = function (vx, vy, final, append) {\n        var _, callback, cb_data, did_hit, ds, geometry, i, len, r, ref, renderers, renderers_by_source, sm, view;\n        geometry = {\n            type: 'point',\n            vx: vx,\n            vy: vy\n        };\n        callback = this.model.callback;\n        this._save_geometry(geometry, final, append);\n        cb_data = {\n            geometries: this.plot_model.plot.tool_events.geometries\n        };\n        if (this.model.behavior === \"select\") {\n            renderers_by_source = this.model._computed_renderers_by_data_source();\n            for (_ in renderers_by_source) {\n                renderers = renderers_by_source[_];\n                ds = renderers[0].data_source;\n                sm = ds.selection_manager;\n                did_hit = sm.select(this, (function () {\n                    var i, len, results;\n                    results = [];\n                    for (i = 0, len = renderers.length; i < len; i++) {\n                        r = renderers[i];\n                        results.push(this.plot_view.renderer_views[r.id]);\n                    }\n                    return results;\n                }).call(this), geometry, final, append);\n                if (did_hit && (callback != null)) {\n                    if (types_1.isFunction(callback)) {\n                        callback(ds, cb_data);\n                    }\n                    else {\n                        callback.execute(ds, cb_data);\n                    }\n                }\n            }\n            this.plot_view.push_state('tap', {\n                selection: this.plot_view.get_selection()\n            });\n        }\n        else {\n            ref = this.model.computed_renderers;\n            for (i = 0, len = ref.length; i < len; i++) {\n                r = ref[i];\n                ds = r.data_source;\n                sm = ds.selection_manager;\n                view = this.plot_view.renderer_views[r.id];\n                did_hit = sm.inspect(this, view, geometry, {\n                    geometry: geometry\n                });\n                if (did_hit && (callback != null)) {\n                    if (types_1.isFunction(callback)) {\n                        callback(ds, cb_data);\n                    }\n                    else {\n                        callback.execute(ds, cb_data);\n                    }\n                }\n            }\n        }\n        return null;\n    };\n    return TapToolView;\n})(select_tool_1.SelectToolView);\nexports.TapTool = (function (superClass) {\n    extend(TapTool, superClass);\n    function TapTool() {\n        return TapTool.__super__.constructor.apply(this, arguments);\n    }\n    TapTool.prototype.default_view = exports.TapToolView;\n    TapTool.prototype.type = \"TapTool\";\n    TapTool.prototype.tool_name = \"Tap\";\n    TapTool.prototype.icon = \"bk-tool-icon-tap-select\";\n    TapTool.prototype.event_type = \"tap\";\n    TapTool.prototype.default_order = 10;\n    TapTool.define({\n        behavior: [p.String, \"select\"],\n        callback: [p.Any]\n    });\n    return TapTool;\n})(select_tool_1.SelectTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar gesture_tool_1 = require(\"./gesture_tool\");\nvar p = require(\"core/properties\");\nexports.WheelPanToolView = (function (superClass) {\n    extend(WheelPanToolView, superClass);\n    function WheelPanToolView() {\n        return WheelPanToolView.__super__.constructor.apply(this, arguments);\n    }\n    WheelPanToolView.prototype._scroll = function (e) {\n        var factor;\n        factor = this.model.speed * e.bokeh.delta;\n        if (factor > 0.9) {\n            factor = 0.9;\n        }\n        else if (factor < -0.9) {\n            factor = -0.9;\n        }\n        return this._update_ranges(factor);\n    };\n    WheelPanToolView.prototype._update_ranges = function (factor) {\n        var end, frame, hr, name, pan_info, ref, ref1, ref2, ref3, ref4, ref5, scale, start, sx0, sx1, sy0, sy1, vr, vx_high, vx_low, vx_range, vy_high, vy_low, vy_range, xrs, yrs;\n        frame = this.plot_model.frame;\n        hr = frame.h_range;\n        vr = frame.v_range;\n        ref = [hr.start, hr.end], vx_low = ref[0], vx_high = ref[1];\n        ref1 = [vr.start, vr.end], vy_low = ref1[0], vy_high = ref1[1];\n        switch (this.model.dimension) {\n            case \"height\":\n                vy_range = Math.abs(vy_high - vy_low);\n                sx0 = vx_low;\n                sx1 = vx_high;\n                sy0 = vy_low + vy_range * factor;\n                sy1 = vy_high + vy_range * factor;\n                break;\n            case \"width\":\n                vx_range = Math.abs(vx_high - vx_low);\n                sx0 = vx_low - vx_range * factor;\n                sx1 = vx_high - vx_range * factor;\n                sy0 = vy_low;\n                sy1 = vy_high;\n        }\n        xrs = {};\n        ref2 = frame.xscales;\n        for (name in ref2) {\n            scale = ref2[name];\n            ref3 = scale.v_invert([sx0, sx1], true), start = ref3[0], end = ref3[1];\n            xrs[name] = {\n                start: start,\n                end: end\n            };\n        }\n        yrs = {};\n        ref4 = frame.yscales;\n        for (name in ref4) {\n            scale = ref4[name];\n            ref5 = scale.v_invert([sy0, sy1], true), start = ref5[0], end = ref5[1];\n            yrs[name] = {\n                start: start,\n                end: end\n            };\n        }\n        pan_info = {\n            xrs: xrs,\n            yrs: yrs,\n            factor: factor\n        };\n        this.plot_view.push_state('wheel_pan', {\n            range: pan_info\n        });\n        this.plot_view.update_range(pan_info, false, true);\n        this.plot_view.interactive_timestamp = Date.now();\n        return null;\n    };\n    return WheelPanToolView;\n})(gesture_tool_1.GestureToolView);\nexports.WheelPanTool = (function (superClass) {\n    extend(WheelPanTool, superClass);\n    function WheelPanTool() {\n        return WheelPanTool.__super__.constructor.apply(this, arguments);\n    }\n    WheelPanTool.prototype.type = 'WheelPanTool';\n    WheelPanTool.prototype.default_view = exports.WheelPanToolView;\n    WheelPanTool.prototype.tool_name = \"Wheel Pan\";\n    WheelPanTool.prototype.icon = \"bk-tool-icon-wheel-pan\";\n    WheelPanTool.prototype.event_type = 'scroll';\n    WheelPanTool.prototype.default_order = 12;\n    WheelPanTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(this.tool_name, this.dimension);\n        }\n    });\n    WheelPanTool.define({\n        dimension: [p.Dimension, \"width\"]\n    });\n    WheelPanTool.internal({\n        speed: [p.Number, 1 / 1000]\n    });\n    return WheelPanTool;\n})(gesture_tool_1.GestureTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar document, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar gesture_tool_1 = require(\"./gesture_tool\");\nvar zoom_1 = require(\"core/util/zoom\");\nvar p = require(\"core/properties\");\nif (typeof document === \"undefined\" || document === null) {\n    document = {};\n}\nexports.WheelZoomToolView = (function (superClass) {\n    extend(WheelZoomToolView, superClass);\n    function WheelZoomToolView() {\n        return WheelZoomToolView.__super__.constructor.apply(this, arguments);\n    }\n    WheelZoomToolView.prototype._pinch = function (e) {\n        var delta;\n        if (e.scale >= 1) {\n            delta = (e.scale - 1) * 20.0;\n        }\n        else {\n            delta = -20.0 / e.scale;\n        }\n        e.bokeh.delta = delta;\n        return this._scroll(e);\n    };\n    WheelZoomToolView.prototype._scroll = function (e) {\n        var dims, factor, frame, h_axis, hr, v_axis, vr, vx, vy, zoom_info;\n        frame = this.plot_model.frame;\n        hr = frame.h_range;\n        vr = frame.v_range;\n        vx = this.plot_view.canvas.sx_to_vx(e.bokeh.sx);\n        vy = this.plot_view.canvas.sy_to_vy(e.bokeh.sy);\n        dims = this.model.dimensions;\n        h_axis = (dims === 'width' || dims === 'both') && (hr.min < vx && vx < hr.max);\n        v_axis = (dims === 'height' || dims === 'both') && (vr.min < vy && vy < vr.max);\n        factor = this.model.speed * e.bokeh.delta;\n        zoom_info = zoom_1.scale_range(frame, factor, h_axis, v_axis, {\n            x: vx,\n            y: vy\n        });\n        this.plot_view.push_state('wheel_zoom', {\n            range: zoom_info\n        });\n        this.plot_view.update_range(zoom_info, false, true);\n        this.plot_view.interactive_timestamp = Date.now();\n        return null;\n    };\n    return WheelZoomToolView;\n})(gesture_tool_1.GestureToolView);\nexports.WheelZoomTool = (function (superClass) {\n    extend(WheelZoomTool, superClass);\n    function WheelZoomTool() {\n        return WheelZoomTool.__super__.constructor.apply(this, arguments);\n    }\n    WheelZoomTool.prototype.default_view = exports.WheelZoomToolView;\n    WheelZoomTool.prototype.type = \"WheelZoomTool\";\n    WheelZoomTool.prototype.tool_name = \"Wheel Zoom\";\n    WheelZoomTool.prototype.icon = \"bk-tool-icon-wheel-zoom\";\n    WheelZoomTool.prototype.event_type = ('ontouchstart' in window || navigator.maxTouchPoints > 0) ? 'pinch' : 'scroll';\n    WheelZoomTool.prototype.default_order = 10;\n    WheelZoomTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(this.tool_name, this.dimensions);\n        }\n    });\n    WheelZoomTool.define({\n        dimensions: [p.Dimensions, \"both\"]\n    });\n    WheelZoomTool.internal({\n        speed: [p.Number, 1 / 600]\n    });\n    return WheelZoomTool;\n})(gesture_tool_1.GestureTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar action_tool_1 = require(\"./actions/action_tool\");\nexports.ActionTool = action_tool_1.ActionTool;\nvar help_tool_1 = require(\"./actions/help_tool\");\nexports.HelpTool = help_tool_1.HelpTool;\nvar redo_tool_1 = require(\"./actions/redo_tool\");\nexports.RedoTool = redo_tool_1.RedoTool;\nvar reset_tool_1 = require(\"./actions/reset_tool\");\nexports.ResetTool = reset_tool_1.ResetTool;\nvar save_tool_1 = require(\"./actions/save_tool\");\nexports.SaveTool = save_tool_1.SaveTool;\nvar undo_tool_1 = require(\"./actions/undo_tool\");\nexports.UndoTool = undo_tool_1.UndoTool;\nvar zoom_in_tool_1 = require(\"./actions/zoom_in_tool\");\nexports.ZoomInTool = zoom_in_tool_1.ZoomInTool;\nvar zoom_out_tool_1 = require(\"./actions/zoom_out_tool\");\nexports.ZoomOutTool = zoom_out_tool_1.ZoomOutTool;\nvar button_tool_1 = require(\"./button_tool\");\nexports.ButtonTool = button_tool_1.ButtonTool;\nvar box_select_tool_1 = require(\"./gestures/box_select_tool\");\nexports.BoxSelectTool = box_select_tool_1.BoxSelectTool;\nvar box_zoom_tool_1 = require(\"./gestures/box_zoom_tool\");\nexports.BoxZoomTool = box_zoom_tool_1.BoxZoomTool;\nvar gesture_tool_1 = require(\"./gestures/gesture_tool\");\nexports.GestureTool = gesture_tool_1.GestureTool;\nvar lasso_select_tool_1 = require(\"./gestures/lasso_select_tool\");\nexports.LassoSelectTool = lasso_select_tool_1.LassoSelectTool;\nvar pan_tool_1 = require(\"./gestures/pan_tool\");\nexports.PanTool = pan_tool_1.PanTool;\nvar poly_select_tool_1 = require(\"./gestures/poly_select_tool\");\nexports.PolySelectTool = poly_select_tool_1.PolySelectTool;\nvar resize_tool_1 = require(\"./gestures/resize_tool\");\nexports.ResizeTool = resize_tool_1.ResizeTool;\nvar select_tool_1 = require(\"./gestures/select_tool\");\nexports.SelectTool = select_tool_1.SelectTool;\nvar tap_tool_1 = require(\"./gestures/tap_tool\");\nexports.TapTool = tap_tool_1.TapTool;\nvar wheel_pan_tool_1 = require(\"./gestures/wheel_pan_tool\");\nexports.WheelPanTool = wheel_pan_tool_1.WheelPanTool;\nvar wheel_zoom_tool_1 = require(\"./gestures/wheel_zoom_tool\");\nexports.WheelZoomTool = wheel_zoom_tool_1.WheelZoomTool;\nvar crosshair_tool_1 = require(\"./inspectors/crosshair_tool\");\nexports.CrosshairTool = crosshair_tool_1.CrosshairTool;\nvar hover_tool_1 = require(\"./inspectors/hover_tool\");\nexports.HoverTool = hover_tool_1.HoverTool;\nvar inspect_tool_1 = require(\"./inspectors/inspect_tool\");\nexports.InspectTool = inspect_tool_1.InspectTool;\nvar tool_1 = require(\"./tool\");\nexports.Tool = tool_1.Tool;\nvar tool_events_1 = require(\"./tool_events\");\nexports.ToolEvents = tool_events_1.ToolEvents;\nvar tool_proxy_1 = require(\"./tool_proxy\");\nexports.ToolProxy = tool_proxy_1.ToolProxy;\nvar toolbar_1 = require(\"./toolbar\");\nexports.Toolbar = toolbar_1.Toolbar;\nvar toolbar_base_1 = require(\"./toolbar_base\");\nexports.ToolbarBase = toolbar_base_1.ToolbarBase;\nvar toolbar_box_1 = require(\"./toolbar_box\");\nexports.ToolbarBoxToolbar = toolbar_box_1.ToolbarBoxToolbar;\nvar toolbar_box_2 = require(\"./toolbar_box\");\nexports.ToolbarBox = toolbar_box_2.ToolbarBox;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar inspect_tool_1 = require(\"./inspect_tool\");\nvar span_1 = require(\"../../annotations/span\");\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nexports.CrosshairToolView = (function (superClass) {\n    extend(CrosshairToolView, superClass);\n    function CrosshairToolView() {\n        return CrosshairToolView.__super__.constructor.apply(this, arguments);\n    }\n    CrosshairToolView.prototype._move = function (e) {\n        var canvas, frame, vx, vy;\n        if (!this.model.active) {\n            return;\n        }\n        frame = this.plot_model.frame;\n        canvas = this.plot_model.canvas;\n        vx = canvas.sx_to_vx(e.bokeh.sx);\n        vy = canvas.sy_to_vy(e.bokeh.sy);\n        if (!frame.contains(vx, vy)) {\n            vx = vy = null;\n        }\n        return this._update_spans(vx, vy);\n    };\n    CrosshairToolView.prototype._move_exit = function (e) {\n        return this._update_spans(null, null);\n    };\n    CrosshairToolView.prototype._update_spans = function (x, y) {\n        var dims;\n        dims = this.model.dimensions;\n        if (dims === 'width' || dims === 'both') {\n            this.model.spans.width.computed_location = y;\n        }\n        if (dims === 'height' || dims === 'both') {\n            return this.model.spans.height.computed_location = x;\n        }\n    };\n    return CrosshairToolView;\n})(inspect_tool_1.InspectToolView);\nexports.CrosshairTool = (function (superClass) {\n    extend(CrosshairTool, superClass);\n    function CrosshairTool() {\n        return CrosshairTool.__super__.constructor.apply(this, arguments);\n    }\n    CrosshairTool.prototype.default_view = exports.CrosshairToolView;\n    CrosshairTool.prototype.type = \"CrosshairTool\";\n    CrosshairTool.prototype.tool_name = \"Crosshair\";\n    CrosshairTool.prototype.icon = \"bk-tool-icon-crosshair\";\n    CrosshairTool.define({\n        dimensions: [p.Dimensions, \"both\"],\n        line_color: [p.Color, 'black'],\n        line_width: [p.Number, 1],\n        line_alpha: [p.Number, 1.0]\n    });\n    CrosshairTool.internal({\n        location_units: [p.SpatialUnits, \"screen\"],\n        render_mode: [p.RenderMode, \"css\"],\n        spans: [p.Any]\n    });\n    CrosshairTool.getters({\n        tooltip: function () {\n            return this._get_dim_tooltip(\"Crosshair\", this.dimensions);\n        },\n        synthetic_renderers: function () {\n            return object_1.values(this.spans);\n        }\n    });\n    CrosshairTool.prototype.initialize = function (attrs, options) {\n        CrosshairTool.__super__.initialize.call(this, attrs, options);\n        return this.spans = {\n            width: new span_1.Span({\n                for_hover: true,\n                dimension: \"width\",\n                render_mode: this.render_mode,\n                location_units: this.location_units,\n                line_color: this.line_color,\n                line_width: this.line_width,\n                line_alpha: this.line_alpha\n            }),\n            height: new span_1.Span({\n                for_hover: true,\n                dimension: \"height\",\n                render_mode: this.render_mode,\n                location_units: this.location_units,\n                line_color: this.line_color,\n                line_width: this.line_width,\n                line_alpha: this.line_alpha\n            })\n        };\n    };\n    return CrosshairTool;\n})(inspect_tool_1.InspectTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _color_to_hex, extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar inspect_tool_1 = require(\"./inspect_tool\");\nvar tooltip_1 = require(\"../../annotations/tooltip\");\nvar glyph_renderer_1 = require(\"../../renderers/glyph_renderer\");\nvar hittest = require(\"core/hittest\");\nvar templating_1 = require(\"core/util/templating\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nvar types_1 = require(\"core/util/types\");\nvar build_views_1 = require(\"core/build_views\");\n_color_to_hex = function (color) {\n    var blue, digits, green, red, rgb;\n    if (color.substr(0, 1) === '#') {\n        return color;\n    }\n    digits = /(.*?)rgb\\((\\d+), (\\d+), (\\d+)\\)/.exec(color);\n    red = parseInt(digits[2]);\n    green = parseInt(digits[3]);\n    blue = parseInt(digits[4]);\n    rgb = blue | (green << 8) | (red << 16);\n    return digits[1] + '#' + rgb.toString(16);\n};\nexports.HoverToolView = (function (superClass) {\n    extend(HoverToolView, superClass);\n    function HoverToolView() {\n        return HoverToolView.__super__.constructor.apply(this, arguments);\n    }\n    HoverToolView.prototype.initialize = function (options) {\n        HoverToolView.__super__.initialize.call(this, options);\n        return this.ttviews = {};\n    };\n    HoverToolView.prototype.remove = function () {\n        build_views_1.remove_views(this.ttviews);\n        return HoverToolView.__super__.remove.call(this);\n    };\n    HoverToolView.prototype.connect_signals = function () {\n        var k, len, r, ref;\n        HoverToolView.__super__.connect_signals.call(this);\n        ref = this.computed_renderers;\n        for (k = 0, len = ref.length; k < len; k++) {\n            r = ref[k];\n            this.connect(r.data_source.inspect, this._update);\n        }\n        this.connect(this.model.properties.renderers.change, function () {\n            return this._computed_renderers = this._ttmodels = null;\n        });\n        this.connect(this.model.properties.names.change, function () {\n            return this._computed_renderers = this._ttmodels = null;\n        });\n        this.connect(this.model.properties.plot.change, function () {\n            return this._computed_renderers = this._ttmodels = null;\n        });\n        return this.connect(this.model.properties.tooltips.change, function () {\n            return this._ttmodels = null;\n        });\n    };\n    HoverToolView.prototype._compute_renderers = function () {\n        var all_renderers, names, r, renderers;\n        renderers = this.model.renderers;\n        names = this.model.names;\n        if (renderers.length === 0) {\n            all_renderers = this.model.plot.renderers;\n            renderers = (function () {\n                var k, len, results;\n                results = [];\n                for (k = 0, len = all_renderers.length; k < len; k++) {\n                    r = all_renderers[k];\n                    if (r instanceof glyph_renderer_1.GlyphRenderer) {\n                        results.push(r);\n                    }\n                }\n                return results;\n            })();\n        }\n        if (names.length > 0) {\n            renderers = (function () {\n                var k, len, results;\n                results = [];\n                for (k = 0, len = renderers.length; k < len; k++) {\n                    r = renderers[k];\n                    if (names.indexOf(r.name) >= 0) {\n                        results.push(r);\n                    }\n                }\n                return results;\n            })();\n        }\n        return renderers;\n    };\n    HoverToolView.prototype._compute_ttmodels = function () {\n        var k, l, len, len1, new_views, r, ref, tooltip, tooltips, ttmodels, view;\n        ttmodels = {};\n        tooltips = this.model.tooltips;\n        if (tooltips != null) {\n            ref = this.computed_renderers;\n            for (k = 0, len = ref.length; k < len; k++) {\n                r = ref[k];\n                tooltip = new tooltip_1.Tooltip({\n                    custom: types_1.isString(tooltips) || types_1.isFunction(tooltips),\n                    attachment: this.model.attachment,\n                    show_arrow: this.model.show_arrow\n                });\n                ttmodels[r.id] = tooltip;\n            }\n        }\n        new_views = build_views_1.build_views(this.ttviews, object_1.values(ttmodels), {\n            parent: this,\n            plot_view: this.plot_view\n        });\n        for (l = 0, len1 = new_views.length; l < len1; l++) {\n            view = new_views[l];\n            view.connect_signals();\n        }\n        return ttmodels;\n    };\n    HoverToolView.getters({\n        computed_renderers: function () {\n            if (this._computed_renderers == null) {\n                this._computed_renderers = this._compute_renderers();\n            }\n            return this._computed_renderers;\n        },\n        ttmodels: function () {\n            if (this._ttmodels == null) {\n                this._ttmodels = this._compute_ttmodels();\n            }\n            return this._ttmodels;\n        }\n    });\n    HoverToolView.prototype._clear = function () {\n        var ref, results, rid, tt;\n        this._inspect(2e308, 2e308);\n        ref = this.ttmodels;\n        results = [];\n        for (rid in ref) {\n            tt = ref[rid];\n            results.push(tt.clear());\n        }\n        return results;\n    };\n    HoverToolView.prototype._move = function (e) {\n        var canvas, vx, vy;\n        if (!this.model.active) {\n            return;\n        }\n        canvas = this.plot_view.canvas;\n        vx = canvas.sx_to_vx(e.bokeh.sx);\n        vy = canvas.sy_to_vy(e.bokeh.sy);\n        if (!this.plot_view.frame.contains(vx, vy)) {\n            return this._clear();\n        }\n        else {\n            return this._inspect(vx, vy);\n        }\n    };\n    HoverToolView.prototype._move_exit = function () {\n        return this._clear();\n    };\n    HoverToolView.prototype._inspect = function (vx, vy, e) {\n        var geometry, hovered_indexes, hovered_renderers, k, len, r, ref, sm;\n        geometry = {\n            type: 'point',\n            vx: vx,\n            vy: vy\n        };\n        if (this.model.mode === 'mouse') {\n            geometry['type'] = 'point';\n        }\n        else {\n            geometry['type'] = 'span';\n            if (this.model.mode === 'vline') {\n                geometry.direction = 'h';\n            }\n            else {\n                geometry.direction = 'v';\n            }\n        }\n        hovered_indexes = [];\n        hovered_renderers = [];\n        ref = this.computed_renderers;\n        for (k = 0, len = ref.length; k < len; k++) {\n            r = ref[k];\n            sm = r.data_source.selection_manager;\n            sm.inspect(this, this.plot_view.renderer_views[r.id], geometry, {\n                \"geometry\": geometry\n            });\n        }\n        if (this.model.callback != null) {\n            this._emit_callback(geometry);\n        }\n    };\n    HoverToolView.prototype._update = function (arg) {\n        var canvas, d1x, d1y, d2x, d2y, data_x, data_y, dist1, dist2, ds, frame, geometry, i, ii, indices, j, jj, k, l, len, len1, pt, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, renderer, rx, ry, sdatax, sdatay, sx, sy, tool, tooltip, vars, vx, vy, x, xscale, y, yscale;\n        indices = arg[0], tool = arg[1], renderer = arg[2], ds = arg[3], (ref = arg[4], geometry = ref.geometry);\n        if (!this.model.active) {\n            return;\n        }\n        tooltip = (ref1 = this.ttmodels[renderer.model.id]) != null ? ref1 : null;\n        if (tooltip == null) {\n            return;\n        }\n        tooltip.clear();\n        if (indices['0d'].glyph === null && indices['1d'].indices.length === 0) {\n            return;\n        }\n        vx = geometry.vx;\n        vy = geometry.vy;\n        canvas = this.plot_model.canvas;\n        frame = this.plot_model.frame;\n        sx = canvas.vx_to_sx(vx);\n        sy = canvas.vy_to_sy(vy);\n        xscale = frame.xscales[renderer.model.x_range_name];\n        yscale = frame.yscales[renderer.model.y_range_name];\n        x = xscale.invert(vx);\n        y = yscale.invert(vy);\n        ref2 = indices['0d'].indices;\n        for (k = 0, len = ref2.length; k < len; k++) {\n            i = ref2[k];\n            data_x = renderer.glyph._x[i + 1];\n            data_y = renderer.glyph._y[i + 1];\n            ii = i;\n            switch (this.model.line_policy) {\n                case \"interp\":\n                    ref3 = renderer.glyph.get_interpolation_hit(i, geometry), data_x = ref3[0], data_y = ref3[1];\n                    rx = xscale.compute(data_x);\n                    ry = yscale.compute(data_y);\n                    break;\n                case \"prev\":\n                    rx = canvas.sx_to_vx(renderer.glyph.sx[i]);\n                    ry = canvas.sy_to_vy(renderer.glyph.sy[i]);\n                    break;\n                case \"next\":\n                    rx = canvas.sx_to_vx(renderer.glyph.sx[i + 1]);\n                    ry = canvas.sy_to_vy(renderer.glyph.sy[i + 1]);\n                    ii = i + 1;\n                    break;\n                case \"nearest\":\n                    d1x = renderer.glyph.sx[i];\n                    d1y = renderer.glyph.sy[i];\n                    dist1 = hittest.dist_2_pts(d1x, d1y, sx, sy);\n                    d2x = renderer.glyph.sx[i + 1];\n                    d2y = renderer.glyph.sy[i + 1];\n                    dist2 = hittest.dist_2_pts(d2x, d2y, sx, sy);\n                    if (dist1 < dist2) {\n                        ref4 = [d1x, d1y], sdatax = ref4[0], sdatay = ref4[1];\n                    }\n                    else {\n                        ref5 = [d2x, d2y], sdatax = ref5[0], sdatay = ref5[1];\n                        ii = i + 1;\n                    }\n                    data_x = renderer.glyph._x[i];\n                    data_y = renderer.glyph._y[i];\n                    rx = canvas.sx_to_vx(sdatax);\n                    ry = canvas.sy_to_vy(sdatay);\n                    break;\n                default:\n                    ref6 = [vx, vy], rx = ref6[0], ry = ref6[1];\n            }\n            vars = {\n                index: ii,\n                x: x,\n                y: y,\n                vx: vx,\n                vy: vy,\n                sx: sx,\n                sy: sy,\n                data_x: data_x,\n                data_y: data_y,\n                rx: rx,\n                ry: ry\n            };\n            tooltip.add(rx, ry, this._render_tooltips(ds, ii, vars));\n        }\n        ref7 = indices['1d'].indices;\n        for (l = 0, len1 = ref7.length; l < len1; l++) {\n            i = ref7[l];\n            if (!object_1.isEmpty(indices['2d'].indices)) {\n                ref8 = indices['2d'].indices;\n                for (i in ref8) {\n                    j = ref8[i][0];\n                    data_x = renderer.glyph._xs[i][j];\n                    data_y = renderer.glyph._ys[i][j];\n                    jj = j;\n                    switch (this.model.line_policy) {\n                        case \"interp\":\n                            ref9 = renderer.glyph.get_interpolation_hit(i, j, geometry), data_x = ref9[0], data_y = ref9[1];\n                            rx = xscale.compute(data_x);\n                            ry = yscale.compute(data_y);\n                            break;\n                        case \"prev\":\n                            rx = canvas.sx_to_vx(renderer.glyph.sxs[i][j]);\n                            ry = canvas.sy_to_vy(renderer.glyph.sys[i][j]);\n                            break;\n                        case \"next\":\n                            rx = canvas.sx_to_vx(renderer.glyph.sxs[i][j + 1]);\n                            ry = canvas.sy_to_vy(renderer.glyph.sys[i][j + 1]);\n                            jj = j + 1;\n                            break;\n                        case \"nearest\":\n                            d1x = renderer.glyph.sxs[i][j];\n                            d1y = renderer.glyph.sys[i][j];\n                            dist1 = hittest.dist_2_pts(d1x, d1y, sx, sy);\n                            d2x = renderer.glyph.sxs[i][j + 1];\n                            d2y = renderer.glyph.sys[i][j + 1];\n                            dist2 = hittest.dist_2_pts(d2x, d2y, sx, sy);\n                            if (dist1 < dist2) {\n                                ref10 = [d1x, d1y], sdatax = ref10[0], sdatay = ref10[1];\n                            }\n                            else {\n                                ref11 = [d2x, d2y], sdatax = ref11[0], sdatay = ref11[1];\n                                jj = j + 1;\n                            }\n                            data_x = renderer.glyph._xs[i][j];\n                            data_y = renderer.glyph._ys[i][j];\n                            rx = canvas.sx_to_vx(sdatax);\n                            ry = canvas.sy_to_vy(sdatay);\n                    }\n                    vars = {\n                        index: i,\n                        segment_index: jj,\n                        x: x,\n                        y: y,\n                        vx: vx,\n                        vy: vy,\n                        sx: sx,\n                        sy: sy,\n                        data_x: data_x,\n                        data_y: data_y\n                    };\n                    tooltip.add(rx, ry, this._render_tooltips(ds, i, vars));\n                }\n            }\n            else {\n                data_x = (ref12 = renderer.glyph._x) != null ? ref12[i] : void 0;\n                data_y = (ref13 = renderer.glyph._y) != null ? ref13[i] : void 0;\n                if (this.model.point_policy === 'snap_to_data') {\n                    pt = renderer.glyph.get_anchor_point(this.model.anchor, i, [sx, sy]);\n                    if (pt == null) {\n                        pt = renderer.glyph.get_anchor_point(\"center\", i, [sx, sy]);\n                    }\n                    rx = canvas.sx_to_vx(pt.x);\n                    ry = canvas.sy_to_vy(pt.y);\n                }\n                else {\n                    ref14 = [vx, vy], rx = ref14[0], ry = ref14[1];\n                }\n                vars = {\n                    index: i,\n                    x: x,\n                    y: y,\n                    vx: vx,\n                    vy: vy,\n                    sx: sx,\n                    sy: sy,\n                    data_x: data_x,\n                    data_y: data_y\n                };\n                tooltip.add(rx, ry, this._render_tooltips(ds, i, vars));\n            }\n        }\n        return null;\n    };\n    HoverToolView.prototype._emit_callback = function (geometry) {\n        var callback, canvas, data, frame, indices, obj, r, ref, xscale, yscale;\n        r = this.computed_renderers[0];\n        indices = this.plot_view.renderer_views[r.id].hit_test(geometry);\n        canvas = this.plot_model.canvas;\n        frame = this.plot_model.frame;\n        geometry['sx'] = canvas.vx_to_sx(geometry.vx);\n        geometry['sy'] = canvas.vy_to_sy(geometry.vy);\n        xscale = frame.xscales[r.x_range_name];\n        yscale = frame.yscales[r.y_range_name];\n        geometry['x'] = xscale.invert(geometry.vx);\n        geometry['y'] = yscale.invert(geometry.vy);\n        callback = this.model.callback;\n        ref = [\n            callback, {\n                index: indices,\n                geometry: geometry,\n                renderer: r\n            }\n        ], obj = ref[0], data = ref[1];\n        if (types_1.isFunction(callback)) {\n            callback(obj, data);\n        }\n        else {\n            callback.execute(obj, data);\n        }\n    };\n    HoverToolView.prototype._render_tooltips = function (ds, i, vars) {\n        var cell, colname, color, column, el, hex, k, label, len, match, opts, ref, ref1, row, rows, swatch, tooltips, value;\n        tooltips = this.model.tooltips;\n        if (types_1.isString(tooltips)) {\n            el = dom_1.div();\n            el.innerHTML = templating_1.replace_placeholders(tooltips, ds, i, this.model.formatters, vars);\n            return el;\n        }\n        else if (types_1.isFunction(tooltips)) {\n            return tooltips(ds, vars);\n        }\n        else {\n            rows = dom_1.div({\n                style: {\n                    display: \"table\",\n                    borderSpacing: \"2px\"\n                }\n            });\n            for (k = 0, len = tooltips.length; k < len; k++) {\n                ref = tooltips[k], label = ref[0], value = ref[1];\n                row = dom_1.div({\n                    style: {\n                        display: \"table-row\"\n                    }\n                });\n                rows.appendChild(row);\n                cell = dom_1.div({\n                    style: {\n                        display: \"table-cell\"\n                    },\n                    \"class\": 'bk-tooltip-row-label'\n                }, label + \": \");\n                row.appendChild(cell);\n                cell = dom_1.div({\n                    style: {\n                        display: \"table-cell\"\n                    },\n                    \"class\": 'bk-tooltip-row-value'\n                });\n                row.appendChild(cell);\n                if (value.indexOf(\"$color\") >= 0) {\n                    ref1 = value.match(/\\$color(\\[.*\\])?:(\\w*)/), match = ref1[0], opts = ref1[1], colname = ref1[2];\n                    column = ds.get_column(colname);\n                    if (column == null) {\n                        el = dom_1.span({}, colname + \" unknown\");\n                        cell.appendChild(el);\n                        continue;\n                    }\n                    hex = (opts != null ? opts.indexOf(\"hex\") : void 0) >= 0;\n                    swatch = (opts != null ? opts.indexOf(\"swatch\") : void 0) >= 0;\n                    color = column[i];\n                    if (color == null) {\n                        el = dom_1.span({}, \"(null)\");\n                        cell.appendChild(el);\n                        continue;\n                    }\n                    if (hex) {\n                        color = _color_to_hex(color);\n                    }\n                    el = dom_1.span({}, color);\n                    cell.appendChild(el);\n                    if (swatch) {\n                        el = dom_1.span({\n                            \"class\": 'bk-tooltip-color-block',\n                            style: {\n                                backgroundColor: color\n                            }\n                        }, \" \");\n                        cell.appendChild(el);\n                    }\n                }\n                else {\n                    value = value.replace(\"$~\", \"$data_\");\n                    el = dom_1.span();\n                    el.innerHTML = templating_1.replace_placeholders(value, ds, i, this.model.formatters, vars);\n                    cell.appendChild(el);\n                }\n            }\n            return rows;\n        }\n    };\n    return HoverToolView;\n})(inspect_tool_1.InspectToolView);\nexports.HoverTool = (function (superClass) {\n    extend(HoverTool, superClass);\n    function HoverTool() {\n        return HoverTool.__super__.constructor.apply(this, arguments);\n    }\n    HoverTool.prototype.default_view = exports.HoverToolView;\n    HoverTool.prototype.type = \"HoverTool\";\n    HoverTool.prototype.tool_name = \"Hover\";\n    HoverTool.prototype.icon = \"bk-tool-icon-hover\";\n    HoverTool.define({\n        tooltips: [p.Any, [[\"index\", \"$index\"], [\"data (x, y)\", \"($x, $y)\"], [\"canvas (x, y)\", \"($sx, $sy)\"]]],\n        formatters: [p.Any, {}],\n        renderers: [p.Array, []],\n        names: [p.Array, []],\n        mode: [p.String, 'mouse'],\n        point_policy: [p.String, 'snap_to_data'],\n        line_policy: [p.String, 'nearest'],\n        show_arrow: [p.Boolean, true],\n        anchor: [p.String, 'center'],\n        attachment: [p.String, 'horizontal'],\n        callback: [p.Any]\n    });\n    return HoverTool;\n})(inspect_tool_1.InspectTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar button_tool_1 = require(\"../button_tool\");\nexports.InspectToolView = (function (superClass) {\n    extend(InspectToolView, superClass);\n    function InspectToolView() {\n        return InspectToolView.__super__.constructor.apply(this, arguments);\n    }\n    return InspectToolView;\n})(button_tool_1.ButtonToolView);\nexports.InspectTool = (function (superClass) {\n    extend(InspectTool, superClass);\n    function InspectTool() {\n        return InspectTool.__super__.constructor.apply(this, arguments);\n    }\n    InspectTool.prototype.event_type = \"move\";\n    InspectTool.define({\n        toggleable: [p.Bool, true]\n    });\n    InspectTool.override({\n        active: true\n    });\n    return InspectTool;\n})(button_tool_1.ButtonTool);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar button_tool_1 = require(\"./button_tool\");\nexports.OnOffButtonView = (function (superClass) {\n    extend(OnOffButtonView, superClass);\n    function OnOffButtonView() {\n        return OnOffButtonView.__super__.constructor.apply(this, arguments);\n    }\n    OnOffButtonView.prototype.render = function () {\n        OnOffButtonView.__super__.render.call(this);\n        if (this.model.active) {\n            return this.el.classList.add('bk-active');\n        }\n        else {\n            return this.el.classList.remove('bk-active');\n        }\n    };\n    OnOffButtonView.prototype._clicked = function () {\n        var active;\n        active = this.model.active;\n        return this.model.active = !active;\n    };\n    return OnOffButtonView;\n})(button_tool_1.ButtonToolButtonView);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar view_1 = require(\"core/view\");\nvar array_1 = require(\"core/util/array\");\nvar model_1 = require(\"../../model\");\nexports.ToolView = (function (superClass) {\n    extend(ToolView, superClass);\n    function ToolView() {\n        return ToolView.__super__.constructor.apply(this, arguments);\n    }\n    ToolView.prototype.initialize = function (options) {\n        ToolView.__super__.initialize.call(this, options);\n        return this.plot_view = options.plot_view;\n    };\n    ToolView.getters({\n        plot_model: function () {\n            return this.plot_view.model;\n        }\n    });\n    ToolView.prototype.connect_signals = function () {\n        ToolView.__super__.connect_signals.call(this);\n        return this.connect(this.model.properties.active.change, (function (_this) {\n            return function () {\n                if (_this.model.active) {\n                    return _this.activate();\n                }\n                else {\n                    return _this.deactivate();\n                }\n            };\n        })(this));\n    };\n    ToolView.prototype.activate = function () { };\n    ToolView.prototype.deactivate = function () { };\n    return ToolView;\n})(view_1.View);\nexports.Tool = (function (superClass) {\n    extend(Tool, superClass);\n    function Tool() {\n        return Tool.__super__.constructor.apply(this, arguments);\n    }\n    Tool.getters({\n        synthetic_renderers: function () {\n            return [];\n        }\n    });\n    Tool.define({\n        plot: [p.Instance]\n    });\n    Tool.internal({\n        active: [p.Boolean, false]\n    });\n    Tool.prototype._get_dim_tooltip = function (name, dims) {\n        switch (dims) {\n            case 'width':\n                return name + \" (x-axis)\";\n            case 'height':\n                return name + \" (y-axis)\";\n            case 'both':\n                return name;\n        }\n    };\n    Tool.prototype._get_dim_limits = function (arg, arg1, frame, dims) {\n        var hr, vr, vx0, vx1, vxlim, vy0, vy1, vylim;\n        vx0 = arg[0], vy0 = arg[1];\n        vx1 = arg1[0], vy1 = arg1[1];\n        hr = frame.h_range;\n        if (dims === 'width' || dims === 'both') {\n            vxlim = [array_1.min([vx0, vx1]), array_1.max([vx0, vx1])];\n            vxlim = [array_1.max([vxlim[0], hr.min]), array_1.min([vxlim[1], hr.max])];\n        }\n        else {\n            vxlim = [hr.min, hr.max];\n        }\n        vr = frame.v_range;\n        if (dims === 'height' || dims === 'both') {\n            vylim = [array_1.min([vy0, vy1]), array_1.max([vy0, vy1])];\n            vylim = [array_1.max([vylim[0], vr.min]), array_1.min([vylim[1], vr.max])];\n        }\n        else {\n            vylim = [vr.min, vr.max];\n        }\n        return [vxlim, vylim];\n    };\n    return Tool;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nvar p = require(\"core/properties\");\nexports.ToolEvents = (function (superClass) {\n    extend(ToolEvents, superClass);\n    function ToolEvents() {\n        return ToolEvents.__super__.constructor.apply(this, arguments);\n    }\n    ToolEvents.prototype.type = 'ToolEvents';\n    ToolEvents.define({\n        geometries: [p.Array, []]\n    });\n    return ToolEvents;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar p = require(\"core/properties\");\nvar signaling_1 = require(\"core/signaling\");\nvar model_1 = require(\"../../model\");\nexports.ToolProxy = (function (superClass) {\n    extend(ToolProxy, superClass);\n    function ToolProxy() {\n        return ToolProxy.__super__.constructor.apply(this, arguments);\n    }\n    ToolProxy.prototype.initialize = function (options) {\n        ToolProxy.__super__.initialize.call(this, options);\n        this[\"do\"] = new signaling_1.Signal(this, \"do\");\n        this.connect(this[\"do\"], function () {\n            return this.doit();\n        });\n        return this.connect(this.properties.active.change, function () {\n            return this.set_active();\n        });\n    };\n    ToolProxy.prototype.doit = function () {\n        var i, len, ref, tool;\n        ref = this.tools;\n        for (i = 0, len = ref.length; i < len; i++) {\n            tool = ref[i];\n            tool[\"do\"].emit();\n        }\n        return null;\n    };\n    ToolProxy.prototype.set_active = function () {\n        var i, len, ref, tool;\n        ref = this.tools;\n        for (i = 0, len = ref.length; i < len; i++) {\n            tool = ref[i];\n            tool.active = this.active;\n        }\n        return null;\n    };\n    ToolProxy.define({\n        tools: [p.Array, []],\n        active: [p.Bool, false],\n        tooltip: [p.String],\n        tool_name: [p.String],\n        disabled: [p.Bool, false],\n        event_type: [p.String],\n        icon: [p.String]\n    });\n    ToolProxy.prototype._clicked = function () {\n        var active;\n        active = this.model.active;\n        return this.model.active = !active;\n    };\n    return ToolProxy;\n})(model_1.Model);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nvar action_tool_1 = require(\"./actions/action_tool\");\nvar help_tool_1 = require(\"./actions/help_tool\");\nvar gesture_tool_1 = require(\"./gestures/gesture_tool\");\nvar inspect_tool_1 = require(\"./inspectors/inspect_tool\");\nvar toolbar_base_1 = require(\"./toolbar_base\");\nexports.Toolbar = (function (superClass) {\n    extend(Toolbar, superClass);\n    function Toolbar() {\n        return Toolbar.__super__.constructor.apply(this, arguments);\n    }\n    Toolbar.prototype.type = 'Toolbar';\n    Toolbar.prototype.default_view = toolbar_base_1.ToolbarBaseView;\n    Toolbar.prototype.initialize = function (attrs, options) {\n        Toolbar.__super__.initialize.call(this, attrs, options);\n        this.connect(this.properties.tools.change, function () {\n            return this._init_tools();\n        });\n        return this._init_tools();\n    };\n    Toolbar.prototype._init_tools = function () {\n        var et, i, len, ref, results, tool, tools;\n        ref = this.tools;\n        for (i = 0, len = ref.length; i < len; i++) {\n            tool = ref[i];\n            if (tool instanceof inspect_tool_1.InspectTool) {\n                if (!array_1.any(this.inspectors, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    this.inspectors = this.inspectors.concat([tool]);\n                }\n            }\n            else if (tool instanceof help_tool_1.HelpTool) {\n                if (!array_1.any(this.help, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    this.help = this.help.concat([tool]);\n                }\n            }\n            else if (tool instanceof action_tool_1.ActionTool) {\n                if (!array_1.any(this.actions, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    this.actions = this.actions.concat([tool]);\n                }\n            }\n            else if (tool instanceof gesture_tool_1.GestureTool) {\n                et = tool.event_type;\n                if (!(et in this.gestures)) {\n                    logger.warn(\"Toolbar: unknown event type '\" + et + \"' for tool: \" + tool.type + \" (\" + tool.id + \")\");\n                    continue;\n                }\n                if (!array_1.any(this.gestures[et].tools, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    this.gestures[et].tools = this.gestures[et].tools.concat([tool]);\n                }\n                this.connect(tool.properties.active.change, this._active_change.bind(null, tool));\n            }\n        }\n        if (this.active_inspect === 'auto') {\n        }\n        else if (this.active_inspect instanceof inspect_tool_1.InspectTool) {\n            this.inspectors.map((function (_this) {\n                return function (inspector) {\n                    if (inspector !== _this.active_inspect) {\n                        return inspector.active = false;\n                    }\n                };\n            })(this));\n        }\n        else if (this.active_inspect instanceof Array) {\n            this.inspectors.map((function (_this) {\n                return function (inspector) {\n                    if (indexOf.call(_this.active_inspect, inspector) < 0) {\n                        return inspector.active = false;\n                    }\n                };\n            })(this));\n        }\n        else if (this.active_inspect === null) {\n            this.inspectors.map(function (inspector) {\n                return inspector.active = false;\n            });\n        }\n        results = [];\n        for (et in this.gestures) {\n            tools = this.gestures[et].tools;\n            if (tools.length === 0) {\n                continue;\n            }\n            this.gestures[et].tools = array_1.sortBy(tools, function (tool) {\n                return tool.default_order;\n            });\n            if (et === 'tap') {\n                if (this.active_tap === null) {\n                    continue;\n                }\n                if (this.active_tap === 'auto') {\n                    this.gestures[et].tools[0].active = true;\n                }\n                else {\n                    this.active_tap.active = true;\n                }\n            }\n            if (et === 'pan') {\n                if (this.active_drag === null) {\n                    continue;\n                }\n                if (this.active_drag === 'auto') {\n                    this.gestures[et].tools[0].active = true;\n                }\n                else {\n                    this.active_drag.active = true;\n                }\n            }\n            if (et === 'pinch' || et === 'scroll') {\n                if (this.active_scroll === null || this.active_scroll === 'auto') {\n                    continue;\n                }\n                results.push(this.active_scroll.active = true);\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    Toolbar.define({\n        active_drag: [p.Any, 'auto'],\n        active_inspect: [p.Any, 'auto'],\n        active_scroll: [p.Any, 'auto'],\n        active_tap: [p.Any, 'auto']\n    });\n    return Toolbar;\n})(toolbar_base_1.ToolbarBase);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, bind = function (fn, me) { return function () { return fn.apply(me, arguments); }; };\nvar logging_1 = require(\"core/logging\");\nvar solver_1 = require(\"core/layout/solver\");\nvar dom_1 = require(\"core/dom\");\nvar p = require(\"core/properties\");\nvar layout_dom_1 = require(\"../layouts/layout_dom\");\nvar action_tool_1 = require(\"./actions/action_tool\");\nvar on_off_button_1 = require(\"./on_off_button\");\nvar toolbar_template_1 = require(\"./toolbar_template\");\nexports.ToolbarBaseView = (function (superClass) {\n    extend(ToolbarBaseView, superClass);\n    function ToolbarBaseView() {\n        return ToolbarBaseView.__super__.constructor.apply(this, arguments);\n    }\n    ToolbarBaseView.prototype.className = \"bk-toolbar-wrapper\";\n    ToolbarBaseView.prototype.template = toolbar_template_1.default;\n    ToolbarBaseView.prototype.render = function () {\n        var buttons, et, gestures, i, j, k, l, len, len1, len2, len3, obj, ref, ref1, ref2, ref3;\n        dom_1.empty(this.el);\n        if (this.model.sizing_mode !== 'fixed') {\n            this.el.style.left = this.model._dom_left.value + \"px\";\n            this.el.style.top = this.model._dom_top.value + \"px\";\n            this.el.style.width = this.model._width.value + \"px\";\n            this.el.style.height = this.model._height.value + \"px\";\n        }\n        this.el.appendChild(this.template({\n            logo: this.model.logo,\n            location: this.model.toolbar_location,\n            sticky: this.model.toolbar_sticky ? 'sticky' : 'not-sticky'\n        }));\n        buttons = this.el.querySelector(\".bk-button-bar-list[type='inspectors']\");\n        ref = this.model.inspectors;\n        for (i = 0, len = ref.length; i < len; i++) {\n            obj = ref[i];\n            if (obj.toggleable) {\n                buttons.appendChild(new on_off_button_1.OnOffButtonView({\n                    model: obj,\n                    parent: this\n                }).el);\n            }\n        }\n        buttons = this.el.querySelector(\".bk-button-bar-list[type='help']\");\n        ref1 = this.model.help;\n        for (j = 0, len1 = ref1.length; j < len1; j++) {\n            obj = ref1[j];\n            buttons.appendChild(new action_tool_1.ActionToolButtonView({\n                model: obj,\n                parent: this\n            }).el);\n        }\n        buttons = this.el.querySelector(\".bk-button-bar-list[type='actions']\");\n        ref2 = this.model.actions;\n        for (k = 0, len2 = ref2.length; k < len2; k++) {\n            obj = ref2[k];\n            buttons.appendChild(new action_tool_1.ActionToolButtonView({\n                model: obj,\n                parent: this\n            }).el);\n        }\n        gestures = this.model.gestures;\n        for (et in gestures) {\n            buttons = this.el.querySelector(\".bk-button-bar-list[type='\" + et + \"']\");\n            ref3 = gestures[et].tools;\n            for (l = 0, len3 = ref3.length; l < len3; l++) {\n                obj = ref3[l];\n                buttons.appendChild(new on_off_button_1.OnOffButtonView({\n                    model: obj,\n                    parent: this\n                }).el);\n            }\n        }\n        return this;\n    };\n    return ToolbarBaseView;\n})(layout_dom_1.LayoutDOMView);\nexports.ToolbarBase = (function (superClass) {\n    extend(ToolbarBase, superClass);\n    function ToolbarBase() {\n        this._active_change = bind(this._active_change, this);\n        return ToolbarBase.__super__.constructor.apply(this, arguments);\n    }\n    ToolbarBase.prototype.type = 'ToolbarBase';\n    ToolbarBase.prototype.default_view = exports.ToolbarBaseView;\n    ToolbarBase.prototype.initialize = function (attrs, options) {\n        ToolbarBase.__super__.initialize.call(this, attrs, options);\n        this._set_sizeable();\n        return this.connect(this.properties.toolbar_location.change, (function (_this) {\n            return function () {\n                return _this._set_sizeable();\n            };\n        })(this));\n    };\n    ToolbarBase.prototype._set_sizeable = function () {\n        var horizontal, ref;\n        horizontal = (ref = this.toolbar_location) === 'left' || ref === 'right';\n        return this._sizeable = !horizontal ? this._height : this._width;\n    };\n    ToolbarBase.prototype._active_change = function (tool) {\n        var currently_active_tool, event_type;\n        event_type = tool.event_type;\n        if (tool.active) {\n            currently_active_tool = this.gestures[event_type].active;\n            if (currently_active_tool != null) {\n                logging_1.logger.debug(\"Toolbar: deactivating tool: \" + currently_active_tool.type + \" (\" + currently_active_tool.id + \") for event type '\" + event_type + \"'\");\n                currently_active_tool.active = false;\n            }\n            this.gestures[event_type].active = tool;\n            logging_1.logger.debug(\"Toolbar: activating tool: \" + tool.type + \" (\" + tool.id + \") for event type '\" + event_type + \"'\");\n        }\n        else {\n            this.gestures[event_type].active = null;\n        }\n        return null;\n    };\n    ToolbarBase.prototype.get_constraints = function () {\n        return ToolbarBase.__super__.get_constraints.call(this).concat([solver_1.EQ(this._sizeable, -30)]);\n    };\n    ToolbarBase.define({\n        tools: [p.Array, []],\n        logo: [p.String, 'normal']\n    });\n    ToolbarBase.internal({\n        gestures: [\n            p.Any, function () {\n                return {\n                    pan: {\n                        tools: [],\n                        active: null\n                    },\n                    tap: {\n                        tools: [],\n                        active: null\n                    },\n                    doubletap: {\n                        tools: [],\n                        active: null\n                    },\n                    scroll: {\n                        tools: [],\n                        active: null\n                    },\n                    pinch: {\n                        tools: [],\n                        active: null\n                    },\n                    press: {\n                        tools: [],\n                        active: null\n                    },\n                    rotate: {\n                        tools: [],\n                        active: null\n                    }\n                };\n            }\n        ],\n        actions: [p.Array, []],\n        inspectors: [p.Array, []],\n        help: [p.Array, []],\n        toolbar_location: [p.Location, 'right'],\n        toolbar_sticky: [p.Bool]\n    });\n    ToolbarBase.override({\n        sizing_mode: null\n    });\n    return ToolbarBase;\n})(layout_dom_1.LayoutDOM);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nvar action_tool_1 = require(\"./actions/action_tool\");\nvar help_tool_1 = require(\"./actions/help_tool\");\nvar gesture_tool_1 = require(\"./gestures/gesture_tool\");\nvar inspect_tool_1 = require(\"./inspectors/inspect_tool\");\nvar toolbar_base_1 = require(\"./toolbar_base\");\nvar tool_proxy_1 = require(\"./tool_proxy\");\nvar box_1 = require(\"../layouts/box\");\nexports.ToolbarBoxToolbar = (function (superClass) {\n    extend(ToolbarBoxToolbar, superClass);\n    function ToolbarBoxToolbar() {\n        return ToolbarBoxToolbar.__super__.constructor.apply(this, arguments);\n    }\n    ToolbarBoxToolbar.prototype.type = 'ToolbarBoxToolbar';\n    ToolbarBoxToolbar.prototype.default_view = toolbar_base_1.ToolbarBaseView;\n    ToolbarBoxToolbar.prototype.initialize = function (options) {\n        ToolbarBoxToolbar.__super__.initialize.call(this, options);\n        this._init_tools();\n        if (this.merge_tools === true) {\n            return this._merge_tools();\n        }\n    };\n    ToolbarBoxToolbar.define({\n        merge_tools: [p.Bool, true]\n    });\n    ToolbarBoxToolbar.prototype._init_tools = function () {\n        var et, i, len, ref, results, tool;\n        ref = this.tools;\n        results = [];\n        for (i = 0, len = ref.length; i < len; i++) {\n            tool = ref[i];\n            if (tool instanceof inspect_tool_1.InspectTool) {\n                if (!array_1.any(this.inspectors, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    results.push(this.inspectors = this.inspectors.concat([tool]));\n                }\n                else {\n                    results.push(void 0);\n                }\n            }\n            else if (tool instanceof help_tool_1.HelpTool) {\n                if (!array_1.any(this.help, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    results.push(this.help = this.help.concat([tool]));\n                }\n                else {\n                    results.push(void 0);\n                }\n            }\n            else if (tool instanceof action_tool_1.ActionTool) {\n                if (!array_1.any(this.actions, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    results.push(this.actions = this.actions.concat([tool]));\n                }\n                else {\n                    results.push(void 0);\n                }\n            }\n            else if (tool instanceof gesture_tool_1.GestureTool) {\n                et = tool.event_type;\n                if (!array_1.any(this.gestures[et].tools, (function (_this) {\n                    return function (t) {\n                        return t.id === tool.id;\n                    };\n                })(this))) {\n                    results.push(this.gestures[et].tools = this.gestures[et].tools.concat([tool]));\n                }\n                else {\n                    results.push(void 0);\n                }\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    ToolbarBoxToolbar.prototype._merge_tools = function () {\n        var actions, active, et, event_type, gestures, helptool, i, info, inspectors, j, k, l, len, len1, len2, len3, make_proxy, new_help_tools, new_help_urls, proxy, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, tool, tool_type, tools;\n        inspectors = {};\n        actions = {};\n        gestures = {};\n        new_help_tools = [];\n        new_help_urls = [];\n        ref = this.help;\n        for (i = 0, len = ref.length; i < len; i++) {\n            helptool = ref[i];\n            if (ref1 = helptool.redirect, indexOf.call(new_help_urls, ref1) < 0) {\n                new_help_tools.push(helptool);\n                new_help_urls.push(helptool.redirect);\n            }\n        }\n        this.help = new_help_tools;\n        ref2 = this.gestures;\n        for (event_type in ref2) {\n            info = ref2[event_type];\n            if (!(event_type in gestures)) {\n                gestures[event_type] = {};\n            }\n            ref3 = info.tools;\n            for (j = 0, len1 = ref3.length; j < len1; j++) {\n                tool = ref3[j];\n                if (!(tool.type in gestures[event_type])) {\n                    gestures[event_type][tool.type] = [];\n                }\n                gestures[event_type][tool.type].push(tool);\n            }\n        }\n        ref4 = this.inspectors;\n        for (k = 0, len2 = ref4.length; k < len2; k++) {\n            tool = ref4[k];\n            if (!(tool.type in inspectors)) {\n                inspectors[tool.type] = [];\n            }\n            inspectors[tool.type].push(tool);\n        }\n        ref5 = this.actions;\n        for (l = 0, len3 = ref5.length; l < len3; l++) {\n            tool = ref5[l];\n            if (!(tool.type in actions)) {\n                actions[tool.type] = [];\n            }\n            actions[tool.type].push(tool);\n        }\n        make_proxy = function (tools, active) {\n            if (active == null) {\n                active = false;\n            }\n            return new tool_proxy_1.ToolProxy({\n                tools: tools,\n                event_type: tools[0].event_type,\n                tooltip: tools[0].tool_name,\n                tool_name: tools[0].tool_name,\n                icon: tools[0].icon,\n                active: active\n            });\n        };\n        for (event_type in gestures) {\n            this.gestures[event_type].tools = [];\n            ref6 = gestures[event_type];\n            for (tool_type in ref6) {\n                tools = ref6[tool_type];\n                if (tools.length > 0) {\n                    proxy = make_proxy(tools);\n                    this.gestures[event_type].tools.push(proxy);\n                    this.connect(proxy.properties.active.change, this._active_change.bind(null, proxy));\n                }\n            }\n        }\n        this.actions = [];\n        for (tool_type in actions) {\n            tools = actions[tool_type];\n            if (tools.length > 0) {\n                this.actions.push(make_proxy(tools));\n            }\n        }\n        this.inspectors = [];\n        for (tool_type in inspectors) {\n            tools = inspectors[tool_type];\n            if (tools.length > 0) {\n                this.inspectors.push(make_proxy(tools, active = true));\n            }\n        }\n        results = [];\n        for (et in this.gestures) {\n            tools = this.gestures[et].tools;\n            if (tools.length === 0) {\n                continue;\n            }\n            this.gestures[et].tools = array_1.sortBy(tools, function (tool) {\n                return tool.default_order;\n            });\n            if (et !== 'pinch' && et !== 'scroll') {\n                results.push(this.gestures[et].tools[0].active = true);\n            }\n            else {\n                results.push(void 0);\n            }\n        }\n        return results;\n    };\n    return ToolbarBoxToolbar;\n})(toolbar_base_1.ToolbarBase);\nexports.ToolbarBoxView = (function (superClass) {\n    extend(ToolbarBoxView, superClass);\n    function ToolbarBoxView() {\n        return ToolbarBoxView.__super__.constructor.apply(this, arguments);\n    }\n    ToolbarBoxView.prototype.className = 'bk-toolbar-box';\n    ToolbarBoxView.prototype.get_width = function () {\n        if (this.model._horizontal === true) {\n            return 30;\n        }\n        else {\n            return null;\n        }\n    };\n    ToolbarBoxView.prototype.get_height = function () {\n        return 30;\n    };\n    return ToolbarBoxView;\n})(box_1.BoxView);\nexports.ToolbarBox = (function (superClass) {\n    extend(ToolbarBox, superClass);\n    function ToolbarBox() {\n        return ToolbarBox.__super__.constructor.apply(this, arguments);\n    }\n    ToolbarBox.prototype.type = 'ToolbarBox';\n    ToolbarBox.prototype.default_view = exports.ToolbarBoxView;\n    ToolbarBox.prototype.initialize = function (options) {\n        var ref;\n        ToolbarBox.__super__.initialize.call(this, options);\n        this._toolbar = new exports.ToolbarBoxToolbar(options);\n        this._horizontal = (ref = this.toolbar_location) === 'left' || ref === 'right';\n        return this._sizeable = !this._horizontal ? this._height : this._width;\n    };\n    ToolbarBox.prototype._doc_attached = function () {\n        this._toolbar.attach_document(this.document);\n        return ToolbarBox.__super__._doc_attached.call(this);\n    };\n    ToolbarBox.prototype.get_layoutable_children = function () {\n        return [this._toolbar];\n    };\n    ToolbarBox.define({\n        toolbar_location: [p.Location, \"right\"],\n        merge_tools: [p.Bool, true],\n        tools: [p.Any, []],\n        logo: [p.String, \"normal\"]\n    });\n    return ToolbarBox;\n})(box_1.Box);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DOM = require(\"core/dom\");\nexports.default = function (props) {\n    var logo;\n    if (props.logo != null) {\n        var cls = props.logo === \"grey\" ? \"bk-grey\" : null;\n        logo = DOM.createElement(\"a\", { href: \"http://bokeh.pydata.org/\", target: \"_blank\", class: [\"bk-logo\", \"bk-logo-small\", cls] });\n    }\n    return (DOM.createElement(\"div\", { class: [\"bk-toolbar-\" + props.location, \"bk-toolbar-\" + props.sticky] },\n        logo,\n        DOM.createElement(\"div\", { class: 'bk-button-bar' },\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"pan\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"scroll\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"pinch\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"tap\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"press\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"rotate\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"actions\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"inspectors\" }),\n            DOM.createElement(\"div\", { class: 'bk-button-bar-list', type: \"help\" }))));\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, slice = [].slice;\nvar transform_1 = require(\"./transform\");\nvar p = require(\"core/properties\");\nvar object_1 = require(\"core/util/object\");\nexports.CustomJSTransform = (function (superClass) {\n    extend(CustomJSTransform, superClass);\n    function CustomJSTransform() {\n        return CustomJSTransform.__super__.constructor.apply(this, arguments);\n    }\n    CustomJSTransform.prototype.type = 'CustomJSTransform';\n    CustomJSTransform.define({\n        args: [p.Any, {}],\n        func: [p.String, \"\"],\n        v_func: [p.String, \"\"]\n    });\n    CustomJSTransform.getters({\n        values: function () {\n            return this._make_values();\n        },\n        scalar_transform: function () {\n            return this._make_transform(\"x\", this.func);\n        },\n        vector_transform: function () {\n            return this._make_transform(\"xs\", this.v_func);\n        }\n    });\n    CustomJSTransform.prototype.compute = function (x) {\n        return this.scalar_transform.apply(this, slice.call(this.values).concat([x], [require], [exports]));\n    };\n    CustomJSTransform.prototype.v_compute = function (xs) {\n        return this.vector_transform.apply(this, slice.call(this.values).concat([xs], [require], [exports]));\n    };\n    CustomJSTransform.prototype._make_transform = function (val, fn) {\n        return (function (func, args, ctor) {\n            ctor.prototype = func.prototype;\n            var child = new ctor, result = func.apply(child, args);\n            return Object(result) === result ? result : child;\n        })(Function, slice.call(Object.keys(this.args)).concat([val], [\"require\"], [\"exports\"], [fn]), function () { });\n    };\n    CustomJSTransform.prototype._make_values = function () {\n        return object_1.values(this.args);\n    };\n    return CustomJSTransform;\n})(transform_1.Transform);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar customjs_transform_1 = require(\"./customjs_transform\");\nexports.CustomJSTransform = customjs_transform_1.CustomJSTransform;\nvar interpolator_1 = require(\"./interpolator\");\nexports.Interpolator = interpolator_1.Interpolator;\nvar jitter_1 = require(\"./jitter\");\nexports.Jitter = jitter_1.Jitter;\nvar linear_interpolator_1 = require(\"./linear_interpolator\");\nexports.LinearInterpolator = linear_interpolator_1.LinearInterpolator;\nvar step_interpolator_1 = require(\"./step_interpolator\");\nexports.StepInterpolator = step_interpolator_1.StepInterpolator;\nvar transform_1 = require(\"./transform\");\nexports.Transform = transform_1.Transform;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) {\n    if (i in this && this[i] === item)\n        return i;\n} return -1; };\nvar transform_1 = require(\"./transform\");\nvar p = require(\"core/properties\");\nexports.Interpolator = (function (superClass) {\n    extend(Interpolator, superClass);\n    function Interpolator() {\n        return Interpolator.__super__.constructor.apply(this, arguments);\n    }\n    Interpolator.prototype.initialize = function (attrs, options) {\n        Interpolator.__super__.initialize.call(this, attrs, options);\n        this._x_sorted = [];\n        this._y_sorted = [];\n        this._sorted_dirty = true;\n        return this.connect(this.change, function () {\n            return this._sorted_dirty = true;\n        });\n    };\n    Interpolator.define({\n        x: [p.Any],\n        y: [p.Any],\n        data: [p.Any],\n        clip: [p.Bool, true]\n    });\n    Interpolator.prototype.sort = function (descending) {\n        var column_names, data, i, j, k, list, ref, ref1, ref2, tsx, tsy;\n        if (descending == null) {\n            descending = false;\n        }\n        if (typeof this.x !== typeof this.y) {\n            throw new Error('The parameters for x and y must be of the same type, either both strings which define a column in the data source or both arrays of the same length');\n            return;\n        }\n        else {\n            if (typeof this.x === 'string' && this.data === null) {\n                throw new Error('If the x and y parameters are not specified as an array, the data parameter is reqired.');\n                return;\n            }\n        }\n        if (this._sorted_dirty === false) {\n            return;\n        }\n        tsx = [];\n        tsy = [];\n        if (typeof this.x === 'string') {\n            data = this.data;\n            column_names = data.columns();\n            if (ref = this.x, indexOf.call(column_names, ref) < 0) {\n                throw new Error('The x parameter does not correspond to a valid column name defined in the data parameter');\n            }\n            if (ref1 = this.y, indexOf.call(column_names, ref1) < 0) {\n                throw new Error('The x parameter does not correspond to a valid column name defined in the data parameter');\n            }\n            tsx = data.get_column(this.x);\n            tsy = data.get_column(this.y);\n        }\n        else {\n            tsx = this.x;\n            tsy = this.y;\n        }\n        if (tsx.length !== tsy.length) {\n            throw new Error('The length for x and y do not match');\n        }\n        if (tsx.length < 2) {\n            throw new Error('x and y must have at least two elements to support interpolation');\n        }\n        list = [];\n        for (j in tsx) {\n            list.push({\n                'x': tsx[j],\n                'y': tsy[j]\n            });\n        }\n        if (descending === true) {\n            list.sort(function (a, b) {\n                var ref2, ref3;\n                return (ref2 = a.x < b.x) != null ? ref2 : -{\n                    1: (ref3 = a.x === b.x) != null ? ref3 : {\n                        0: 1\n                    }\n                };\n            });\n        }\n        else {\n            list.sort(function (a, b) {\n                var ref2, ref3;\n                return (ref2 = a.x > b.x) != null ? ref2 : -{\n                    1: (ref3 = a.x === b.x) != null ? ref3 : {\n                        0: 1\n                    }\n                };\n            });\n        }\n        for (k = i = 0, ref2 = list.length; 0 <= ref2 ? i < ref2 : i > ref2; k = 0 <= ref2 ? ++i : --i) {\n            this._x_sorted[k] = list[k].x;\n            this._y_sorted[k] = list[k].y;\n        }\n        return this._sorted_dirty = false;\n    };\n    return Interpolator;\n})(transform_1.Transform);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar transform_1 = require(\"./transform\");\nvar p = require(\"core/properties\");\nvar bokeh_math = require(\"core/util/math\");\nexports.Jitter = (function (superClass) {\n    extend(Jitter, superClass);\n    function Jitter() {\n        return Jitter.__super__.constructor.apply(this, arguments);\n    }\n    Jitter.define({\n        mean: [p.Number, 0],\n        width: [p.Number, 1],\n        distribution: [p.Distribution, 'uniform']\n    });\n    Jitter.prototype.compute = function (x) {\n        if (this.distribution === 'uniform') {\n            return x + this.mean + ((bokeh_math.random() - 0.5) * this.width);\n        }\n        if (this.distribution === 'normal') {\n            return x + bokeh_math.rnorm(this.mean, this.width);\n        }\n    };\n    Jitter.prototype.v_compute = function (xs) {\n        var i, idx, len, result, x;\n        result = new Float64Array(xs.length);\n        for (idx = i = 0, len = xs.length; i < len; idx = ++i) {\n            x = xs[idx];\n            result[idx] = this.compute(x);\n        }\n        return result;\n    };\n    return Jitter;\n})(transform_1.Transform);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar array_1 = require(\"core/util/array\");\nvar interpolator_1 = require(\"./interpolator\");\nexports.LinearInterpolator = (function (superClass) {\n    extend(LinearInterpolator, superClass);\n    function LinearInterpolator() {\n        return LinearInterpolator.__super__.constructor.apply(this, arguments);\n    }\n    LinearInterpolator.prototype.compute = function (x) {\n        var descending, ind, ret, x1, x2, y1, y2;\n        this.sort(descending = false);\n        if (this.clip === true) {\n            if (x < this._x_sorted[0] || x > this._x_sorted[this._x_sorted.length - 1]) {\n                return null;\n            }\n        }\n        else {\n            if (x < this._x_sorted[0]) {\n                return this._y_sorted[0];\n            }\n            if (x > this._x_sorted[this._x_sorted.length - 1]) {\n                return this._y_sorted[this._y_sorted.length - 1];\n            }\n        }\n        if (x === this._x_sorted[0]) {\n            return this._y_sorted[0];\n        }\n        ind = array_1.findLastIndex(this._x_sorted, function (num) {\n            return num < x;\n        });\n        x1 = this._x_sorted[ind];\n        x2 = this._x_sorted[ind + 1];\n        y1 = this._y_sorted[ind];\n        y2 = this._y_sorted[ind + 1];\n        ret = y1 + (((x - x1) / (x2 - x1)) * (y2 - y1));\n        return ret;\n    };\n    LinearInterpolator.prototype.v_compute = function (xs) {\n        var i, idx, len, result, x;\n        result = new Float64Array(xs.length);\n        for (idx = i = 0, len = xs.length; i < len; idx = ++i) {\n            x = xs[idx];\n            result[idx] = this.compute(x);\n        }\n        return result;\n    };\n    return LinearInterpolator;\n})(interpolator_1.Interpolator);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar interpolator_1 = require(\"./interpolator\");\nvar p = require(\"core/properties\");\nvar array_1 = require(\"core/util/array\");\nexports.StepInterpolator = (function (superClass) {\n    extend(StepInterpolator, superClass);\n    function StepInterpolator() {\n        return StepInterpolator.__super__.constructor.apply(this, arguments);\n    }\n    StepInterpolator.define({\n        mode: [p.TransformStepMode, \"after\"]\n    });\n    StepInterpolator.prototype.compute = function (x) {\n        var descending, diffs, ind, mdiff, ret, tx;\n        this.sort(descending = false);\n        if (this.clip === true) {\n            if (x < this._x_sorted[0] || x > this._x_sorted[this._x_sorted.length - 1]) {\n                return null;\n            }\n        }\n        else {\n            if (x < this._x_sorted[0]) {\n                return this._y_sorted[0];\n            }\n            if (x > this._x_sorted[this._x_sorted.length - 1]) {\n                return this._y_sorted[this._y_sorted.length - 1];\n            }\n        }\n        ind = -1;\n        if (this.mode === \"after\") {\n            ind = array_1.findLastIndex(this._x_sorted, function (num) {\n                return x >= num;\n            });\n        }\n        if (this.mode === \"before\") {\n            ind = array_1.findIndex(this._x_sorted, function (num) {\n                return x <= num;\n            });\n        }\n        if (this.mode === \"center\") {\n            diffs = (function () {\n                var i, len, ref, results;\n                ref = this._x_sorted;\n                results = [];\n                for (i = 0, len = ref.length; i < len; i++) {\n                    tx = ref[i];\n                    results.push(Math.abs(tx - x));\n                }\n                return results;\n            }).call(this);\n            mdiff = array_1.min(diffs);\n            ind = array_1.findIndex(diffs, function (num) {\n                return mdiff === num;\n            });\n        }\n        if (ind !== -1) {\n            ret = this._y_sorted[ind];\n        }\n        else {\n            ret = null;\n        }\n        return ret;\n    };\n    StepInterpolator.prototype.v_compute = function (xs) {\n        var i, idx, len, result, x;\n        result = new Float64Array(xs.length);\n        for (idx = i = 0, len = xs.length; i < len; idx = ++i) {\n            x = xs[idx];\n            result[idx] = this.compute(x);\n        }\n        return result;\n    };\n    return StepInterpolator;\n})(interpolator_1.Interpolator);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = function (child, parent) { for (var key in parent) {\n    if (hasProp.call(parent, key))\n        child[key] = parent[key];\n} function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }, hasProp = {}.hasOwnProperty;\nvar model_1 = require(\"../../model\");\nexports.Transform = (function (superClass) {\n    extend(Transform, superClass);\n    function Transform() {\n        return Transform.__super__.constructor.apply(this, arguments);\n    }\n    return Transform;\n})(model_1.Model);\n","\"use strict\";\nif (typeof WeakMap !== \"function\") {\n    require(\"es6-weak-map/implement\");\n}\nif (typeof Set !== \"function\") {\n    require(\"es6-set/implement\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _burst_into_flames;\n_burst_into_flames = function (error) {\n    var body, box, button, message, ref, title;\n    box = document.createElement(\"div\");\n    box.style[\"background-color\"] = \"#f2dede\";\n    box.style[\"border\"] = \"1px solid #a94442\";\n    box.style[\"border-radius\"] = \"4px\";\n    box.style[\"display\"] = \"inline-block\";\n    box.style[\"font-family\"] = \"sans-serif\";\n    box.style[\"margin-top\"] = \"5px\";\n    box.style[\"min-width\"] = \"200px\";\n    box.style[\"padding\"] = \"5px 5px 5px 10px\";\n    button = document.createElement(\"span\");\n    button.style[\"background-color\"] = \"#a94442\";\n    button.style[\"border-radius\"] = \"0px 4px 0px 0px\";\n    button.style[\"color\"] = \"white\";\n    button.style[\"cursor\"] = \"pointer\";\n    button.style[\"float\"] = \"right\";\n    button.style[\"font-size\"] = \"0.8em\";\n    button.style[\"margin\"] = \"-6px -6px 0px 0px\";\n    button.style[\"padding\"] = \"2px 5px 4px 5px\";\n    button.title = \"close\";\n    button.setAttribute(\"aria-label\", \"close\");\n    button.appendChild(document.createTextNode(\"x\"));\n    button.addEventListener(\"click\", function () {\n        return body.removeChild(box);\n    });\n    title = document.createElement(\"h3\");\n    title.style[\"color\"] = \"#a94442\";\n    title.style[\"margin\"] = \"8px 0px 0px 0px\";\n    title.style[\"padding\"] = \"0px\";\n    title.appendChild(document.createTextNode(\"Bokeh Error\"));\n    message = document.createElement(\"pre\");\n    message.style[\"white-space\"] = \"unset\";\n    message.style[\"overflow-x\"] = \"auto\";\n    message.appendChild(document.createTextNode((ref = error.message) != null ? ref : error));\n    box.appendChild(button);\n    box.appendChild(title);\n    box.appendChild(message);\n    body = document.getElementsByTagName(\"body\")[0];\n    return body.insertBefore(box, body.firstChild);\n};\nexports.safely = function (fn, silent) {\n    var error;\n    if (silent == null) {\n        silent = false;\n    }\n    try {\n        return fn();\n    }\n    catch (error1) {\n        error = error1;\n        _burst_into_flames(error);\n        if (!silent) {\n            throw error;\n        }\n    }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = '0.12.6';\n","/*!!\n *  Canvas 2 Svg v1.0.19\n *  A low level canvas to SVG converter. Uses a mock canvas context to build an SVG document.\n *\n *  Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n *\n *  Author:\n *  Kerry Liu\n *\n *  Copyright (c) 2014 Gliffy Inc.\n */\n\n;(function () {\n    \"use strict\";\n\n    var STYLES, ctx, CanvasGradient, CanvasPattern, namedEntities;\n\n    //helper function to format a string\n    function format(str, args) {\n        var keys = Object.keys(args), i;\n        for (i=0; i<keys.length; i++) {\n            str = str.replace(new RegExp(\"\\\\{\" + keys[i] + \"\\\\}\", \"gi\"), args[keys[i]]);\n        }\n        return str;\n    }\n\n    //helper function that generates a random string\n    function randomString(holder) {\n        var chars, randomstring, i;\n        if (!holder) {\n            throw new Error(\"cannot create a random attribute name for an undefined object\");\n        }\n        chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\";\n        randomstring = \"\";\n        do {\n            randomstring = \"\";\n            for (i = 0; i < 12; i++) {\n                randomstring += chars[Math.floor(Math.random() * chars.length)];\n            }\n        } while (holder[randomstring]);\n        return randomstring;\n    }\n\n    //helper function to map named to numbered entities\n    function createNamedToNumberedLookup(items, radix) {\n        var i, entity, lookup = {}, base10, base16;\n        items = items.split(',');\n        radix = radix || 10;\n        // Map from named to numbered entities.\n        for (i = 0; i < items.length; i += 2) {\n            entity = '&' + items[i + 1] + ';';\n            base10 = parseInt(items[i], radix);\n            lookup[entity] = '&#'+base10+';';\n        }\n        //FF and IE need to create a regex from hex values ie &nbsp; == \\xa0\n        lookup[\"\\\\xa0\"] = '&#160;';\n        return lookup;\n    }\n\n    //helper function to map canvas-textAlign to svg-textAnchor\n    function getTextAnchor(textAlign) {\n        //TODO: support rtl languages\n        var mapping = {\"left\":\"start\", \"right\":\"end\", \"center\":\"middle\", \"start\":\"start\", \"end\":\"end\"};\n        return mapping[textAlign] || mapping.start;\n    }\n\n    //helper function to map canvas-textBaseline to svg-dominantBaseline\n    function getDominantBaseline(textBaseline) {\n        //INFO: not supported in all browsers\n        var mapping = {\"alphabetic\": \"alphabetic\", \"hanging\": \"hanging\", \"top\":\"text-before-edge\", \"bottom\":\"text-after-edge\", \"middle\":\"central\"};\n        return mapping[textBaseline] || mapping.alphabetic;\n    }\n\n    // Unpack entities lookup where the numbers are in radix 32 to reduce the size\n    // entity mapping courtesy of tinymce\n    namedEntities = createNamedToNumberedLookup(\n        '50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,' +\n            '5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,' +\n            '5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,' +\n            '5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,' +\n            '68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,' +\n            '6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,' +\n            '6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,' +\n            '75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,' +\n            '7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,' +\n            '7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,' +\n            'sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,' +\n            'st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,' +\n            't9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,' +\n            'tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,' +\n            'u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,' +\n            '81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,' +\n            '8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,' +\n            '8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,' +\n            '8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,' +\n            '8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,' +\n            'nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,' +\n            'rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,' +\n            'Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,' +\n            '80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,' +\n            '811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro', 32);\n\n\n    //Some basic mappings for attributes and default values.\n    STYLES = {\n        \"strokeStyle\":{\n            svgAttr : \"stroke\", //corresponding svg attribute\n            canvas : \"#000000\", //canvas default\n            svg : \"none\",       //svg default\n            apply : \"stroke\"    //apply on stroke() or fill()\n        },\n        \"fillStyle\":{\n            svgAttr : \"fill\",\n            canvas : \"#000000\",\n            svg : null, //svg default is black, but we need to special case this to handle canvas stroke without fill\n            apply : \"fill\"\n        },\n        \"lineCap\":{\n            svgAttr : \"stroke-linecap\",\n            canvas : \"butt\",\n            svg : \"butt\",\n            apply : \"stroke\"\n        },\n        \"lineJoin\":{\n            svgAttr : \"stroke-linejoin\",\n            canvas : \"miter\",\n            svg : \"miter\",\n            apply : \"stroke\"\n        },\n        \"miterLimit\":{\n            svgAttr : \"stroke-miterlimit\",\n            canvas : 10,\n            svg : 4,\n            apply : \"stroke\"\n        },\n        \"lineWidth\":{\n            svgAttr : \"stroke-width\",\n            canvas : 1,\n            svg : 1,\n            apply : \"stroke\"\n        },\n        \"globalAlpha\": {\n            svgAttr : \"opacity\",\n            canvas : 1,\n            svg : 1,\n            apply :  \"fill stroke\"\n        },\n        \"font\":{\n            //font converts to multiple svg attributes, there is custom logic for this\n            canvas : \"10px sans-serif\"\n        },\n        \"shadowColor\":{\n            canvas : \"#000000\"\n        },\n        \"shadowOffsetX\":{\n            canvas : 0\n        },\n        \"shadowOffsetY\":{\n            canvas : 0\n        },\n        \"shadowBlur\":{\n            canvas : 0\n        },\n        \"textAlign\":{\n            canvas : \"start\"\n        },\n        \"textBaseline\":{\n            canvas : \"alphabetic\"\n        },\n        \"lineDash\" : {\n            svgAttr : \"stroke-dasharray\",\n            canvas : [],\n            svg : null,\n            apply : \"stroke\"\n        }\n    };\n\n    /**\n     *\n     * @param gradientNode - reference to the gradient\n     * @constructor\n     */\n    CanvasGradient = function (gradientNode, ctx) {\n        this.__root = gradientNode;\n        this.__ctx = ctx;\n    };\n\n    /**\n     * Adds a color stop to the gradient root\n     */\n    CanvasGradient.prototype.addColorStop = function (offset, color) {\n        var stop = this.__ctx.__createElement(\"stop\"), regex, matches;\n        stop.setAttribute(\"offset\", offset);\n        if (color.indexOf(\"rgba\") !== -1) {\n            //separate alpha value, since webkit can't handle it\n            regex = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?\\.?\\d*)\\s*\\)/gi;\n            matches = regex.exec(color);\n            stop.setAttribute(\"stop-color\", format(\"rgb({r},{g},{b})\", {r:matches[1], g:matches[2], b:matches[3]}));\n            stop.setAttribute(\"stop-opacity\", matches[4]);\n        } else {\n            stop.setAttribute(\"stop-color\", color);\n        }\n        this.__root.appendChild(stop);\n    };\n\n    CanvasPattern = function (pattern, ctx) {\n        this.__root = pattern;\n        this.__ctx = ctx;\n    };\n\n    /**\n     * The mock canvas context\n     * @param o - options include:\n     * width - width of your canvas (defaults to 500)\n     * height - height of your canvas (defaults to 500)\n     * enableMirroring - enables canvas mirroring (get image data) (defaults to false)\n     * document - the document object (defaults to the current document)\n     */\n    ctx = function (o) {\n        var defaultOptions = { width:500, height:500, enableMirroring : false}, options;\n\n        //keep support for this way of calling C2S: new C2S(width,height)\n        if (arguments.length > 1) {\n            options = defaultOptions;\n            options.width = arguments[0];\n            options.height = arguments[1];\n        } else if ( !o ) {\n            options = defaultOptions;\n        } else {\n            options = o;\n        }\n\n        if (!(this instanceof ctx)) {\n            //did someone call this without new?\n            return new ctx(options);\n        }\n\n        //setup options\n        this.width = options.width || defaultOptions.width;\n        this.height = options.height || defaultOptions.height;\n        this.enableMirroring = options.enableMirroring !== undefined ? options.enableMirroring : defaultOptions.enableMirroring;\n\n        this.canvas = this;   ///point back to this instance!\n        this.__document = options.document || document;\n        this.__canvas = this.__document.createElement(\"canvas\");\n        this.__ctx = this.__canvas.getContext(\"2d\");\n\n        this.__setDefaultStyles();\n        this.__stack = [this.__getStyleState()];\n        this.__groupStack = [];\n\n        //the root svg element\n        this.__root = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        this.__root.setAttribute(\"version\", 1.1);\n        this.__root.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n        this.__root.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\n        this.__root.setAttribute(\"width\", this.width);\n        this.__root.setAttribute(\"height\", this.height);\n\n        //make sure we don't generate the same ids in defs\n        this.__ids = {};\n\n        //defs tag\n        this.__defs = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"defs\");\n        this.__root.appendChild(this.__defs);\n\n        //also add a group child. the svg element can't use the transform attribute\n        this.__currentElement = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        this.__root.appendChild(this.__currentElement);\n    };\n\n\n    /**\n     * Creates the specified svg element\n     * @private\n     */\n    ctx.prototype.__createElement = function (elementName, properties, resetFill) {\n        if (typeof properties === \"undefined\") {\n            properties = {};\n        }\n\n        var element = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", elementName),\n            keys = Object.keys(properties), i, key;\n        if (resetFill) {\n            //if fill or stroke is not specified, the svg element should not display. By default SVG's fill is black.\n            element.setAttribute(\"fill\", \"none\");\n            element.setAttribute(\"stroke\", \"none\");\n        }\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            element.setAttribute(key, properties[key]);\n        }\n        return element;\n    };\n\n    /**\n     * Applies default canvas styles to the context\n     * @private\n     */\n    ctx.prototype.__setDefaultStyles = function () {\n        //default 2d canvas context properties see:http://www.w3.org/TR/2dcontext/\n        var keys = Object.keys(STYLES), i, key;\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            this[key] = STYLES[key].canvas;\n        }\n    };\n\n    /**\n     * Applies styles on restore\n     * @param styleState\n     * @private\n     */\n    ctx.prototype.__applyStyleState = function (styleState) {\n        var keys = Object.keys(styleState), i, key;\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            this[key] = styleState[key];\n        }\n    };\n\n    /**\n     * Gets the current style state\n     * @return {Object}\n     * @private\n     */\n    ctx.prototype.__getStyleState = function () {\n        var i, styleState = {}, keys = Object.keys(STYLES), key;\n        for (i=0; i<keys.length; i++) {\n            key = keys[i];\n            styleState[key] = this[key];\n        }\n        return styleState;\n    };\n\n    /**\n     * Apples the current styles to the current SVG element. On \"ctx.fill\" or \"ctx.stroke\"\n     * @param type\n     * @private\n     */\n    ctx.prototype.__applyStyleToCurrentElement = function (type) {\n    \tvar currentElement = this.__currentElement;\n    \tvar currentStyleGroup = this.__currentElementsToStyle;\n    \tif (currentStyleGroup) {\n    \t\tcurrentElement.setAttribute(type, \"\");\n    \t\tcurrentElement = currentStyleGroup.element;\n    \t\tcurrentStyleGroup.children.forEach(function (node) {\n    \t\t\tnode.setAttribute(type, \"\");\n    \t\t})\n    \t}\n\n        var keys = Object.keys(STYLES), i, style, value, id, regex, matches;\n        for (i = 0; i < keys.length; i++) {\n            style = STYLES[keys[i]];\n            value = this[keys[i]];\n            if (style.apply) {\n                //is this a gradient or pattern?\n                if (value instanceof CanvasPattern) {\n                    //pattern\n                    if (value.__ctx) {\n                        //copy over defs\n                        while(value.__ctx.__defs.childNodes.length) {\n                            id = value.__ctx.__defs.childNodes[0].getAttribute(\"id\");\n                            this.__ids[id] = id;\n                            this.__defs.appendChild(value.__ctx.__defs.childNodes[0]);\n                        }\n                    }\n                    currentElement.setAttribute(style.apply, format(\"url(#{id})\", {id:value.__root.getAttribute(\"id\")}));\n                }\n                else if (value instanceof CanvasGradient) {\n                    //gradient\n                    currentElement.setAttribute(style.apply, format(\"url(#{id})\", {id:value.__root.getAttribute(\"id\")}));\n                } else if (style.apply.indexOf(type)!==-1 && style.svg !== value) {\n                    if ((style.svgAttr === \"stroke\" || style.svgAttr === \"fill\") && value.indexOf(\"rgba\") !== -1) {\n                        //separate alpha value, since illustrator can't handle it\n                        regex = /rgba\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d?\\.?\\d*)\\s*\\)/gi;\n                        matches = regex.exec(value);\n                        currentElement.setAttribute(style.svgAttr, format(\"rgb({r},{g},{b})\", {r:matches[1], g:matches[2], b:matches[3]}));\n                        //should take globalAlpha here\n                        var opacity = matches[4];\n                        var globalAlpha = this.globalAlpha;\n                        if (globalAlpha != null) {\n                            opacity *= globalAlpha;\n                        }\n                        currentElement.setAttribute(style.svgAttr+\"-opacity\", opacity);\n                    } else {\n                        var attr = style.svgAttr;\n                        if (keys[i] === 'globalAlpha') {\n                            attr = type+'-'+style.svgAttr;\n                            if (currentElement.getAttribute(attr)) {\n                                 //fill-opacity or stroke-opacity has already been set by stroke or fill.\n                                continue;\n                            }\n                        }\n                        //otherwise only update attribute if right type, and not svg default\n                        currentElement.setAttribute(attr, value);\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Will return the closest group or svg node. May return the current element.\n     * @private\n     */\n    ctx.prototype.__closestGroupOrSvg = function (node) {\n        node = node || this.__currentElement;\n        if (node.nodeName === \"g\" || node.nodeName === \"svg\") {\n            return node;\n        } else {\n            return this.__closestGroupOrSvg(node.parentNode);\n        }\n    };\n\n    /**\n     * Returns the serialized value of the svg so far\n     * @param fixNamedEntities - Standalone SVG doesn't support named entities, which document.createTextNode encodes.\n     *                           If true, we attempt to find all named entities and encode it as a numeric entity.\n     * @return serialized svg\n     */\n    ctx.prototype.getSerializedSvg = function (fixNamedEntities) {\n        var serialized = new XMLSerializer().serializeToString(this.__root),\n            keys, i, key, value, regexp, xmlns;\n\n        //IE search for a duplicate xmnls because they didn't implement setAttributeNS correctly\n        xmlns = /xmlns=\"http:\\/\\/www\\.w3\\.org\\/2000\\/svg\".+xmlns=\"http:\\/\\/www\\.w3\\.org\\/2000\\/svg/gi;\n        if (xmlns.test(serialized)) {\n            serialized = serialized.replace('xmlns=\"http://www.w3.org/2000/svg','xmlns:xlink=\"http://www.w3.org/1999/xlink');\n        }\n\n        if (fixNamedEntities) {\n            keys = Object.keys(namedEntities);\n            //loop over each named entity and replace with the proper equivalent.\n            for (i=0; i<keys.length; i++) {\n                key = keys[i];\n                value = namedEntities[key];\n                regexp = new RegExp(key, \"gi\");\n                if (regexp.test(serialized)) {\n                    serialized = serialized.replace(regexp, value);\n                }\n            }\n        }\n\n        return serialized;\n    };\n\n\n    /**\n     * Returns the root svg\n     * @return\n     */\n    ctx.prototype.getSvg = function () {\n        return this.__root;\n    };\n    /**\n     * Will generate a group tag.\n     */\n    ctx.prototype.save = function () {\n        var group = this.__createElement(\"g\");\n        var parent = this.__closestGroupOrSvg();\n        this.__groupStack.push(parent);\n        parent.appendChild(group);\n        this.__currentElement = group;\n        this.__stack.push(this.__getStyleState());\n    };\n    /**\n     * Sets current element to parent, or just root if already root\n     */\n    ctx.prototype.restore = function () {\n        this.__currentElement = this.__groupStack.pop();\n        this.__currentElementsToStyle = null;\n        //Clearing canvas will make the poped group invalid, currentElement is set to the root group node.\n        if (!this.__currentElement) {\n            this.__currentElement = this.__root.childNodes[1];\n        }\n        var state = this.__stack.pop();\n        this.__applyStyleState(state);\n    };\n\n    /**\n     * Helper method to add transform\n     * @private\n     */\n    ctx.prototype.__addTransform = function (t) {\n        //if the current element has siblings, add another group\n        var parent = this.__closestGroupOrSvg();\n        if (parent.childNodes.length > 0) {\n        \tif (this.__currentElement.nodeName === \"path\") {\n        \t\tif (!this.__currentElementsToStyle) this.__currentElementsToStyle = {element: parent, children: []};\n        \t\tthis.__currentElementsToStyle.children.push(this.__currentElement)\n        \t\tthis.__applyCurrentDefaultPath();\n        \t}\n\n            var group = this.__createElement(\"g\");\n            parent.appendChild(group);\n            this.__currentElement = group;\n        }\n\n        var transform = this.__currentElement.getAttribute(\"transform\");\n        if (transform) {\n            transform += \" \";\n        } else {\n            transform = \"\";\n        }\n        transform += t;\n        this.__currentElement.setAttribute(\"transform\", transform);\n    };\n\n    /**\n     *  scales the current element\n     */\n    ctx.prototype.scale = function (x, y) {\n        if (y === undefined) {\n            y = x;\n        }\n        this.__addTransform(format(\"scale({x},{y})\", {x:x, y:y}));\n    };\n\n    /**\n     * rotates the current element\n     */\n    ctx.prototype.rotate = function (angle) {\n        var degrees = (angle * 180 / Math.PI);\n        this.__addTransform(format(\"rotate({angle},{cx},{cy})\", {angle:degrees, cx:0, cy:0}));\n    };\n\n    /**\n     * translates the current element\n     */\n    ctx.prototype.translate = function (x, y) {\n        this.__addTransform(format(\"translate({x},{y})\", {x:x,y:y}));\n    };\n\n    /**\n     * applies a transform to the current element\n     */\n    ctx.prototype.transform = function (a, b, c, d, e, f) {\n        this.__addTransform(format(\"matrix({a},{b},{c},{d},{e},{f})\", {a:a, b:b, c:c, d:d, e:e, f:f}));\n    };\n\n    /**\n     * Create a new Path Element\n     */\n    ctx.prototype.beginPath = function () {\n        var path, parent;\n\n        // Note that there is only one current default path, it is not part of the drawing state.\n        // See also: https://html.spec.whatwg.org/multipage/scripting.html#current-default-path\n        this.__currentDefaultPath = \"\";\n        this.__currentPosition = {};\n\n        path = this.__createElement(\"path\", {}, true);\n        parent = this.__closestGroupOrSvg();\n        parent.appendChild(path);\n        this.__currentElement = path;\n    };\n\n    /**\n     * Helper function to apply currentDefaultPath to current path element\n     * @private\n     */\n    ctx.prototype.__applyCurrentDefaultPath = function () {\n    \tvar currentElement = this.__currentElement;\n        if (currentElement.nodeName === \"path\") {\n\t\t\tcurrentElement.setAttribute(\"d\", this.__currentDefaultPath);\n        } else {\n\t\t\tconsole.error(\"Attempted to apply path command to node\", currentElement.nodeName);\n        }\n    };\n\n    /**\n     * Helper function to add path command\n     * @private\n     */\n    ctx.prototype.__addPathCommand = function (command) {\n        this.__currentDefaultPath += \" \";\n        this.__currentDefaultPath += command;\n    };\n\n    /**\n     * Adds the move command to the current path element,\n     * if the currentPathElement is not empty create a new path element\n     */\n    ctx.prototype.moveTo = function (x,y) {\n        if (this.__currentElement.nodeName !== \"path\") {\n            this.beginPath();\n        }\n\n        // creates a new subpath with the given point\n        this.__currentPosition = {x: x, y: y};\n        this.__addPathCommand(format(\"M {x} {y}\", {x:x, y:y}));\n    };\n\n    /**\n     * Closes the current path\n     */\n    ctx.prototype.closePath = function () {\n        if (this.__currentDefaultPath) {\n            this.__addPathCommand(\"Z\");\n        }\n    };\n\n    /**\n     * Adds a line to command\n     */\n    ctx.prototype.lineTo = function (x, y) {\n        this.__currentPosition = {x: x, y: y};\n        if (this.__currentDefaultPath.indexOf('M') > -1) {\n            this.__addPathCommand(format(\"L {x} {y}\", {x:x, y:y}));\n        } else {\n            this.__addPathCommand(format(\"M {x} {y}\", {x:x, y:y}));\n        }\n    };\n\n    /**\n     * Add a bezier command\n     */\n    ctx.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n        this.__currentPosition = {x: x, y: y};\n        this.__addPathCommand(format(\"C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}\",\n            {cp1x:cp1x, cp1y:cp1y, cp2x:cp2x, cp2y:cp2y, x:x, y:y}));\n    };\n\n    /**\n     * Adds a quadratic curve to command\n     */\n    ctx.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {\n        this.__currentPosition = {x: x, y: y};\n        this.__addPathCommand(format(\"Q {cpx} {cpy} {x} {y}\", {cpx:cpx, cpy:cpy, x:x, y:y}));\n    };\n\n\n    /**\n     * Return a new normalized vector of given vector\n     */\n    var normalize = function (vector) {\n        var len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);\n        return [vector[0] / len, vector[1] / len];\n    };\n\n    /**\n     * Adds the arcTo to the current path\n     *\n     * @see http://www.w3.org/TR/2015/WD-2dcontext-20150514/#dom-context-2d-arcto\n     */\n    ctx.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n        // Let the point (x0, y0) be the last point in the subpath.\n        var x0 = this.__currentPosition && this.__currentPosition.x;\n        var y0 = this.__currentPosition && this.__currentPosition.y;\n\n        // First ensure there is a subpath for (x1, y1).\n        if (typeof x0 == \"undefined\" || typeof y0 == \"undefined\") {\n            return;\n        }\n\n        // Negative values for radius must cause the implementation to throw an IndexSizeError exception.\n        if (radius < 0) {\n            throw new Error(\"IndexSizeError: The radius provided (\" + radius + \") is negative.\");\n        }\n\n        // If the point (x0, y0) is equal to the point (x1, y1),\n        // or if the point (x1, y1) is equal to the point (x2, y2),\n        // or if the radius radius is zero,\n        // then the method must add the point (x1, y1) to the subpath,\n        // and connect that point to the previous point (x0, y0) by a straight line.\n        if (((x0 === x1) && (y0 === y1))\n            || ((x1 === x2) && (y1 === y2))\n            || (radius === 0)) {\n            this.lineTo(x1, y1);\n            return;\n        }\n\n        // Otherwise, if the points (x0, y0), (x1, y1), and (x2, y2) all lie on a single straight line,\n        // then the method must add the point (x1, y1) to the subpath,\n        // and connect that point to the previous point (x0, y0) by a straight line.\n        var unit_vec_p1_p0 = normalize([x0 - x1, y0 - y1]);\n        var unit_vec_p1_p2 = normalize([x2 - x1, y2 - y1]);\n        if (unit_vec_p1_p0[0] * unit_vec_p1_p2[1] === unit_vec_p1_p0[1] * unit_vec_p1_p2[0]) {\n            this.lineTo(x1, y1);\n            return;\n        }\n\n        // Otherwise, let The Arc be the shortest arc given by circumference of the circle that has radius radius,\n        // and that has one point tangent to the half-infinite line that crosses the point (x0, y0) and ends at the point (x1, y1),\n        // and that has a different point tangent to the half-infinite line that ends at the point (x1, y1), and crosses the point (x2, y2).\n        // The points at which this circle touches these two lines are called the start and end tangent points respectively.\n\n        // note that both vectors are unit vectors, so the length is 1\n        var cos = (unit_vec_p1_p0[0] * unit_vec_p1_p2[0] + unit_vec_p1_p0[1] * unit_vec_p1_p2[1]);\n        var theta = Math.acos(Math.abs(cos));\n\n        // Calculate origin\n        var unit_vec_p1_origin = normalize([\n            unit_vec_p1_p0[0] + unit_vec_p1_p2[0],\n            unit_vec_p1_p0[1] + unit_vec_p1_p2[1]\n        ]);\n        var len_p1_origin = radius / Math.sin(theta / 2);\n        var x = x1 + len_p1_origin * unit_vec_p1_origin[0];\n        var y = y1 + len_p1_origin * unit_vec_p1_origin[1];\n\n        // Calculate start angle and end angle\n        // rotate 90deg clockwise (note that y axis points to its down)\n        var unit_vec_origin_start_tangent = [\n            -unit_vec_p1_p0[1],\n            unit_vec_p1_p0[0]\n        ];\n        // rotate 90deg counter clockwise (note that y axis points to its down)\n        var unit_vec_origin_end_tangent = [\n            unit_vec_p1_p2[1],\n            -unit_vec_p1_p2[0]\n        ];\n        var getAngle = function (vector) {\n            // get angle (clockwise) between vector and (1, 0)\n            var x = vector[0];\n            var y = vector[1];\n            if (y >= 0) { // note that y axis points to its down\n                return Math.acos(x);\n            } else {\n                return -Math.acos(x);\n            }\n        };\n        var startAngle = getAngle(unit_vec_origin_start_tangent);\n        var endAngle = getAngle(unit_vec_origin_end_tangent);\n\n        // Connect the point (x0, y0) to the start tangent point by a straight line\n        this.lineTo(x + unit_vec_origin_start_tangent[0] * radius,\n                    y + unit_vec_origin_start_tangent[1] * radius);\n\n        // Connect the start tangent point to the end tangent point by arc\n        // and adding the end tangent point to the subpath.\n        this.arc(x, y, radius, startAngle, endAngle);\n    };\n\n    /**\n     * Sets the stroke property on the current element\n     */\n    ctx.prototype.stroke = function () {\n        if (this.__currentElement.nodeName === \"path\") {\n            this.__currentElement.setAttribute(\"paint-order\", \"fill stroke markers\");\n        }\n        this.__applyCurrentDefaultPath();\n        this.__applyStyleToCurrentElement(\"stroke\");\n    };\n\n    /**\n     * Sets fill properties on the current element\n     */\n    ctx.prototype.fill = function () {\n        if (this.__currentElement.nodeName === \"path\") {\n            this.__currentElement.setAttribute(\"paint-order\", \"stroke fill markers\");\n        }\n        this.__applyCurrentDefaultPath();\n        this.__applyStyleToCurrentElement(\"fill\");\n    };\n\n    /**\n     *  Adds a rectangle to the path.\n     */\n    ctx.prototype.rect = function (x, y, width, height) {\n        if (this.__currentElement.nodeName !== \"path\") {\n            this.beginPath();\n        }\n        this.moveTo(x, y);\n        this.lineTo(x+width, y);\n        this.lineTo(x+width, y+height);\n        this.lineTo(x, y+height);\n        this.lineTo(x, y);\n        this.closePath();\n    };\n\n\n    /**\n     * adds a rectangle element\n     */\n    ctx.prototype.fillRect = function (x, y, width, height) {\n        var rect, parent;\n        rect = this.__createElement(\"rect\", {\n            x : x,\n            y : y,\n            width : width,\n            height : height\n        }, true);\n        parent = this.__closestGroupOrSvg();\n        parent.appendChild(rect);\n        this.__currentElement = rect;\n        this.__applyStyleToCurrentElement(\"fill\");\n    };\n\n    /**\n     * Draws a rectangle with no fill\n     * @param x\n     * @param y\n     * @param width\n     * @param height\n     */\n    ctx.prototype.strokeRect = function (x, y, width, height) {\n        var rect, parent;\n        rect = this.__createElement(\"rect\", {\n            x : x,\n            y : y,\n            width : width,\n            height : height\n        }, true);\n        parent = this.__closestGroupOrSvg();\n        parent.appendChild(rect);\n        this.__currentElement = rect;\n        this.__applyStyleToCurrentElement(\"stroke\");\n    };\n\n\n    /**\n     * Clear entire canvas:\n     * 1. save current transforms\n     * 2. remove all the childNodes of the root g element\n     */\n    ctx.prototype.__clearCanvas = function () {\n        var current = this.__closestGroupOrSvg(),\n            transform = current.getAttribute(\"transform\");\n        var rootGroup = this.__root.childNodes[1];\n        var childNodes = rootGroup.childNodes;\n        for (var i = childNodes.length - 1; i >= 0; i--) {\n            if (childNodes[i]) {\n                rootGroup.removeChild(childNodes[i]);\n            }\n        }\n        this.__currentElement = rootGroup;\n        //reset __groupStack as all the child group nodes are all removed.\n        this.__groupStack = [];\n        if (transform) {\n            this.__addTransform(transform);\n        }\n    };\n\n    /**\n     * \"Clears\" a canvas by just drawing a white rectangle in the current group.\n     */\n    ctx.prototype.clearRect = function (x, y, width, height) {\n        //clear entire canvas\n        if (x === 0 && y === 0 && width === this.width && height === this.height) {\n            this.__clearCanvas();\n            return;\n        }\n        var rect, parent = this.__closestGroupOrSvg();\n        rect = this.__createElement(\"rect\", {\n            x : x,\n            y : y,\n            width : width,\n            height : height,\n            fill : \"#FFFFFF\"\n        }, true);\n        parent.appendChild(rect);\n    };\n\n    /**\n     * Adds a linear gradient to a defs tag.\n     * Returns a canvas gradient object that has a reference to it's parent def\n     */\n    ctx.prototype.createLinearGradient = function (x1, y1, x2, y2) {\n        var grad = this.__createElement(\"linearGradient\", {\n            id : randomString(this.__ids),\n            x1 : x1+\"px\",\n            x2 : x2+\"px\",\n            y1 : y1+\"px\",\n            y2 : y2+\"px\",\n            \"gradientUnits\" : \"userSpaceOnUse\"\n        }, false);\n        this.__defs.appendChild(grad);\n        return new CanvasGradient(grad, this);\n    };\n\n    /**\n     * Adds a radial gradient to a defs tag.\n     * Returns a canvas gradient object that has a reference to it's parent def\n     */\n    ctx.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {\n        var grad = this.__createElement(\"radialGradient\", {\n            id : randomString(this.__ids),\n            cx : x1+\"px\",\n            cy : y1+\"px\",\n            r  : r1+\"px\",\n            fx : x0+\"px\",\n            fy : y0+\"px\",\n            \"gradientUnits\" : \"userSpaceOnUse\"\n        }, false);\n        this.__defs.appendChild(grad);\n        return new CanvasGradient(grad, this);\n\n    };\n\n    /**\n     * Parses the font string and returns svg mapping\n     * @private\n     */\n    ctx.prototype.__parseFont = function () {\n        var regex = /^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))(?:\\s*\\/\\s*(normal|[.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])))?\\s*([-,\\'\\\"\\sa-z0-9]+?)\\s*$/i;\n        var fontPart = regex.exec( this.font );\n        var data = {\n            style : fontPart[1] || 'normal',\n            size : fontPart[4] || '10px',\n            family : fontPart[6] || 'sans-serif',\n            weight: fontPart[3] || 'normal',\n            decoration : fontPart[2] || 'normal',\n            href : null\n        };\n\n        //canvas doesn't support underline natively, but we can pass this attribute\n        if (this.__fontUnderline === \"underline\") {\n            data.decoration = \"underline\";\n        }\n\n        //canvas also doesn't support linking, but we can pass this as well\n        if (this.__fontHref) {\n            data.href = this.__fontHref;\n        }\n\n        return data;\n    };\n\n    /**\n     * Helper to link text fragments\n     * @param font\n     * @param element\n     * @return {*}\n     * @private\n     */\n    ctx.prototype.__wrapTextLink = function (font, element) {\n        if (font.href) {\n            var a = this.__createElement(\"a\");\n            a.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\", font.href);\n            a.appendChild(element);\n            return a;\n        }\n        return element;\n    };\n\n    /**\n     * Fills or strokes text\n     * @param text\n     * @param x\n     * @param y\n     * @param action - stroke or fill\n     * @private\n     */\n    ctx.prototype.__applyText = function (text, x, y, action) {\n        var font = this.__parseFont(),\n            parent = this.__closestGroupOrSvg(),\n            textElement = this.__createElement(\"text\", {\n                \"font-family\" : font.family,\n                \"font-size\" : font.size,\n                \"font-style\" : font.style,\n                \"font-weight\" : font.weight,\n                \"text-decoration\" : font.decoration,\n                \"x\" : x,\n                \"y\" : y,\n                \"text-anchor\": getTextAnchor(this.textAlign),\n                \"dominant-baseline\": getDominantBaseline(this.textBaseline)\n            }, true);\n\n        textElement.appendChild(this.__document.createTextNode(text));\n        this.__currentElement = textElement;\n        this.__applyStyleToCurrentElement(action);\n        parent.appendChild(this.__wrapTextLink(font,textElement));\n    };\n\n    /**\n     * Creates a text element\n     * @param text\n     * @param x\n     * @param y\n     */\n    ctx.prototype.fillText = function (text, x, y) {\n        this.__applyText(text, x, y, \"fill\");\n    };\n\n    /**\n     * Strokes text\n     * @param text\n     * @param x\n     * @param y\n     */\n    ctx.prototype.strokeText = function (text, x, y) {\n        this.__applyText(text, x, y, \"stroke\");\n    };\n\n    /**\n     * No need to implement this for svg.\n     * @param text\n     * @return {TextMetrics}\n     */\n    ctx.prototype.measureText = function (text) {\n        this.__ctx.font = this.font;\n        return this.__ctx.measureText(text);\n    };\n\n    /**\n     *  Arc command!\n     */\n    ctx.prototype.arc = function (x, y, radius, startAngle, endAngle, counterClockwise) {\n        // in canvas no circle is drawn if no angle is provided.\n        if (startAngle === endAngle) {\n            return;\n        }\n        startAngle = startAngle % (2*Math.PI);\n        endAngle = endAngle % (2*Math.PI);\n        if (startAngle === endAngle) {\n            //circle time! subtract some of the angle so svg is happy (svg elliptical arc can't draw a full circle)\n            endAngle = ((endAngle + (2*Math.PI)) - 0.001 * (counterClockwise ? -1 : 1)) % (2*Math.PI);\n        }\n        var endX = x+radius*Math.cos(endAngle),\n            endY = y+radius*Math.sin(endAngle),\n            startX = x+radius*Math.cos(startAngle),\n            startY = y+radius*Math.sin(startAngle),\n            sweepFlag = counterClockwise ? 0 : 1,\n            largeArcFlag = 0,\n            diff = endAngle - startAngle;\n\n        // https://github.com/gliffy/canvas2svg/issues/4\n        if (diff < 0) {\n            diff += 2*Math.PI;\n        }\n\n        if (counterClockwise) {\n            largeArcFlag = diff > Math.PI ? 0 : 1;\n        } else {\n            largeArcFlag = diff > Math.PI ? 1 : 0;\n        }\n\n        this.lineTo(startX, startY);\n        this.__addPathCommand(format(\"A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}\",\n            {rx:radius, ry:radius, xAxisRotation:0, largeArcFlag:largeArcFlag, sweepFlag:sweepFlag, endX:endX, endY:endY}));\n\n        this.__currentPosition = {x: endX, y: endY};\n    };\n\n    /**\n     * Generates a ClipPath from the clip command.\n     */\n    ctx.prototype.clip = function () {\n        var group = this.__closestGroupOrSvg(),\n            clipPath = this.__createElement(\"clipPath\"),\n            id =  randomString(this.__ids),\n            newGroup = this.__createElement(\"g\");\n\n        this.__applyCurrentDefaultPath();\n        group.removeChild(this.__currentElement);\n        clipPath.setAttribute(\"id\", id);\n        clipPath.appendChild(this.__currentElement);\n\n        this.__defs.appendChild(clipPath);\n\n        //set the clip path to this group\n        group.setAttribute(\"clip-path\", format(\"url(#{id})\", {id:id}));\n\n        //clip paths can be scaled and transformed, we need to add another wrapper group to avoid later transformations\n        // to this path\n        group.appendChild(newGroup);\n\n        this.__currentElement = newGroup;\n\n    };\n\n    /**\n     * Draws a canvas, image or mock context to this canvas.\n     * Note that all svg dom manipulation uses node.childNodes rather than node.children for IE support.\n     * http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-drawimage\n     */\n    ctx.prototype.drawImage = function () {\n        //convert arguments to a real array\n        var args = Array.prototype.slice.call(arguments),\n            image=args[0],\n            dx, dy, dw, dh, sx=0, sy=0, sw, sh, parent, svg, defs, group,\n            currentElement, svgImage, canvas, context, id;\n\n        if (args.length === 3) {\n            dx = args[1];\n            dy = args[2];\n            sw = image.width;\n            sh = image.height;\n            dw = sw;\n            dh = sh;\n        } else if (args.length === 5) {\n            dx = args[1];\n            dy = args[2];\n            dw = args[3];\n            dh = args[4];\n            sw = image.width;\n            sh = image.height;\n        } else if (args.length === 9) {\n            sx = args[1];\n            sy = args[2];\n            sw = args[3];\n            sh = args[4];\n            dx = args[5];\n            dy = args[6];\n            dw = args[7];\n            dh = args[8];\n        } else {\n            throw new Error(\"Inavlid number of arguments passed to drawImage: \" + arguments.length);\n        }\n\n        parent = this.__closestGroupOrSvg();\n        currentElement = this.__currentElement;\n        var translateDirective = \"translate(\" + dx + \", \" + dy + \")\";\n        if (image instanceof ctx) {\n            //canvas2svg mock canvas context. In the future we may want to clone nodes instead.\n            //also I'm currently ignoring dw, dh, sw, sh, sx, sy for a mock context.\n            svg = image.getSvg().cloneNode(true);\n            if (svg.childNodes && svg.childNodes.length > 1) {\n                defs = svg.childNodes[0];\n                while(defs.childNodes.length) {\n                    id = defs.childNodes[0].getAttribute(\"id\");\n                    this.__ids[id] = id;\n                    this.__defs.appendChild(defs.childNodes[0]);\n                }\n                group = svg.childNodes[1];\n                if (group) {\n                    //save original transform\n                    var originTransform = group.getAttribute(\"transform\");\n                    var transformDirective;\n                    if (originTransform) {\n                        transformDirective = originTransform+\" \"+translateDirective;\n                    } else {\n                        transformDirective = translateDirective;\n                    }\n                    group.setAttribute(\"transform\", transformDirective);\n                    parent.appendChild(group);\n                }\n            }\n        } else if (image.nodeName === \"CANVAS\" || image.nodeName === \"IMG\") {\n            //canvas or image\n            svgImage = this.__createElement(\"image\");\n            svgImage.setAttribute(\"width\", dw);\n            svgImage.setAttribute(\"height\", dh);\n            svgImage.setAttribute(\"preserveAspectRatio\", \"none\");\n\n            if (sx || sy || sw !== image.width || sh !== image.height) {\n                //crop the image using a temporary canvas\n                canvas = this.__document.createElement(\"canvas\");\n                canvas.width = dw;\n                canvas.height = dh;\n                context = canvas.getContext(\"2d\");\n                context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);\n                image = canvas;\n            }\n            svgImage.setAttribute(\"transform\", translateDirective);\n            svgImage.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\",\n                image.nodeName === \"CANVAS\" ? image.toDataURL() : image.getAttribute(\"src\"));\n            parent.appendChild(svgImage);\n        }\n    };\n\n    /**\n     * Generates a pattern tag\n     */\n    ctx.prototype.createPattern = function (image, repetition) {\n        var pattern = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"pattern\"), id = randomString(this.__ids),\n            img;\n        pattern.setAttribute(\"id\", id);\n        pattern.setAttribute(\"width\", image.width);\n        pattern.setAttribute(\"height\", image.height);\n        if (image.nodeName === \"CANVAS\" || image.nodeName === \"IMG\") {\n            img = this.__document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\");\n            img.setAttribute(\"width\", image.width);\n            img.setAttribute(\"height\", image.height);\n            img.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"xlink:href\",\n                image.nodeName === \"CANVAS\" ? image.toDataURL() : image.getAttribute(\"src\"));\n            pattern.appendChild(img);\n            this.__defs.appendChild(pattern);\n        } else if (image instanceof ctx) {\n            pattern.appendChild(image.__root.childNodes[1]);\n            this.__defs.appendChild(pattern);\n        }\n        return new CanvasPattern(pattern, this);\n    };\n\n    ctx.prototype.setLineDash = function (dashArray) {\n        if (dashArray && dashArray.length > 0) {\n            this.lineDash = dashArray.join(\",\");\n        } else {\n            this.lineDash = null;\n        }\n    };\n\n    /**\n     * Not yet implemented\n     */\n    ctx.prototype.drawFocusRing = function () {};\n    ctx.prototype.createImageData = function () {};\n    ctx.prototype.getImageData = function () {};\n    ctx.prototype.putImageData = function () {};\n    ctx.prototype.globalCompositeOperation = function () {};\n    ctx.prototype.setTransform = function () {};\n\n    //add options for alternative namespace\n    if (typeof window === \"object\") {\n        window.C2S = ctx;\n    }\n\n    // CommonJS/Browserify\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        module.exports = ctx;\n    }\n\n}());\n","'use strict';\n\nvar copy             = require('es5-ext/object/copy')\n  , normalizeOptions = require('es5-ext/object/normalize-options')\n  , ensureCallable   = require('es5-ext/object/valid-callable')\n  , map              = require('es5-ext/object/map')\n  , callable         = require('es5-ext/object/valid-callable')\n  , validValue       = require('es5-ext/object/valid-value')\n\n  , bind = Function.prototype.bind, defineProperty = Object.defineProperty\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , define;\n\ndefine = function (name, desc, options) {\n\tvar value = validValue(desc) && callable(desc.value), dgs;\n\tdgs = copy(desc);\n\tdelete dgs.writable;\n\tdelete dgs.value;\n\tdgs.get = function () {\n\t\tif (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;\n\t\tdesc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);\n\t\tdefineProperty(this, name, desc);\n\t\treturn this[name];\n\t};\n\treturn dgs;\n};\n\nmodule.exports = function (props/*, options*/) {\n\tvar options = normalizeOptions(arguments[1]);\n\tif (options.resolveContext != null) ensureCallable(options.resolveContext);\n\treturn map(props, function (desc, name) { return define(name, desc, options); });\n};\n","'use strict';\n\nvar assign        = require('es5-ext/object/assign')\n  , normalizeOpts = require('es5-ext/object/normalize-options')\n  , isCallable    = require('es5-ext/object/is-callable')\n  , contains      = require('es5-ext/string/#/contains')\n\n  , d;\n\nd = module.exports = function (dscr, value/*, options*/) {\n\tvar c, e, w, options, desc;\n\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\n\t\toptions = value;\n\t\tvalue = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[2];\n\t}\n\tif (dscr == null) {\n\t\tc = w = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t\tw = contains.call(dscr, 'w');\n\t}\n\n\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n\nd.gs = function (dscr, get, set/*, options*/) {\n\tvar c, e, options, desc;\n\tif (typeof dscr !== 'string') {\n\t\toptions = set;\n\t\tset = get;\n\t\tget = dscr;\n\t\tdscr = null;\n\t} else {\n\t\toptions = arguments[3];\n\t}\n\tif (get == null) {\n\t\tget = undefined;\n\t} else if (!isCallable(get)) {\n\t\toptions = get;\n\t\tget = set = undefined;\n\t} else if (set == null) {\n\t\tset = undefined;\n\t} else if (!isCallable(set)) {\n\t\toptions = set;\n\t\tset = undefined;\n\t}\n\tif (dscr == null) {\n\t\tc = true;\n\t\te = false;\n\t} else {\n\t\tc = contains.call(dscr, 'c');\n\t\te = contains.call(dscr, 'e');\n\t}\n\n\tdesc = { get: get, set: set, configurable: c, enumerable: e };\n\treturn !options ? desc : assign(normalizeOpts(options), desc);\n};\n","// Inspired by Google Closure:\n// http://closure-library.googlecode.com/svn/docs/\n// closure_goog_array_array.js.html#goog.array.clear\n\n'use strict';\n\nvar value = require('../../object/valid-value');\n\nmodule.exports = function () {\n\tvalue(this).length = 0;\n\treturn this;\n};\n","'use strict';\n\nvar toPosInt = require('../../number/to-pos-integer')\n  , value    = require('../../object/valid-value')\n\n  , indexOf = Array.prototype.indexOf\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , abs = Math.abs, floor = Math.floor;\n\nmodule.exports = function (searchElement/*, fromIndex*/) {\n\tvar i, l, fromIndex, val;\n\tif (searchElement === searchElement) { //jslint: ignore\n\t\treturn indexOf.apply(this, arguments);\n\t}\n\n\tl = toPosInt(value(this).length);\n\tfromIndex = arguments[1];\n\tif (isNaN(fromIndex)) fromIndex = 0;\n\telse if (fromIndex >= 0) fromIndex = floor(fromIndex);\n\telse fromIndex = toPosInt(this.length) - floor(abs(fromIndex));\n\n\tfor (i = fromIndex; i < l; ++i) {\n\t\tif (hasOwnProperty.call(this, i)) {\n\t\t\tval = this[i];\n\t\t\tif (val !== val) return i; //jslint: ignore\n\t\t}\n\t}\n\treturn -1;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Array.from\n\t: require('./shim');\n","'use strict';\n\nmodule.exports = function () {\n\tvar from = Array.from, arr, result;\n\tif (typeof from !== 'function') return false;\n\tarr = ['raz', 'dwa'];\n\tresult = from(arr);\n\treturn Boolean(result && (result !== arr) && (result[1] === 'dwa'));\n};\n","'use strict';\n\nvar iteratorSymbol = require('es6-symbol').iterator\n  , isArguments    = require('../../function/is-arguments')\n  , isFunction     = require('../../function/is-function')\n  , toPosInt       = require('../../number/to-pos-integer')\n  , callable       = require('../../object/valid-callable')\n  , validValue     = require('../../object/valid-value')\n  , isString       = require('../../string/is-string')\n\n  , isArray = Array.isArray, call = Function.prototype.call\n  , desc = { configurable: true, enumerable: true, writable: true, value: null }\n  , defineProperty = Object.defineProperty;\n\nmodule.exports = function (arrayLike/*, mapFn, thisArg*/) {\n\tvar mapFn = arguments[1], thisArg = arguments[2], Constructor, i, j, arr, l, code, iterator\n\t  , result, getIterator, value;\n\n\tarrayLike = Object(validValue(arrayLike));\n\n\tif (mapFn != null) callable(mapFn);\n\tif (!this || (this === Array) || !isFunction(this)) {\n\t\t// Result: Plain array\n\t\tif (!mapFn) {\n\t\t\tif (isArguments(arrayLike)) {\n\t\t\t\t// Source: Arguments\n\t\t\t\tl = arrayLike.length;\n\t\t\t\tif (l !== 1) return Array.apply(null, arrayLike);\n\t\t\t\tarr = new Array(1);\n\t\t\t\tarr[0] = arrayLike[0];\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t\tif (isArray(arrayLike)) {\n\t\t\t\t// Source: Array\n\t\t\t\tarr = new Array(l = arrayLike.length);\n\t\t\t\tfor (i = 0; i < l; ++i) arr[i] = arrayLike[i];\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t}\n\t\tarr = [];\n\t} else {\n\t\t// Result: Non plain array\n\t\tConstructor = this;\n\t}\n\n\tif (!isArray(arrayLike)) {\n\t\tif ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {\n\t\t\t// Source: Iterator\n\t\t\titerator = callable(getIterator).call(arrayLike);\n\t\t\tif (Constructor) arr = new Constructor();\n\t\t\tresult = iterator.next();\n\t\t\ti = 0;\n\t\t\twhile (!result.done) {\n\t\t\t\tvalue = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;\n\t\t\t\tif (!Constructor) {\n\t\t\t\t\tarr[i] = value;\n\t\t\t\t} else {\n\t\t\t\t\tdesc.value = value;\n\t\t\t\t\tdefineProperty(arr, i, desc);\n\t\t\t\t}\n\t\t\t\tresult = iterator.next();\n\t\t\t\t++i;\n\t\t\t}\n\t\t\tl = i;\n\t\t} else if (isString(arrayLike)) {\n\t\t\t// Source: String\n\t\t\tl = arrayLike.length;\n\t\t\tif (Constructor) arr = new Constructor();\n\t\t\tfor (i = 0, j = 0; i < l; ++i) {\n\t\t\t\tvalue = arrayLike[i];\n\t\t\t\tif ((i + 1) < l) {\n\t\t\t\t\tcode = value.charCodeAt(0);\n\t\t\t\t\tif ((code >= 0xD800) && (code <= 0xDBFF)) value += arrayLike[++i];\n\t\t\t\t}\n\t\t\t\tvalue = mapFn ? call.call(mapFn, thisArg, value, j) : value;\n\t\t\t\tif (!Constructor) {\n\t\t\t\t\tarr[j] = value;\n\t\t\t\t} else {\n\t\t\t\t\tdesc.value = value;\n\t\t\t\t\tdefineProperty(arr, j, desc);\n\t\t\t\t}\n\t\t\t\t++j;\n\t\t\t}\n\t\t\tl = j;\n\t\t}\n\t}\n\tif (l === undefined) {\n\t\t// Source: array or array-like\n\t\tl = toPosInt(arrayLike.length);\n\t\tif (Constructor) arr = new Constructor(l);\n\t\tfor (i = 0; i < l; ++i) {\n\t\t\tvalue = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];\n\t\t\tif (!Constructor) {\n\t\t\t\tarr[i] = value;\n\t\t\t} else {\n\t\t\t\tdesc.value = value;\n\t\t\t\tdefineProperty(arr, i, desc);\n\t\t\t}\n\t\t}\n\t}\n\tif (Constructor) {\n\t\tdesc.value = null;\n\t\tarr.length = l;\n\t}\n\treturn arr;\n};\n","'use strict';\n\nvar toString = Object.prototype.toString\n\n  , id = toString.call((function () { return arguments; }()));\n\nmodule.exports = function (x) { return (toString.call(x) === id); };\n","'use strict';\n\nvar toString = Object.prototype.toString\n\n  , id = toString.call(require('./noop'));\n\nmodule.exports = function (f) {\n\treturn (typeof f === \"function\") && (toString.call(f) === id);\n};\n","'use strict';\n\nmodule.exports = function () {};\n","'use strict';\n\nmodule.exports = new Function(\"return this\")();\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Math.sign\n\t: require('./shim');\n","'use strict';\n\nmodule.exports = function () {\n\tvar sign = Math.sign;\n\tif (typeof sign !== 'function') return false;\n\treturn ((sign(10) === 1) && (sign(-20) === -1));\n};\n","'use strict';\n\nmodule.exports = function (value) {\n\tvalue = Number(value);\n\tif (isNaN(value) || (value === 0)) return value;\n\treturn (value > 0) ? 1 : -1;\n};\n","'use strict';\n\nvar sign = require('../math/sign')\n\n  , abs = Math.abs, floor = Math.floor;\n\nmodule.exports = function (value) {\n\tif (isNaN(value)) return 0;\n\tvalue = Number(value);\n\tif ((value === 0) || !isFinite(value)) return value;\n\treturn sign(value) * floor(abs(value));\n};\n","'use strict';\n\nvar toInteger = require('./to-integer')\n\n  , max = Math.max;\n\nmodule.exports = function (value) { return max(0, toInteger(value)); };\n","// Internal method, used by iteration functions.\n// Calls a function for each key-value pair found in object\n// Optionally takes compareFn to iterate object in specific order\n\n'use strict';\n\nvar callable = require('./valid-callable')\n  , value    = require('./valid-value')\n\n  , bind = Function.prototype.bind, call = Function.prototype.call, keys = Object.keys\n  , propertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function (method, defVal) {\n\treturn function (obj, cb/*, thisArg, compareFn*/) {\n\t\tvar list, thisArg = arguments[2], compareFn = arguments[3];\n\t\tobj = Object(value(obj));\n\t\tcallable(cb);\n\n\t\tlist = keys(obj);\n\t\tif (compareFn) {\n\t\t\tlist.sort((typeof compareFn === 'function') ? bind.call(compareFn, obj) : undefined);\n\t\t}\n\t\tif (typeof method !== 'function') method = list[method];\n\t\treturn call.call(method, list, function (key, index) {\n\t\t\tif (!propertyIsEnumerable.call(obj, key)) return defVal;\n\t\t\treturn call.call(cb, thisArg, obj[key], key, obj, index);\n\t\t});\n\t};\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.assign\n\t: require('./shim');\n","'use strict';\n\nmodule.exports = function () {\n\tvar assign = Object.assign, obj;\n\tif (typeof assign !== 'function') return false;\n\tobj = { foo: 'raz' };\n\tassign(obj, { bar: 'dwa' }, { trzy: 'trzy' });\n\treturn (obj.foo + obj.bar + obj.trzy) === 'razdwatrzy';\n};\n","'use strict';\n\nvar keys  = require('../keys')\n  , value = require('../valid-value')\n\n  , max = Math.max;\n\nmodule.exports = function (dest, src/*, …srcn*/) {\n\tvar error, i, l = max(arguments.length, 2), assign;\n\tdest = Object(value(dest));\n\tassign = function (key) {\n\t\ttry { dest[key] = src[key]; } catch (e) {\n\t\t\tif (!error) error = e;\n\t\t}\n\t};\n\tfor (i = 1; i < l; ++i) {\n\t\tsrc = arguments[i];\n\t\tkeys(src).forEach(assign);\n\t}\n\tif (error !== undefined) throw error;\n\treturn dest;\n};\n","'use strict';\n\nvar aFrom  = require('../array/from')\n  , assign = require('./assign')\n  , value  = require('./valid-value');\n\nmodule.exports = function (obj/*, propertyNames, options*/) {\n\tvar copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);\n\tif (copy !== obj && !propertyNames) return copy;\n\tvar result = {};\n\tif (propertyNames) {\n\t\taFrom(propertyNames, function (propertyName) {\n\t\t\tif (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];\n\t\t});\n\t} else {\n\t\tassign(result, obj);\n\t}\n\treturn result;\n};\n","// Workaround for http://code.google.com/p/v8/issues/detail?id=2804\n\n'use strict';\n\nvar create = Object.create, shim;\n\nif (!require('./set-prototype-of/is-implemented')()) {\n\tshim = require('./set-prototype-of/shim');\n}\n\nmodule.exports = (function () {\n\tvar nullObject, props, desc;\n\tif (!shim) return create;\n\tif (shim.level !== 1) return create;\n\n\tnullObject = {};\n\tprops = {};\n\tdesc = { configurable: false, enumerable: false, writable: true,\n\t\tvalue: undefined };\n\tObject.getOwnPropertyNames(Object.prototype).forEach(function (name) {\n\t\tif (name === '__proto__') {\n\t\t\tprops[name] = { configurable: true, enumerable: false, writable: true,\n\t\t\t\tvalue: undefined };\n\t\t\treturn;\n\t\t}\n\t\tprops[name] = desc;\n\t});\n\tObject.defineProperties(nullObject, props);\n\n\tObject.defineProperty(shim, 'nullPolyfill', { configurable: false,\n\t\tenumerable: false, writable: false, value: nullObject });\n\n\treturn function (prototype, props) {\n\t\treturn create((prototype === null) ? nullObject : prototype, props);\n\t};\n}());\n","'use strict';\n\nmodule.exports = require('./_iterate')('forEach');\n","// Deprecated\n\n'use strict';\n\nmodule.exports = function (obj) { return typeof obj === 'function'; };\n","'use strict';\n\nvar map = { 'function': true, object: true };\n\nmodule.exports = function (x) {\n\treturn ((x != null) && map[typeof x]) || false;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.keys\n\t: require('./shim');\n","'use strict';\n\nmodule.exports = function () {\n\ttry {\n\t\tObject.keys('primitive');\n\t\treturn true;\n\t} catch (e) { return false; }\n};\n","'use strict';\n\nvar keys = Object.keys;\n\nmodule.exports = function (object) {\n\treturn keys(object == null ? object : Object(object));\n};\n","'use strict';\n\nvar callable = require('./valid-callable')\n  , forEach  = require('./for-each')\n\n  , call = Function.prototype.call;\n\nmodule.exports = function (obj, cb/*, thisArg*/) {\n\tvar o = {}, thisArg = arguments[2];\n\tcallable(cb);\n\tforEach(obj, function (value, key, obj, index) {\n\t\to[key] = call.call(cb, thisArg, value, key, obj, index);\n\t});\n\treturn o;\n};\n","'use strict';\n\nvar forEach = Array.prototype.forEach, create = Object.create;\n\nvar process = function (src, obj) {\n\tvar key;\n\tfor (key in src) obj[key] = src[key];\n};\n\nmodule.exports = function (options/*, …options*/) {\n\tvar result = create(null);\n\tforEach.call(arguments, function (options) {\n\t\tif (options == null) return;\n\t\tprocess(Object(options), result);\n\t});\n\treturn result;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? Object.setPrototypeOf\n\t: require('./shim');\n","'use strict';\n\nvar create = Object.create, getPrototypeOf = Object.getPrototypeOf\n  , x = {};\n\nmodule.exports = function (/*customCreate*/) {\n\tvar setPrototypeOf = Object.setPrototypeOf\n\t  , customCreate = arguments[0] || create;\n\tif (typeof setPrototypeOf !== 'function') return false;\n\treturn getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;\n};\n","// Big thanks to @WebReflection for sorting this out\n// https://gist.github.com/WebReflection/5593554\n\n'use strict';\n\nvar isObject      = require('../is-object')\n  , value         = require('../valid-value')\n\n  , isPrototypeOf = Object.prototype.isPrototypeOf\n  , defineProperty = Object.defineProperty\n  , nullDesc = { configurable: true, enumerable: false, writable: true,\n\t\tvalue: undefined }\n  , validate;\n\nvalidate = function (obj, prototype) {\n\tvalue(obj);\n\tif ((prototype === null) || isObject(prototype)) return obj;\n\tthrow new TypeError('Prototype must be null or an object');\n};\n\nmodule.exports = (function (status) {\n\tvar fn, set;\n\tif (!status) return null;\n\tif (status.level === 2) {\n\t\tif (status.set) {\n\t\t\tset = status.set;\n\t\t\tfn = function (obj, prototype) {\n\t\t\t\tset.call(validate(obj, prototype), prototype);\n\t\t\t\treturn obj;\n\t\t\t};\n\t\t} else {\n\t\t\tfn = function (obj, prototype) {\n\t\t\t\tvalidate(obj, prototype).__proto__ = prototype;\n\t\t\t\treturn obj;\n\t\t\t};\n\t\t}\n\t} else {\n\t\tfn = function self(obj, prototype) {\n\t\t\tvar isNullBase;\n\t\t\tvalidate(obj, prototype);\n\t\t\tisNullBase = isPrototypeOf.call(self.nullPolyfill, obj);\n\t\t\tif (isNullBase) delete self.nullPolyfill.__proto__;\n\t\t\tif (prototype === null) prototype = self.nullPolyfill;\n\t\t\tobj.__proto__ = prototype;\n\t\t\tif (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);\n\t\t\treturn obj;\n\t\t};\n\t}\n\treturn Object.defineProperty(fn, 'level', { configurable: false,\n\t\tenumerable: false, writable: false, value: status.level });\n}((function () {\n\tvar x = Object.create(null), y = {}, set\n\t  , desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');\n\n\tif (desc) {\n\t\ttry {\n\t\t\tset = desc.set; // Opera crashes at this point\n\t\t\tset.call(x, y);\n\t\t} catch (ignore) { }\n\t\tif (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };\n\t}\n\n\tx.__proto__ = y;\n\tif (Object.getPrototypeOf(x) === y) return { level: 2 };\n\n\tx = {};\n\tx.__proto__ = y;\n\tif (Object.getPrototypeOf(x) === y) return { level: 1 };\n\n\treturn false;\n}())));\n\nrequire('../create');\n","'use strict';\n\nmodule.exports = function (fn) {\n\tif (typeof fn !== 'function') throw new TypeError(fn + \" is not a function\");\n\treturn fn;\n};\n","'use strict';\n\nvar isObject = require('./is-object');\n\nmodule.exports = function (value) {\n\tif (!isObject(value)) throw new TypeError(value + \" is not an Object\");\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = function (value) {\n\tif (value == null) throw new TypeError(\"Cannot use null or undefined\");\n\treturn value;\n};\n","'use strict';\n\nmodule.exports = require('./is-implemented')()\n\t? String.prototype.contains\n\t: require('./shim');\n","'use strict';\n\nvar str = 'razdwatrzy';\n\nmodule.exports = function () {\n\tif (typeof str.contains !== 'function') return false;\n\treturn ((str.contains('dwa') === true) && (str.contains('foo') === false));\n};\n","'use strict';\n\nvar indexOf = String.prototype.indexOf;\n\nmodule.exports = function (searchString/*, position*/) {\n\treturn indexOf.call(this, searchString, arguments[1]) > -1;\n};\n","'use strict';\n\nvar toString = Object.prototype.toString\n\n  , id = toString.call('');\n\nmodule.exports = function (x) {\n\treturn (typeof x === 'string') || (x && (typeof x === 'object') &&\n\t\t((x instanceof String) || (toString.call(x) === id))) || false;\n};\n","'use strict';\n\nvar generated = Object.create(null)\n\n  , random = Math.random;\n\nmodule.exports = function () {\n\tvar str;\n\tdo { str = random().toString(36).slice(2); } while (generated[str]);\n\treturn str;\n};\n","'use strict';\n\nvar setPrototypeOf = require('es5-ext/object/set-prototype-of')\n  , contains       = require('es5-ext/string/#/contains')\n  , d              = require('d')\n  , Iterator       = require('./')\n\n  , defineProperty = Object.defineProperty\n  , ArrayIterator;\n\nArrayIterator = module.exports = function (arr, kind) {\n\tif (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);\n\tIterator.call(this, arr);\n\tif (!kind) kind = 'value';\n\telse if (contains.call(kind, 'key+value')) kind = 'key+value';\n\telse if (contains.call(kind, 'key')) kind = 'key';\n\telse kind = 'value';\n\tdefineProperty(this, '__kind__', d('', kind));\n};\nif (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);\n\nArrayIterator.prototype = Object.create(Iterator.prototype, {\n\tconstructor: d(ArrayIterator),\n\t_resolve: d(function (i) {\n\t\tif (this.__kind__ === 'value') return this.__list__[i];\n\t\tif (this.__kind__ === 'key+value') return [i, this.__list__[i]];\n\t\treturn i;\n\t}),\n\ttoString: d(function () { return '[object Array Iterator]'; })\n});\n","'use strict';\n\nvar isArguments = require('es5-ext/function/is-arguments')\n  , callable    = require('es5-ext/object/valid-callable')\n  , isString    = require('es5-ext/string/is-string')\n  , get         = require('./get')\n\n  , isArray = Array.isArray, call = Function.prototype.call\n  , some = Array.prototype.some;\n\nmodule.exports = function (iterable, cb/*, thisArg*/) {\n\tvar mode, thisArg = arguments[2], result, doBreak, broken, i, l, char, code;\n\tif (isArray(iterable) || isArguments(iterable)) mode = 'array';\n\telse if (isString(iterable)) mode = 'string';\n\telse iterable = get(iterable);\n\n\tcallable(cb);\n\tdoBreak = function () { broken = true; };\n\tif (mode === 'array') {\n\t\tsome.call(iterable, function (value) {\n\t\t\tcall.call(cb, thisArg, value, doBreak);\n\t\t\tif (broken) return true;\n\t\t});\n\t\treturn;\n\t}\n\tif (mode === 'string') {\n\t\tl = iterable.length;\n\t\tfor (i = 0; i < l; ++i) {\n\t\t\tchar = iterable[i];\n\t\t\tif ((i + 1) < l) {\n\t\t\t\tcode = char.charCodeAt(0);\n\t\t\t\tif ((code >= 0xD800) && (code <= 0xDBFF)) char += iterable[++i];\n\t\t\t}\n\t\t\tcall.call(cb, thisArg, char, doBreak);\n\t\t\tif (broken) break;\n\t\t}\n\t\treturn;\n\t}\n\tresult = iterable.next();\n\n\twhile (!result.done) {\n\t\tcall.call(cb, thisArg, result.value, doBreak);\n\t\tif (broken) return;\n\t\tresult = iterable.next();\n\t}\n};\n","'use strict';\n\nvar isArguments    = require('es5-ext/function/is-arguments')\n  , isString       = require('es5-ext/string/is-string')\n  , ArrayIterator  = require('./array')\n  , StringIterator = require('./string')\n  , iterable       = require('./valid-iterable')\n  , iteratorSymbol = require('es6-symbol').iterator;\n\nmodule.exports = function (obj) {\n\tif (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();\n\tif (isArguments(obj)) return new ArrayIterator(obj);\n\tif (isString(obj)) return new StringIterator(obj);\n\treturn new ArrayIterator(obj);\n};\n","'use strict';\n\nvar clear    = require('es5-ext/array/#/clear')\n  , assign   = require('es5-ext/object/assign')\n  , callable = require('es5-ext/object/valid-callable')\n  , value    = require('es5-ext/object/valid-value')\n  , d        = require('d')\n  , autoBind = require('d/auto-bind')\n  , Symbol   = require('es6-symbol')\n\n  , defineProperty = Object.defineProperty\n  , defineProperties = Object.defineProperties\n  , Iterator;\n\nmodule.exports = Iterator = function (list, context) {\n\tif (!(this instanceof Iterator)) return new Iterator(list, context);\n\tdefineProperties(this, {\n\t\t__list__: d('w', value(list)),\n\t\t__context__: d('w', context),\n\t\t__nextIndex__: d('w', 0)\n\t});\n\tif (!context) return;\n\tcallable(context.on);\n\tcontext.on('_add', this._onAdd);\n\tcontext.on('_delete', this._onDelete);\n\tcontext.on('_clear', this._onClear);\n};\n\ndefineProperties(Iterator.prototype, assign({\n\tconstructor: d(Iterator),\n\t_next: d(function () {\n\t\tvar i;\n\t\tif (!this.__list__) return;\n\t\tif (this.__redo__) {\n\t\t\ti = this.__redo__.shift();\n\t\t\tif (i !== undefined) return i;\n\t\t}\n\t\tif (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;\n\t\tthis._unBind();\n\t}),\n\tnext: d(function () { return this._createResult(this._next()); }),\n\t_createResult: d(function (i) {\n\t\tif (i === undefined) return { done: true, value: undefined };\n\t\treturn { done: false, value: this._resolve(i) };\n\t}),\n\t_resolve: d(function (i) { return this.__list__[i]; }),\n\t_unBind: d(function () {\n\t\tthis.__list__ = null;\n\t\tdelete this.__redo__;\n\t\tif (!this.__context__) return;\n\t\tthis.__context__.off('_add', this._onAdd);\n\t\tthis.__context__.off('_delete', this._onDelete);\n\t\tthis.__context__.off('_clear', this._onClear);\n\t\tthis.__context__ = null;\n\t}),\n\ttoString: d(function () { return '[object Iterator]'; })\n}, autoBind({\n\t_onAdd: d(function (index) {\n\t\tif (index >= this.__nextIndex__) return;\n\t\t++this.__nextIndex__;\n\t\tif (!this.__redo__) {\n\t\t\tdefineProperty(this, '__redo__', d('c', [index]));\n\t\t\treturn;\n\t\t}\n\t\tthis.__redo__.forEach(function (redo, i) {\n\t\t\tif (redo >= index) this.__redo__[i] = ++redo;\n\t\t}, this);\n\t\tthis.__redo__.push(index);\n\t}),\n\t_onDelete: d(function (index) {\n\t\tvar i;\n\t\tif (index >= this.__nextIndex__) return;\n\t\t--this.__nextIndex__;\n\t\tif (!this.__redo__) return;\n\t\ti = this.__redo__.indexOf(index);\n\t\tif (i !== -1) this.__redo__.splice(i, 1);\n\t\tthis.__redo__.forEach(function (redo, i) {\n\t\t\tif (redo > index) this.__redo__[i] = --redo;\n\t\t}, this);\n\t}),\n\t_onClear: d(function () {\n\t\tif (this.__redo__) clear.call(this.__redo__);\n\t\tthis.__nextIndex__ = 0;\n\t})\n})));\n\ndefineProperty(Iterator.prototype, Symbol.iterator, d(function () {\n\treturn this;\n}));\ndefineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));\n","'use strict';\n\nvar isArguments    = require('es5-ext/function/is-arguments')\n  , isString       = require('es5-ext/string/is-string')\n  , iteratorSymbol = require('es6-symbol').iterator\n\n  , isArray = Array.isArray;\n\nmodule.exports = function (value) {\n\tif (value == null) return false;\n\tif (isArray(value)) return true;\n\tif (isString(value)) return true;\n\tif (isArguments(value)) return true;\n\treturn (typeof value[iteratorSymbol] === 'function');\n};\n","// Thanks @mathiasbynens\n// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols\n\n'use strict';\n\nvar setPrototypeOf = require('es5-ext/object/set-prototype-of')\n  , d              = require('d')\n  , Iterator       = require('./')\n\n  , defineProperty = Object.defineProperty\n  , StringIterator;\n\nStringIterator = module.exports = function (str) {\n\tif (!(this instanceof StringIterator)) return new StringIterator(str);\n\tstr = String(str);\n\tIterator.call(this, str);\n\tdefineProperty(this, '__length__', d('', str.length));\n\n};\nif (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);\n\nStringIterator.prototype = Object.create(Iterator.prototype, {\n\tconstructor: d(StringIterator),\n\t_next: d(function () {\n\t\tif (!this.__list__) return;\n\t\tif (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;\n\t\tthis._unBind();\n\t}),\n\t_resolve: d(function (i) {\n\t\tvar char = this.__list__[i], code;\n\t\tif (this.__nextIndex__ === this.__length__) return char;\n\t\tcode = char.charCodeAt(0);\n\t\tif ((code >= 0xD800) && (code <= 0xDBFF)) return char + this.__list__[this.__nextIndex__++];\n\t\treturn char;\n\t}),\n\ttoString: d(function () { return '[object String Iterator]'; })\n});\n","'use strict';\n\nvar isIterable = require('./is-iterable');\n\nmodule.exports = function (value) {\n\tif (!isIterable(value)) throw new TypeError(value + \" is not iterable\");\n\treturn value;\n};\n","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n * @version   3.0.2\n */\n\n(function() {\n    \"use strict\";\n    function lib$es6$promise$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$es6$promise$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$es6$promise$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$es6$promise$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$es6$promise$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$es6$promise$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;\n    var lib$es6$promise$asap$$len = 0;\n    var lib$es6$promise$asap$$toString = {}.toString;\n    var lib$es6$promise$asap$$vertxNext;\n    var lib$es6$promise$asap$$customSchedulerFn;\n\n    var lib$es6$promise$asap$$asap = function asap(callback, arg) {\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;\n      lib$es6$promise$asap$$len += 2;\n      if (lib$es6$promise$asap$$len === 2) {\n        // If len is 2, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        if (lib$es6$promise$asap$$customSchedulerFn) {\n          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);\n        } else {\n          lib$es6$promise$asap$$scheduleFlush();\n        }\n      }\n    }\n\n    function lib$es6$promise$asap$$setScheduler(scheduleFn) {\n      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;\n    }\n\n    function lib$es6$promise$asap$$setAsap(asapFn) {\n      lib$es6$promise$asap$$asap = asapFn;\n    }\n\n    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};\n    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$es6$promise$asap$$useNextTick() {\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // see https://github.com/cujojs/when/issues/410 for details\n      return function() {\n        process.nextTick(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$es6$promise$asap$$useVertxTimer() {\n      return function() {\n        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    function lib$es6$promise$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$es6$promise$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$es6$promise$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$es6$promise$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$es6$promise$asap$$flush, 1);\n      };\n    }\n\n    var lib$es6$promise$asap$$queue = new Array(1000);\n    function lib$es6$promise$asap$$flush() {\n      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {\n        var callback = lib$es6$promise$asap$$queue[i];\n        var arg = lib$es6$promise$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$es6$promise$asap$$queue[i] = undefined;\n        lib$es6$promise$asap$$queue[i+1] = undefined;\n      }\n\n      lib$es6$promise$asap$$len = 0;\n    }\n\n    function lib$es6$promise$asap$$attemptVertx() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$es6$promise$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$es6$promise$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$es6$promise$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$es6$promise$asap$$isNode) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();\n    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();\n    } else if (lib$es6$promise$asap$$isWorker) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();\n    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();\n    } else {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();\n    }\n\n    function lib$es6$promise$$internal$$noop() {}\n\n    var lib$es6$promise$$internal$$PENDING   = void 0;\n    var lib$es6$promise$$internal$$FULFILLED = 1;\n    var lib$es6$promise$$internal$$REJECTED  = 2;\n\n    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$selfFulfillment() {\n      return new TypeError(\"You cannot resolve a promise with itself\");\n    }\n\n    function lib$es6$promise$$internal$$cannotReturnOwn() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$es6$promise$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;\n        return lib$es6$promise$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {\n       lib$es6$promise$asap$$asap(function(promise) {\n        var sealed = false;\n        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$es6$promise$$internal$$resolve(promise, value);\n          } else {\n            lib$es6$promise$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$es6$promise$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$es6$promise$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = lib$es6$promise$$internal$$getThen(maybeThenable);\n\n        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$es6$promise$utils$$isFunction(then)) {\n          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$es6$promise$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());\n      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {\n        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      lib$es6$promise$$internal$$publish(promise);\n    }\n\n    function lib$es6$promise$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$es6$promise$$internal$$FULFILLED;\n\n      if (promise._subscribers.length !== 0) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);\n      }\n    }\n\n    function lib$es6$promise$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n      promise._state = lib$es6$promise$$internal$$REJECTED;\n      promise._result = reason;\n\n      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);\n    }\n\n    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$es6$promise$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$es6$promise$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$es6$promise$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$es6$promise$$internal$$reject(promise, error);\n      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      } else if (settled === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$es6$promise$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {\n      var enumerator = this;\n\n      enumerator._instanceConstructor = Constructor;\n      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (enumerator._validateInput(input)) {\n        enumerator._input     = input;\n        enumerator.length     = input.length;\n        enumerator._remaining = input.length;\n\n        enumerator._init();\n\n        if (enumerator.length === 0) {\n          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n        } else {\n          enumerator.length = enumerator.length || 0;\n          enumerator._enumerate();\n          if (enumerator._remaining === 0) {\n            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n          }\n        }\n      } else {\n        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());\n      }\n    }\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$es6$promise$utils$$isArray(input);\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {\n      var enumerator = this;\n\n      var length  = enumerator.length;\n      var promise = enumerator.promise;\n      var input   = enumerator._input;\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        enumerator._eachEntry(input[i], i);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var enumerator = this;\n      var c = enumerator._instanceConstructor;\n\n      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {\n          entry._onerror = null;\n          enumerator._settledAt(entry._state, i, entry._result);\n        } else {\n          enumerator._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        enumerator._remaining--;\n        enumerator._result[i] = entry;\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var enumerator = this;\n      var promise = enumerator.promise;\n\n      if (promise._state === lib$es6$promise$$internal$$PENDING) {\n        enumerator._remaining--;\n\n        if (state === lib$es6$promise$$internal$$REJECTED) {\n          lib$es6$promise$$internal$$reject(promise, value);\n        } else {\n          enumerator._result[i] = value;\n        }\n      }\n\n      if (enumerator._remaining === 0) {\n        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$es6$promise$promise$all$$all(entries) {\n      return new lib$es6$promise$enumerator$$default(this, entries).promise;\n    }\n    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;\n    function lib$es6$promise$promise$race$$race(entries) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (!lib$es6$promise$utils$$isArray(entries)) {\n        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$es6$promise$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;\n    function lib$es6$promise$promise$resolve$$resolve(object) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;\n    function lib$es6$promise$promise$reject$$reject(reason) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;\n\n    var lib$es6$promise$promise$$counter = 0;\n\n    function lib$es6$promise$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$es6$promise$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise's eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class Promise\n      @param {function} resolver\n      Useful for tooling.\n      @constructor\n    */\n    function lib$es6$promise$promise$$Promise(resolver) {\n      this._id = lib$es6$promise$promise$$counter++;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if (lib$es6$promise$$internal$$noop !== resolver) {\n        if (!lib$es6$promise$utils$$isFunction(resolver)) {\n          lib$es6$promise$promise$$needsResolver();\n        }\n\n        if (!(this instanceof lib$es6$promise$promise$$Promise)) {\n          lib$es6$promise$promise$$needsNew();\n        }\n\n        lib$es6$promise$$internal$$initializePromise(this, resolver);\n      }\n    }\n\n    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;\n    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;\n    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;\n    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;\n    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;\n    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;\n    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;\n\n    lib$es6$promise$promise$$Promise.prototype = {\n      constructor: lib$es6$promise$promise$$Promise,\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n          return this;\n        }\n\n        var child = new this.constructor(lib$es6$promise$$internal$$noop);\n        var result = parent._result;\n\n        if (state) {\n          var callback = arguments[state - 1];\n          lib$es6$promise$asap$$asap(function(){\n            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection) {\n        return this.then(null, onRejection);\n      }\n    };\n    function lib$es6$promise$polyfill$$polyfill() {\n      var local;\n\n      if (typeof global !== 'undefined') {\n          local = global;\n      } else if (typeof self !== 'undefined') {\n          local = self;\n      } else {\n          try {\n              local = Function('return this')();\n          } catch (e) {\n              throw new Error('polyfill failed because global object is unavailable in this environment');\n          }\n      }\n\n      var P = local.Promise;\n\n      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n        return;\n      }\n\n      local.Promise = lib$es6$promise$promise$$default;\n    }\n    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;\n\n    var lib$es6$promise$umd$$ES6Promise = {\n      'Promise': lib$es6$promise$promise$$default,\n      'polyfill': lib$es6$promise$polyfill$$default\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$es6$promise$umd$$ES6Promise; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$es6$promise$umd$$ES6Promise;\n    } else if (typeof this !== 'undefined') {\n      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;\n    }\n\n    lib$es6$promise$polyfill$$default();\n}).call(this);\n\n","'use strict';\n\nif (!require('./is-implemented')()) {\n\tObject.defineProperty(require('es5-ext/global'), 'Set',\n\t\t{ value: require('./polyfill'), configurable: true, enumerable: false,\n\t\t\twritable: true });\n}\n","'use strict';\n\nmodule.exports = function () {\n\tvar set, iterator, result;\n\tif (typeof Set !== 'function') return false;\n\tset = new Set(['raz', 'dwa', 'trzy']);\n\tif (String(set) !== '[object Set]') return false;\n\tif (set.size !== 3) return false;\n\tif (typeof set.add !== 'function') return false;\n\tif (typeof set.clear !== 'function') return false;\n\tif (typeof set.delete !== 'function') return false;\n\tif (typeof set.entries !== 'function') return false;\n\tif (typeof set.forEach !== 'function') return false;\n\tif (typeof set.has !== 'function') return false;\n\tif (typeof set.keys !== 'function') return false;\n\tif (typeof set.values !== 'function') return false;\n\n\titerator = set.values();\n\tresult = iterator.next();\n\tif (result.done !== false) return false;\n\tif (result.value !== 'raz') return false;\n\n\treturn true;\n};\n","// Exports true if environment provides native `Set` implementation,\n// whatever that is.\n\n'use strict';\n\nmodule.exports = (function () {\n\tif (typeof Set === 'undefined') return false;\n\treturn (Object.prototype.toString.call(Set.prototype) === '[object Set]');\n}());\n","'use strict';\n\nvar setPrototypeOf    = require('es5-ext/object/set-prototype-of')\n  , contains          = require('es5-ext/string/#/contains')\n  , d                 = require('d')\n  , Iterator          = require('es6-iterator')\n  , toStringTagSymbol = require('es6-symbol').toStringTag\n\n  , defineProperty = Object.defineProperty\n  , SetIterator;\n\nSetIterator = module.exports = function (set, kind) {\n\tif (!(this instanceof SetIterator)) return new SetIterator(set, kind);\n\tIterator.call(this, set.__setData__, set);\n\tif (!kind) kind = 'value';\n\telse if (contains.call(kind, 'key+value')) kind = 'key+value';\n\telse kind = 'value';\n\tdefineProperty(this, '__kind__', d('', kind));\n};\nif (setPrototypeOf) setPrototypeOf(SetIterator, Iterator);\n\nSetIterator.prototype = Object.create(Iterator.prototype, {\n\tconstructor: d(SetIterator),\n\t_resolve: d(function (i) {\n\t\tif (this.__kind__ === 'value') return this.__list__[i];\n\t\treturn [this.__list__[i], this.__list__[i]];\n\t}),\n\ttoString: d(function () { return '[object Set Iterator]'; })\n});\ndefineProperty(SetIterator.prototype, toStringTagSymbol, d('c', 'Set Iterator'));\n","'use strict';\n\nvar clear          = require('es5-ext/array/#/clear')\n  , eIndexOf       = require('es5-ext/array/#/e-index-of')\n  , setPrototypeOf = require('es5-ext/object/set-prototype-of')\n  , callable       = require('es5-ext/object/valid-callable')\n  , d              = require('d')\n  , ee             = require('event-emitter')\n  , Symbol         = require('es6-symbol')\n  , iterator       = require('es6-iterator/valid-iterable')\n  , forOf          = require('es6-iterator/for-of')\n  , Iterator       = require('./lib/iterator')\n  , isNative       = require('./is-native-implemented')\n\n  , call = Function.prototype.call\n  , defineProperty = Object.defineProperty, getPrototypeOf = Object.getPrototypeOf\n  , SetPoly, getValues, NativeSet;\n\nif (isNative) NativeSet = Set;\n\nmodule.exports = SetPoly = function Set(/*iterable*/) {\n\tvar iterable = arguments[0], self;\n\tif (!(this instanceof SetPoly)) throw new TypeError('Constructor requires \\'new\\'');\n\tif (isNative && setPrototypeOf) self = setPrototypeOf(new NativeSet(), getPrototypeOf(this));\n\telse self = this;\n\tif (iterable != null) iterator(iterable);\n\tdefineProperty(self, '__setData__', d('c', []));\n\tif (!iterable) return self;\n\tforOf(iterable, function (value) {\n\t\tif (eIndexOf.call(this, value) !== -1) return;\n\t\tthis.push(value);\n\t}, self.__setData__);\n\treturn self;\n};\n\nif (isNative) {\n\tif (setPrototypeOf) setPrototypeOf(SetPoly, NativeSet);\n\tSetPoly.prototype = Object.create(NativeSet.prototype, { constructor: d(SetPoly) });\n}\n\nee(Object.defineProperties(SetPoly.prototype, {\n\tadd: d(function (value) {\n\t\tif (this.has(value)) return this;\n\t\tthis.emit('_add', this.__setData__.push(value) - 1, value);\n\t\treturn this;\n\t}),\n\tclear: d(function () {\n\t\tif (!this.__setData__.length) return;\n\t\tclear.call(this.__setData__);\n\t\tthis.emit('_clear');\n\t}),\n\tdelete: d(function (value) {\n\t\tvar index = eIndexOf.call(this.__setData__, value);\n\t\tif (index === -1) return false;\n\t\tthis.__setData__.splice(index, 1);\n\t\tthis.emit('_delete', index, value);\n\t\treturn true;\n\t}),\n\tentries: d(function () { return new Iterator(this, 'key+value'); }),\n\tforEach: d(function (cb/*, thisArg*/) {\n\t\tvar thisArg = arguments[1], iterator, result, value;\n\t\tcallable(cb);\n\t\titerator = this.values();\n\t\tresult = iterator._next();\n\t\twhile (result !== undefined) {\n\t\t\tvalue = iterator._resolve(result);\n\t\t\tcall.call(cb, thisArg, value, value, this);\n\t\t\tresult = iterator._next();\n\t\t}\n\t}),\n\thas: d(function (value) {\n\t\treturn (eIndexOf.call(this.__setData__, value) !== -1);\n\t}),\n\tkeys: d(getValues = function () { return this.values(); }),\n\tsize: d.gs(function () { return this.__setData__.length; }),\n\tvalues: d(function () { return new Iterator(this); }),\n\ttoString: d(function () { return '[object Set]'; })\n}));\ndefineProperty(SetPoly.prototype, Symbol.iterator, d(getValues));\ndefineProperty(SetPoly.prototype, Symbol.toStringTag, d('c', 'Set'));\n","'use strict';\n\nmodule.exports = require('./is-implemented')() ? Symbol : require('./polyfill');\n","'use strict';\n\nvar validTypes = { object: true, symbol: true };\n\nmodule.exports = function () {\n\tvar symbol;\n\tif (typeof Symbol !== 'function') return false;\n\tsymbol = Symbol('test symbol');\n\ttry { String(symbol); } catch (e) { return false; }\n\n\t// Return 'true' also for polyfills\n\tif (!validTypes[typeof Symbol.iterator]) return false;\n\tif (!validTypes[typeof Symbol.toPrimitive]) return false;\n\tif (!validTypes[typeof Symbol.toStringTag]) return false;\n\n\treturn true;\n};\n","'use strict';\n\nmodule.exports = function (x) {\n\tif (!x) return false;\n\tif (typeof x === 'symbol') return true;\n\tif (!x.constructor) return false;\n\tif (x.constructor.name !== 'Symbol') return false;\n\treturn (x[x.constructor.toStringTag] === 'Symbol');\n};\n","// ES2015 Symbol polyfill for environments that do not (or partially) support it\n\n'use strict';\n\nvar d              = require('d')\n  , validateSymbol = require('./validate-symbol')\n\n  , create = Object.create, defineProperties = Object.defineProperties\n  , defineProperty = Object.defineProperty, objPrototype = Object.prototype\n  , NativeSymbol, SymbolPolyfill, HiddenSymbol, globalSymbols = create(null)\n  , isNativeSafe;\n\nif (typeof Symbol === 'function') {\n\tNativeSymbol = Symbol;\n\ttry {\n\t\tString(NativeSymbol());\n\t\tisNativeSafe = true;\n\t} catch (ignore) {}\n}\n\nvar generateName = (function () {\n\tvar created = create(null);\n\treturn function (desc) {\n\t\tvar postfix = 0, name, ie11BugWorkaround;\n\t\twhile (created[desc + (postfix || '')]) ++postfix;\n\t\tdesc += (postfix || '');\n\t\tcreated[desc] = true;\n\t\tname = '@@' + desc;\n\t\tdefineProperty(objPrototype, name, d.gs(null, function (value) {\n\t\t\t// For IE11 issue see:\n\t\t\t// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/\n\t\t\t//    ie11-broken-getters-on-dom-objects\n\t\t\t// https://github.com/medikoo/es6-symbol/issues/12\n\t\t\tif (ie11BugWorkaround) return;\n\t\t\tie11BugWorkaround = true;\n\t\t\tdefineProperty(this, name, d(value));\n\t\t\tie11BugWorkaround = false;\n\t\t}));\n\t\treturn name;\n\t};\n}());\n\n// Internal constructor (not one exposed) for creating Symbol instances.\n// This one is used to ensure that `someSymbol instanceof Symbol` always return false\nHiddenSymbol = function Symbol(description) {\n\tif (this instanceof HiddenSymbol) throw new TypeError('Symbol is not a constructor');\n\treturn SymbolPolyfill(description);\n};\n\n// Exposed `Symbol` constructor\n// (returns instances of HiddenSymbol)\nmodule.exports = SymbolPolyfill = function Symbol(description) {\n\tvar symbol;\n\tif (this instanceof Symbol) throw new TypeError('Symbol is not a constructor');\n\tif (isNativeSafe) return NativeSymbol(description);\n\tsymbol = create(HiddenSymbol.prototype);\n\tdescription = (description === undefined ? '' : String(description));\n\treturn defineProperties(symbol, {\n\t\t__description__: d('', description),\n\t\t__name__: d('', generateName(description))\n\t});\n};\ndefineProperties(SymbolPolyfill, {\n\tfor: d(function (key) {\n\t\tif (globalSymbols[key]) return globalSymbols[key];\n\t\treturn (globalSymbols[key] = SymbolPolyfill(String(key)));\n\t}),\n\tkeyFor: d(function (s) {\n\t\tvar key;\n\t\tvalidateSymbol(s);\n\t\tfor (key in globalSymbols) if (globalSymbols[key] === s) return key;\n\t}),\n\n\t// To ensure proper interoperability with other native functions (e.g. Array.from)\n\t// fallback to eventual native implementation of given symbol\n\thasInstance: d('', (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill('hasInstance')),\n\tisConcatSpreadable: d('', (NativeSymbol && NativeSymbol.isConcatSpreadable) ||\n\t\tSymbolPolyfill('isConcatSpreadable')),\n\titerator: d('', (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill('iterator')),\n\tmatch: d('', (NativeSymbol && NativeSymbol.match) || SymbolPolyfill('match')),\n\treplace: d('', (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill('replace')),\n\tsearch: d('', (NativeSymbol && NativeSymbol.search) || SymbolPolyfill('search')),\n\tspecies: d('', (NativeSymbol && NativeSymbol.species) || SymbolPolyfill('species')),\n\tsplit: d('', (NativeSymbol && NativeSymbol.split) || SymbolPolyfill('split')),\n\ttoPrimitive: d('', (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill('toPrimitive')),\n\ttoStringTag: d('', (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill('toStringTag')),\n\tunscopables: d('', (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill('unscopables'))\n});\n\n// Internal tweaks for real symbol producer\ndefineProperties(HiddenSymbol.prototype, {\n\tconstructor: d(SymbolPolyfill),\n\ttoString: d('', function () { return this.__name__; })\n});\n\n// Proper implementation of methods exposed on Symbol.prototype\n// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype\ndefineProperties(SymbolPolyfill.prototype, {\n\ttoString: d(function () { return 'Symbol (' + validateSymbol(this).__description__ + ')'; }),\n\tvalueOf: d(function () { return validateSymbol(this); })\n});\ndefineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {\n\tvar symbol = validateSymbol(this);\n\tif (typeof symbol === 'symbol') return symbol;\n\treturn symbol.toString();\n}));\ndefineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));\n\n// Proper implementaton of toPrimitive and toStringTag for returned symbol instances\ndefineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,\n\td('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));\n\n// Note: It's important to define `toPrimitive` as last one, as some implementations\n// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)\n// And that may invoke error in definition flow:\n// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149\ndefineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,\n\td('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));\n","'use strict';\n\nvar isSymbol = require('./is-symbol');\n\nmodule.exports = function (value) {\n\tif (!isSymbol(value)) throw new TypeError(value + \" is not a symbol\");\n\treturn value;\n};\n","'use strict';\n\nif (!require('./is-implemented')()) {\n\tObject.defineProperty(require('es5-ext/global'), 'WeakMap',\n\t\t{ value: require('./polyfill'), configurable: true, enumerable: false,\n\t\t\twritable: true });\n}\n","'use strict';\n\nmodule.exports = function () {\n\tvar weakMap, x;\n\tif (typeof WeakMap !== 'function') return false;\n\ttry {\n\t\t// WebKit doesn't support arguments and crashes\n\t\tweakMap = new WeakMap([[x = {}, 'one'], [{}, 'two'], [{}, 'three']]);\n\t} catch (e) {\n\t\treturn false;\n\t}\n\tif (String(weakMap) !== '[object WeakMap]') return false;\n\tif (typeof weakMap.set !== 'function') return false;\n\tif (weakMap.set({}, 1) !== weakMap) return false;\n\tif (typeof weakMap.delete !== 'function') return false;\n\tif (typeof weakMap.has !== 'function') return false;\n\tif (weakMap.get(x) !== 'one') return false;\n\n\treturn true;\n};\n","// Exports true if environment provides native `WeakMap` implementation, whatever that is.\n\n'use strict';\n\nmodule.exports = (function () {\n\tif (typeof WeakMap !== 'function') return false;\n\treturn (Object.prototype.toString.call(new WeakMap()) === '[object WeakMap]');\n}());\n","'use strict';\n\nvar setPrototypeOf    = require('es5-ext/object/set-prototype-of')\n  , object            = require('es5-ext/object/valid-object')\n  , value             = require('es5-ext/object/valid-value')\n  , randomUniq        = require('es5-ext/string/random-uniq')\n  , d                 = require('d')\n  , getIterator       = require('es6-iterator/get')\n  , forOf             = require('es6-iterator/for-of')\n  , toStringTagSymbol = require('es6-symbol').toStringTag\n  , isNative          = require('./is-native-implemented')\n\n  , isArray = Array.isArray, defineProperty = Object.defineProperty\n  , hasOwnProperty = Object.prototype.hasOwnProperty, getPrototypeOf = Object.getPrototypeOf\n  , WeakMapPoly;\n\nmodule.exports = WeakMapPoly = function (/*iterable*/) {\n\tvar iterable = arguments[0], self;\n\tif (!(this instanceof WeakMapPoly)) throw new TypeError('Constructor requires \\'new\\'');\n\tif (isNative && setPrototypeOf && (WeakMap !== WeakMapPoly)) {\n\t\tself = setPrototypeOf(new WeakMap(), getPrototypeOf(this));\n\t} else {\n\t\tself = this;\n\t}\n\tif (iterable != null) {\n\t\tif (!isArray(iterable)) iterable = getIterator(iterable);\n\t}\n\tdefineProperty(self, '__weakMapData__', d('c', '$weakMap$' + randomUniq()));\n\tif (!iterable) return self;\n\tforOf(iterable, function (val) {\n\t\tvalue(val);\n\t\tself.set(val[0], val[1]);\n\t});\n\treturn self;\n};\n\nif (isNative) {\n\tif (setPrototypeOf) setPrototypeOf(WeakMapPoly, WeakMap);\n\tWeakMapPoly.prototype = Object.create(WeakMap.prototype, {\n\t\tconstructor: d(WeakMapPoly)\n\t});\n}\n\nObject.defineProperties(WeakMapPoly.prototype, {\n\tdelete: d(function (key) {\n\t\tif (hasOwnProperty.call(object(key), this.__weakMapData__)) {\n\t\t\tdelete key[this.__weakMapData__];\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}),\n\tget: d(function (key) {\n\t\tif (hasOwnProperty.call(object(key), this.__weakMapData__)) {\n\t\t\treturn key[this.__weakMapData__];\n\t\t}\n\t}),\n\thas: d(function (key) {\n\t\treturn hasOwnProperty.call(object(key), this.__weakMapData__);\n\t}),\n\tset: d(function (key, value) {\n\t\tdefineProperty(object(key), this.__weakMapData__, d('c', value));\n\t\treturn this;\n\t}),\n\ttoString: d(function () { return '[object WeakMap]'; })\n});\ndefineProperty(WeakMapPoly.prototype, toStringTagSymbol, d('c', 'WeakMap'));\n","'use strict';\n\nvar d        = require('d')\n  , callable = require('es5-ext/object/valid-callable')\n\n  , apply = Function.prototype.apply, call = Function.prototype.call\n  , create = Object.create, defineProperty = Object.defineProperty\n  , defineProperties = Object.defineProperties\n  , hasOwnProperty = Object.prototype.hasOwnProperty\n  , descriptor = { configurable: true, enumerable: false, writable: true }\n\n  , on, once, off, emit, methods, descriptors, base;\n\non = function (type, listener) {\n\tvar data;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) {\n\t\tdata = descriptor.value = create(null);\n\t\tdefineProperty(this, '__ee__', descriptor);\n\t\tdescriptor.value = null;\n\t} else {\n\t\tdata = this.__ee__;\n\t}\n\tif (!data[type]) data[type] = listener;\n\telse if (typeof data[type] === 'object') data[type].push(listener);\n\telse data[type] = [data[type], listener];\n\n\treturn this;\n};\n\nonce = function (type, listener) {\n\tvar once, self;\n\n\tcallable(listener);\n\tself = this;\n\ton.call(this, type, once = function () {\n\t\toff.call(self, type, once);\n\t\tapply.call(listener, this, arguments);\n\t});\n\n\tonce.__eeOnceListener__ = listener;\n\treturn this;\n};\n\noff = function (type, listener) {\n\tvar data, listeners, candidate, i;\n\n\tcallable(listener);\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return this;\n\tdata = this.__ee__;\n\tif (!data[type]) return this;\n\tlisteners = data[type];\n\n\tif (typeof listeners === 'object') {\n\t\tfor (i = 0; (candidate = listeners[i]); ++i) {\n\t\t\tif ((candidate === listener) ||\n\t\t\t\t\t(candidate.__eeOnceListener__ === listener)) {\n\t\t\t\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\n\t\t\t\telse listeners.splice(i, 1);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ((listeners === listener) ||\n\t\t\t\t(listeners.__eeOnceListener__ === listener)) {\n\t\t\tdelete data[type];\n\t\t}\n\t}\n\n\treturn this;\n};\n\nemit = function (type) {\n\tvar i, l, listener, listeners, args;\n\n\tif (!hasOwnProperty.call(this, '__ee__')) return;\n\tlisteners = this.__ee__[type];\n\tif (!listeners) return;\n\n\tif (typeof listeners === 'object') {\n\t\tl = arguments.length;\n\t\targs = new Array(l - 1);\n\t\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\n\n\t\tlisteners = listeners.slice();\n\t\tfor (i = 0; (listener = listeners[i]); ++i) {\n\t\t\tapply.call(listener, this, args);\n\t\t}\n\t} else {\n\t\tswitch (arguments.length) {\n\t\tcase 1:\n\t\t\tcall.call(listeners, this);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcall.call(listeners, this, arguments[1]);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcall.call(listeners, this, arguments[1], arguments[2]);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tl = arguments.length;\n\t\t\targs = new Array(l - 1);\n\t\t\tfor (i = 1; i < l; ++i) {\n\t\t\t\targs[i - 1] = arguments[i];\n\t\t\t}\n\t\t\tapply.call(listeners, this, args);\n\t\t}\n\t}\n};\n\nmethods = {\n\ton: on,\n\tonce: once,\n\toff: off,\n\temit: emit\n};\n\ndescriptors = {\n\ton: d(on),\n\tonce: d(once),\n\toff: d(off),\n\temit: d(emit)\n};\n\nbase = defineProperties({}, descriptors);\n\nmodule.exports = exports = function (o) {\n\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\n};\nexports.methods = methods;\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar strength_1 = require(\"./strength\");\n/**\n * An enum defining the linear constraint operators.\n */\nvar Operator;\n(function (Operator) {\n    Operator[Operator[\"Le\"] = 0] = \"Le\";\n    Operator[Operator[\"Ge\"] = 1] = \"Ge\";\n    Operator[Operator[\"Eq\"] = 2] = \"Eq\"; // ==\n})(Operator = exports.Operator || (exports.Operator = {}));\n/**\n * A linear constraint equation.\n *\n * A constraint equation is composed of an expression, an operator,\n * and a strength. The RHS of the equation is implicitly zero.\n *\n * @class\n */\nvar Constraint = (function () {\n    /**\n     * Construct a new Constraint.\n     *\n     * @param expression The constraint expression.\n     * @param operator The equation operator.\n     * @param strength The strength of the constraint.\n     */\n    function Constraint(expression, operator, strength) {\n        if (strength === void 0) { strength = strength_1.Strength.required; }\n        this._id = CnId++;\n        this._operator = operator;\n        this._expression = expression;\n        this._strength = strength_1.Strength.clip(strength);\n    }\n    /**\n     * A static constraint comparison function.\n     */\n    Constraint.Compare = function (a, b) {\n        return a.id - b.id;\n    };\n    Object.defineProperty(Constraint.prototype, \"id\", {\n        /**\n         * Returns the unique id number of the constraint.\n         */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Constraint.prototype, \"expression\", {\n        /**\n         * Returns the expression of the constraint.\n         */\n        get: function () {\n            return this._expression;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Constraint.prototype, \"op\", {\n        /**\n         * Returns the relational operator of the constraint.\n         */\n        get: function () {\n            return this._operator;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Constraint.prototype, \"strength\", {\n        /**\n         * Returns the strength of the constraint.\n         */\n        get: function () {\n            return this._strength;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Constraint;\n}());\nexports.Constraint = Constraint;\n/**\n * The internal constraint id counter.\n */\nvar CnId = 0;\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsu_1 = require(\"./tsu\");\nvar variable_1 = require(\"./variable\");\nvar maptype_1 = require(\"./maptype\");\n/**\n * An expression of variable terms and a constant.\n *\n * @class\n */\nvar Expression = (function () {\n    function Expression() {\n        var parsed = parseArgs(arguments);\n        this._terms = parsed.terms;\n        this._constant = parsed.constant;\n    }\n    Object.defineProperty(Expression.prototype, \"terms\", {\n        /**\n         * Returns the mapping of terms in the expression.\n         *\n         * This *must* be treated as const.\n         */\n        get: function () {\n            return this._terms;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Expression.prototype, \"constant\", {\n        /**\n         * Returns the constant of the expression.\n         */\n        get: function () {\n            return this._constant;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Expression.prototype, \"value\", {\n        /**\n         * Returns the computed value of the expression.\n         */\n        get: function () {\n            var result = this._constant;\n            tsu_1.forEach(this._terms, function (pair) {\n                result += pair.first.value * pair.second;\n            });\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Expression;\n}());\nexports.Expression = Expression;\n/**\n * An internal argument parsing function.\n */\nfunction parseArgs(args) {\n    var constant = 0.0;\n    var factory = function () { return 0.0; };\n    var terms = maptype_1.createMap(variable_1.Variable.Compare);\n    for (var i = 0, n = args.length; i < n; ++i) {\n        var item = args[i];\n        if (typeof item === \"number\") {\n            constant += item;\n        }\n        else if (item instanceof variable_1.Variable) {\n            terms.setDefault(item, factory).second += 1.0;\n        }\n        else if (item instanceof Array) {\n            if (item.length !== 2) {\n                throw new Error(\"array must have length 2\");\n            }\n            var value = item[0];\n            var variable = item[1];\n            if (typeof value !== \"number\") {\n                throw new Error(\"array item 0 must be a number\");\n            }\n            if (!(variable instanceof variable_1.Variable)) {\n                throw new Error(\"array item 1 must be a variable\");\n            }\n            terms.setDefault(variable, factory).second += value;\n        }\n        else {\n            throw new Error(\"invalid Expression argument: \" + JSON.stringify(item));\n        }\n    }\n    return { terms: terms, constant: constant };\n}\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./variable\"));\n__export(require(\"./expression\"));\n__export(require(\"./constraint\"));\n__export(require(\"./strength\"));\n__export(require(\"./solver\"));\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsu_1 = require(\"./tsu\");\nfunction createMap(compare) {\n    return new tsu_1.AssociativeArray(compare);\n}\nexports.createMap = createMap;\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar variable_1 = require(\"./variable\");\nvar expression_1 = require(\"./expression\");\nvar constraint_1 = require(\"./constraint\");\nvar strength_1 = require(\"./strength\");\nvar maptype_1 = require(\"./maptype\");\n/**\n * The constraint solver class.\n *\n * @class\n */\nvar Solver = (function () {\n    /**\n     * Construct a new Solver.\n     */\n    function Solver() {\n        this._cnMap = createCnMap();\n        this._rowMap = createRowMap();\n        this._varMap = createVarMap();\n        this._editMap = createEditMap();\n        this._infeasibleRows = [];\n        this._objective = new Row();\n        this._artificial = null;\n        this._idTick = 0;\n    }\n    /**\n     * Add a constraint to the solver.\n     */\n    Solver.prototype.addConstraint = function (constraint) {\n        var cnPair = this._cnMap.find(constraint);\n        if (cnPair !== undefined) {\n            throw new Error(\"duplicate constraint\");\n        }\n        // Creating a row causes symbols to be reserved for the variables\n        // in the constraint. If this method exits with an exception,\n        // then its possible those variables will linger in the var map.\n        // Since its likely that those variables will be used in other\n        // constraints and since exceptional conditions are uncommon,\n        // i'm not too worried about aggressive cleanup of the var map.\n        var data = this._createRow(constraint);\n        var row = data.row;\n        var tag = data.tag;\n        var subject = this._chooseSubject(row, tag);\n        // If chooseSubject couldnt find a valid entering symbol, one\n        // last option is available if the entire row is composed of\n        // dummy variables. If the constant of the row is zero, then\n        // this represents redundant constraints and the new dummy\n        // marker can enter the basis. If the constant is non-zero,\n        // then it represents an unsatisfiable constraint.\n        if (subject.type() === SymbolType.Invalid && row.allDummies()) {\n            if (!nearZero(row.constant())) {\n                var names = [];\n                for (var _i = 0, _a = constraint.expression.terms._array; _i < _a.length; _i++) {\n                    var item = _a[_i];\n                    names.push(item.first.name);\n                }\n                var op = ['LE', 'GE', 'EQ'][constraint.op];\n                throw new Error(\"unsatisfiable constraint [\" + names.join(\",\") + \"] operator: \" + op);\n            }\n            else {\n                subject = tag.marker;\n            }\n        }\n        // If an entering symbol still isn't found, then the row must\n        // be added using an artificial variable. If that fails, then\n        // the row represents an unsatisfiable constraint.\n        if (subject.type() === SymbolType.Invalid) {\n            if (!this._addWithArtificialVariable(row)) {\n                throw new Error(\"unsatisfiable constraint\");\n            }\n        }\n        else {\n            row.solveFor(subject);\n            this._substitute(subject, row);\n            this._rowMap.insert(subject, row);\n        }\n        this._cnMap.insert(constraint, tag);\n        // Optimizing after each constraint is added performs less\n        // aggregate work due to a smaller average system size. It\n        // also ensures the solver remains in a consistent state.\n        this._optimize(this._objective);\n    };\n    /**\n     * Remove a constraint from the solver.\n     */\n    Solver.prototype.removeConstraint = function (constraint, silent) {\n        if (silent === void 0) { silent = false; }\n        var cnPair = this._cnMap.erase(constraint);\n        if (cnPair === undefined) {\n            if (silent)\n                return;\n            else\n                throw new Error(\"unknown constraint\");\n        }\n        // Remove the error effects from the objective function\n        // *before* pivoting, or substitutions into the objective\n        // will lead to incorrect solver results.\n        this._removeConstraintEffects(constraint, cnPair.second);\n        // If the marker is basic, simply drop the row. Otherwise,\n        // pivot the marker into the basis and then drop the row.\n        var marker = cnPair.second.marker;\n        var rowPair = this._rowMap.erase(marker);\n        if (rowPair === undefined) {\n            var leaving = this._getMarkerLeavingSymbol(marker);\n            if (leaving.type() === SymbolType.Invalid) {\n                throw new Error(\"failed to find leaving row\");\n            }\n            rowPair = this._rowMap.erase(leaving);\n            rowPair.second.solveForEx(leaving, marker);\n            this._substitute(marker, rowPair.second);\n        }\n        // Optimizing after each constraint is removed ensures that the\n        // solver remains consistent. It makes the solver api easier to\n        // use at a small tradeoff for speed.\n        this._optimize(this._objective);\n    };\n    /**\n     * Test whether the solver contains the constraint.\n     */\n    Solver.prototype.hasConstraint = function (constraint) {\n        return this._cnMap.contains(constraint);\n    };\n    /**\n     * Add an edit variable to the solver.\n     */\n    Solver.prototype.addEditVariable = function (variable, strength) {\n        var editPair = this._editMap.find(variable);\n        if (editPair !== undefined) {\n            throw new Error(\"duplicate edit variable: \" + variable.name);\n        }\n        strength = strength_1.Strength.clip(strength);\n        if (strength === strength_1.Strength.required) {\n            throw new Error(\"bad required strength\");\n        }\n        var expr = new expression_1.Expression(variable);\n        var cn = new constraint_1.Constraint(expr, constraint_1.Operator.Eq, strength);\n        this.addConstraint(cn);\n        var tag = this._cnMap.find(cn).second;\n        var info = { tag: tag, constraint: cn, constant: 0.0 };\n        this._editMap.insert(variable, info);\n    };\n    /**\n     * Remove an edit variable from the solver.\n     */\n    Solver.prototype.removeEditVariable = function (variable, silent) {\n        if (silent === void 0) { silent = false; }\n        var editPair = this._editMap.erase(variable);\n        if (editPair === undefined) {\n            if (silent)\n                return;\n            else\n                throw new Error(\"unknown edit variable: \" + variable.name);\n        }\n        this.removeConstraint(editPair.second.constraint, silent);\n    };\n    /**\n     * Test whether the solver contains the edit variable.\n     */\n    Solver.prototype.hasEditVariable = function (variable) {\n        return this._editMap.contains(variable);\n    };\n    /**\n     * Suggest the value of an edit variable.\n     */\n    Solver.prototype.suggestValue = function (variable, value) {\n        var editPair = this._editMap.find(variable);\n        if (editPair === undefined) {\n            throw new Error(\"unknown edit variable: \" + variable.name);\n        }\n        var rows = this._rowMap;\n        var info = editPair.second;\n        var delta = value - info.constant;\n        info.constant = value;\n        // Check first if the positive error variable is basic.\n        var marker = info.tag.marker;\n        var rowPair = rows.find(marker);\n        if (rowPair !== undefined) {\n            if (rowPair.second.add(-delta) < 0.0) {\n                this._infeasibleRows.push(marker);\n            }\n            this._dualOptimize();\n            return;\n        }\n        // Check next if the negative error variable is basic.\n        var other = info.tag.other;\n        rowPair = rows.find(other);\n        if (rowPair !== undefined) {\n            if (rowPair.second.add(delta) < 0.0) {\n                this._infeasibleRows.push(other);\n            }\n            this._dualOptimize();\n            return;\n        }\n        // Otherwise update each row where the error variables exist.\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var rowPair_1 = rows.itemAt(i);\n            var row = rowPair_1.second;\n            var coeff = row.coefficientFor(marker);\n            if (coeff !== 0.0 && row.add(delta * coeff) < 0.0 &&\n                rowPair_1.first.type() !== SymbolType.External) {\n                this._infeasibleRows.push(rowPair_1.first);\n            }\n        }\n        this._dualOptimize();\n    };\n    /**\n     * Update the values of the variables.\n     */\n    Solver.prototype.updateVariables = function () {\n        var vars = this._varMap;\n        var rows = this._rowMap;\n        for (var i = 0, n = vars.size(); i < n; ++i) {\n            var pair = vars.itemAt(i);\n            var rowPair = rows.find(pair.second);\n            if (rowPair !== undefined) {\n                pair.first.setValue(rowPair.second.constant());\n            }\n            else {\n                pair.first.setValue(0.0);\n            }\n        }\n    };\n    Object.defineProperty(Solver.prototype, \"numConstraints\", {\n        get: function () {\n            return this._cnMap.size();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Solver.prototype, \"numEditVariables\", {\n        get: function () {\n            return this._editMap.size();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the symbol for the given variable.\n     *\n     * If a symbol does not exist for the variable, one will be created.\n     */\n    Solver.prototype._getVarSymbol = function (variable) {\n        var _this = this;\n        var factory = function () { return _this._makeSymbol(SymbolType.External); };\n        return this._varMap.setDefault(variable, factory).second;\n    };\n    /**\n     * Create a new Row object for the given constraint.\n     *\n     * The terms in the constraint will be converted to cells in the row.\n     * Any term in the constraint with a coefficient of zero is ignored.\n     * This method uses the `_getVarSymbol` method to get the symbol for\n     * the variables added to the row. If the symbol for a given cell\n     * variable is basic, the cell variable will be substituted with the\n     * basic row.\n     *\n     * The necessary slack and error variables will be added to the row.\n     * If the constant for the row is negative, the sign for the row\n     * will be inverted so the constant becomes positive.\n     *\n     * Returns the created Row and the tag for tracking the constraint.\n     */\n    Solver.prototype._createRow = function (constraint) {\n        var expr = constraint.expression;\n        var row = new Row(expr.constant);\n        // Substitute the current basic variables into the row.\n        var terms = expr.terms;\n        for (var i = 0, n = terms.size(); i < n; ++i) {\n            var termPair = terms.itemAt(i);\n            if (!nearZero(termPair.second)) {\n                var symbol = this._getVarSymbol(termPair.first);\n                var basicPair = this._rowMap.find(symbol);\n                if (basicPair !== undefined) {\n                    row.insertRow(basicPair.second, termPair.second);\n                }\n                else {\n                    row.insertSymbol(symbol, termPair.second);\n                }\n            }\n        }\n        // Add the necessary slack, error, and dummy variables.\n        var objective = this._objective;\n        var strength = constraint.strength;\n        var tag = { marker: INVALID_SYMBOL, other: INVALID_SYMBOL };\n        switch (constraint.op) {\n            case constraint_1.Operator.Le:\n            case constraint_1.Operator.Ge:\n                {\n                    var coeff = constraint.op === constraint_1.Operator.Le ? 1.0 : -1.0;\n                    var slack = this._makeSymbol(SymbolType.Slack);\n                    tag.marker = slack;\n                    row.insertSymbol(slack, coeff);\n                    if (strength < strength_1.Strength.required) {\n                        var error = this._makeSymbol(SymbolType.Error);\n                        tag.other = error;\n                        row.insertSymbol(error, -coeff);\n                        objective.insertSymbol(error, strength);\n                    }\n                    break;\n                }\n            case constraint_1.Operator.Eq:\n                {\n                    if (strength < strength_1.Strength.required) {\n                        var errplus = this._makeSymbol(SymbolType.Error);\n                        var errminus = this._makeSymbol(SymbolType.Error);\n                        tag.marker = errplus;\n                        tag.other = errminus;\n                        row.insertSymbol(errplus, -1.0); // v = eplus - eminus\n                        row.insertSymbol(errminus, 1.0); // v - eplus + eminus = 0\n                        objective.insertSymbol(errplus, strength);\n                        objective.insertSymbol(errminus, strength);\n                    }\n                    else {\n                        var dummy = this._makeSymbol(SymbolType.Dummy);\n                        tag.marker = dummy;\n                        row.insertSymbol(dummy);\n                    }\n                    break;\n                }\n        }\n        // Ensure the row has a positive constant.\n        if (row.constant() < 0.0) {\n            row.reverseSign();\n        }\n        return { row: row, tag: tag };\n    };\n    /**\n     * Choose the subject for solving for the row.\n     *\n     * This method will choose the best subject for using as the solve\n     * target for the row. An invalid symbol will be returned if there\n     * is no valid target.\n     *\n     * The symbols are chosen according to the following precedence:\n     *\n     * 1) The first symbol representing an external variable.\n     * 2) A negative slack or error tag variable.\n     *\n     * If a subject cannot be found, an invalid symbol will be returned.\n     */\n    Solver.prototype._chooseSubject = function (row, tag) {\n        var cells = row.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            if (pair.first.type() === SymbolType.External) {\n                return pair.first;\n            }\n        }\n        var type = tag.marker.type();\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\n            if (row.coefficientFor(tag.marker) < 0.0) {\n                return tag.marker;\n            }\n        }\n        type = tag.other.type();\n        if (type === SymbolType.Slack || type === SymbolType.Error) {\n            if (row.coefficientFor(tag.other) < 0.0) {\n                return tag.other;\n            }\n        }\n        return INVALID_SYMBOL;\n    };\n    /**\n     * Add the row to the tableau using an artificial variable.\n     *\n     * This will return false if the constraint cannot be satisfied.\n     */\n    Solver.prototype._addWithArtificialVariable = function (row) {\n        // Create and add the artificial variable to the tableau.\n        var art = this._makeSymbol(SymbolType.Slack);\n        this._rowMap.insert(art, row.copy());\n        this._artificial = row.copy();\n        // Optimize the artificial objective. This is successful\n        // only if the artificial objective is optimized to zero.\n        this._optimize(this._artificial);\n        var success = nearZero(this._artificial.constant());\n        this._artificial = null;\n        // If the artificial variable is basic, pivot the row so that\n        // it becomes non-basic. If the row is constant, exit early.\n        var pair = this._rowMap.erase(art);\n        if (pair !== undefined) {\n            var basicRow = pair.second;\n            if (basicRow.isConstant()) {\n                return success;\n            }\n            var entering = this._anyPivotableSymbol(basicRow);\n            if (entering.type() === SymbolType.Invalid) {\n                return false; // unsatisfiable (will this ever happen?)\n            }\n            basicRow.solveForEx(art, entering);\n            this._substitute(entering, basicRow);\n            this._rowMap.insert(entering, basicRow);\n        }\n        // Remove the artificial variable from the tableau.\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            rows.itemAt(i).second.removeSymbol(art);\n        }\n        this._objective.removeSymbol(art);\n        return success;\n    };\n    /**\n     * Substitute the parametric symbol with the given row.\n     *\n     * This method will substitute all instances of the parametric symbol\n     * in the tableau and the objective function with the given row.\n     */\n    Solver.prototype._substitute = function (symbol, row) {\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var pair = rows.itemAt(i);\n            pair.second.substitute(symbol, row);\n            if (pair.second.constant() < 0.0 &&\n                pair.first.type() !== SymbolType.External) {\n                this._infeasibleRows.push(pair.first);\n            }\n        }\n        this._objective.substitute(symbol, row);\n        if (this._artificial) {\n            this._artificial.substitute(symbol, row);\n        }\n    };\n    /**\n     * Optimize the system for the given objective function.\n     *\n     * This method performs iterations of Phase 2 of the simplex method\n     * until the objective function reaches a minimum.\n     */\n    Solver.prototype._optimize = function (objective) {\n        while (true) {\n            var entering = this._getEnteringSymbol(objective);\n            if (entering.type() === SymbolType.Invalid) {\n                return;\n            }\n            var leaving = this._getLeavingSymbol(entering);\n            if (leaving.type() === SymbolType.Invalid) {\n                throw new Error(\"the objective is unbounded\");\n            }\n            // pivot the entering symbol into the basis\n            var row = this._rowMap.erase(leaving).second;\n            row.solveForEx(leaving, entering);\n            this._substitute(entering, row);\n            this._rowMap.insert(entering, row);\n        }\n    };\n    /**\n     * Optimize the system using the dual of the simplex method.\n     *\n     * The current state of the system should be such that the objective\n     * function is optimal, but not feasible. This method will perform\n     * an iteration of the dual simplex method to make the solution both\n     * optimal and feasible.\n     */\n    Solver.prototype._dualOptimize = function () {\n        var rows = this._rowMap;\n        var infeasible = this._infeasibleRows;\n        while (infeasible.length !== 0) {\n            var leaving = infeasible.pop();\n            var pair = rows.find(leaving);\n            if (pair !== undefined && pair.second.constant() < 0.0) {\n                var entering = this._getDualEnteringSymbol(pair.second);\n                if (entering.type() === SymbolType.Invalid) {\n                    throw new Error(\"dual optimize failed\");\n                }\n                // pivot the entering symbol into the basis\n                var row = pair.second;\n                rows.erase(leaving);\n                row.solveForEx(leaving, entering);\n                this._substitute(entering, row);\n                rows.insert(entering, row);\n            }\n        }\n    };\n    /**\n     * Compute the entering variable for a pivot operation.\n     *\n     * This method will return first symbol in the objective function which\n     * is non-dummy and has a coefficient less than zero. If no symbol meets\n     * the criteria, it means the objective function is at a minimum, and an\n     * invalid symbol is returned.\n     */\n    Solver.prototype._getEnteringSymbol = function (objective) {\n        var cells = objective.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            var symbol = pair.first;\n            if (pair.second < 0.0 && symbol.type() !== SymbolType.Dummy) {\n                return symbol;\n            }\n        }\n        return INVALID_SYMBOL;\n    };\n    /**\n     * Compute the entering symbol for the dual optimize operation.\n     *\n     * This method will return the symbol in the row which has a positive\n     * coefficient and yields the minimum ratio for its respective symbol\n     * in the objective function. The provided row *must* be infeasible.\n     * If no symbol is found which meats the criteria, an invalid symbol\n     * is returned.\n     */\n    Solver.prototype._getDualEnteringSymbol = function (row) {\n        var ratio = Number.MAX_VALUE;\n        var entering = INVALID_SYMBOL;\n        var cells = row.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            var symbol = pair.first;\n            var c = pair.second;\n            if (c > 0.0 && symbol.type() !== SymbolType.Dummy) {\n                var coeff = this._objective.coefficientFor(symbol);\n                var r = coeff / c;\n                if (r < ratio) {\n                    ratio = r;\n                    entering = symbol;\n                }\n            }\n        }\n        return entering;\n    };\n    /**\n     * Compute the symbol for pivot exit row.\n     *\n     * This method will return the symbol for the exit row in the row\n     * map. If no appropriate exit symbol is found, an invalid symbol\n     * will be returned. This indicates that the objective function is\n     * unbounded.\n     */\n    Solver.prototype._getLeavingSymbol = function (entering) {\n        var ratio = Number.MAX_VALUE;\n        var found = INVALID_SYMBOL;\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var pair = rows.itemAt(i);\n            var symbol = pair.first;\n            if (symbol.type() !== SymbolType.External) {\n                var row = pair.second;\n                var temp = row.coefficientFor(entering);\n                if (temp < 0.0) {\n                    var temp_ratio = -row.constant() / temp;\n                    if (temp_ratio < ratio) {\n                        ratio = temp_ratio;\n                        found = symbol;\n                    }\n                }\n            }\n        }\n        return found;\n    };\n    /**\n     * Compute the leaving symbol for a marker variable.\n     *\n     * This method will return a symbol corresponding to a basic row\n     * which holds the given marker variable. The row will be chosen\n     * according to the following precedence:\n     *\n     * 1) The row with a restricted basic varible and a negative coefficient\n     *    for the marker with the smallest ratio of -constant / coefficient.\n     *\n     * 2) The row with a restricted basic variable and the smallest ratio\n     *    of constant / coefficient.\n     *\n     * 3) The last unrestricted row which contains the marker.\n     *\n     * If the marker does not exist in any row, an invalid symbol will be\n     * returned. This indicates an internal solver error since the marker\n     * *should* exist somewhere in the tableau.\n     */\n    Solver.prototype._getMarkerLeavingSymbol = function (marker) {\n        var dmax = Number.MAX_VALUE;\n        var r1 = dmax;\n        var r2 = dmax;\n        var invalid = INVALID_SYMBOL;\n        var first = invalid;\n        var second = invalid;\n        var third = invalid;\n        var rows = this._rowMap;\n        for (var i = 0, n = rows.size(); i < n; ++i) {\n            var pair = rows.itemAt(i);\n            var row = pair.second;\n            var c = row.coefficientFor(marker);\n            if (c === 0.0) {\n                continue;\n            }\n            var symbol = pair.first;\n            if (symbol.type() === SymbolType.External) {\n                third = symbol;\n            }\n            else if (c < 0.0) {\n                var r = -row.constant() / c;\n                if (r < r1) {\n                    r1 = r;\n                    first = symbol;\n                }\n            }\n            else {\n                var r = row.constant() / c;\n                if (r < r2) {\n                    r2 = r;\n                    second = symbol;\n                }\n            }\n        }\n        if (first !== invalid) {\n            return first;\n        }\n        if (second !== invalid) {\n            return second;\n        }\n        return third;\n    };\n    /**\n     * Remove the effects of a constraint on the objective function.\n     */\n    Solver.prototype._removeConstraintEffects = function (cn, tag) {\n        if (tag.marker.type() === SymbolType.Error) {\n            this._removeMarkerEffects(tag.marker, cn.strength);\n        }\n        if (tag.other.type() === SymbolType.Error) {\n            this._removeMarkerEffects(tag.other, cn.strength);\n        }\n    };\n    /**\n     * Remove the effects of an error marker on the objective function.\n     */\n    Solver.prototype._removeMarkerEffects = function (marker, strength) {\n        var pair = this._rowMap.find(marker);\n        if (pair !== undefined) {\n            this._objective.insertRow(pair.second, -strength);\n        }\n        else {\n            this._objective.insertSymbol(marker, -strength);\n        }\n    };\n    /**\n     * Get the first Slack or Error symbol in the row.\n     *\n     * If no such symbol is present, an invalid symbol will be returned.\n     */\n    Solver.prototype._anyPivotableSymbol = function (row) {\n        var cells = row.cells();\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            var type = pair.first.type();\n            if (type === SymbolType.Slack || type === SymbolType.Error) {\n                return pair.first;\n            }\n        }\n        return INVALID_SYMBOL;\n    };\n    /**\n     * Returns a new Symbol of the given type.\n     */\n    Solver.prototype._makeSymbol = function (type) {\n        return new Symbol(type, this._idTick++);\n    };\n    return Solver;\n}());\nexports.Solver = Solver;\n/**\n * Test whether a value is approximately zero.\n */\nfunction nearZero(value) {\n    var eps = 1.0e-8;\n    return value < 0.0 ? -value < eps : value < eps;\n}\n/**\n * An internal function for creating a constraint map.\n */\nfunction createCnMap() {\n    return maptype_1.createMap(constraint_1.Constraint.Compare);\n}\n/**\n * An internal function for creating a row map.\n */\nfunction createRowMap() {\n    return maptype_1.createMap(Symbol.Compare);\n}\n/**\n * An internal function for creating a variable map.\n */\nfunction createVarMap() {\n    return maptype_1.createMap(variable_1.Variable.Compare);\n}\n/**\n * An internal function for creating an edit map.\n */\nfunction createEditMap() {\n    return maptype_1.createMap(variable_1.Variable.Compare);\n}\n/**\n * An enum defining the available symbol types.\n */\nvar SymbolType;\n(function (SymbolType) {\n    SymbolType[SymbolType[\"Invalid\"] = 0] = \"Invalid\";\n    SymbolType[SymbolType[\"External\"] = 1] = \"External\";\n    SymbolType[SymbolType[\"Slack\"] = 2] = \"Slack\";\n    SymbolType[SymbolType[\"Error\"] = 3] = \"Error\";\n    SymbolType[SymbolType[\"Dummy\"] = 4] = \"Dummy\";\n})(SymbolType || (SymbolType = {}));\n/**\n * An internal class representing a symbol in the solver.\n */\nvar Symbol = (function () {\n    /**\n     * Construct a new Symbol\n     *\n     * @param [type] The type of the symbol.\n     * @param [id] The unique id number of the symbol.\n     */\n    function Symbol(type, id) {\n        this._id = id;\n        this._type = type;\n    }\n    /**\n     * The static Symbol comparison function.\n     */\n    Symbol.Compare = function (a, b) {\n        return a.id() - b.id();\n    };\n    /**\n     * Returns the unique id number of the symbol.\n     */\n    Symbol.prototype.id = function () {\n        return this._id;\n    };\n    /**\n     * Returns the type of the symbol.\n     */\n    Symbol.prototype.type = function () {\n        return this._type;\n    };\n    return Symbol;\n}());\n/**\n * A static invalid symbol\n */\nvar INVALID_SYMBOL = new Symbol(SymbolType.Invalid, -1);\n/**\n * An internal row class used by the solver.\n */\nvar Row = (function () {\n    /**\n     * Construct a new Row.\n     */\n    function Row(constant) {\n        if (constant === void 0) { constant = 0.0; }\n        this._cellMap = maptype_1.createMap(Symbol.Compare);\n        this._constant = constant;\n    }\n    /**\n     * Returns the mapping of symbols to coefficients.\n     */\n    Row.prototype.cells = function () {\n        return this._cellMap;\n    };\n    /**\n     * Returns the constant for the row.\n     */\n    Row.prototype.constant = function () {\n        return this._constant;\n    };\n    /**\n     * Returns true if the row is a constant value.\n     */\n    Row.prototype.isConstant = function () {\n        return this._cellMap.empty();\n    };\n    /**\n     * Returns true if the Row has all dummy symbols.\n     */\n    Row.prototype.allDummies = function () {\n        var cells = this._cellMap;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            if (pair.first.type() !== SymbolType.Dummy) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * Create a copy of the row.\n     */\n    Row.prototype.copy = function () {\n        var theCopy = new Row(this._constant);\n        theCopy._cellMap = this._cellMap.copy();\n        return theCopy;\n    };\n    /**\n     * Add a constant value to the row constant.\n     *\n     * Returns the new value of the constant.\n     */\n    Row.prototype.add = function (value) {\n        return this._constant += value;\n    };\n    /**\n     * Insert the symbol into the row with the given coefficient.\n     *\n     * If the symbol already exists in the row, the coefficient\n     * will be added to the existing coefficient. If the resulting\n     * coefficient is zero, the symbol will be removed from the row.\n     */\n    Row.prototype.insertSymbol = function (symbol, coefficient) {\n        if (coefficient === void 0) { coefficient = 1.0; }\n        var pair = this._cellMap.setDefault(symbol, function () { return 0.0; });\n        if (nearZero(pair.second += coefficient)) {\n            this._cellMap.erase(symbol);\n        }\n    };\n    /**\n     * Insert a row into this row with a given coefficient.\n     *\n     * The constant and the cells of the other row will be\n     * multiplied by the coefficient and added to this row. Any\n     * cell with a resulting coefficient of zero will be removed\n     * from the row.\n     */\n    Row.prototype.insertRow = function (other, coefficient) {\n        if (coefficient === void 0) { coefficient = 1.0; }\n        this._constant += other._constant * coefficient;\n        var cells = other._cellMap;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            this.insertSymbol(pair.first, pair.second * coefficient);\n        }\n    };\n    /**\n     * Remove a symbol from the row.\n     */\n    Row.prototype.removeSymbol = function (symbol) {\n        this._cellMap.erase(symbol);\n    };\n    /**\n     * Reverse the sign of the constant and cells in the row.\n     */\n    Row.prototype.reverseSign = function () {\n        this._constant = -this._constant;\n        var cells = this._cellMap;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            var pair = cells.itemAt(i);\n            pair.second = -pair.second;\n        }\n    };\n    /**\n     * Solve the row for the given symbol.\n     *\n     * This method assumes the row is of the form\n     * a * x + b * y + c = 0 and (assuming solve for x) will modify\n     * the row to represent the right hand side of\n     * x = -b/a * y - c / a. The target symbol will be removed from\n     * the row, and the constant and other cells will be multiplied\n     * by the negative inverse of the target coefficient.\n     *\n     * The given symbol *must* exist in the row.\n     */\n    Row.prototype.solveFor = function (symbol) {\n        var cells = this._cellMap;\n        var pair = cells.erase(symbol);\n        var coeff = -1.0 / pair.second;\n        this._constant *= coeff;\n        for (var i = 0, n = cells.size(); i < n; ++i) {\n            cells.itemAt(i).second *= coeff;\n        }\n    };\n    /**\n     * Solve the row for the given symbols.\n     *\n     * This method assumes the row is of the form\n     * x = b * y + c and will solve the row such that\n     * y = x / b - c / b. The rhs symbol will be removed from the\n     * row, the lhs added, and the result divided by the negative\n     * inverse of the rhs coefficient.\n     *\n     * The lhs symbol *must not* exist in the row, and the rhs\n     * symbol must* exist in the row.\n     */\n    Row.prototype.solveForEx = function (lhs, rhs) {\n        this.insertSymbol(lhs, -1.0);\n        this.solveFor(rhs);\n    };\n    /**\n     * Returns the coefficient for the given symbol.\n     */\n    Row.prototype.coefficientFor = function (symbol) {\n        var pair = this._cellMap.find(symbol);\n        return pair !== undefined ? pair.second : 0.0;\n    };\n    /**\n     * Substitute a symbol with the data from another row.\n     *\n     * Given a row of the form a * x + b and a substitution of the\n     * form x = 3 * y + c the row will be updated to reflect the\n     * expression 3 * a * y + a * c + b.\n     *\n     * If the symbol does not exist in the row, this is a no-op.\n     */\n    Row.prototype.substitute = function (symbol, row) {\n        var pair = this._cellMap.erase(symbol);\n        if (pair !== undefined) {\n            this.insertRow(row, pair.second);\n        }\n    };\n    return Row;\n}());\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Strength;\n(function (Strength) {\n    /**\n     * Create a new symbolic strength.\n     */\n    function create(a, b, c, w) {\n        if (w === void 0) { w = 1.0; }\n        var result = 0.0;\n        result += Math.max(0.0, Math.min(1000.0, a * w)) * 1000000.0;\n        result += Math.max(0.0, Math.min(1000.0, b * w)) * 1000.0;\n        result += Math.max(0.0, Math.min(1000.0, c * w));\n        return result;\n    }\n    Strength.create = create;\n    /**\n     * The 'required' symbolic strength.\n     */\n    Strength.required = create(1000.0, 1000.0, 1000.0);\n    /**\n     * The 'strong' symbolic strength.\n     */\n    Strength.strong = create(1.0, 0.0, 0.0);\n    /**\n     * The 'medium' symbolic strength.\n     */\n    Strength.medium = create(0.0, 1.0, 0.0);\n    /**\n     * The 'weak' symbolic strength.\n     */\n    Strength.weak = create(0.0, 0.0, 1.0);\n    /**\n     * Clip a symbolic strength to the allowed min and max.\n     */\n    function clip(value) {\n        return Math.max(0.0, Math.min(Strength.required, value));\n    }\n    Strength.clip = clip;\n})(Strength = exports.Strength || (exports.Strength = {}));\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar iterator_1 = require(\"./iterator\");\n/**\n* Perform a lower bound search on a sorted array.\n*\n* @param array The array of sorted items to search.\n* @param value The value to located in the array.\n* @param compare The value comparison function.\n* @returns The index of the first element in the array which\n*          compares greater than or equal to the given value.\n*/\nfunction lowerBound(array, value, compare) {\n    var begin = 0;\n    var n = array.length;\n    var half;\n    var middle;\n    while (n > 0) {\n        half = n >> 1;\n        middle = begin + half;\n        if (compare(array[middle], value) < 0) {\n            begin = middle + 1;\n            n -= half + 1;\n        }\n        else {\n            n = half;\n        }\n    }\n    return begin;\n}\nexports.lowerBound = lowerBound;\n/**\n* Perform a binary search on a sorted array.\n*\n* @param array The array of sorted items to search.\n* @param value The value to located in the array.\n* @param compare The value comparison function.\n* @returns The index of the found item, or -1.\n*/\nfunction binarySearch(array, value, compare) {\n    var index = lowerBound(array, value, compare);\n    if (index === array.length) {\n        return -1;\n    }\n    var item = array[index];\n    if (compare(item, value) !== 0) {\n        return -1;\n    }\n    return index;\n}\nexports.binarySearch = binarySearch;\n/**\n* Perform a binary find on a sorted array.\n*\n* @param array The array of sorted items to search.\n* @param value The value to located in the array.\n* @param compare The value comparison function.\n* @returns The found item in the array, or undefined.\n*/\nfunction binaryFind(array, value, compare) {\n    var index = lowerBound(array, value, compare);\n    if (index === array.length) {\n        return undefined;\n    }\n    var item = array[index];\n    if (compare(item, value) !== 0) {\n        return undefined;\n    }\n    return item;\n}\nexports.binaryFind = binaryFind;\nfunction asSet(items, compare) {\n    var array = iterator_1.asArray(items);\n    var n = array.length;\n    if (n <= 1) {\n        return array;\n    }\n    array.sort(compare);\n    var result = [array[0]];\n    for (var i = 1, j = 0; i < n; ++i) {\n        var item = array[i];\n        if (compare(result[j], item) !== 0) {\n            result.push(item);\n            ++j;\n        }\n    }\n    return result;\n}\nexports.asSet = asSet;\n/**\n* Test whether a two sorted arrays sets are disjoint.\n*\n* @param first The first sorted array set.\n* @param second The second sorted array set.\n* @param compare The value comparison function.\n* @returns true if the sets are disjoint, false otherwise.\n*/\nfunction setIsDisjoint(first, second, compare) {\n    var i = 0, j = 0;\n    var len1 = first.length;\n    var len2 = second.length;\n    while (i < len1 && j < len2) {\n        var v = compare(first[i], second[j]);\n        if (v < 0) {\n            ++i;\n        }\n        else if (v > 0) {\n            ++j;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nexports.setIsDisjoint = setIsDisjoint;\n/**\n* Test whether one sorted array set is the subset of another.\n*\n* @param first The potential subset.\n* @param second The potential superset.\n* @param compare The value comparison function.\n* @returns true if the first set is a subset of the second.\n*/\nfunction setIsSubset(first, second, compare) {\n    var len1 = first.length;\n    var len2 = second.length;\n    if (len1 > len2) {\n        return false;\n    }\n    var i = 0, j = 0;\n    while (i < len1 && j < len2) {\n        var v = compare(first[i], second[j]);\n        if (v < 0) {\n            return false;\n        }\n        else if (v > 0) {\n            ++j;\n        }\n        else {\n            ++i;\n            ++j;\n        }\n    }\n    if (i < len1) {\n        return false;\n    }\n    return true;\n}\nexports.setIsSubset = setIsSubset;\n/**\n* Create the set union of two sorted set arrays.\nvar j = 0;\n*\n* @param first The first sorted array set.\n* @param second The second sorted array set.\n* @param compare The value comparison function.\n* @returns The set union of the two arrays.\n*/\nfunction setUnion(first, second, compare) {\n    var i = 0, j = 0;\n    var len1 = first.length;\n    var len2 = second.length;\n    var merged = [];\n    while (i < len1 && j < len2) {\n        var a = first[i];\n        var b = second[j];\n        var v = compare(a, b);\n        if (v < 0) {\n            merged.push(a);\n            ++i;\n        }\n        else if (v > 0) {\n            merged.push(b);\n            ++j;\n        }\n        else {\n            merged.push(a);\n            ++i;\n            ++j;\n        }\n    }\n    while (i < len1) {\n        merged.push(first[i]);\n        ++i;\n    }\n    while (j < len2) {\n        merged.push(second[j]);\n        ++j;\n    }\n    return merged;\n}\nexports.setUnion = setUnion;\n/**\n* Create a set intersection of two sorted set arrays.\n*\n* @param first The first sorted array set.\n* @param second The second sorted array set.\n* @param compare The value comparison function.\n* @returns The set intersection of the two arrays.\n*/\nfunction setIntersection(first, second, compare) {\n    var i = 0, j = 0;\n    var len1 = first.length;\n    var len2 = second.length;\n    var merged = [];\n    while (i < len1 && j < len2) {\n        var a = first[i];\n        var b = second[j];\n        var v = compare(a, b);\n        if (v < 0) {\n            ++i;\n        }\n        else if (v > 0) {\n            ++j;\n        }\n        else {\n            merged.push(a);\n            ++i;\n            ++j;\n        }\n    }\n    return merged;\n}\nexports.setIntersection = setIntersection;\n/**\n* Create a set difference of two sorted set arrays.\n*\n* @param first The first sorted array set.\n* @param second The second sorted array set.\n* @param compare The value comparison function.\n* @returns The set difference of the two arrays.\n*/\nfunction setDifference(first, second, compare) {\n    var i = 0, j = 0;\n    var len1 = first.length;\n    var len2 = second.length;\n    var merged = [];\n    while (i < len1 && j < len2) {\n        var a = first[i];\n        var b = second[j];\n        var v = compare(a, b);\n        if (v < 0) {\n            merged.push(a);\n            ++i;\n        }\n        else if (v > 0) {\n            ++j;\n        }\n        else {\n            ++i;\n            ++j;\n        }\n    }\n    while (i < len1) {\n        merged.push(first[i]);\n        ++i;\n    }\n    return merged;\n}\nexports.setDifference = setDifference;\n/**\n* Create a set symmetric difference of two sorted set arrays.\n*\n* @param first The first sorted array set.\n* @param second The second sorted array set.\n* @param compare The value comparison function.\n* @returns The set symmetric difference of the two arrays.\n*/\nfunction setSymmetricDifference(first, second, compare) {\n    var i = 0, j = 0;\n    var len1 = first.length;\n    var len2 = second.length;\n    var merged = [];\n    while (i < len1 && j < len2) {\n        var a = first[i];\n        var b = second[j];\n        var v = compare(a, b);\n        if (v < 0) {\n            merged.push(a);\n            ++i;\n        }\n        else if (v > 0) {\n            merged.push(b);\n            ++j;\n        }\n        else {\n            ++i;\n            ++j;\n        }\n    }\n    while (i < len1) {\n        merged.push(first[i]);\n        ++i;\n    }\n    while (j < len2) {\n        merged.push(second[j]);\n        ++j;\n    }\n    return merged;\n}\nexports.setSymmetricDifference = setSymmetricDifference;\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar iterator_1 = require(\"./iterator\");\n/**\n* A base class for implementing array-based data structures.\n*\n* @class\n*/\nvar ArrayBase = (function () {\n    function ArrayBase() {\n        /*\n        * The internal data array.\n        *\n        * @protected\n        */\n        this._array = [];\n    }\n    /**\n    * Returns the number of items in the array.\n    */\n    ArrayBase.prototype.size = function () {\n        return this._array.length;\n    };\n    /**\n    * Returns true if the array is empty.\n    */\n    ArrayBase.prototype.empty = function () {\n        return this._array.length === 0;\n    };\n    /**\n    * Returns the item at the given array index.\n    *\n    * @param index The integer index of the desired item.\n    */\n    ArrayBase.prototype.itemAt = function (index) {\n        return this._array[index];\n    };\n    /**\n    * Removes and returns the item at the given index.\n    *\n    * @param index The integer index of the desired item.\n    */\n    ArrayBase.prototype.takeAt = function (index) {\n        return this._array.splice(index, 1)[0];\n    };\n    /**\n    * Clear the internal contents of array.\n    */\n    ArrayBase.prototype.clear = function () {\n        this._array = [];\n    };\n    /**\n    * Swap this array's contents with another array.\n    *\n    * @param other The array base to use for the swap.\n    */\n    ArrayBase.prototype.swap = function (other) {\n        var array = this._array;\n        this._array = other._array;\n        other._array = array;\n    };\n    /**\n    * Returns an iterator over the array of items.\n    */\n    ArrayBase.prototype.__iter__ = function () {\n        return iterator_1.iter(this._array);\n    };\n    /**\n    * Returns a reverse iterator over the array of items.\n    */\n    ArrayBase.prototype.__reversed__ = function () {\n        return iterator_1.reversed(this._array);\n    };\n    return ArrayBase;\n}());\nexports.ArrayBase = ArrayBase;\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pair_1 = require(\"./pair\");\nvar array_base_1 = require(\"./array_base\");\nvar algorithm_1 = require(\"./algorithm\");\nvar iterator_1 = require(\"./iterator\");\n/**\n* A mapping container build on a sorted array.\n*\n* @class\n*/\nvar AssociativeArray = (function (_super) {\n    __extends(AssociativeArray, _super);\n    /**\n    * Construct a new AssociativeArray.\n    *\n    * @param compare The key comparison function.\n    */\n    function AssociativeArray(compare) {\n        var _this = _super.call(this) || this;\n        _this._compare = compare;\n        _this._wrapped = wrapCompare(compare);\n        return _this;\n    }\n    /**\n    * Returns the key comparison function used by this array.\n    */\n    AssociativeArray.prototype.comparitor = function () {\n        return this._compare;\n    };\n    /**\n    * Return the array index of the given key, or -1.\n    *\n    * @param key The key to locate in the array.\n    */\n    AssociativeArray.prototype.indexOf = function (key) {\n        return algorithm_1.binarySearch(this._array, key, this._wrapped);\n    };\n    /**\n    * Returns true if the key is in the array, false otherwise.\n    *\n    * @param key The key to locate in the array.\n    */\n    AssociativeArray.prototype.contains = function (key) {\n        return algorithm_1.binarySearch(this._array, key, this._wrapped) >= 0;\n    };\n    /**\n    * Returns the pair associated with the given key, or undefined.\n    *\n    * @param key The key to locate in the array.\n    */\n    AssociativeArray.prototype.find = function (key) {\n        return algorithm_1.binaryFind(this._array, key, this._wrapped);\n    };\n    /**\n    * Returns the pair associated with the key if it exists.\n    *\n    * If the key does not exist, a new pair will be created and\n    * inserted using the value created by the given factory.\n    *\n    * @param key The key to locate in the array.\n    * @param factory The function which creates the default value.\n    */\n    AssociativeArray.prototype.setDefault = function (key, factory) {\n        var array = this._array;\n        var index = algorithm_1.lowerBound(array, key, this._wrapped);\n        if (index === array.length) {\n            var pair = new pair_1.Pair(key, factory());\n            array.push(pair);\n            return pair;\n        }\n        var currPair = array[index];\n        if (this._compare(currPair.first, key) !== 0) {\n            var pair = new pair_1.Pair(key, factory());\n            array.splice(index, 0, pair);\n            return pair;\n        }\n        return currPair;\n    };\n    /**\n    * Insert the pair into the array and return the pair.\n    *\n    * This will overwrite any existing entry in the array.\n    *\n    * @param key The key portion of the pair.\n    * @param value The value portion of the pair.\n    */\n    AssociativeArray.prototype.insert = function (key, value) {\n        var array = this._array;\n        var index = algorithm_1.lowerBound(array, key, this._wrapped);\n        if (index === array.length) {\n            var pair = new pair_1.Pair(key, value);\n            array.push(pair);\n            return pair;\n        }\n        var currPair = array[index];\n        if (this._compare(currPair.first, key) !== 0) {\n            var pair = new pair_1.Pair(key, value);\n            array.splice(index, 0, pair);\n            return pair;\n        }\n        currPair.second = value;\n        return currPair;\n    };\n    AssociativeArray.prototype.update = function (object) {\n        var _this = this;\n        if (object instanceof AssociativeArray) {\n            this._array = merge(this._array, object._array, this._compare);\n        }\n        else {\n            iterator_1.forEach(object, function (pair) {\n                _this.insert(pair.first, pair.second);\n            });\n        }\n    };\n    /**\n    * Removes and returns the pair for the given key, or undefined.\n    *\n    * @param key The key to remove from the map.\n    */\n    AssociativeArray.prototype.erase = function (key) {\n        var array = this._array;\n        var index = algorithm_1.binarySearch(array, key, this._wrapped);\n        if (index < 0) {\n            return undefined;\n        }\n        return array.splice(index, 1)[0];\n    };\n    /**\n    * Create a copy of this associative array.\n    */\n    AssociativeArray.prototype.copy = function () {\n        var theCopy = new AssociativeArray(this._compare);\n        var copyArray = theCopy._array;\n        var thisArray = this._array;\n        for (var i = 0, n = thisArray.length; i < n; ++i) {\n            copyArray.push(thisArray[i].copy());\n        }\n        return theCopy;\n    };\n    return AssociativeArray;\n}(array_base_1.ArrayBase));\nexports.AssociativeArray = AssociativeArray;\n/**\n* An internal which wraps a comparison key function.\n*/\nfunction wrapCompare(cmp) {\n    return function (pair, value) {\n        return cmp(pair.first, value);\n    };\n}\n/**\n* An internal function which merges two ordered pair arrays.\n*/\nfunction merge(first, second, compare) {\n    var i = 0, j = 0;\n    var len1 = first.length;\n    var len2 = second.length;\n    var merged = [];\n    while (i < len1 && j < len2) {\n        var a = first[i];\n        var b = second[j];\n        var v = compare(a.first, b.first);\n        if (v < 0) {\n            merged.push(a.copy());\n            ++i;\n        }\n        else if (v > 0) {\n            merged.push(b.copy());\n            ++j;\n        }\n        else {\n            merged.push(b.copy());\n            ++i;\n            ++j;\n        }\n    }\n    while (i < len1) {\n        merged.push(first[i].copy());\n        ++i;\n    }\n    while (j < len2) {\n        merged.push(second[j].copy());\n        ++j;\n    }\n    return merged;\n}\n","\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./algorithm\"));\n__export(require(\"./array_base\"));\n__export(require(\"./associative_array\"));\n__export(require(\"./iterator\"));\n__export(require(\"./pair\"));\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n* An iterator for an array of items.\n*/\nvar ArrayIterator = (function () {\n    /*\n    * Construct a new ArrayIterator.\n    *\n    * @param array The array of items to iterate.\n    * @param [index] The index at which to start iteration.\n    */\n    function ArrayIterator(array, index) {\n        if (typeof index === \"undefined\") {\n            index = 0;\n        }\n        this._array = array;\n        this._index = Math.max(0, Math.min(index, array.length));\n    }\n    /**\n    * Returns the next item from the iterator or undefined.\n    */\n    ArrayIterator.prototype.__next__ = function () {\n        return this._array[this._index++];\n    };\n    /**\n    * Returns this same iterator.\n    */\n    ArrayIterator.prototype.__iter__ = function () {\n        return this;\n    };\n    return ArrayIterator;\n}());\nexports.ArrayIterator = ArrayIterator;\n/**\n* A reverse iterator for an array of items.\n*/\nvar ReverseArrayIterator = (function () {\n    /**\n    * Construct a new ReverseArrayIterator.\n    *\n    * @param array The array of items to iterate.\n    * @param [index] The index at which to start iteration.\n    */\n    function ReverseArrayIterator(array, index) {\n        if (typeof index === \"undefined\") {\n            index = array.length;\n        }\n        this._array = array;\n        this._index = Math.max(0, Math.min(index, array.length));\n    }\n    /**\n    * Returns the next item from the iterator or undefined.\n    */\n    ReverseArrayIterator.prototype.__next__ = function () {\n        return this._array[--this._index];\n    };\n    /**\n    * Returns this same iterator.\n    */\n    ReverseArrayIterator.prototype.__iter__ = function () {\n        return this;\n    };\n    return ReverseArrayIterator;\n}());\nexports.ReverseArrayIterator = ReverseArrayIterator;\nfunction iter(object) {\n    if (object instanceof Array) {\n        return new ArrayIterator(object);\n    }\n    return object.__iter__();\n}\nexports.iter = iter;\nfunction reversed(object) {\n    if (object instanceof Array) {\n        return new ReverseArrayIterator(object);\n    }\n    return object.__reversed__();\n}\nexports.reversed = reversed;\n/**\n* Returns the next value from an iterator, or undefined.\n*/\nfunction next(iterator) {\n    return iterator.__next__();\n}\nexports.next = next;\nfunction asArray(object) {\n    if (object instanceof Array) {\n        return object.slice();\n    }\n    var value;\n    var array = [];\n    var it = object.__iter__();\n    while ((value = it.__next__()) !== undefined) {\n        array.push(value);\n    }\n    return array;\n}\nexports.asArray = asArray;\nfunction forEach(object, callback) {\n    if (object instanceof Array) {\n        for (var i = 0, n = object.length; i < n; ++i) {\n            if (callback(object[i]) === false) {\n                return;\n            }\n        }\n    }\n    else {\n        var value;\n        var it = object.__iter__();\n        while ((value = it.__next__()) !== undefined) {\n            if (callback(value) === false) {\n                return;\n            }\n        }\n    }\n}\nexports.forEach = forEach;\nfunction map(object, callback) {\n    var result = [];\n    if (object instanceof Array) {\n        for (var i = 0, n = object.length; i < n; ++i) {\n            result.push(callback(object[i]));\n        }\n    }\n    else {\n        var value;\n        var it = object.__iter__();\n        while ((value = it.__next__()) !== undefined) {\n            result.push(callback(value));\n        }\n    }\n    return result;\n}\nexports.map = map;\nfunction filter(object, callback) {\n    var value;\n    var result = [];\n    if (object instanceof Array) {\n        for (var i = 0, n = object.length; i < n; ++i) {\n            value = object[i];\n            if (callback(value)) {\n                result.push(value);\n            }\n        }\n    }\n    else {\n        var it = object.__iter__();\n        while ((value = it.__next__()) !== undefined) {\n            if (callback(value)) {\n                result.push(value);\n            }\n        }\n    }\n    return result;\n}\nexports.filter = filter;\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n* A class which defines a generic pair object.\n*/\nvar Pair = (function () {\n    /**\n    * Construct a new Pair object.\n    *\n    * @param first The first item of the pair.\n    * @param second The second item of the pair.\n    */\n    function Pair(first, second) {\n        this.first = first;\n        this.second = second;\n    }\n    /**\n    * Create a copy of the pair.\n    */\n    Pair.prototype.copy = function () {\n        return new Pair(this.first, this.second);\n    };\n    return Pair;\n}());\nexports.Pair = Pair;\n","\"use strict\";\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014, Nucleic Development Team.\n|\n| Distributed under the terms of the Modified BSD License.\n|\n| The full license is in the file COPYING.txt, distributed with this software.\n|----------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * The primary user constraint variable.\n *\n * @class\n */\nvar Variable = (function () {\n    /**\n     * Construct a new Variable\n     *\n     * @param [name] The name to associated with the variable.\n     */\n    function Variable(name) {\n        if (name === void 0) { name = \"\"; }\n        this._value = 0.0;\n        this._context = null;\n        this._id = VarId++;\n        this._name = name;\n    }\n    /**\n     * A static variable comparison function.\n     */\n    Variable.Compare = function (a, b) {\n        return a.id - b.id;\n    };\n    Object.defineProperty(Variable.prototype, \"id\", {\n        /**\n         * Returns the unique id number of the variable.\n         */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Variable.prototype, \"name\", {\n        /**\n         * Returns the name of the variable.\n         */\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Set the name of the variable.\n     */\n    Variable.prototype.setName = function (name) {\n        this._name = name;\n    };\n    Object.defineProperty(Variable.prototype, \"context\", {\n        /**\n         * Returns the user context object of the variable.\n         */\n        get: function () {\n            return this._context;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Set the user context object of the variable.\n     */\n    Variable.prototype.setContext = function (context) {\n        this._context = context;\n    };\n    Object.defineProperty(Variable.prototype, \"value\", {\n        /**\n         * Returns the value of the variable.\n         */\n        get: function () {\n            return this._value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Set the value of the variable.\n     */\n    Variable.prototype.setValue = function (value) {\n        this._value = value;\n    };\n    return Variable;\n}());\nexports.Variable = Variable;\n/**\n * The internal variable id counter.\n */\nvar VarId = 0;\n","/*!\n * numbro.js\n * version : 1.6.2\n * author : Företagsplatsen AB\n * license : MIT\n * http://www.foretagsplatsen.se\n */\n\n    /************************************\n        Constants\n    ************************************/\n\n    var numbro,\n        VERSION = '1.6.2',\n    // internal storage for culture config files\n        cultures = {},\n    // Todo: Remove in 2.0.0\n        languages = cultures,\n        currentCulture = 'en-US',\n        zeroFormat = null,\n        defaultFormat = '0,0',\n        defaultCurrencyFormat = '0$',\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n    // default culture\n        enUS = {\n            delimiters: {\n                thousands: ',',\n                decimal: '.'\n            },\n            abbreviations: {\n                thousand: 'k',\n                million: 'm',\n                billion: 'b',\n                trillion: 't'\n            },\n            ordinal: function(number) {\n                var b = number % 10;\n                return (~~(number % 100 / 10) === 1) ? 'th' :\n                    (b === 1) ? 'st' :\n                        (b === 2) ? 'nd' :\n                            (b === 3) ? 'rd' : 'th';\n            },\n            currency: {\n                symbol: '$',\n                position: 'prefix'\n            },\n            defaults: {\n                currencyFormat: ',0000 a'\n            },\n            formats: {\n                fourDigits: '0000 a',\n                fullWithTwoDecimals: '$ ,0.00',\n                fullWithTwoDecimalsNoCurrency: ',0.00'\n            }\n        };\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numbro prototype object\n    function Numbro(number) {\n        this._value = number;\n    }\n\n    function zeroes(count) {\n        var i, ret = '';\n\n        for (i = 0; i < count; i++) {\n            ret += '0';\n        }\n\n        return ret;\n    }\n    /**\n     * Implementation of toFixed() for numbers with exponent > 21\n     *\n     *\n     */\n    function toFixedLarge(value, precision) {\n        var mantissa,\n            beforeDec,\n            afterDec,\n            exponent,\n            str;\n\n        str = value.toString();\n\n        mantissa = str.split('e')[0];\n        exponent  = str.split('e')[1];\n\n        beforeDec = mantissa.split('.')[0];\n        afterDec = mantissa.split('.')[1] || '';\n\n        str = beforeDec + afterDec + zeroes(exponent - afterDec.length);\n        if (precision > 0) {\n            str += '.' + zeroes(precision);\n        }\n\n        return str;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed(value, precision, roundingFunction, optionals) {\n        var power = Math.pow(10, precision),\n            optionalsRegExp,\n            output;\n\n        if (value.toFixed(0).search('e') > -1) {\n            // Above 1e21, toFixed returns scientific notation, which\n            // is useless and unexpected\n            output = toFixedLarge(value, precision);\n        }\n        else {\n            //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value * power) / power).toFixed(precision);\n        }\n\n        if (optionals) {\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumbro(value, format, roundingFunction) {\n        var output;\n        // TODO: do something with `language`\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(value, format, roundingFunction);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(value, format, roundingFunction);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(value);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(value, format, roundingFunction);\n        }\n\n        // return string\n        return output;\n    }\n\n    function formatCurrency(value, originalFormat, roundingFunction) {\n        var format = originalFormat,\n            symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            plusSignIndex = format.indexOf('+'),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            decimalSeparator = '',\n            spliceIndex,\n            output;\n\n        if(format.indexOf('$') === -1){\n            // Use defaults instead of the format provided\n            if (cultures[currentCulture].currency.position === 'infix') {\n                decimalSeparator = cultures[currentCulture].currency.symbol;\n                if (cultures[currentCulture].currency.spaceSeparated) {\n                    decimalSeparator = ' ' + decimalSeparator + ' ';\n                }\n            } else if (cultures[currentCulture].currency.spaceSeparated) {\n                space = ' ';\n            }\n        } else {\n            // check for space before or after currency\n            if (format.indexOf(' $') > -1) {\n                space = ' ';\n                format = format.replace(' $', '');\n            } else if (format.indexOf('$ ') > -1) {\n                space = ' ';\n                format = format.replace('$ ', '');\n            } else {\n                format = format.replace('$', '');\n            }\n        }\n\n        // Format The Number\n        output = formatNumber(value, format, roundingFunction, decimalSeparator);\n\n        if (originalFormat.indexOf('$') === -1) {\n            // Use defaults instead of the format provided\n            switch (cultures[currentCulture].currency.position) {\n                case 'postfix':\n                    if (output.indexOf(')') > -1) {\n                        output = output.split('');\n                        output.splice(-1, 0, space + cultures[currentCulture].currency.symbol);\n                        output = output.join('');\n                    } else {\n                        output = output + space + cultures[currentCulture].currency.symbol;\n                    }\n                    break;\n                case 'infix':\n                    break;\n                case 'prefix':\n                    if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                        output = output.split('');\n                        spliceIndex = Math.max(openParenIndex, minusSignIndex) + 1;\n\n                        output.splice(spliceIndex, 0, cultures[currentCulture].currency.symbol + space);\n                        output = output.join('');\n                    } else {\n                        output = cultures[currentCulture].currency.symbol + space + output;\n                    }\n                    break;\n                default:\n                    throw Error('Currency position should be among [\"prefix\", \"infix\", \"postfix\"]');\n            }\n        } else {\n            // position the symbol\n            if (symbolIndex <= 1) {\n                if (output.indexOf('(') > -1 || output.indexOf('+') > -1 || output.indexOf('-') > -1) {\n                    output = output.split('');\n                    spliceIndex = 1;\n                    if (symbolIndex < openParenIndex || symbolIndex < plusSignIndex || symbolIndex < minusSignIndex) {\n                        // the symbol appears before the \"(\", \"+\" or \"-\"\n                        spliceIndex = 0;\n                    }\n                    output.splice(spliceIndex, 0, cultures[currentCulture].currency.symbol + space);\n                    output = output.join('');\n                } else {\n                    output = cultures[currentCulture].currency.symbol + space + output;\n                }\n            } else {\n                if (output.indexOf(')') > -1) {\n                    output = output.split('');\n                    output.splice(-1, 0, space + cultures[currentCulture].currency.symbol);\n                    output = output.join('');\n                } else {\n                    output = output + space + cultures[currentCulture].currency.symbol;\n                }\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage(value, format, roundingFunction) {\n        var space = '',\n            output;\n        value = value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        if (output.indexOf(')') > -1) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatTime(value) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n            seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' +\n            ((minutes < 10) ? '0' + minutes : minutes) + ':' +\n            ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function formatNumber (value, format, roundingFunction, sep) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            i,\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            bytes = '',\n            ord = '',\n            abs = Math.abs(value),\n            binarySuffixes = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\n            decimalSuffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            min,\n            max,\n            power,\n            totalLength,\n            length,\n            minimumPrecision,\n            pow,\n            w,\n            intPrecision,\n            precision,\n            prefix,\n            postfix,\n            thousands,\n            d = '',\n            forcedNeg = false,\n            neg = false,\n            indexOpenP,\n            size,\n            indexMinus,\n            paren = '',\n            minlen;\n\n        // check if number is zero and a custom zero format has been set\n        if (value === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        }\n\n        if (!isFinite(value)) {\n            return '' + value;\n        }\n\n        if (format.indexOf('{') === 0) {\n            var end = format.indexOf('}');\n            if (end === -1) {\n                throw Error('Format should also contain a \"}\"');\n            }\n            prefix = format.slice(1, end);\n            format = format.slice(end + 1);\n        } else {\n            prefix = '';\n        }\n\n        if (format.indexOf('}') === format.length - 1) {\n            var start = format.indexOf('{');\n            if (start === -1) {\n                throw Error('Format should also contain a \"{\"');\n            }\n            postfix = format.slice(start + 1, -1);\n            format = format.slice(0, start + 1);\n        } else {\n            postfix = '';\n        }\n\n        // check for min length\n        var info;\n        if (format.indexOf('.') === -1) {\n            info = format.match(/([0-9]+).*/);\n        } else {\n            info = format.match(/([0-9]+)\\..*/);\n        }\n        minlen = info === null ? -1 : info[1].length;\n\n        // see if we should use parentheses for negative number or if we should prefix with a sign\n        // if both are present we default to parentheses\n        if (format.indexOf('-') !== -1) {\n            forcedNeg = true;\n        }\n        if (format.indexOf('(') > -1) {\n            negP = true;\n            format = format.slice(1, -1);\n        } else if (format.indexOf('+') > -1) {\n            signed = true;\n            format = format.replace(/\\+/g, '');\n        }\n\n        // see if abbreviation is wanted\n        if (format.indexOf('a') > -1) {\n            intPrecision = format.split('.')[0].match(/[0-9]+/g) || ['0'];\n            intPrecision = parseInt(intPrecision[0], 10);\n\n            // check if abbreviation is specified\n            abbrK = format.indexOf('aK') >= 0;\n            abbrM = format.indexOf('aM') >= 0;\n            abbrB = format.indexOf('aB') >= 0;\n            abbrT = format.indexOf('aT') >= 0;\n            abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n            // check for space before abbreviation\n            if (format.indexOf(' a') > -1) {\n                abbr = ' ';\n                format = format.replace(' a', '');\n            } else {\n                format = format.replace('a', '');\n            }\n\n            totalLength = Math.floor(Math.log(abs) / Math.LN10) + 1;\n\n            minimumPrecision = totalLength % 3;\n            minimumPrecision = minimumPrecision === 0 ? 3 : minimumPrecision;\n\n            if (intPrecision && abs !== 0) {\n\n                length = Math.floor(Math.log(abs) / Math.LN10) + 1 - intPrecision;\n\n                pow = 3 * ~~((Math.min(intPrecision, totalLength) - minimumPrecision) / 3);\n\n                abs = abs / Math.pow(10, pow);\n\n                if (format.indexOf('.') === -1 && intPrecision > 3) {\n                    format += '[.]';\n\n                    size = length === 0 ? 0 : 3 * ~~(length / 3) - length;\n                    size = size < 0 ? size + 3 : size;\n\n                    for (i = 0; i < size; i++) {\n                        format += '0';\n                    }\n                }\n            }\n\n            if (Math.floor(Math.log(Math.abs(value)) / Math.LN10) + 1 !== intPrecision) {\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                    // trillion\n                    abbr = abbr + cultures[currentCulture].abbreviations.trillion;\n                    value = value / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                    // billion\n                    abbr = abbr + cultures[currentCulture].abbreviations.billion;\n                    value = value / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                    // million\n                    abbr = abbr + cultures[currentCulture].abbreviations.million;\n                    value = value / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                    // thousand\n                    abbr = abbr + cultures[currentCulture].abbreviations.thousand;\n                    value = value / Math.pow(10, 3);\n                }\n            }\n        }\n\n        // see if we are formatting binary bytes\n        if (format.indexOf('b') > -1) {\n            // check for space before\n            if (format.indexOf(' b') > -1) {\n                bytes = ' ';\n                format = format.replace(' b', '');\n            } else {\n                format = format.replace('b', '');\n            }\n\n            for (power = 0; power <= binarySuffixes.length; power++) {\n                min = Math.pow(1024, power);\n                max = Math.pow(1024, power + 1);\n\n                if (value >= min && value < max) {\n                    bytes = bytes + binarySuffixes[power];\n                    if (min > 0) {\n                        value = value / min;\n                    }\n                    break;\n                }\n            }\n        }\n\n        // see if we are formatting decimal bytes\n        if (format.indexOf('d') > -1) {\n            // check for space before\n            if (format.indexOf(' d') > -1) {\n                bytes = ' ';\n                format = format.replace(' d', '');\n            } else {\n                format = format.replace('d', '');\n            }\n\n            for (power = 0; power <= decimalSuffixes.length; power++) {\n                min = Math.pow(1000, power);\n                max = Math.pow(1000, power + 1);\n\n                if (value >= min && value < max) {\n                    bytes = bytes + decimalSuffixes[power];\n                    if (min > 0) {\n                        value = value / min;\n                    }\n                    break;\n                }\n            }\n        }\n\n        // see if ordinal is wanted\n        if (format.indexOf('o') > -1) {\n            // check for space before\n            if (format.indexOf(' o') > -1) {\n                ord = ' ';\n                format = format.replace(' o', '');\n            } else {\n                format = format.replace('o', '');\n            }\n\n            if (cultures[currentCulture].ordinal) {\n                ord = ord + cultures[currentCulture].ordinal(value);\n            }\n        }\n\n        if (format.indexOf('[.]') > -1) {\n            optDec = true;\n            format = format.replace('[.]', '.');\n        }\n\n        w = value.toString().split('.')[0];\n        precision = format.split('.')[1];\n        thousands = format.indexOf(',');\n\n        if (precision) {\n            if (precision.indexOf('*') !== -1) {\n                d = toFixed(value, value.toString().split('.')[1].length, roundingFunction);\n            } else {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction,\n                        precision[1].length);\n                } else {\n                    d = toFixed(value, precision.length, roundingFunction);\n                }\n            }\n\n            w = d.split('.')[0];\n\n            if (d.split('.')[1].length) {\n                var p = sep ? abbr + sep : cultures[currentCulture].delimiters.decimal;\n                d = p + d.split('.')[1];\n            } else {\n                d = '';\n            }\n\n            if (optDec && Number(d.slice(1)) === 0) {\n                d = '';\n            }\n        } else {\n            w = toFixed(value, null, roundingFunction);\n        }\n\n        // format number\n        if (w.indexOf('-') > -1) {\n            w = w.slice(1);\n            neg = true;\n        }\n\n        if (w.length < minlen) {\n            w = new Array(minlen - w.length + 1).join('0') + w;\n        }\n\n        if (thousands > -1) {\n            w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' +\n                cultures[currentCulture].delimiters.thousands);\n        }\n\n        if (format.indexOf('.') === 0) {\n            w = '';\n        }\n\n        indexOpenP = format.indexOf('(');\n        indexMinus = format.indexOf('-');\n\n        if (indexOpenP < indexMinus) {\n            paren = ((negP && neg) ? '(' : '') + (((forcedNeg && neg) || (!negP && neg)) ? '-' : '');\n        } else {\n            paren = (((forcedNeg && neg) || (!negP && neg)) ? '-' : '') + ((negP && neg) ? '(' : '');\n        }\n\n        return prefix +\n            paren + ((!neg && signed && value !== 0) ? '+' : '') +\n            w + d +\n            ((ord) ? ord : '') +\n            ((abbr && !sep) ? abbr : '') +\n            ((bytes) ? bytes : '') +\n            ((negP && neg) ? ')' : '') +\n            postfix;\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numbro = function(input) {\n        if (numbro.isNumbro(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (!Number(input)) {\n            input = numbro.fn.unformat(input);\n        }\n\n        return new Numbro(Number(input));\n    };\n\n    // version number\n    numbro.version = VERSION;\n\n    // compare numbro object\n    numbro.isNumbro = function(obj) {\n        return obj instanceof Numbro;\n    };\n\n    /**\n     * This function allow the user to set a new language with a fallback if\n     * the language does not exist. If no fallback language is provided,\n     * it fallbacks to english.\n     *\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `setCulture` should be used instead.\n     */\n    numbro.setLanguage = function(newLanguage, fallbackLanguage) {\n        console.warn('`setLanguage` is deprecated since version 1.6.0. Use `setCulture` instead');\n        var key = newLanguage,\n            prefix = newLanguage.split('-')[0],\n            matchingLanguage = null;\n        if (!languages[key]) {\n            Object.keys(languages).forEach(function(language) {\n                if (!matchingLanguage && language.split('-')[0] === prefix) {\n                    matchingLanguage = language;\n                }\n            });\n            key = matchingLanguage || fallbackLanguage || 'en-US';\n        }\n        chooseCulture(key);\n    };\n\n    /**\n     * This function allow the user to set a new culture with a fallback if\n     * the culture does not exist. If no fallback culture is provided,\n     * it fallbacks to \"en-US\".\n     */\n    numbro.setCulture = function(newCulture, fallbackCulture) {\n        var key = newCulture,\n            suffix = newCulture.split('-')[1],\n            matchingCulture = null;\n        if (!cultures[key]) {\n            if (suffix) {\n                Object.keys(cultures).forEach(function(language) {\n                    if (!matchingCulture && language.split('-')[1] === suffix) {\n                        matchingCulture = language;\n                    }\n                });\n            }\n\n            key = matchingCulture || fallbackCulture || 'en-US';\n        }\n        chooseCulture(key);\n    };\n\n    /**\n     * This function will load languages and then set the global language.  If\n     * no arguments are passed in, it will simply return the current global\n     * language key.\n     *\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `culture` should be used instead.\n     */\n    numbro.language = function(key, values) {\n        console.warn('`language` is deprecated since version 1.6.0. Use `culture` instead');\n\n        if (!key) {\n            return currentCulture;\n        }\n\n        if (key && !values) {\n            if (!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            chooseCulture(key);\n        }\n\n        if (values || !languages[key]) {\n            setCulture(key, values);\n        }\n\n        return numbro;\n    };\n\n    /**\n     * This function will load cultures and then set the global culture.  If\n     * no arguments are passed in, it will simply return the current global\n     * culture code.\n     */\n    numbro.culture = function(code, values) {\n        if (!code) {\n            return currentCulture;\n        }\n\n        if (code && !values) {\n            if (!cultures[code]) {\n                throw new Error('Unknown culture : ' + code);\n            }\n            chooseCulture(code);\n        }\n\n        if (values || !cultures[code]) {\n            setCulture(code, values);\n        }\n\n        return numbro;\n    };\n\n    /**\n     * This function provides access to the loaded language data.  If\n     * no arguments are passed in, it will simply return the current\n     * global language object.\n     *\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `culture` should be used instead.\n     */\n    numbro.languageData = function(key) {\n        console.warn('`languageData` is deprecated since version 1.6.0. Use `cultureData` instead');\n\n        if (!key) {\n            return languages[currentCulture];\n        }\n\n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n\n        return languages[key];\n    };\n\n    /**\n     * This function provides access to the loaded culture data.  If\n     * no arguments are passed in, it will simply return the current\n     * global culture object.\n     */\n    numbro.cultureData = function(code) {\n        if (!code) {\n            return cultures[currentCulture];\n        }\n\n        if (!cultures[code]) {\n            throw new Error('Unknown culture : ' + code);\n        }\n\n        return cultures[code];\n    };\n\n    numbro.culture('en-US', enUS);\n\n    /**\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `cultures` should be used instead.\n     */\n    numbro.languages = function() {\n        console.warn('`languages` is deprecated since version 1.6.0. Use `cultures` instead');\n\n        return languages;\n    };\n\n    numbro.cultures = function() {\n        return cultures;\n    };\n\n    numbro.zeroFormat = function(format) {\n        zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numbro.defaultFormat = function(format) {\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numbro.defaultCurrencyFormat = function (format) {\n        defaultCurrencyFormat = typeof(format) === 'string' ? format : '0$';\n    };\n\n    numbro.validate = function(val, culture) {\n\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            cultureData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n            if (console.warn) {\n                console.warn('Numbro.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if ( !! val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numbro.cultureData\n        try {\n            //check if the culture is understood by numbro. if not, default it to current culture\n            cultureData = numbro.cultureData(culture);\n        } catch (e) {\n            cultureData = numbro.cultureData(numbro.culture());\n        }\n\n        //setup the delimiters and currency symbol based on culture\n        _currSymbol = cultureData.currency.symbol;\n        _abbrObj = cultureData.abbreviations;\n        _decimalSep = cultureData.delimiters.decimal;\n        if (cultureData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = cultureData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million &&\n                    temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) &&\n                            !_valArray[0].match(_thousandRegEx) &&\n                            !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) &&\n                            !_valArray[0].match(_thousandRegEx) &&\n                            !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function setCulture(code, values) {\n        cultures[code] = values;\n    }\n\n    function chooseCulture(code) {\n        currentCulture = code;\n        var defaults = cultures[code].defaults;\n        if (defaults && defaults.format) {\n            numbro.defaultFormat(defaults.format);\n        }\n        if (defaults && defaults.currencyFormat) {\n            numbro.defaultCurrencyFormat(defaults.currencyFormat);\n        }\n    }\n\n    function format(input, formatString, language, roundingFunction) {\n        if (language != null && language !== numbro.culture()) {\n            numbro.setCulture(language);\n        }\n        return formatNumbro(\n            Number(input),\n            formatString != null     ? formatString : defaultFormat,\n            roundingFunction == null ? Math.round   : roundingFunction);\n    }\n\n    module.exports = {\"format\": format};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var parseCode = require('./parseCode');\nvar extend = require('./extend');\nvar projections = require('./projections');\nvar deriveConstants = require('./deriveConstants');\nvar Datum = require('./constants/Datum');\nvar datum = require('./datum');\n\n\nfunction Projection(srsCode,callback) {\n  if (!(this instanceof Projection)) {\n    return new Projection(srsCode);\n  }\n  callback = callback || function(error){\n    if(error){\n      throw error;\n    }\n  };\n  var json = parseCode(srsCode);\n  if(typeof json !== 'object'){\n    callback(srsCode);\n    return;\n  }\n  var ourProj = Projection.projections.get(json.projName);\n  if(!ourProj){\n    callback(srsCode);\n    return;\n  }\n  if (json.datumCode && json.datumCode !== 'none') {\n    var datumDef = Datum[json.datumCode];\n    if (datumDef) {\n      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n      json.ellps = datumDef.ellipse;\n      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n    }\n  }\n  json.k0 = json.k0 || 1.0;\n  json.axis = json.axis || 'enu';\n\n  var sphere = deriveConstants.sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n  var ecc = deriveConstants.eccentricity(sphere.a, sphere.b, sphere.rf, json.R_A);\n  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere.a, sphere.b, ecc.es, ecc.ep2);\n\n  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n  extend(this, ourProj); // transfer all the methods from the projection\n\n  // copy the 4 things over we calulated in deriveConstants.sphere\n  this.a = sphere.a;\n  this.b = sphere.b;\n  this.rf = sphere.rf;\n  this.sphere = sphere.sphere;\n\n  // copy the 3 things we calculated in deriveConstants.eccentricity\n  this.es = ecc.es;\n  this.e = ecc.e;\n  this.ep2 = ecc.ep2;\n\n  // add in the datum object\n  this.datum = datumObj;\n\n  // init the projection\n  this.init();\n\n  // legecy callback from back in the day when it went to spatialreference.org\n  callback(null, this);\n\n}\nProjection.projections = projections;\nProjection.projections.start();\nmodule.exports = Projection;\n","module.exports = function(crs, denorm, point) {\n  var xin = point.x,\n    yin = point.y,\n    zin = point.z || 0.0;\n  var v, t, i;\n  var out = {};\n  for (i = 0; i < 3; i++) {\n    if (denorm && i === 2 && point.z === undefined) {\n      continue;\n    }\n    if (i === 0) {\n      v = xin;\n      t = 'x';\n    }\n    else if (i === 1) {\n      v = yin;\n      t = 'y';\n    }\n    else {\n      v = zin;\n      t = 'z';\n    }\n    switch (crs.axis[i]) {\n    case 'e':\n      out[t] = v;\n      break;\n    case 'w':\n      out[t] = -v;\n      break;\n    case 'n':\n      out[t] = v;\n      break;\n    case 's':\n      out[t] = -v;\n      break;\n    case 'u':\n      if (point[t] !== undefined) {\n        out.z = v;\n      }\n      break;\n    case 'd':\n      if (point[t] !== undefined) {\n        out.z = -v;\n      }\n      break;\n    default:\n      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n      return null;\n    }\n  }\n  return out;\n};\n","var TWO_PI = Math.PI * 2;\n// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n// degree range by a tiny amount don't get wrapped. This prevents points that\n// have drifted from their original location along the 180th meridian (due to\n// floating point error) from changing their sign.\nvar SPI = 3.14159265359;\nvar sign = require('./sign');\n\nmodule.exports = function(x) {\n  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n};","module.exports = function(eccent, sinphi, cosphi) {\n  var con = eccent * sinphi;\n  return cosphi / (Math.sqrt(1 - con * con));\n};","var HALF_PI = Math.PI/2;\nmodule.exports = function(eccent, ts) {\n  var eccnth = 0.5 * eccent;\n  var con, dphi;\n  var phi = HALF_PI - 2 * Math.atan(ts);\n  for (var i = 0; i <= 15; i++) {\n    con = eccent * Math.sin(phi);\n    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n    phi += dphi;\n    if (Math.abs(dphi) <= 0.0000000001) {\n      return phi;\n    }\n  }\n  //console.log(\"phi2z has NoConvergence\");\n  return -9999;\n};","module.exports = function(x) {\n  return x<0 ? -1 : 1;\n};","module.exports = function (array){\n  var out = {\n    x: array[0],\n    y: array[1]\n  };\n  if (array.length>2) {\n    out.z = array[2];\n  }\n  if (array.length>3) {\n    out.m = array[3];\n  }\n  return out;\n};","var HALF_PI = Math.PI/2;\n\nmodule.exports = function(eccent, phi, sinphi) {\n  var con = eccent * sinphi;\n  var com = 0.5 * eccent;\n  con = Math.pow(((1 - con) / (1 + con)), com);\n  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n};","exports.wgs84 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"WGS84\",\n  datumName: \"WGS84\"\n};\nexports.ch1903 = {\n  towgs84: \"674.374,15.056,405.346\",\n  ellipse: \"bessel\",\n  datumName: \"swiss\"\n};\nexports.ggrs87 = {\n  towgs84: \"-199.87,74.79,246.62\",\n  ellipse: \"GRS80\",\n  datumName: \"Greek_Geodetic_Reference_System_1987\"\n};\nexports.nad83 = {\n  towgs84: \"0,0,0\",\n  ellipse: \"GRS80\",\n  datumName: \"North_American_Datum_1983\"\n};\nexports.nad27 = {\n  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n  ellipse: \"clrk66\",\n  datumName: \"North_American_Datum_1927\"\n};\nexports.potsdam = {\n  towgs84: \"606.0,23.0,413.0\",\n  ellipse: \"bessel\",\n  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n};\nexports.carthage = {\n  towgs84: \"-263.0,6.0,431.0\",\n  ellipse: \"clark80\",\n  datumName: \"Carthage 1934 Tunisia\"\n};\nexports.hermannskogel = {\n  towgs84: \"653.0,-212.0,449.0\",\n  ellipse: \"bessel\",\n  datumName: \"Hermannskogel\"\n};\nexports.ire65 = {\n  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n  ellipse: \"mod_airy\",\n  datumName: \"Ireland 1965\"\n};\nexports.rassadiran = {\n  towgs84: \"-133.63,-157.5,-158.62\",\n  ellipse: \"intl\",\n  datumName: \"Rassadiran\"\n};\nexports.nzgd49 = {\n  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n  ellipse: \"intl\",\n  datumName: \"New Zealand Geodetic Datum 1949\"\n};\nexports.osgb36 = {\n  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n  ellipse: \"airy\",\n  datumName: \"Airy 1830\"\n};\nexports.s_jtsk = {\n  towgs84: \"589,76,480\",\n  ellipse: 'bessel',\n  datumName: 'S-JTSK (Ferro)'\n};\nexports.beduaram = {\n  towgs84: '-106,-87,188',\n  ellipse: 'clrk80',\n  datumName: 'Beduaram'\n};\nexports.gunung_segara = {\n  towgs84: '-403,684,41',\n  ellipse: 'bessel',\n  datumName: 'Gunung Segara Jakarta'\n};\nexports.rnb72 = {\n  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n  ellipse: \"intl\",\n  datumName: \"Reseau National Belge 1972\"\n};","exports.MERIT = {\n  a: 6378137.0,\n  rf: 298.257,\n  ellipseName: \"MERIT 1983\"\n};\nexports.SGS85 = {\n  a: 6378136.0,\n  rf: 298.257,\n  ellipseName: \"Soviet Geodetic System 85\"\n};\nexports.GRS80 = {\n  a: 6378137.0,\n  rf: 298.257222101,\n  ellipseName: \"GRS 1980(IUGG, 1980)\"\n};\nexports.IAU76 = {\n  a: 6378140.0,\n  rf: 298.257,\n  ellipseName: \"IAU 1976\"\n};\nexports.airy = {\n  a: 6377563.396,\n  b: 6356256.910,\n  ellipseName: \"Airy 1830\"\n};\nexports.APL4 = {\n  a: 6378137,\n  rf: 298.25,\n  ellipseName: \"Appl. Physics. 1965\"\n};\nexports.NWL9D = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"Naval Weapons Lab., 1965\"\n};\nexports.mod_airy = {\n  a: 6377340.189,\n  b: 6356034.446,\n  ellipseName: \"Modified Airy\"\n};\nexports.andrae = {\n  a: 6377104.43,\n  rf: 300.0,\n  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n};\nexports.aust_SA = {\n  a: 6378160.0,\n  rf: 298.25,\n  ellipseName: \"Australian Natl & S. Amer. 1969\"\n};\nexports.GRS67 = {\n  a: 6378160.0,\n  rf: 298.2471674270,\n  ellipseName: \"GRS 67(IUGG 1967)\"\n};\nexports.bessel = {\n  a: 6377397.155,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841\"\n};\nexports.bess_nam = {\n  a: 6377483.865,\n  rf: 299.1528128,\n  ellipseName: \"Bessel 1841 (Namibia)\"\n};\nexports.clrk66 = {\n  a: 6378206.4,\n  b: 6356583.8,\n  ellipseName: \"Clarke 1866\"\n};\nexports.clrk80 = {\n  a: 6378249.145,\n  rf: 293.4663,\n  ellipseName: \"Clarke 1880 mod.\"\n};\nexports.clrk58 = {\n  a: 6378293.645208759,\n  rf: 294.2606763692654,\n  ellipseName: \"Clarke 1858\"\n};\nexports.CPM = {\n  a: 6375738.7,\n  rf: 334.29,\n  ellipseName: \"Comm. des Poids et Mesures 1799\"\n};\nexports.delmbr = {\n  a: 6376428.0,\n  rf: 311.5,\n  ellipseName: \"Delambre 1810 (Belgium)\"\n};\nexports.engelis = {\n  a: 6378136.05,\n  rf: 298.2566,\n  ellipseName: \"Engelis 1985\"\n};\nexports.evrst30 = {\n  a: 6377276.345,\n  rf: 300.8017,\n  ellipseName: \"Everest 1830\"\n};\nexports.evrst48 = {\n  a: 6377304.063,\n  rf: 300.8017,\n  ellipseName: \"Everest 1948\"\n};\nexports.evrst56 = {\n  a: 6377301.243,\n  rf: 300.8017,\n  ellipseName: \"Everest 1956\"\n};\nexports.evrst69 = {\n  a: 6377295.664,\n  rf: 300.8017,\n  ellipseName: \"Everest 1969\"\n};\nexports.evrstSS = {\n  a: 6377298.556,\n  rf: 300.8017,\n  ellipseName: \"Everest (Sabah & Sarawak)\"\n};\nexports.fschr60 = {\n  a: 6378166.0,\n  rf: 298.3,\n  ellipseName: \"Fischer (Mercury Datum) 1960\"\n};\nexports.fschr60m = {\n  a: 6378155.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1960\"\n};\nexports.fschr68 = {\n  a: 6378150.0,\n  rf: 298.3,\n  ellipseName: \"Fischer 1968\"\n};\nexports.helmert = {\n  a: 6378200.0,\n  rf: 298.3,\n  ellipseName: \"Helmert 1906\"\n};\nexports.hough = {\n  a: 6378270.0,\n  rf: 297.0,\n  ellipseName: \"Hough\"\n};\nexports.intl = {\n  a: 6378388.0,\n  rf: 297.0,\n  ellipseName: \"International 1909 (Hayford)\"\n};\nexports.kaula = {\n  a: 6378163.0,\n  rf: 298.24,\n  ellipseName: \"Kaula 1961\"\n};\nexports.lerch = {\n  a: 6378139.0,\n  rf: 298.257,\n  ellipseName: \"Lerch 1979\"\n};\nexports.mprts = {\n  a: 6397300.0,\n  rf: 191.0,\n  ellipseName: \"Maupertius 1738\"\n};\nexports.new_intl = {\n  a: 6378157.5,\n  b: 6356772.2,\n  ellipseName: \"New International 1967\"\n};\nexports.plessis = {\n  a: 6376523.0,\n  rf: 6355863.0,\n  ellipseName: \"Plessis 1817 (France)\"\n};\nexports.krass = {\n  a: 6378245.0,\n  rf: 298.3,\n  ellipseName: \"Krassovsky, 1942\"\n};\nexports.SEasia = {\n  a: 6378155.0,\n  b: 6356773.3205,\n  ellipseName: \"Southeast Asia\"\n};\nexports.walbeck = {\n  a: 6376896.0,\n  b: 6355834.8467,\n  ellipseName: \"Walbeck\"\n};\nexports.WGS60 = {\n  a: 6378165.0,\n  rf: 298.3,\n  ellipseName: \"WGS 60\"\n};\nexports.WGS66 = {\n  a: 6378145.0,\n  rf: 298.25,\n  ellipseName: \"WGS 66\"\n};\nexports.WGS7 = {\n  a: 6378135.0,\n  rf: 298.26,\n  ellipseName: \"WGS 72\"\n};\nexports.WGS84 = {\n  a: 6378137.0,\n  rf: 298.257223563,\n  ellipseName: \"WGS 84\"\n};\nexports.sphere = {\n  a: 6370997.0,\n  b: 6370997.0,\n  ellipseName: \"Normal Sphere (r=6370997)\"\n};","exports.greenwich = 0.0; //\"0dE\",\nexports.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\nexports.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\nexports.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\nexports.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\nexports.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\nexports.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\nexports.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\nexports.ferro = -17.666666666667; //\"17d40'W\",\nexports.brussels = 4.367975; //\"4d22'4.71\\\"E\",\nexports.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\nexports.athens = 23.7163375; //\"23d42'58.815\\\"E\",\nexports.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"","exports.ft = {to_meter: 0.3048};\nexports['us-ft'] = {to_meter: 1200 / 3937};\n","var proj = require('./Proj');\nvar transform = require('./transform');\nvar wgs84 = proj('WGS84');\n\nfunction transformer(from, to, coords) {\n  var transformedArray;\n  if (Array.isArray(coords)) {\n    transformedArray = transform(from, to, coords);\n    if (coords.length === 3) {\n      return [transformedArray.x, transformedArray.y, transformedArray.z];\n    }\n    else {\n      return [transformedArray.x, transformedArray.y];\n    }\n  }\n  else {\n    return transform(from, to, coords);\n  }\n}\n\nfunction checkProj(item) {\n  if (item instanceof proj) {\n    return item;\n  }\n  if (item.oProj) {\n    return item.oProj;\n  }\n  return proj(item);\n}\nfunction proj4(fromProj, toProj, coord) {\n  fromProj = checkProj(fromProj);\n  var single = false;\n  var obj;\n  if (typeof toProj === 'undefined') {\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n    coord = toProj;\n    toProj = fromProj;\n    fromProj = wgs84;\n    single = true;\n  }\n  toProj = checkProj(toProj);\n  if (coord) {\n    return transformer(fromProj, toProj, coord);\n  }\n  else {\n    obj = {\n      forward: function(coords) {\n        return transformer(fromProj, toProj, coords);\n      },\n      inverse: function(coords) {\n        return transformer(toProj, fromProj, coords);\n      }\n    };\n    if (single) {\n      obj.oProj = toProj;\n    }\n    return obj;\n  }\n}\nmodule.exports = proj4;","var PJD_3PARAM = 1;\nvar PJD_7PARAM = 2;\nvar PJD_WGS84 = 4; // WGS84 or equivalent\nvar PJD_NODATUM = 5; // WGS84 or equivalent\nvar SEC_TO_RAD = 4.84813681109535993589914102357e-6;\n\nfunction datum(datumCode, datum_params, a, b, es, ep2) {\n  var out = {};\n  out.datum_type = PJD_WGS84; //default setting\n  if (datumCode && datumCode === 'none') {\n    out.datum_type = PJD_NODATUM;\n  }\n\n  if (datum_params) {\n    out.datum_params = datum_params.map(parseFloat);\n    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n      out.datum_type = PJD_3PARAM;\n    }\n    if (out.datum_params.length > 3) {\n      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n        out.datum_type = PJD_7PARAM;\n        out.datum_params[3] *= SEC_TO_RAD;\n        out.datum_params[4] *= SEC_TO_RAD;\n        out.datum_params[5] *= SEC_TO_RAD;\n        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n      }\n    }\n  }\n\n\n  out.a = a; //datum object also uses these values\n  out.b = b;\n  out.es = es;\n  out.ep2 = ep2;\n  return out;\n}\n\nmodule.exports = datum;\n","'use strict';\nvar PJD_3PARAM = 1;\nvar PJD_7PARAM = 2;\nvar HALF_PI = Math.PI/2;\n\nexports.compareDatums = function(source, dest) {\n  if (source.datum_type !== dest.datum_type) {\n    return false; // false, datums are not equal\n  } else if (source.a !== dest.a || Math.abs(this.es - dest.es) > 0.000000000050) {\n    // the tolerence for es is to ensure that GRS80 and WGS84\n    // are considered identical\n    return false;\n  } else if (source.datum_type === PJD_3PARAM) {\n    return (this.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n  } else if (source.datum_type === PJD_7PARAM) {\n    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n  } else {\n    return true; // datums are equal\n  }\n}; // cs_compare_datums()\n\n/*\n * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n * according to the current ellipsoid parameters.\n *\n *    Latitude  : Geodetic latitude in radians                     (input)\n *    Longitude : Geodetic longitude in radians                    (input)\n *    Height    : Geodetic height, in meters                       (input)\n *    X         : Calculated Geocentric X coordinate, in meters    (output)\n *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n *\n */\nexports.geodeticToGeocentric = function(p, es, a) {\n  var Longitude = p.x;\n  var Latitude = p.y;\n  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n  var Rn; /*  Earth radius at location  */\n  var Sin_Lat; /*  Math.sin(Latitude)  */\n  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n  /*\n   ** Don't blow up if Latitude is just a little out of the value\n   ** range as it may just be a rounding issue.  Also removed longitude\n   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n   */\n  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n    Latitude = -HALF_PI;\n  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n    Latitude = HALF_PI;\n  } else if ((Latitude < -HALF_PI) || (Latitude > HALF_PI)) {\n    /* Latitude out of range */\n    //..reportError('geocent:lat out of range:' + Latitude);\n    return null;\n  }\n\n  if (Longitude > Math.PI) {\n    Longitude -= (2 * Math.PI);\n  }\n  Sin_Lat = Math.sin(Latitude);\n  Cos_Lat = Math.cos(Latitude);\n  Sin2_Lat = Sin_Lat * Sin_Lat;\n  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n  return {\n    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n  };\n}; // cs_geodetic_to_geocentric()\n\n\nexports.geocentricToGeodetic = function(p, es, a, b) {\n  /* local defintions and variables */\n  /* end-criterium of loop, accuracy of sin(Latitude) */\n  var genau = 1e-12;\n  var genau2 = (genau * genau);\n  var maxiter = 30;\n\n  var P; /* distance between semi-minor axis and location */\n  var RR; /* distance between center and location */\n  var CT; /* sin of geocentric latitude */\n  var ST; /* cos of geocentric latitude */\n  var RX;\n  var RK;\n  var RN; /* Earth radius at location */\n  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n  var CPHI; /* cos of searched geodetic latitude */\n  var SPHI; /* sin of searched geodetic latitude */\n  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n  var X = p.x;\n  var Y = p.y;\n  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n  var Longitude;\n  var Latitude;\n  var Height;\n\n  P = Math.sqrt(X * X + Y * Y);\n  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n  /*      special cases for latitude and longitude */\n  if (P / a < genau) {\n\n    /*  special case, if P=0. (X=0., Y=0.) */\n    Longitude = 0.0;\n\n    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n    if (RR / a < genau) {\n      Latitude = HALF_PI;\n      Height = -b;\n      return {\n        x: p.x,\n        y: p.y,\n        z: p.z\n      };\n    }\n  } else {\n    /*  ellipsoidal (geodetic) longitude\n     *  interval: -PI < Longitude <= +PI */\n    Longitude = Math.atan2(Y, X);\n  }\n\n  /* --------------------------------------------------------------\n   * Following iterative algorithm was developped by\n   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n   * Internet: www.ife.uni-hannover.de\n   * Iterative computation of CPHI,SPHI and Height.\n   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n   * 2*10**-7 arcsec.\n   * --------------------------------------------------------------\n   */\n  CT = Z / RR;\n  ST = P / RR;\n  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n  CPHI0 = ST * (1.0 - es) * RX;\n  SPHI0 = CT * RX;\n  iter = 0;\n\n  /* loop to find sin(Latitude) resp. Latitude\n   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n  do {\n    iter++;\n    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n    /*  ellipsoidal (geodetic) height */\n    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n    RK = es * RN / (RN + Height);\n    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n    CPHI = ST * (1.0 - RK) * RX;\n    SPHI = CT * RX;\n    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n    CPHI0 = CPHI;\n    SPHI0 = SPHI;\n  }\n  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n  /*      ellipsoidal (geodetic) latitude */\n  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n  return {\n    x: Longitude,\n    y: Latitude,\n    z: Height\n  };\n}; // cs_geocentric_to_geodetic()\n\n\n/****************************************************************/\n// pj_geocentic_to_wgs84( p )\n//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n/** point object, nothing fancy, just allows values to be\n    passed back and forth by reference rather than by value.\n    Other point classes may be used as long as they have\n    x and y properties, which will get modified in the transform method.\n*/\nexports.geocentricToWgs84 = function(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x + datum_params[0],\n      y: p.y + datum_params[1],\n      z: p.z + datum_params[2],\n    };\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    // if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n    };\n  }\n}; // cs_geocentric_to_wgs84\n\n/****************************************************************/\n// pj_geocentic_from_wgs84()\n//  coordinate system definition,\n//  point to transform in geocentric coordinates (x,y,z)\nexports.geocentricFromWgs84 = function(p, datum_type, datum_params) {\n\n  if (datum_type === PJD_3PARAM) {\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n    return {\n      x: p.x - datum_params[0],\n      y: p.y - datum_params[1],\n      z: p.z - datum_params[2],\n    };\n\n  } else if (datum_type === PJD_7PARAM) {\n    var Dx_BF = datum_params[0];\n    var Dy_BF = datum_params[1];\n    var Dz_BF = datum_params[2];\n    var Rx_BF = datum_params[3];\n    var Ry_BF = datum_params[4];\n    var Rz_BF = datum_params[5];\n    var M_BF = datum_params[6];\n    var x_tmp = (p.x - Dx_BF) / M_BF;\n    var y_tmp = (p.y - Dy_BF) / M_BF;\n    var z_tmp = (p.z - Dz_BF) / M_BF;\n    //if( x[io] === HUGE_VAL )\n    //    continue;\n\n    return {\n      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n    };\n  } //cs_geocentric_from_wgs84()\n};\n","var PJD_3PARAM = 1;\nvar PJD_7PARAM = 2;\nvar PJD_NODATUM = 5; // WGS84 or equivalent\nvar datum = require('./datumUtils');\nfunction checkParams(type) {\n  return (type === PJD_3PARAM || type === PJD_7PARAM);\n}\nmodule.exports = function(source, dest, point) {\n  // Short cut if the datums are identical.\n  if (datum.compareDatums(source, dest)) {\n    return point; // in this case, zero is sucess,\n    // whereas cs_compare_datums returns 1 to indicate TRUE\n    // confusing, should fix this\n  }\n\n  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n    return point;\n  }\n\n  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n  // Do we need to go through geocentric coordinates?\n  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n    return point;\n  }\n\n  // Convert to geocentric coordinates.\n  point = datum.geodeticToGeocentric(point, source.es, source.a);\n  // Convert between datums\n  if (checkParams(source.datum_type)) {\n    point = datum.geocentricToWgs84(point, source.datum_type, source.datum_params);\n  }\n  if (checkParams(dest.datum_type)) {\n    point = datum.geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n  }\n  return datum.geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n};\n","var globals = require('./global');\nvar parseProj = require('./projString');\nvar wkt = require('./wkt');\n\nfunction defs(name) {\n  /*global console*/\n  var that = this;\n  if (arguments.length === 2) {\n    var def = arguments[1];\n    if (typeof def === 'string') {\n      if (def.charAt(0) === '+') {\n        defs[name] = parseProj(arguments[1]);\n      }\n      else {\n        defs[name] = wkt(arguments[1]);\n      }\n    } else {\n      defs[name] = def;\n    }\n  }\n  else if (arguments.length === 1) {\n    if (Array.isArray(name)) {\n      return name.map(function(v) {\n        if (Array.isArray(v)) {\n          defs.apply(that, v);\n        }\n        else {\n          defs(v);\n        }\n      });\n    }\n    else if (typeof name === 'string') {\n      if (name in defs) {\n        return defs[name];\n      }\n    }\n    else if ('EPSG' in name) {\n      defs['EPSG:' + name.EPSG] = name;\n    }\n    else if ('ESRI' in name) {\n      defs['ESRI:' + name.ESRI] = name;\n    }\n    else if ('IAU2000' in name) {\n      defs['IAU2000:' + name.IAU2000] = name;\n    }\n    else {\n      console.log(name);\n    }\n    return;\n  }\n\n\n}\nglobals(defs);\nmodule.exports = defs;\n","// ellipoid pj_set_ell.c\nvar SIXTH = 0.1666666666666666667;\n/* 1/6 */\nvar RA4 = 0.04722222222222222222;\n/* 17/360 */\nvar RA6 = 0.02215608465608465608;\nvar EPSLN = 1.0e-10;\nvar Ellipsoid = require('./constants/Ellipsoid');\n\nexports.eccentricity = function(a, b, rf, R_A) {\n  var a2 = a * a; // used in geocentric\n  var b2 = b * b; // used in geocentric\n  var es = (a2 - b2) / a2; // e ^ 2\n  var e = 0;\n  if (R_A) {\n    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n    a2 = a * a;\n    es = 0;\n  } else {\n    e = Math.sqrt(es); // eccentricity\n  }\n  var ep2 = (a2 - b2) / b2; // used in geocentric\n  return {\n    es: es,\n    e: e,\n    ep2: ep2\n  };\n};\nexports.sphere = function (a, b, rf, ellps, sphere) {\n  if (!a) { // do we have an ellipsoid?\n    var ellipse = Ellipsoid[ellps];\n    if (!ellipse) {\n      ellipse = Ellipsoid.WGS84;\n    }\n    a = ellipse.a;\n    b = ellipse.b;\n    rf = ellipse.rf;\n  }\n\n  if (rf && !b) {\n    b = (1.0 - 1.0 / rf) * a;\n  }\n  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n    sphere = true;\n    b = a;\n  }\n  return {\n    a: a,\n    b: b,\n    rf: rf,\n    sphere: sphere\n  };\n};\n","module.exports = function(destination, source) {\n  destination = destination || {};\n  var value, property;\n  if (!source) {\n    return destination;\n  }\n  for (property in source) {\n    value = source[property];\n    if (value !== undefined) {\n      destination[property] = value;\n    }\n  }\n  return destination;\n};\n","module.exports = function(defs) {\n  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n  defs.WGS84 = defs['EPSG:4326'];\n  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n  defs.GOOGLE = defs['EPSG:3857'];\n  defs['EPSG:900913'] = defs['EPSG:3857'];\n  defs['EPSG:102113'] = defs['EPSG:3857'];\n};\n","var defs = require('./defs');\nvar wkt = require('./wkt');\nvar projStr = require('./projString');\nfunction testObj(code){\n  return typeof code === 'string';\n}\nfunction testDef(code){\n  return code in defs;\n}\nvar codeWords = ['GEOGCS','GEOCCS','PROJCS','LOCAL_CS'];\n\nfunction testWKT(code){\n  return codeWords.some(function (word) {\n    return code.indexOf(word) > -1;\n  });\n}\nfunction testProj(code){\n  return code[0] === '+';\n}\nfunction parse(code){\n  if (testObj(code)) {\n    //check to see if this is a WKT string\n    if (testDef(code)) {\n      return defs[code];\n    }\n    if (testWKT(code)) {\n      return wkt(code);\n    }\n    if (testProj(code)) {\n      return projStr(code);\n    }\n  }else{\n    return code;\n  }\n}\n\nmodule.exports = parse;\n","var D2R = 0.01745329251994329577;\nvar PrimeMeridian = require('./constants/PrimeMeridian');\nvar units = require('./constants/units');\n\nmodule.exports = function(defData) {\n  var self = {};\n  var paramObj = defData.split('+').map(function(v) {\n    return v.trim();\n  }).filter(function(a) {\n    return a;\n  }).reduce(function(p, a) {\n    var split = a.split('=');\n    split.push(true);\n    p[split[0].toLowerCase()] = split[1];\n    return p;\n  }, {});\n  var paramName, paramVal, paramOutname;\n  var params = {\n    proj: 'projName',\n    datum: 'datumCode',\n    rf: function(v) {\n      self.rf = parseFloat(v);\n    },\n    lat_0: function(v) {\n      self.lat0 = v * D2R;\n    },\n    lat_1: function(v) {\n      self.lat1 = v * D2R;\n    },\n    lat_2: function(v) {\n      self.lat2 = v * D2R;\n    },\n    lat_ts: function(v) {\n      self.lat_ts = v * D2R;\n    },\n    lon_0: function(v) {\n      self.long0 = v * D2R;\n    },\n    lon_1: function(v) {\n      self.long1 = v * D2R;\n    },\n    lon_2: function(v) {\n      self.long2 = v * D2R;\n    },\n    alpha: function(v) {\n      self.alpha = parseFloat(v) * D2R;\n    },\n    lonc: function(v) {\n      self.longc = v * D2R;\n    },\n    x_0: function(v) {\n      self.x0 = parseFloat(v);\n    },\n    y_0: function(v) {\n      self.y0 = parseFloat(v);\n    },\n    k_0: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    k: function(v) {\n      self.k0 = parseFloat(v);\n    },\n    a: function(v) {\n      self.a = parseFloat(v);\n    },\n    b: function(v) {\n      self.b = parseFloat(v);\n    },\n    r_a: function() {\n      self.R_A = true;\n    },\n    zone: function(v) {\n      self.zone = parseInt(v, 10);\n    },\n    south: function() {\n      self.utmSouth = true;\n    },\n    towgs84: function(v) {\n      self.datum_params = v.split(\",\").map(function(a) {\n        return parseFloat(a);\n      });\n    },\n    to_meter: function(v) {\n      self.to_meter = parseFloat(v);\n    },\n    units: function(v) {\n      self.units = v;\n      if (units[v]) {\n        self.to_meter = units[v].to_meter;\n      }\n    },\n    from_greenwich: function(v) {\n      self.from_greenwich = v * D2R;\n    },\n    pm: function(v) {\n      self.from_greenwich = (PrimeMeridian[v] ? PrimeMeridian[v] : parseFloat(v)) * D2R;\n    },\n    nadgrids: function(v) {\n      if (v === '@null') {\n        self.datumCode = 'none';\n      }\n      else {\n        self.nadgrids = v;\n      }\n    },\n    axis: function(v) {\n      var legalAxis = \"ewnsud\";\n      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n        self.axis = v;\n      }\n    }\n  };\n  for (paramName in paramObj) {\n    paramVal = paramObj[paramName];\n    if (paramName in params) {\n      paramOutname = params[paramName];\n      if (typeof paramOutname === 'function') {\n        paramOutname(paramVal);\n      }\n      else {\n        self[paramOutname] = paramVal;\n      }\n    }\n    else {\n      self[paramName] = paramVal;\n    }\n  }\n  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n    self.datumCode = self.datumCode.toLowerCase();\n  }\n  return self;\n};\n","var projs = [\n  require('./projections/merc'),\n  require('./projections/longlat')\n];\nvar names = {};\nvar projStore = [];\n\nfunction add(proj, i) {\n  var len = projStore.length;\n  if (!proj.names) {\n    console.log(i);\n    return true;\n  }\n  projStore[len] = proj;\n  proj.names.forEach(function(n) {\n    names[n.toLowerCase()] = len;\n  });\n  return this;\n}\n\nexports.add = add;\n\nexports.get = function(name) {\n  if (!name) {\n    return false;\n  }\n  var n = name.toLowerCase();\n  if (typeof names[n] !== 'undefined' && projStore[names[n]]) {\n    return projStore[names[n]];\n  }\n};\nexports.start = function() {\n  projs.forEach(add);\n};\n","exports.init = function() {\n  //no-op for longlat\n};\n\nfunction identity(pt) {\n  return pt;\n}\nexports.forward = identity;\nexports.inverse = identity;\nexports.names = [\"longlat\", \"identity\"];\n","var msfnz = require('../common/msfnz');\nvar HALF_PI = Math.PI/2;\nvar EPSLN = 1.0e-10;\nvar R2D = 57.29577951308232088;\nvar adjust_lon = require('../common/adjust_lon');\nvar FORTPI = Math.PI/4;\nvar tsfnz = require('../common/tsfnz');\nvar phi2z = require('../common/phi2z');\nexports.init = function() {\n  var con = this.b / this.a;\n  this.es = 1 - con * con;\n  if(!('x0' in this)){\n    this.x0 = 0;\n  }\n  if(!('y0' in this)){\n    this.y0 = 0;\n  }\n  this.e = Math.sqrt(this.es);\n  if (this.lat_ts) {\n    if (this.sphere) {\n      this.k0 = Math.cos(this.lat_ts);\n    }\n    else {\n      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n    }\n  }\n  else {\n    if (!this.k0) {\n      if (this.k) {\n        this.k0 = this.k;\n      }\n      else {\n        this.k0 = 1;\n      }\n    }\n  }\n};\n\n/* Mercator forward equations--mapping lat,long to x,y\n  --------------------------------------------------*/\n\nexports.forward = function(p) {\n  var lon = p.x;\n  var lat = p.y;\n  // convert to radians\n  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n    return null;\n  }\n\n  var x, y;\n  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n    return null;\n  }\n  else {\n    if (this.sphere) {\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n    }\n    else {\n      var sinphi = Math.sin(lat);\n      var ts = tsfnz(this.e, lat, sinphi);\n      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n      y = this.y0 - this.a * this.k0 * Math.log(ts);\n    }\n    p.x = x;\n    p.y = y;\n    return p;\n  }\n};\n\n\n/* Mercator inverse equations--mapping x,y to lat/long\n  --------------------------------------------------*/\nexports.inverse = function(p) {\n\n  var x = p.x - this.x0;\n  var y = p.y - this.y0;\n  var lon, lat;\n\n  if (this.sphere) {\n    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n  }\n  else {\n    var ts = Math.exp(-y / (this.a * this.k0));\n    lat = phi2z(this.e, ts);\n    if (lat === -9999) {\n      return null;\n    }\n  }\n  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n  p.x = lon;\n  p.y = lat;\n  return p;\n};\n\nexports.names = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\n","var D2R = 0.01745329251994329577;\nvar R2D = 57.29577951308232088;\nvar PJD_3PARAM = 1;\nvar PJD_7PARAM = 2;\nvar datum_transform = require('./datum_transform');\nvar adjust_axis = require('./adjust_axis');\nvar proj = require('./Proj');\nvar toPoint = require('./common/toPoint');\nfunction checkNotWGS(source, dest) {\n  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n}\nmodule.exports = function transform(source, dest, point) {\n  var wgs84;\n  if (Array.isArray(point)) {\n    point = toPoint(point);\n  }\n\n  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n    wgs84 = new proj('WGS84');\n    point = transform(source, wgs84, point);\n    source = wgs84;\n  }\n  // DGR, 2010/11/12\n  if (source.axis !== 'enu') {\n    point = adjust_axis(source, false, point);\n  }\n  // Transform source points to long/lat, if they aren't already.\n  if (source.projName === 'longlat') {\n    point = {\n      x: point.x * D2R,\n      y: point.y * D2R\n    };\n  }\n  else {\n    if (source.to_meter) {\n      point = {\n        x: point.x * source.to_meter,\n        y: point.y * source.to_meter\n      };\n    }\n    point = source.inverse(point); // Convert Cartesian to longlat\n  }\n  // Adjust for the prime meridian if necessary\n  if (source.from_greenwich) {\n    point.x += source.from_greenwich;\n  }\n\n  // Convert datums if needed, and if possible.\n  point = datum_transform(source.datum, dest.datum, point);\n\n  // Adjust for the prime meridian if necessary\n  if (dest.from_greenwich) {\n    point = {\n      x: point.x - dest.grom_greenwich,\n      y: point.y\n    };\n  }\n\n  if (dest.projName === 'longlat') {\n    // convert radians to decimal degrees\n    point = {\n      x: point.x * R2D,\n      y: point.y * R2D\n    };\n  } else { // else project\n    point = dest.forward(point);\n    if (dest.to_meter) {\n      point = {\n        x: point.x / dest.to_meter,\n        y: point.y / dest.to_meter\n      };\n    }\n  }\n\n  // DGR, 2010/11/12\n  if (dest.axis !== 'enu') {\n    return adjust_axis(dest, true, point);\n  }\n\n  return point;\n};\n","var D2R = 0.01745329251994329577;\nvar extend = require('./extend');\n\nfunction mapit(obj, key, v) {\n  obj[key] = v.map(function(aa) {\n    var o = {};\n    sExpr(aa, o);\n    return o;\n  }).reduce(function(a, b) {\n    return extend(a, b);\n  }, {});\n}\n\nfunction sExpr(v, obj) {\n  var key;\n  if (!Array.isArray(v)) {\n    obj[v] = true;\n    return;\n  }\n  else {\n    key = v.shift();\n    if (key === 'PARAMETER') {\n      key = v.shift();\n    }\n    if (v.length === 1) {\n      if (Array.isArray(v[0])) {\n        obj[key] = {};\n        sExpr(v[0], obj[key]);\n      }\n      else {\n        obj[key] = v[0];\n      }\n    }\n    else if (!v.length) {\n      obj[key] = true;\n    }\n    else if (key === 'TOWGS84') {\n      obj[key] = v;\n    }\n    else {\n      obj[key] = {};\n      if (['UNIT', 'PRIMEM', 'VERT_DATUM'].indexOf(key) > -1) {\n        obj[key] = {\n          name: v[0].toLowerCase(),\n          convert: v[1]\n        };\n        if (v.length === 3) {\n          obj[key].auth = v[2];\n        }\n      }\n      else if (key === 'SPHEROID') {\n        obj[key] = {\n          name: v[0],\n          a: v[1],\n          rf: v[2]\n        };\n        if (v.length === 4) {\n          obj[key].auth = v[3];\n        }\n      }\n      else if (['GEOGCS', 'GEOCCS', 'DATUM', 'VERT_CS', 'COMPD_CS', 'LOCAL_CS', 'FITTED_CS', 'LOCAL_DATUM'].indexOf(key) > -1) {\n        v[0] = ['name', v[0]];\n        mapit(obj, key, v);\n      }\n      else if (v.every(function(aa) {\n        return Array.isArray(aa);\n      })) {\n        mapit(obj, key, v);\n      }\n      else {\n        sExpr(v, obj[key]);\n      }\n    }\n  }\n}\n\nfunction rename(obj, params) {\n  var outName = params[0];\n  var inName = params[1];\n  if (!(outName in obj) && (inName in obj)) {\n    obj[outName] = obj[inName];\n    if (params.length === 3) {\n      obj[outName] = params[2](obj[outName]);\n    }\n  }\n}\n\nfunction d2r(input) {\n  return input * D2R;\n}\n\nfunction cleanWKT(wkt) {\n  if (wkt.type === 'GEOGCS') {\n    wkt.projName = 'longlat';\n  }\n  else if (wkt.type === 'LOCAL_CS') {\n    wkt.projName = 'identity';\n    wkt.local = true;\n  }\n  else {\n    if (typeof wkt.PROJECTION === \"object\") {\n      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n    }\n    else {\n      wkt.projName = wkt.PROJECTION;\n    }\n  }\n  if (wkt.UNIT) {\n    wkt.units = wkt.UNIT.name.toLowerCase();\n    if (wkt.units === 'metre') {\n      wkt.units = 'meter';\n    }\n    if (wkt.UNIT.convert) {\n      if (wkt.type === 'GEOGCS') {\n        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n          wkt.to_meter = parseFloat(wkt.UNIT.convert, 10)*wkt.DATUM.SPHEROID.a;\n        }\n      } else {\n        wkt.to_meter = parseFloat(wkt.UNIT.convert, 10);\n      }\n    }\n  }\n\n  if (wkt.GEOGCS) {\n    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n    //}\n    if (wkt.GEOGCS.DATUM) {\n      wkt.datumCode = wkt.GEOGCS.DATUM.name.toLowerCase();\n    }\n    else {\n      wkt.datumCode = wkt.GEOGCS.name.toLowerCase();\n    }\n    if (wkt.datumCode.slice(0, 2) === 'd_') {\n      wkt.datumCode = wkt.datumCode.slice(2);\n    }\n    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n      wkt.datumCode = 'nzgd49';\n    }\n    if (wkt.datumCode === \"wgs_1984\") {\n      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n        wkt.sphere = true;\n      }\n      wkt.datumCode = 'wgs84';\n    }\n    if (wkt.datumCode.slice(-6) === '_ferro') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n    }\n    if (wkt.datumCode.slice(-8) === '_jakarta') {\n      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n    }\n    if (~wkt.datumCode.indexOf('belge')) {\n      wkt.datumCode = \"rnb72\";\n    }\n    if (wkt.GEOGCS.DATUM && wkt.GEOGCS.DATUM.SPHEROID) {\n      wkt.ellps = wkt.GEOGCS.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n      if (wkt.ellps.toLowerCase().slice(0, 13) === \"international\") {\n        wkt.ellps = 'intl';\n      }\n\n      wkt.a = wkt.GEOGCS.DATUM.SPHEROID.a;\n      wkt.rf = parseFloat(wkt.GEOGCS.DATUM.SPHEROID.rf, 10);\n    }\n    if (~wkt.datumCode.indexOf('osgb_1936')) {\n      wkt.datumCode = \"osgb36\";\n    }\n  }\n  if (wkt.b && !isFinite(wkt.b)) {\n    wkt.b = wkt.a;\n  }\n\n  function toMeter(input) {\n    var ratio = wkt.to_meter || 1;\n    return parseFloat(input, 10) * ratio;\n  }\n  var renamer = function(a) {\n    return rename(wkt, a);\n  };\n  var list = [\n    ['standard_parallel_1', 'Standard_Parallel_1'],\n    ['standard_parallel_2', 'Standard_Parallel_2'],\n    ['false_easting', 'False_Easting'],\n    ['false_northing', 'False_Northing'],\n    ['central_meridian', 'Central_Meridian'],\n    ['latitude_of_origin', 'Latitude_Of_Origin'],\n    ['latitude_of_origin', 'Central_Parallel'],\n    ['scale_factor', 'Scale_Factor'],\n    ['k0', 'scale_factor'],\n    ['latitude_of_center', 'Latitude_of_center'],\n    ['lat0', 'latitude_of_center', d2r],\n    ['longitude_of_center', 'Longitude_Of_Center'],\n    ['longc', 'longitude_of_center', d2r],\n    ['x0', 'false_easting', toMeter],\n    ['y0', 'false_northing', toMeter],\n    ['long0', 'central_meridian', d2r],\n    ['lat0', 'latitude_of_origin', d2r],\n    ['lat0', 'standard_parallel_1', d2r],\n    ['lat1', 'standard_parallel_1', d2r],\n    ['lat2', 'standard_parallel_2', d2r],\n    ['alpha', 'azimuth', d2r],\n    ['srsCode', 'name']\n  ];\n  list.forEach(renamer);\n  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === \"Lambert_Azimuthal_Equal_Area\")) {\n    wkt.long0 = wkt.longc;\n  }\n  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n    wkt.lat_ts = wkt.lat1;\n  }\n}\nmodule.exports = function(wkt, self) {\n  var lisp = JSON.parse((\",\" + wkt).replace(/\\s*\\,\\s*([A-Z_0-9]+?)(\\[)/g, ',[\"$1\",').slice(1).replace(/\\s*\\,\\s*([A-Z_0-9]+?)\\]/g, ',\"$1\"]').replace(/,\\[\"VERTCS\".+/,''));\n  var type = lisp.shift();\n  var name = lisp.shift();\n  lisp.unshift(['name', name]);\n  lisp.unshift(['type', type]);\n  lisp.unshift('output');\n  var obj = {};\n  sExpr(lisp, obj);\n  cleanWKT(obj.output);\n  return extend(self, obj.output);\n};\n","'use strict';\n\nmodule.exports = partialSort;\n\n// Floyd-Rivest selection algorithm:\n// Rearrange items so that all items in the [left, k] range are smaller than all items in (k, right];\n// The k-th element will have the (k - left + 1)th smallest value in [left, right]\n\nfunction partialSort(arr, k, left, right, compare) {\n    left = left || 0;\n    right = right || (arr.length - 1);\n    compare = compare || defaultCompare;\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            partialSort(arr, k, newLeft, newRight, compare);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (compare(arr[i], t) < 0) i++;\n            while (compare(arr[j], t) > 0) j--;\n        }\n\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","'use strict';\n\nmodule.exports = rbush;\n\nvar quickselect = require('quickselect');\n\nfunction rbush(maxEntries, format) {\n    if (!(this instanceof rbush)) return new rbush(maxEntries, format);\n\n    // max entries in a node is 9 by default; min node fill is 40% for best performance\n    this._maxEntries = Math.max(4, maxEntries || 9);\n    this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\n\n    if (format) {\n        this._initFormat(format);\n    }\n\n    this.clear();\n}\n\nrbush.prototype = {\n\n    all: function () {\n        return this._all(this.data, []);\n    },\n\n    search: function (bbox) {\n\n        var node = this.data,\n            result = [],\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return result;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf) result.push(child);\n                    else if (contains(bbox, childBBox)) this._all(child, result);\n                    else nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return result;\n    },\n\n    collides: function (bbox) {\n\n        var node = this.data,\n            toBBox = this.toBBox;\n\n        if (!intersects(bbox, node)) return false;\n\n        var nodesToSearch = [],\n            i, len, child, childBBox;\n\n        while (node) {\n            for (i = 0, len = node.children.length; i < len; i++) {\n\n                child = node.children[i];\n                childBBox = node.leaf ? toBBox(child) : child;\n\n                if (intersects(bbox, childBBox)) {\n                    if (node.leaf || contains(bbox, childBBox)) return true;\n                    nodesToSearch.push(child);\n                }\n            }\n            node = nodesToSearch.pop();\n        }\n\n        return false;\n    },\n\n    load: function (data) {\n        if (!(data && data.length)) return this;\n\n        if (data.length < this._minEntries) {\n            for (var i = 0, len = data.length; i < len; i++) {\n                this.insert(data[i]);\n            }\n            return this;\n        }\n\n        // recursively build the tree with the given data from stratch using OMT algorithm\n        var node = this._build(data.slice(), 0, data.length - 1, 0);\n\n        if (!this.data.children.length) {\n            // save as is if tree is empty\n            this.data = node;\n\n        } else if (this.data.height === node.height) {\n            // split root if trees have the same height\n            this._splitRoot(this.data, node);\n\n        } else {\n            if (this.data.height < node.height) {\n                // swap trees if inserted one is bigger\n                var tmpNode = this.data;\n                this.data = node;\n                node = tmpNode;\n            }\n\n            // insert the small tree into the large tree at appropriate level\n            this._insert(node, this.data.height - node.height - 1, true);\n        }\n\n        return this;\n    },\n\n    insert: function (item) {\n        if (item) this._insert(item, this.data.height - 1);\n        return this;\n    },\n\n    clear: function () {\n        this.data = createNode([]);\n        return this;\n    },\n\n    remove: function (item, equalsFn) {\n        if (!item) return this;\n\n        var node = this.data,\n            bbox = this.toBBox(item),\n            path = [],\n            indexes = [],\n            i, parent, index, goingUp;\n\n        // depth-first iterative tree traversal\n        while (node || path.length) {\n\n            if (!node) { // go up\n                node = path.pop();\n                parent = path[path.length - 1];\n                i = indexes.pop();\n                goingUp = true;\n            }\n\n            if (node.leaf) { // check current node\n                index = findItem(item, node.children, equalsFn);\n\n                if (index !== -1) {\n                    // item found, remove the item and condense tree upwards\n                    node.children.splice(index, 1);\n                    path.push(node);\n                    this._condense(path);\n                    return this;\n                }\n            }\n\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\n                path.push(node);\n                indexes.push(i);\n                i = 0;\n                parent = node;\n                node = node.children[0];\n\n            } else if (parent) { // go right\n                i++;\n                node = parent.children[i];\n                goingUp = false;\n\n            } else node = null; // nothing found\n        }\n\n        return this;\n    },\n\n    toBBox: function (item) { return item; },\n\n    compareMinX: compareNodeMinX,\n    compareMinY: compareNodeMinY,\n\n    toJSON: function () { return this.data; },\n\n    fromJSON: function (data) {\n        this.data = data;\n        return this;\n    },\n\n    _all: function (node, result) {\n        var nodesToSearch = [];\n        while (node) {\n            if (node.leaf) result.push.apply(result, node.children);\n            else nodesToSearch.push.apply(nodesToSearch, node.children);\n\n            node = nodesToSearch.pop();\n        }\n        return result;\n    },\n\n    _build: function (items, left, right, height) {\n\n        var N = right - left + 1,\n            M = this._maxEntries,\n            node;\n\n        if (N <= M) {\n            // reached leaf level; return leaf\n            node = createNode(items.slice(left, right + 1));\n            calcBBox(node, this.toBBox);\n            return node;\n        }\n\n        if (!height) {\n            // target height of the bulk-loaded tree\n            height = Math.ceil(Math.log(N) / Math.log(M));\n\n            // target number of root entries to maximize storage utilization\n            M = Math.ceil(N / Math.pow(M, height - 1));\n        }\n\n        node = createNode([]);\n        node.leaf = false;\n        node.height = height;\n\n        // split the items into M mostly square tiles\n\n        var N2 = Math.ceil(N / M),\n            N1 = N2 * Math.ceil(Math.sqrt(M)),\n            i, j, right2, right3;\n\n        multiSelect(items, left, right, N1, this.compareMinX);\n\n        for (i = left; i <= right; i += N1) {\n\n            right2 = Math.min(i + N1 - 1, right);\n\n            multiSelect(items, i, right2, N2, this.compareMinY);\n\n            for (j = i; j <= right2; j += N2) {\n\n                right3 = Math.min(j + N2 - 1, right2);\n\n                // pack each entry recursively\n                node.children.push(this._build(items, j, right3, height - 1));\n            }\n        }\n\n        calcBBox(node, this.toBBox);\n\n        return node;\n    },\n\n    _chooseSubtree: function (bbox, node, level, path) {\n\n        var i, len, child, targetNode, area, enlargement, minArea, minEnlargement;\n\n        while (true) {\n            path.push(node);\n\n            if (node.leaf || path.length - 1 === level) break;\n\n            minArea = minEnlargement = Infinity;\n\n            for (i = 0, len = node.children.length; i < len; i++) {\n                child = node.children[i];\n                area = bboxArea(child);\n                enlargement = enlargedArea(bbox, child) - area;\n\n                // choose entry with the least area enlargement\n                if (enlargement < minEnlargement) {\n                    minEnlargement = enlargement;\n                    minArea = area < minArea ? area : minArea;\n                    targetNode = child;\n\n                } else if (enlargement === minEnlargement) {\n                    // otherwise choose one with the smallest area\n                    if (area < minArea) {\n                        minArea = area;\n                        targetNode = child;\n                    }\n                }\n            }\n\n            node = targetNode || node.children[0];\n        }\n\n        return node;\n    },\n\n    _insert: function (item, level, isNode) {\n\n        var toBBox = this.toBBox,\n            bbox = isNode ? item : toBBox(item),\n            insertPath = [];\n\n        // find the best node for accommodating the item, saving all nodes along the path too\n        var node = this._chooseSubtree(bbox, this.data, level, insertPath);\n\n        // put the item into the node\n        node.children.push(item);\n        extend(node, bbox);\n\n        // split on node overflow; propagate upwards if necessary\n        while (level >= 0) {\n            if (insertPath[level].children.length > this._maxEntries) {\n                this._split(insertPath, level);\n                level--;\n            } else break;\n        }\n\n        // adjust bboxes along the insertion path\n        this._adjustParentBBoxes(bbox, insertPath, level);\n    },\n\n    // split overflowed node into two\n    _split: function (insertPath, level) {\n\n        var node = insertPath[level],\n            M = node.children.length,\n            m = this._minEntries;\n\n        this._chooseSplitAxis(node, m, M);\n\n        var splitIndex = this._chooseSplitIndex(node, m, M);\n\n        var newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\n        newNode.height = node.height;\n        newNode.leaf = node.leaf;\n\n        calcBBox(node, this.toBBox);\n        calcBBox(newNode, this.toBBox);\n\n        if (level) insertPath[level - 1].children.push(newNode);\n        else this._splitRoot(node, newNode);\n    },\n\n    _splitRoot: function (node, newNode) {\n        // split root node\n        this.data = createNode([node, newNode]);\n        this.data.height = node.height + 1;\n        this.data.leaf = false;\n        calcBBox(this.data, this.toBBox);\n    },\n\n    _chooseSplitIndex: function (node, m, M) {\n\n        var i, bbox1, bbox2, overlap, area, minOverlap, minArea, index;\n\n        minOverlap = minArea = Infinity;\n\n        for (i = m; i <= M - m; i++) {\n            bbox1 = distBBox(node, 0, i, this.toBBox);\n            bbox2 = distBBox(node, i, M, this.toBBox);\n\n            overlap = intersectionArea(bbox1, bbox2);\n            area = bboxArea(bbox1) + bboxArea(bbox2);\n\n            // choose distribution with minimum overlap\n            if (overlap < minOverlap) {\n                minOverlap = overlap;\n                index = i;\n\n                minArea = area < minArea ? area : minArea;\n\n            } else if (overlap === minOverlap) {\n                // otherwise choose distribution with minimum area\n                if (area < minArea) {\n                    minArea = area;\n                    index = i;\n                }\n            }\n        }\n\n        return index;\n    },\n\n    // sorts node children by the best axis for split\n    _chooseSplitAxis: function (node, m, M) {\n\n        var compareMinX = node.leaf ? this.compareMinX : compareNodeMinX,\n            compareMinY = node.leaf ? this.compareMinY : compareNodeMinY,\n            xMargin = this._allDistMargin(node, m, M, compareMinX),\n            yMargin = this._allDistMargin(node, m, M, compareMinY);\n\n        // if total distributions margin value is minimal for x, sort by minX,\n        // otherwise it's already sorted by minY\n        if (xMargin < yMargin) node.children.sort(compareMinX);\n    },\n\n    // total margin of all possible split distributions where each node is at least m full\n    _allDistMargin: function (node, m, M, compare) {\n\n        node.children.sort(compare);\n\n        var toBBox = this.toBBox,\n            leftBBox = distBBox(node, 0, m, toBBox),\n            rightBBox = distBBox(node, M - m, M, toBBox),\n            margin = bboxMargin(leftBBox) + bboxMargin(rightBBox),\n            i, child;\n\n        for (i = m; i < M - m; i++) {\n            child = node.children[i];\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(leftBBox);\n        }\n\n        for (i = M - m - 1; i >= m; i--) {\n            child = node.children[i];\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\n            margin += bboxMargin(rightBBox);\n        }\n\n        return margin;\n    },\n\n    _adjustParentBBoxes: function (bbox, path, level) {\n        // adjust bboxes along the given tree path\n        for (var i = level; i >= 0; i--) {\n            extend(path[i], bbox);\n        }\n    },\n\n    _condense: function (path) {\n        // go through the path, removing empty nodes and updating bboxes\n        for (var i = path.length - 1, siblings; i >= 0; i--) {\n            if (path[i].children.length === 0) {\n                if (i > 0) {\n                    siblings = path[i - 1].children;\n                    siblings.splice(siblings.indexOf(path[i]), 1);\n\n                } else this.clear();\n\n            } else calcBBox(path[i], this.toBBox);\n        }\n    },\n\n    _initFormat: function (format) {\n        // data format (minX, minY, maxX, maxY accessors)\n\n        // uses eval-type function compilation instead of just accepting a toBBox function\n        // because the algorithms are very sensitive to sorting functions performance,\n        // so they should be dead simple and without inner calls\n\n        var compareArr = ['return a', ' - b', ';'];\n\n        this.compareMinX = new Function('a', 'b', compareArr.join(format[0]));\n        this.compareMinY = new Function('a', 'b', compareArr.join(format[1]));\n\n        this.toBBox = new Function('a',\n            'return {minX: a' + format[0] +\n            ', minY: a' + format[1] +\n            ', maxX: a' + format[2] +\n            ', maxY: a' + format[3] + '};');\n    }\n};\n\nfunction findItem(item, items, equalsFn) {\n    if (!equalsFn) return items.indexOf(item);\n\n    for (var i = 0; i < items.length; i++) {\n        if (equalsFn(item, items[i])) return i;\n    }\n    return -1;\n}\n\n// calculate node's bbox from bboxes of its children\nfunction calcBBox(node, toBBox) {\n    distBBox(node, 0, node.children.length, toBBox, node);\n}\n\n// min bounding rectangle of node children from k to p-1\nfunction distBBox(node, k, p, toBBox, destNode) {\n    if (!destNode) destNode = createNode(null);\n    destNode.minX = Infinity;\n    destNode.minY = Infinity;\n    destNode.maxX = -Infinity;\n    destNode.maxY = -Infinity;\n\n    for (var i = k, child; i < p; i++) {\n        child = node.children[i];\n        extend(destNode, node.leaf ? toBBox(child) : child);\n    }\n\n    return destNode;\n}\n\nfunction extend(a, b) {\n    a.minX = Math.min(a.minX, b.minX);\n    a.minY = Math.min(a.minY, b.minY);\n    a.maxX = Math.max(a.maxX, b.maxX);\n    a.maxY = Math.max(a.maxY, b.maxY);\n    return a;\n}\n\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\n\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\n\nfunction enlargedArea(a, b) {\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\n}\n\nfunction intersectionArea(a, b) {\n    var minX = Math.max(a.minX, b.minX),\n        minY = Math.max(a.minY, b.minY),\n        maxX = Math.min(a.maxX, b.maxX),\n        maxY = Math.min(a.maxY, b.maxY);\n\n    return Math.max(0, maxX - minX) *\n           Math.max(0, maxY - minY);\n}\n\nfunction contains(a, b) {\n    return a.minX <= b.minX &&\n           a.minY <= b.minY &&\n           b.maxX <= a.maxX &&\n           b.maxY <= a.maxY;\n}\n\nfunction intersects(a, b) {\n    return b.minX <= a.maxX &&\n           b.minY <= a.maxY &&\n           b.maxX >= a.minX &&\n           b.maxY >= a.minY;\n}\n\nfunction createNode(children) {\n    return {\n        children: children,\n        height: 1,\n        leaf: true,\n        minX: Infinity,\n        minY: Infinity,\n        maxX: -Infinity,\n        maxY: -Infinity\n    };\n}\n\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\n// combines selection algorithm with binary divide & conquer approach\n\nfunction multiSelect(arr, left, right, n, compare) {\n    var stack = [left, right],\n        mid;\n\n    while (stack.length) {\n        right = stack.pop();\n        left = stack.pop();\n\n        if (right - left <= n) continue;\n\n        mid = left + Math.ceil((right - left) / n / 2) * n;\n        quickselect(arr, mid, left, right, compare);\n\n        stack.push(left, mid, mid, right);\n    }\n}\n","/**\nsprintf() for JavaScript 0.7-beta1\nhttp://www.diveintojavascript.com/projects/javascript-sprintf\n\nCopyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of sprintf() for JavaScript nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nChangelog:\n2010.11.07 - 0.7-beta1-node\n  - converted it to a node.js compatible module\n\n2010.09.06 - 0.7-beta1\n  - features: vsprintf, support for named placeholders\n  - enhancements: format cache, reduced global namespace pollution\n\n2010.05.22 - 0.6:\n - reverted to 0.4 and fixed the bug regarding the sign of the number 0\n Note:\n Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)\n who warned me about a bug in 0.5, I discovered that the last update was\n a regress. I appologize for that.\n\n2010.05.09 - 0.5:\n - bug fix: 0 is now preceeded with a + sign\n - bug fix: the sign was not at the right position on padded results (Kamal Abdali)\n - switched from GPL to BSD license\n\n2007.10.21 - 0.4:\n - unit test and patch (David Baird)\n\n2007.09.17 - 0.3:\n - bug fix: no longer throws exception on empty paramenters (Hans Pufal)\n\n2007.09.11 - 0.2:\n - feature: added argument swapping\n\n2007.04.03 - 0.1:\n - initial release\n**/\n\nvar sprintf = (function() {\n\tfunction get_type(variable) {\n\t\treturn Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();\n\t}\n\tfunction str_repeat(input, multiplier) {\n\t\tfor (var output = []; multiplier > 0; output[--multiplier] = input) {/* do nothing */}\n\t\treturn output.join('');\n\t}\n\n\tvar str_format = function() {\n\t\tif (!str_format.cache.hasOwnProperty(arguments[0])) {\n\t\t\tstr_format.cache[arguments[0]] = str_format.parse(arguments[0]);\n\t\t}\n\t\treturn str_format.format.call(null, str_format.cache[arguments[0]], arguments);\n\t};\n\n\t// convert object to simple one line string without indentation or\n\t// newlines. Note that this implementation does not print array\n\t// values to their actual place for sparse arrays. \n\t//\n\t// For example sparse array like this\n\t//    l = []\n\t//    l[4] = 1\n\t// Would be printed as \"[1]\" instead of \"[, , , , 1]\"\n\t// \n\t// If argument 'seen' is not null and array the function will check for \n\t// circular object references from argument.\n\tstr_format.object_stringify = function(obj, depth, maxdepth, seen) {\n\t\tvar str = '';\n\t\tif (obj != null) {\n\t\t\tswitch( typeof(obj) ) {\n\t\t\tcase 'function': \n\t\t\t\treturn '[Function' + (obj.name ? ': '+obj.name : '') + ']';\n\t\t\t    break;\n\t\t\tcase 'object':\n\t\t\t\tif ( obj instanceof Error) { return '[' + obj.toString() + ']' };\n\t\t\t\tif (depth >= maxdepth) return '[Object]'\n\t\t\t\tif (seen) {\n\t\t\t\t\t// add object to seen list\n\t\t\t\t\tseen = seen.slice(0)\n\t\t\t\t\tseen.push(obj);\n\t\t\t\t}\n\t\t\t\tif (obj.length != null) { //array\n\t\t\t\t\tstr += '[';\n\t\t\t\t\tvar arr = []\n\t\t\t\t\tfor (var i in obj) {\n\t\t\t\t\t\tif (seen && seen.indexOf(obj[i]) >= 0) arr.push('[Circular]');\n\t\t\t\t\t\telse arr.push(str_format.object_stringify(obj[i], depth+1, maxdepth, seen));\n\t\t\t\t\t}\n\t\t\t\t\tstr += arr.join(', ') + ']';\n\t\t\t\t} else if ('getMonth' in obj) { // date\n\t\t\t\t\treturn 'Date(' + obj + ')';\n\t\t\t\t} else { // object\n\t\t\t\t\tstr += '{';\n\t\t\t\t\tvar arr = []\n\t\t\t\t\tfor (var k in obj) { \n\t\t\t\t\t\tif(obj.hasOwnProperty(k)) {\n\t\t\t\t\t\t\tif (seen && seen.indexOf(obj[k]) >= 0) arr.push(k + ': [Circular]');\n\t\t\t\t\t\t\telse arr.push(k +': ' +str_format.object_stringify(obj[k], depth+1, maxdepth, seen)); \n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstr += arr.join(', ') + '}';\n\t\t\t\t}\n\t\t\t\treturn str;\n\t\t\t\tbreak;\n\t\t\tcase 'string':\t\t\t\t\n\t\t\t\treturn '\"' + obj + '\"';\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn '' + obj;\n\t}\n\n\tstr_format.format = function(parse_tree, argv) {\n\t\tvar cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;\n\t\tfor (i = 0; i < tree_length; i++) {\n\t\t\tnode_type = get_type(parse_tree[i]);\n\t\t\tif (node_type === 'string') {\n\t\t\t\toutput.push(parse_tree[i]);\n\t\t\t}\n\t\t\telse if (node_type === 'array') {\n\t\t\t\tmatch = parse_tree[i]; // convenience purposes only\n\t\t\t\tif (match[2]) { // keyword argument\n\t\t\t\t\targ = argv[cursor];\n\t\t\t\t\tfor (k = 0; k < match[2].length; k++) {\n\t\t\t\t\t\tif (!arg.hasOwnProperty(match[2][k])) {\n\t\t\t\t\t\t\tthrow new Error(sprintf('[sprintf] property \"%s\" does not exist', match[2][k]));\n\t\t\t\t\t\t}\n\t\t\t\t\t\targ = arg[match[2][k]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (match[1]) { // positional argument (explicit)\n\t\t\t\t\targ = argv[match[1]];\n\t\t\t\t}\n\t\t\t\telse { // positional argument (implicit)\n\t\t\t\t\targ = argv[cursor++];\n\t\t\t\t}\n\n\t\t\t\tif (/[^sO]/.test(match[8]) && (get_type(arg) != 'number')) {\n\t\t\t\t\tthrow new Error(sprintf('[sprintf] expecting number but found %s \"' + arg + '\"', get_type(arg)));\n\t\t\t\t}\n\t\t\t\tswitch (match[8]) {\n\t\t\t\t\tcase 'b': arg = arg.toString(2); break;\n\t\t\t\t\tcase 'c': arg = String.fromCharCode(arg); break;\n\t\t\t\t\tcase 'd': arg = parseInt(arg, 10); break;\n\t\t\t\t\tcase 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;\n\t\t\t\t\tcase 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;\n\t\t\t\t    case 'O': arg = str_format.object_stringify(arg, 0, parseInt(match[7]) || 5); break;\n\t\t\t\t\tcase 'o': arg = arg.toString(8); break;\n\t\t\t\t\tcase 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;\n\t\t\t\t\tcase 'u': arg = Math.abs(arg); break;\n\t\t\t\t\tcase 'x': arg = arg.toString(16); break;\n\t\t\t\t\tcase 'X': arg = arg.toString(16).toUpperCase(); break;\n\t\t\t\t}\n\t\t\t\targ = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);\n\t\t\t\tpad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';\n\t\t\t\tpad_length = match[6] - String(arg).length;\n\t\t\t\tpad = match[6] ? str_repeat(pad_character, pad_length) : '';\n\t\t\t\toutput.push(match[5] ? arg + pad : pad + arg);\n\t\t\t}\n\t\t}\n\t\treturn output.join('');\n\t};\n\n\tstr_format.cache = {};\n\n\tstr_format.parse = function(fmt) {\n\t\tvar _fmt = fmt, match = [], parse_tree = [], arg_names = 0;\n\t\twhile (_fmt) {\n\t\t\tif ((match = /^[^\\x25]+/.exec(_fmt)) !== null) {\n\t\t\t\tparse_tree.push(match[0]);\n\t\t\t}\n\t\t\telse if ((match = /^\\x25{2}/.exec(_fmt)) !== null) {\n\t\t\t\tparse_tree.push('%');\n\t\t\t}\n\t\t\telse if ((match = /^\\x25(?:([1-9]\\d*)\\$|\\(([^\\)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosOuxX])/.exec(_fmt)) !== null) {\n\t\t\t\tif (match[2]) {\n\t\t\t\t\targ_names |= 1;\n\t\t\t\t\tvar field_list = [], replacement_field = match[2], field_match = [];\n\t\t\t\t\tif ((field_match = /^([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\twhile ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n\t\t\t\t\t\t\tif ((field_match = /^\\.([a-z_][a-z_\\d]*)/i.exec(replacement_field)) !== null) {\n\t\t\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((field_match = /^\\[(\\d+)\\]/.exec(replacement_field)) !== null) {\n\t\t\t\t\t\t\t\tfield_list.push(field_match[1]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthrow new Error('[sprintf] ' + replacement_field);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n                        throw new Error('[sprintf] ' + replacement_field);\n\t\t\t\t\t}\n\t\t\t\t\tmatch[2] = field_list;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\targ_names |= 2;\n\t\t\t\t}\n\t\t\t\tif (arg_names === 3) {\n\t\t\t\t\tthrow new Error('[sprintf] mixing positional and named placeholders is not (yet) supported');\n\t\t\t\t}\n\t\t\t\tparse_tree.push(match);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new Error('[sprintf] ' + _fmt);\n\t\t\t}\n\t\t\t_fmt = _fmt.substring(match[0].length);\n\t\t}\n\t\treturn parse_tree;\n\t};\n\n\treturn str_format;\n})();\n\nvar vsprintf = function(fmt, argv) {\n\tvar argvClone = argv.slice();\n\targvClone.unshift(fmt);\n\treturn sprintf.apply(null, argvClone);\n};\n\nmodule.exports = sprintf;\nsprintf.sprintf = sprintf;\nsprintf.vsprintf = vsprintf;\n","!function (definition) {\n  if (typeof module == \"object\" && module.exports) module.exports = definition();\n  else if (typeof define == \"function\") define(definition);\n  else this.tz = definition();\n} (function () {\n/*\n  function die () {\n    console.log.apply(console, __slice.call(arguments, 0));\n    return process.exit(1);\n  }\n\n  function say () { return console.log.apply(console, __slice.call(arguments, 0)) }\n*/\n  function actualize (entry, rule, year) {\n    var actualized, date = rule.day[1];\n\n    do {\n      actualized = new Date(Date.UTC(year, rule.month, Math.abs(date++)));\n    } while (rule.day[0] < 7 && actualized.getUTCDay() != rule.day[0])\n\n    actualized = {\n      clock: rule.clock,\n      sort: actualized.getTime(),\n      rule: rule,\n      save: rule.save * 6e4,\n      offset: entry.offset\n    };\n\n    actualized[actualized.clock] = actualized.sort + rule.time * 6e4;\n\n    if (actualized.posix) {\n      actualized.wallclock = actualized[actualized.clock] + (entry.offset + rule.saved);\n    } else {\n      actualized.posix = actualized[actualized.clock] - (entry.offset + rule.saved);\n    }\n\n    return actualized;\n  }\n\n  function find (request, clock, time) {\n    var i, I, entry, found, zone = request[request.zone], actualized = [], abbrev, rules\n      , j, year = new Date(time).getUTCFullYear(), off = 1;\n    for (i = 1, I = zone.length; i < I; i++) if (zone[i][clock] <= time) break;\n    entry = zone[i];\n    if (entry.rules) {\n      rules = request[entry.rules];\n      for (j = year + 1; j >= year - off; --j)\n        for (i = 0, I = rules.length; i < I; i++)\n          if (rules[i].from <= j && j <= rules[i].to) actualized.push(actualize(entry, rules[i], j));\n          else if (rules[i].to < j && off == 1) off = j - rules[i].to;\n      actualized.sort(function (a, b) { return a.sort - b.sort });\n      for (i = 0, I = actualized.length; i < I; i++) {\n        if (time >= actualized[i][clock] && actualized[i][actualized[i].clock] > entry[actualized[i].clock]) found = actualized[i];\n      }\n    }\n    if (found) {\n      if (abbrev = /^(.*)\\/(.*)$/.exec(entry.format)) {\n        found.abbrev = abbrev[found.save ? 2 : 1];\n      } else {\n        found.abbrev = entry.format.replace(/%s/, found.rule.letter);\n      }\n    }\n    return found || entry;\n  }\n\n  function convertToWallclock (request, posix) {\n    if (request.zone == \"UTC\") return posix;\n    request.entry = find(request, \"posix\", posix);\n    return posix + request.entry.offset + request.entry.save;\n  }\n\n  function convertToPOSIX (request, wallclock) {\n    if (request.zone == \"UTC\") return wallclock;\n\n    var entry, diff;\n    request.entry = entry = find(request, \"wallclock\", wallclock);\n    diff = wallclock - entry.wallclock;\n\n    return 0 < diff && diff < entry.save ? null : wallclock - entry.offset - entry.save;\n  }\n\n  function adjust (request, posix, match) {\n    var increment = +(match[1] + 1) // conversion necessary for week day addition\n      , offset = match[2] * increment\n      , index = UNITS.indexOf(match[3].toLowerCase())\n      , date\n      ;\n    if (index > 9) {\n      posix += offset * TIME[index - 10];\n    } else {\n      date = new Date(convertToWallclock(request, posix));\n      if (index < 7) {\n        while (offset) {\n          date.setUTCDate(date.getUTCDate() + increment);\n          if (date.getUTCDay() == index) offset -= increment;\n        }\n      } else if (index == 7) {\n        date.setUTCFullYear(date.getUTCFullYear() + offset);\n      } else if (index == 8) {\n        date.setUTCMonth(date.getUTCMonth() + offset);\n      } else {\n        date.setUTCDate(date.getUTCDate() + offset);\n      }\n      if ((posix = convertToPOSIX(request, date.getTime())) == null) {\n        posix = convertToPOSIX(request, date.getTime() + 864e5 * increment) - 864e5 * increment;\n      }\n    }\n    return posix;\n  }\n\n  function convert (vargs) {\n    if (!vargs.length) return \"1.0.6\";\n\n    var request = Object.create(this)\n      , adjustments = []\n      , i, I, $, argument, date\n      ;\n\n    for (i = 0; i < vargs.length; i++) { // leave the for loop alone, it works.\n      argument = vargs[i];\n      // https://twitter.com/bigeasy/status/215112186572439552\n      if (Array.isArray(argument)) {\n        if (!i && !isNaN(argument[1])) {\n          date = argument;\n        } else {\n          argument.splice.apply(vargs, [ i--, 1 ].concat(argument));\n        }\n      } else if (isNaN(argument)) {\n        $ = typeof argument;\n        if ($ == \"string\") {\n          if (~argument.indexOf(\"%\")) {\n            request.format = argument;\n          } else if (!i && argument == \"*\") {\n            date = argument;\n          } else if (!i && ($ = /^(\\d{4})-(\\d{2})-(\\d{2})(?:[T\\s](\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d+))?)?(Z|(([+-])(\\d{2}(:\\d{2}){0,2})))?)?$/.exec(argument))) {\n            date = [];\n            date.push.apply(date, $.slice(1, 8));\n            if ($[9]) {\n              date.push($[10] + 1);\n              date.push.apply(date, $[11].split(/:/));\n            } else if ($[8]) {\n              date.push(1);\n            }\n          } else if (/^\\w{2,3}_\\w{2}$/.test(argument)) {\n            request.locale = argument;\n          } else if ($ = UNIT_RE.exec(argument)) {\n            adjustments.push($);\n          } else {\n            request.zone = argument;\n          }\n        } else if ($ == \"function\") {\n          if ($ = argument.call(request)) return $;\n        } else if (/^\\w{2,3}_\\w{2}$/.test(argument.name)) {\n          request[argument.name] = argument;\n        } else if (argument.zones) {\n          for ($ in argument.zones) request[$] = argument.zones[$];\n          for ($ in argument.rules) request[$] = argument.rules[$];\n        }\n      } else if (!i) {\n        date = argument;\n      }\n    }\n\n    if (!request[request.locale]) delete request.locale;\n    if (!request[request.zone]) delete request.zone;\n\n    if (date != null) {\n      if (date == \"*\") {\n        date = request.clock();\n      } else if (Array.isArray(date)) {\n        I = !date[7];\n        for (i = 0; i < 11; i++) date[i] = +(date[i] || 0); // conversion necessary for decrement\n        --date[1]; // Grr..\n        date = Date.UTC.apply(Date.UTC, date.slice(0, 8)) +\n          -date[7] * (date[8] * 36e5 + date[9] * 6e4 + date[10] * 1e3);\n      } else {\n        date = Math.floor(date);\n      }\n      if (!isNaN(date)) {\n        if (I) date = convertToPOSIX(request, date);\n\n        if (date == null) return date;\n\n        for (i = 0, I = adjustments.length; i < I; i++) {\n          date = adjust(request, date, adjustments[i]);\n        }\n\n        if (!request.format) return date;\n\n        $ = new Date(convertToWallclock(request, date));\n        return request.format.replace(/%([-0_^]?)(:{0,3})(\\d*)(.)/g,\n        function (value, flag, colons, padding, specifier) {\n          var f, fill = \"0\", pad;\n          if (f = request[specifier]) {\n            value = String(f.call(request, $, date, flag, colons.length));\n            if ((flag || f.style) == \"_\") fill = \" \";\n            pad = flag == \"-\" ? 0 : f.pad || 0;\n            while (value.length < pad) value = fill + value;\n            pad = flag == \"-\" ? 0 : padding || f.pad;\n            while (value.length < pad) value = fill + value;\n            if (specifier == \"N\" && pad < value.length) value = value.slice(0, pad);\n            if (flag == \"^\") value = value.toUpperCase();\n          }\n          return value;\n        });\n      }\n    }\n\n    return function () { return request.convert(arguments) };\n  }\n\n  var context =\n    { clock: function () { return +(new Date()) }\n    , zone: \"UTC\"\n    , entry: { abbrev: \"UTC\", offset: 0, save: 0 }\n    , UTC: 1\n    , z: function(date, posix, flag, delimiters) {\n        var offset = this.entry.offset + this.entry.save\n          , seconds = Math.abs(offset / 1000), parts = [], part = 3600, i, z;\n        for (i = 0; i < 3; i++) {\n          parts.push((\"0\" + Math.floor(seconds / part)).slice(-2));\n          seconds %= part;\n          part /= 60;\n        }\n        if (flag == \"^\" && !offset) return \"Z\";\n        if (flag == \"^\") delimiters = 3;\n        if (delimiters == 3) {\n          z = parts.join(\":\");\n          z = z.replace(/:00$/, \"\");\n          if (flag != \"^\") z = z.replace(/:00$/, \"\");\n        } else if (delimiters) {\n          z = parts.slice(0, delimiters + 1).join(\":\");\n          if (flag == \"^\") z = z.replace(/:00$/, \"\");\n        } else {\n          z = parts.slice(0, 2).join(\"\");\n        }\n        z = (offset < 0 ? \"-\" : \"+\") + z;\n        z = z.replace(/([-+])(0)/, { \"_\": \" $1\", \"-\": \"$1\" }[flag] || \"$1$2\");\n        return z;\n      }\n    , \"%\": function(date) { return \"%\" }\n    , n: function (date) { return \"\\n\" }\n    , t: function (date) { return \"\\t\" }\n    , U: function (date) { return weekOfYear(date, 0) }\n    , W: function (date) { return weekOfYear(date, 1) }\n    , V: function (date) { return isoWeek(date)[0] }\n    , G: function (date) { return isoWeek(date)[1] }\n    , g: function (date) { return isoWeek(date)[1] % 100 }\n    , j: function (date) { return Math.floor((date.getTime() - Date.UTC(date.getUTCFullYear(), 0)) / 864e5) + 1 }\n    , s: function (date) { return Math.floor(date.getTime() / 1000) }\n    , C: function (date) { return Math.floor(date.getUTCFullYear() / 100) }\n    , N: function (date) { return date.getTime() % 1000 * 1000000 }\n    , m: function (date) { return date.getUTCMonth() + 1 }\n    , Y: function (date) { return date.getUTCFullYear() }\n    , y: function (date) { return date.getUTCFullYear() % 100 }\n    , H: function (date) { return date.getUTCHours() }\n    , M: function (date) { return date.getUTCMinutes() }\n    , S: function (date) { return date.getUTCSeconds() }\n    , e: function (date) { return date.getUTCDate() }\n    , d: function (date) { return date.getUTCDate() }\n    , u: function (date) { return date.getUTCDay() || 7 }\n    , w: function (date) { return date.getUTCDay() }\n    , l: function (date) { return date.getUTCHours() % 12 || 12 }\n    , I: function (date) { return date.getUTCHours() % 12 || 12 }\n    , k: function (date) { return date.getUTCHours() }\n    , Z: function (date) { return this.entry.abbrev }\n    , a: function (date) { return this[this.locale].day.abbrev[date.getUTCDay()] }\n    , A: function (date) { return this[this.locale].day.full[date.getUTCDay()] }\n    , h: function (date) { return this[this.locale].month.abbrev[date.getUTCMonth()] }\n    , b: function (date) { return this[this.locale].month.abbrev[date.getUTCMonth()] }\n    , B: function (date) { return this[this.locale].month.full[date.getUTCMonth()] }\n    , P: function (date) { return this[this.locale].meridiem[Math.floor(date.getUTCHours() / 12)].toLowerCase() }\n    , p: function (date) { return this[this.locale].meridiem[Math.floor(date.getUTCHours() / 12)] }\n    , R: function (date, posix) { return this.convert([ posix, \"%H:%M\" ]) }\n    , T: function (date, posix) { return this.convert([ posix, \"%H:%M:%S\" ]) }\n    , D: function (date, posix) { return this.convert([ posix, \"%m/%d/%y\" ]) }\n    , F: function (date, posix) { return this.convert([ posix, \"%Y-%m-%d\" ]) }\n    , x: function (date, posix) { return this.convert([ posix, this[this.locale].date ]) }\n    , r: function (date, posix) { return this.convert([ posix, this[this.locale].time12 || '%I:%M:%S' ]) }\n    , X: function (date, posix) { return this.convert([ posix, this[this.locale].time24 ]) }\n    , c: function (date, posix) { return this.convert([ posix, this[this.locale].dateTime ]) }\n    , convert: convert\n    , locale: \"en_US\"\n    , en_US: {\n        date: \"%m/%d/%Y\",\n        time24: \"%I:%M:%S %p\",\n        time12: \"%I:%M:%S %p\",\n        dateTime: \"%a %d %b %Y %I:%M:%S %p %Z\",\n        meridiem: [ \"AM\", \"PM\" ],\n        month: {\n          abbrev: \"Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec\".split(\"|\"),\n          full: \"January|February|March|April|May|June|July|August|September|October|November|December\".split(\"|\")\n        },\n        day: {\n          abbrev: \"Sun|Mon|Tue|Wed|Thu|Fri|Sat\".split(\"|\"),\n          full: \"Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday\".split(\"|\")\n        }\n      }\n    };\n  var UNITS = \"Sunday|Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|year|month|day|hour|minute|second|millisecond\"\n    , UNIT_RE = new RegExp(\"^\\\\s*([+-])(\\\\d+)\\\\s+(\" + UNITS + \")s?\\\\s*$\", \"i\")\n    , TIME = [ 36e5, 6e4, 1e3, 1 ]\n    ;\n  UNITS = UNITS.toLowerCase().split(\"|\");\n\n  \"delmHMSUWVgCIky\".replace(/./g, function (e) { context[e].pad = 2 });\n\n  context.N.pad = 9;\n  context.j.pad = 3;\n\n  context.k.style = \"_\";\n  context.l.style = \"_\";\n  context.e.style = \"_\";\n\n  function weekOfYear (date, startOfWeek) {\n    var diff, nyd, weekStart;\n    nyd = new Date(Date.UTC(date.getUTCFullYear(), 0));\n    diff = Math.floor((date.getTime() - nyd.getTime()) / 864e5);\n    if (nyd.getUTCDay() == startOfWeek) {\n      weekStart = 0;\n    } else {\n      weekStart = 7 - nyd.getUTCDay() + startOfWeek;\n      if (weekStart == 8) {\n        weekStart = 1;\n      }\n    }\n    return diff >= weekStart ? Math.floor((diff - weekStart) / 7) + 1 : 0;\n  }\n\n  function isoWeek (date) {\n    var nyd, nyy, week;\n    nyy = date.getUTCFullYear();\n    nyd = new Date(Date.UTC(nyy, 0)).getUTCDay();\n    week = weekOfYear(date, 1) + (nyd > 1 && nyd <= 4 ? 1 : 0);\n    if (!week) {\n      nyy = date.getUTCFullYear() - 1;\n      nyd = new Date(Date.UTC(nyy, 0)).getUTCDay();\n      week = nyd == 4 || (nyd == 3 && new Date(nyy, 1, 29).getDate() == 29) ? 53 : 52;\n      return [week, date.getUTCFullYear() - 1];\n    } else if (week == 53 && !(nyd == 4 || (nyd == 3 && new Date(nyy, 1, 29).getDate() == 29))) {\n      return [1, date.getUTCFullYear() + 1];\n    } else {\n      return [week, date.getUTCFullYear()];\n    }\n  }\n\n  return function () { return context.convert(arguments) };\n});\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [0, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator];\r\n        return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n});"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}